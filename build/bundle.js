(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Struct = require('yours-bitcoin/lib/struct');
var asink = require('asink');

var Address = require('yours-bitcoin/lib/address');
var KeyPair = require('yours-bitcoin/lib/key-pair');

var KeyPairAddress = function (_Struct) {
  _inherits(KeyPairAddress, _Struct);

  function KeyPairAddress(privKey, keyPair, address) {
    _classCallCheck(this, KeyPairAddress);

    var _this = _possibleConstructorReturn(this, (KeyPairAddress.__proto__ || Object.getPrototypeOf(KeyPairAddress)).call(this));

    _this.fromObject({ privKey: privKey, keyPair: keyPair, address: address });
    return _this;
  }

  _createClass(KeyPairAddress, [{
    key: 'asyncInitialize',
    value: function asyncInitialize(privKey) {
      return asink(regeneratorRuntime.mark(function _callee() {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!(!privKey || privKey.constructor.name !== 'PrivKey')) {
                  _context.next = 2;
                  break;
                }

                throw new Error('this.privKey must be set before multisigAddress can be initialized');

              case 2:
                _context.next = 4;
                return KeyPair.asyncFromPrivKey(privKey);

              case 4:
                this.keyPair = _context.sent;
                _context.next = 7;
                return Address.asyncFromPubKey(this.keyPair.pubKey);

              case 7:
                this.address = _context.sent;


                this.initialized = true;

              case 9:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }), this);
    }
  }, {
    key: 'fromJSON',
    value: function fromJSON(json) {
      this.keyPair = json.keyPair ? KeyPair.fromJSON(json.keyPair) : undefined;
      this.address = json.address ? Address.fromJSON(json.address) : undefined;
      this.initialized = json.initialized;
      return this;
    }
  }, {
    key: 'toPublic',
    value: function toPublic() {
      var keyPairAddress = new KeyPairAddress();
      keyPairAddress.keyPair = this.keyPair ? this.keyPair.toPublic() : undefined;
      keyPairAddress.address = this.address;
      keyPairAddress.initialized = this.initialized;
      return keyPairAddress;
    }
  }]);

  return KeyPairAddress;
}(Struct);

module.exports = KeyPairAddress;

},{"asink":13,"yours-bitcoin/lib/address":318,"yours-bitcoin/lib/key-pair":328,"yours-bitcoin/lib/struct":336}],2:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Struct = require('yours-bitcoin/lib/struct');
var asink = require('asink');
var Script = require('yours-bitcoin/lib/script');
var PrivKey = require('yours-bitcoin/lib/priv-key');
var PubKey = require('yours-bitcoin/lib/pub-key');
var Address = require('yours-bitcoin/lib/address');
var KeyPair = require('yours-bitcoin/lib/key-pair');

var Multisig = function (_Struct) {
  _inherits(Multisig, _Struct);

  function Multisig(privKey, pubKey, otherPubKey, pubKeys, script, address, keyPair, initialized) {
    _classCallCheck(this, Multisig);

    var _this = _possibleConstructorReturn(this, (Multisig.__proto__ || Object.getPrototypeOf(Multisig)).call(this));

    _this.fromObject({ privKey: privKey,
      pubKey: pubKey,
      otherPubKey: otherPubKey,
      pubKeys: pubKeys,
      script: script,
      address: address,
      keyPair: keyPair,
      initialized: initialized
    });
    return _this;
  }

  _createClass(Multisig, [{
    key: 'initializePrivKey',
    value: function initializePrivKey(privKey) {
      return asink(regeneratorRuntime.mark(function _callee() {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                this.privKey = privKey;
                _context.next = 3;
                return PubKey.asyncFromPrivKey(privKey);

              case 3:
                this.pubKey = _context.sent;

              case 4:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }), this);
    }
  }, {
    key: 'asyncInitialize',
    value: function asyncInitialize(otherPubKey) {
      return asink(regeneratorRuntime.mark(function _callee2() {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (!(!this.privKey || this.privKey.constructor.name !== 'PrivKey')) {
                  _context2.next = 2;
                  break;
                }

                throw new Error('this.privKey must be set before multisigAddress can be initialized');

              case 2:
                if (!(!otherPubKey || otherPubKey.constructor.name !== 'PubKey')) {
                  _context2.next = 4;
                  break;
                }

                throw new Error('otherPubKey required to build a multisigAddress');

              case 4:
                this.otherPubKey = otherPubKey;
                _context2.next = 7;
                return PubKey.asyncFromPrivKey(this.privKey);

              case 7:
                this.pubKey = _context2.sent;


                this.pubKeys = [this.pubKey, this.otherPubKey];
                this.script = Script.fromPubKeys(2, this.pubKeys);
                _context2.next = 12;
                return Address.asyncFromRedeemScript(this.script);

              case 12:
                this.address = _context2.sent;
                _context2.next = 15;
                return KeyPair.asyncFromPrivKey(this.privKey);

              case 15:
                this.keyPair = _context2.sent;


                this.initialized = true;

              case 17:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }), this);
    }
  }, {
    key: 'fromJSON',
    value: function fromJSON(json) {
      var _this2 = this;

      this.privKey = json.privKey ? PrivKey.fromHex(json.privKey) : undefined;
      this.pubKey = json.pubKey ? PubKey.fromFastHex(json.pubKey) : undefined;
      this.otherPubKey = json.otherPubKey ? PubKey.fromFastHex(json.otherPubKey) : undefined;
      this.script = json.script ? Script.fromHex(json.script) : undefined;
      this.address = json.address ? Address.fromJSON(json.address) : undefined;
      this.keyPair = json.keyPair ? KeyPair.fromJSON(json.keyPair) : undefined;
      this.initialized = json.initialized;
      if (json.pubKeys) {
        (function () {
          var pubKeys = [];
          json.pubKeys.forEach(function (pubKey) {
            pubKeys.push(PubKey.fromFastHex(pubKey));
          });
          _this2.pubKeys = pubKeys;
        })();
      }
      return this;
    }
  }, {
    key: 'toPublic',
    value: function toPublic() {
      var multisigAddress = new Multisig().fromObject(this);
      multisigAddress.privKey = undefined;
      multisigAddress.keyPair = this.keyPair ? this.keyPair.toPublic() : undefined;
      return multisigAddress;
    }
  }]);

  return Multisig;
}(Struct);

module.exports = Multisig;

},{"asink":13,"yours-bitcoin/lib/address":318,"yours-bitcoin/lib/key-pair":328,"yours-bitcoin/lib/priv-key":331,"yours-bitcoin/lib/pub-key":332,"yours-bitcoin/lib/script":334,"yours-bitcoin/lib/struct":336}],3:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var babel = require('babel-polyfill');
var Struct = require('yours-bitcoin/lib/struct');
var asink = require('asink');
var Bn = require('yours-bitcoin/lib/bn');
var Multisig = require('./addrs/multisig');
var KeyPairAddress = require('./addrs/key-pair-address');
var HtlcSecret = require('./scrts/htlc-secret');
var RevSecret = require('./scrts/rev-secret');
var Funding = require('./txs/funding');
var Commitment = require('./txs/commitment');
var Wallet = require('./wallet');

var Agent = function (_Struct) {
  _inherits(Agent, _Struct);

  function Agent(id, sourceAddress, // the address that the funding transaction is funded from
  multisigAddress, // the shared multisigAddress address
  destinationAddress, // the address that the spending transactions spend to
  funding, // an object storing information about the funding tx
  commitments, // a list of objects storing information about previous commitment txs
  wallet, // the wallet (dummy for now)
  initialized, // boolean, set to true once local initialization is complete
  funder, // boolean, set to true if agent funds the channel
  sender, // boolean, set to true if agent has sent the last payment
  other, // public information about the other agent and all commitment txs that he stores
  remoteAgent // used temporarily to communicate with the other agent (will go away once we integrate msgs)
  ) {
    _classCallCheck(this, Agent);

    var _this = _possibleConstructorReturn(this, (Agent.__proto__ || Object.getPrototypeOf(Agent)).call(this));

    _this.fromObject({ id: id,
      sourceAddress: sourceAddress,
      multisigAddress: multisigAddress,
      destinationAddress: destinationAddress,
      funding: funding,
      commitments: commitments,
      wallet: wallet,
      initialized: initialized,
      funder: funder,
      sender: sender,
      other: other,
      remoteAgent: remoteAgent
    });
    return _this;
  }

  /* ---- INITIALIZATION ---- */

  /*
   * Initializes an agent locally. In particular, the sourceAddress address, the multisigAddress
   * address, the destinationAddress address are initialized. The list of commitment txouts
   * is initialized with secrets for the next payment.
   */


  _createClass(Agent, [{
    key: 'asyncInitialize',
    value: function asyncInitialize(sourcePrivKey, multisigPrivKey, destinationPrivKey) {
      return asink(regeneratorRuntime.mark(function _callee() {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!(!sourcePrivKey || !multisigPrivKey || !destinationPrivKey || sourcePrivKey.constructor.name !== 'PrivKey' || multisigPrivKey.constructor.name !== 'PrivKey' || destinationPrivKey.constructor.name !== 'PrivKey')) {
                  _context.next = 2;
                  break;
                }

                throw new Error('sourcePrivKey, multisigPrivKey, destinationPrivKey must be PrivKeys and are required in asyncInitialize');

              case 2:

                // the address that's the input to the sourceAddress trasnaction
                this.sourceAddress = new KeyPairAddress();
                _context.next = 5;
                return this.sourceAddress.asyncInitialize(sourcePrivKey);

              case 5:

                // the shared multisigAddress address
                this.multisigAddress = new Multisig();
                _context.next = 8;
                return this.multisigAddress.initializePrivKey(multisigPrivKey);

              case 8:

                // the address that's the output to a commitment trasnaction
                this.destinationAddress = new KeyPairAddress();
                _context.next = 11;
                return this.destinationAddress.asyncInitialize(destinationPrivKey);

              case 11:

                // initialize first commitment
                this.commitments = [];
                // yield this.asyncInitializeCommitment()

                // the wallet
                this.wallet = new Wallet();

                this.initialized = true;

              case 14:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }), this);
    }

    /* ---- PROTOCOL ---- */

    /*
     * This is the first point of communication between the two agents. Arguments are
     * the amount to fund the channel with and the public projection of the other agent.
     * Stores the public information about the other agent and initializes the multisigAddress
     * address. The funder of the channel will build the funding transaction and send
     * it's hash to the other party.
     */

  }, {
    key: 'asyncOpenChannel',
    value: function asyncOpenChannel(amount, publicOther) {
      return asink(regeneratorRuntime.mark(function _callee2() {
        var fee, output;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                // initialize information about other agent
                this.other = publicOther;

                // initialize multisigAddress
                _context2.next = 3;
                return this.multisigAddress.asyncInitialize(this.other.multisigAddress.pubKey);

              case 3:
                if (this.funder) {
                  _context2.next = 13;
                  break;
                }

                _context2.t0 = this.remoteAgent;
                _context2.t1 = amount;
                _context2.next = 8;
                return this.asyncToPublic();

              case 8:
                _context2.t2 = _context2.sent;
                _context2.next = 11;
                return _context2.t0.asyncOpenChannel.call(_context2.t0, _context2.t1, _context2.t2);

              case 11:
                _context2.next = 22;
                break;

              case 13:
                // the funder will build the sourceAddress transaction and cache it's hashbuf and txout
                fee = Bn(20000);
                output = this.wallet.getUnspentOutput(amount.add(fee), this.sourceAddress.keyPair.pubKey);


                this.funding = new Funding();
                this.funding.asyncInitialize(amount, this.sourceAddress, this.multisigAddress, output.txhashbuf, output.txoutnum, output.txout, output.pubKey);

                // send the sourceAddress tx hash to the other agent
                _context2.t3 = this.remoteAgent;
                _context2.next = 20;
                return this.funding.asyncToPublic();

              case 20:
                _context2.t4 = _context2.sent;

                _context2.t3.setFunding.call(_context2.t3, _context2.t4);

              case 22:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }), this);
    }
  }, {
    key: 'asyncSendOutputs',
    value: function asyncSendOutputs(outputs, changeOutput) {
      return asink(regeneratorRuntime.mark(function _callee3() {
        var _this2 = this;

        var commitment;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                if (!(!this.multisigAddress || !this.funding)) {
                  _context3.next = 2;
                  break;
                }

                throw new Error('Agent not sufficiently initialized in asyncSendOutputs');

              case 2:

                // create new commitment and add all info that is not realted to builder vs owner
                commitment = new Commitment();

                commitment.revSecret = new RevSecret();
                _context3.next = 6;
                return commitment.revSecret.asyncInitialize();

              case 6:
                commitment.multisigAddress = this.multisigAddress;
                commitment.funding = this.funding;
                commitment.outputs = outputs.map(function (output) {
                  return _this2.completeOutput(output, commitment.revSecret);
                });
                commitment.changeOutput = this.completeOutput(changeOutput, commitment.revSecret);
                this.commitments.push(commitment);
                this.other.commitments.push(commitment);

                if (this.sender) {
                  _context3.next = 17;
                  break;
                }

                _context3.next = 15;
                return this.remoteAgent.asyncSendOutputs(outputs, changeOutput);

              case 15:
                _context3.next = 19;
                break;

              case 17:
                _context3.next = 19;
                return this.remoteAgent.asyncBuildCommitment();

              case 19:
              case 'end':
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }), this);
    }
  }, {
    key: 'asyncBuildCommitment',
    value: function asyncBuildCommitment() {
      return asink(regeneratorRuntime.mark(function _callee4() {
        var otherCommitment;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                otherCommitment = this.other.commitments.pop();

                otherCommitment.builderId = this.id;
                otherCommitment.builderDestinationAddress = this.destinationAddress;
                otherCommitment.ownerId = this.other.id;
                otherCommitment.ownerDestinationAddress = this.other.destinationAddress;
                _context4.next = 7;
                return otherCommitment.asyncBuild();

              case 7:
                this.other.commitments.push(otherCommitment);

                if (this.sender) {
                  _context4.next = 13;
                  break;
                }

                _context4.next = 11;
                return this.remoteAgent.asyncBuildCommitment();

              case 11:
                _context4.next = 15;
                break;

              case 13:
                _context4.next = 15;
                return this.remoteAgent.sendCommitment(otherCommitment);

              case 15:
              case 'end':
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }), this);
    }
  }, {
    key: 'sendCommitment',
    value: function sendCommitment(newCommitment) {
      return asink(regeneratorRuntime.mark(function _callee5() {
        var storedCommitment, otherCommitment, revSecret;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                storedCommitment = this.commitments[this.commitments.length - 1];

                if (!this.checkCommitment(storedCommitment, newCommitment)) {
                  _context5.next = 6;
                  break;
                }

                _context5.next = 4;
                return newCommitment.txb.asyncSign(0, this.multisigAddress.keyPair, this.funding.txb.tx.txOuts[0]);

              case 4:

                this.commitments.pop();
                this.commitments.push(newCommitment);

              case 6:
                if (this.sender) {
                  _context5.next = 12;
                  break;
                }

                otherCommitment = this.other.commitments[this.other.commitments.length - 1];
                _context5.next = 10;
                return this.remoteAgent.sendCommitment(otherCommitment);

              case 10:
                _context5.next = 16;
                break;

              case 12:
                revSecret = this.getRevSecret();

                if (!revSecret) {
                  _context5.next = 16;
                  break;
                }

                _context5.next = 16;
                return this.remoteAgent.sendRevSecret(revSecret);

              case 16:
              case 'end':
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }), this);
    }
  }, {
    key: 'sendRevSecret',
    value: function sendRevSecret(revSecret) {
      return asink(regeneratorRuntime.mark(function _callee6() {
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
              case 'end':
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }), this);
    }

    /* ---- SETTERS ---- */

  }, {
    key: 'setFunding',
    value: function setFunding(txo) {
      this.funding = txo;
    }
  }, {
    key: 'setCommitment',
    value: function setCommitment(txo) {
      this.commitments[this.commitments.length - 1] = txo;
    }
  }, {
    key: 'setOtherCommitment',
    value: function setOtherCommitment(txo) {
      this.other.commitments[this.other.commitments.length - 1] = txo;
    }

    /* ---- GETTERS ---- */

  }, {
    key: 'getRevSecret',
    value: function getRevSecret() {
      // if there is a transaction to revoke, return it's rev secret
      if (this.commitments.length > 1) {
        return this.commitments[this.commitments.length - 2].revSecret;
      } else {
        return false;
      }
    }

    /* ---- HELPERS ---- */

  }, {
    key: 'completeOutput',
    value: function completeOutput(output, revSecret) {
      if (output.intermediateDestId === this.id) {
        output.revSecret = revSecret;
      }
      return output;
    }
  }, {
    key: 'checkCommitment',
    value: function checkCommitment(storedCommitment, newCommitment) {
      // TODO
      return true;
    }

    // We have to delete other and remoteAgent and restore after constructing json.
    // Ideallt we'd call super.toJSON after that, but that's not possible due to
    // some stupid error (TODO)

  }, {
    key: 'toJSON',
    value: function toJSON() {
      var other = this.other;
      var remoteAgent = this.remoteAgent;
      var that = this;
      that.other = undefined;
      that.remoteAgent = undefined;
      var json = {};
      for (var val in this) {
        if (this[val] instanceof Array) {
          var arr = [];
          for (var i in this[val]) {
            arr.push(this[val][i].toJSON());
          }
          json[val] = arr;
        } else if (_typeof(this[val]) === 'object') {
          json[val] = this[val].toJSON();
        } else if (typeof this[val] !== 'undefined') {
          json[val] = this[val];
        }
      }
      this.other = other;
      this.remoteAgent = remoteAgent;
      return json;
    }
  }, {
    key: 'fromJSON',
    value: function fromJSON(json) {
      var _this3 = this;

      this.name = json.name;
      this.sourceAddress = json.sourceAddress ? new KeyPairAddress().fromJSON(json.sourceAddress) : undefined;
      this.multisigAddress = json.multisigAddress ? new Multisig().fromJSON(json.multisigAddress) : undefined;
      this.destinationAddress = json.destinationAddress ? new KeyPairAddress().fromJSON(json.destinationAddress) : undefined;
      this.htlcSecret = json.htlcSecret ? new HtlcSecret().fromJSON(json.htlcSecret) : undefined;
      this.nextRevSecret = json.nextRevSecret ? new RevSecret().fromJSON(json.nextRevSecret) : undefined;
      this.funder = json.funder;
      this.wallet = json.wallet ? new Wallet().fromJSON(json.wallet) : undefined;
      this.initialized = json.initialized;
      this.sender = json.sender;
      this.funding = json.funding ? new Funding().fromJSON(json.funding) : undefined;
      if (json.commitments) {
        (function () {
          var commitments = [];
          json.commitments.forEach(function (tx) {
            commitments.push(new Commitment().fromJSON(tx));
          });
          _this3.commitments = commitments;
        })();
      }
      return this;
    }
  }, {
    key: 'asyncToPublic',
    value: function asyncToPublic() {
      return asink(regeneratorRuntime.mark(function _callee7() {
        var _this4 = this;

        var agent;
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                agent = new Agent();

                agent.id = this.id;
                agent.sourceAddress = this.sourceAddress ? this.sourceAddress.toPublic() : undefined;
                agent.multisigAddress = this.multisigAddress ? this.multisigAddress.toPublic() : undefined;
                agent.destinationAddress = this.destinationAddress ? this.destinationAddress.toPublic() : undefined;

                if (!this.funding) {
                  _context7.next = 11;
                  break;
                }

                _context7.next = 8;
                return this.funding.asyncToPublic();

              case 8:
                _context7.t0 = _context7.sent;
                _context7.next = 12;
                break;

              case 11:
                _context7.t0 = undefined;

              case 12:
                agent.funding = _context7.t0;

                if (this.commitments) {
                  (function () {
                    var commitments = [];
                    _this4.commitments.forEach(function (txo) {
                      commitments.push(txo.toPublic());
                    });
                    agent.commitments = commitments;
                  })();
                }
                agent.wallet = this.wallet ? this.wallet.toPublic() : undefined;
                agent.initialized = this.initialized;
                agent.funder = this.funder;
                agent.sender = this.sender;
                return _context7.abrupt('return', agent);

              case 19:
              case 'end':
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }), this);
    }
  }]);

  return Agent;
}(Struct);

module.exports = Agent;
/**

Protocols
---------

We now describe the protocol that the parties use to construct the transactions
shown above.

### Local initialization (asyncInitialize)

**1. Local initialization .** Both agents initialize the following
- their local addresses (source, destination)
- a htlc and revocation secret to be used in the first payment
- the shared multisig object is initialized, but the address has not been
  generated yet.

### Opening the channel (asyncOpenChannel)

As there are inherent malleability problems if two parties fund a payment
channel. To avoid this problem we use a version where only Alice funds the
channel.

**1. Alice and Bob exchange their public projections (initializeOther).** This
allows them to build a shared multisig address and to know the public versions
of the other agents htlc and revocation secret. After this step the following
is initialized

**2. Alice and Bob build the shared multisig (asyncInitializeMultisig).** Now
that they have exchanged public keys for the multisig address, they can both
build it.

**3. The funder (Alice) builds a funding transaction.** The agent that funds
the channel creates the funding transaction that spends to the shared multisig
address. She does not broadcast it yet. She then sends the funding amount and
funding transaction hash to Bob.

**4. Bob builds and signs a refund transaction, sends it to Alice.** Alice and
Bob go through the protocol described below for creating a payment, in the case
where Bob sends a payment to Alice. The payment spends all funds from the
funding transaction to Alice.

**5. Alice broadcasts the funding transaction.** When the refund transaction is
created and distributed between the two parties, Alice broadcasts the funding
transaction. The channel is open when the funding transaction is confirmed into
the blockchain.

At the end of the channel opening process, both agents store the following
information:

- three addresses (source, destination, multisig)
- a list of commitment transactions objects. The list has one entry that
  contains the secrets used for the first payment
- the public information about the other client; this also contains a list of
  commitment transaction objects with one entry containing the public
  projections (hahes) of two secrets.

### Creating the payment (asyncSend)

We describe a payment from Alice to Bob. Note that if this is not the first
payment, Alice has the hash of Bob's last revocation secret, and the hash of
Bob's last HTLC secret. If this is the first payment, revoking isn't necessary
and these secrets are not needed.

**1. Alice builds a commitment transaction for Bob, stores it, and asks him to
do the same (asyncSend).** Alice builds the transaction labeled "known only to
Bob" above. She then asks Bob to build one for her.<!--She uses the public
versions of the secrets obtained from Bob in step 2 and her own secrets
generated in Step 1. She signs the transaction and sends it to Bob.-->

**2. Bob builds a commitment transaction for Alice, stores it, and sends it to
Alice (asyncSend).**

**3. Alice checks the new commitment transaction, stores it, and sends the
transaction built in step 1 to Bob (asyncSendTxb).**

**4. Bob checks the new commitment transaction, stores it, and revokes the old
commitment transaction (asyncSendTxb).**

**5. Alice checks the revocation secret, stores it, generates new secrets, and
revokes the old commitment transaction (asyncPrepareNextPayment).**

**6. Bob checks the revocation secret, stores it, generates new secrets for the
next payment.**

<!--
**4. Alice checks the transaction, builds one for Alice and sends it to her.**
Bob checks that the transaction spends from the shared multisig address, spends
to his destination address, that the secrets used are the ones he generated in
Step 2, and that the spending amounts are as expected. If the test passes, he
builds the transaction labelled "known only to Alice" and sends it to her (this
is symmetric to case 3.).

**5. Alice checks the transaction obtained from Bob, and revokes her last
payment if the check passes.** To revoke the previous payment, Alice sends her
revocation secret from the last commitment transaction to Bob.

**6. Bob revokes.** Symmetrically, Bob sends Alice his revocation secret from
the last commitment transaction.

**1. Alice generates new secrets and sends them to Bob.** She locally creates a
revocation secret and a htlc secret for use on the next transaction. She then
sends the public versions (hashes) of these secrets to Bob.

**2. Bob generates a new secrets and sends them to Alice.** This is symmetric
to the case above
-->
### Closing the channel

Either party can broadcast their most recent commitment transaction to the
blockchain. In this case both parties go through the following protocol

**1. Find the most recent HTLC secret.**

**2. Build a spending transaction.**

**3. Broadcast spending transaction and the most recent commitment
transaction.**

The party that broadcasts the commitment transaction must wait for a day to do
that, the other party can do so as soon as possible.

### Enforcing the HTLC

In case one party fails to spend an output by providing the HTLC secret, the
other party can spend the HTLC output after 2 days.

**1. Build spending transaction using spending key.**

**3. Broadcast spending transaction and the most recent commitment
transaction.**

### React to other agent broadcasting an old commitment transaction

In that case one party broadcasts an old commitment transaction,
the other party goes trough the following:

**1. Find the corresponding HTLC secret.**

**2. Create an output script that spends the HTLC output.**

**3. Find the corresponding revocation secret.**

**4. Create an output script that spends the revocation output.**

**5. Build a transaction that spends both outputs.**

This has to happen within one day, in order to make sure that the revocation
output can be spent.

**/

},{"./addrs/key-pair-address":1,"./addrs/multisig":2,"./scrts/htlc-secret":6,"./scrts/rev-secret":7,"./txs/commitment":9,"./txs/funding":10,"./wallet":12,"asink":13,"babel-polyfill":14,"yours-bitcoin/lib/bn":321,"yours-bitcoin/lib/struct":336}],4:[function(require,module,exports){
'use strict';

var Bn = require('yours-bitcoin/lib/bn');

// see here for explanation: http://stackoverflow.com/questions/8595509/how-do-you-share-constants-in-nodejs-modules
function define(name, value) {
  Object.defineProperty(exports, name, {
    value: value,
    enumerable: true
  });
}

define('CSV_DELAY', Bn(100));

},{"yours-bitcoin/lib/bn":321}],5:[function(require,module,exports){
// just a dummy at this point
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Struct = require('yours-bitcoin/lib/struct');
var Bn = require('yours-bitcoin/lib/bn');
var Script = require('yours-bitcoin/lib/script');
var HtlcSecret = require('./scrts/htlc-secret');
var RevSecret = require('./scrts/rev-secret');

var Output = function (_Struct) {
  _inherits(Output, _Struct);

  function Output(kind, networkSourceId, channelSourceId, channelDestId, networkDestId, channelSourcePath, channelDestPath, htlcSecret, revSecret, amount, revocable, redeemScript, scriptPubkey) {
    _classCallCheck(this, Output);

    var _this = _possibleConstructorReturn(this, (Output.__proto__ || Object.getPrototypeOf(Output)).call(this));

    _this.fromObject({
      kind: kind,
      networkSourceId: networkSourceId,
      channelSourceId: channelSourceId,
      channelDestId: channelDestId,
      networkDestId: networkDestId,
      channelSourcePath: channelSourcePath,
      channelDestPath: channelDestPath,
      htlcSecret: htlcSecret,
      revSecret: revSecret,
      amount: amount,
      revocable: revocable,
      redeemScript: redeemScript,
      scriptPubkey: scriptPubkey
    });
    return _this;
  }

  _createClass(Output, [{
    key: 'fromJSON',
    value: function fromJSON(json) {
      this.channelSourcePath = json.channelSourcePath;
      this.channelDestPath = json.channelDestPath;
      this.networkSourceId = json.networkSourceId;
      this.channelSourceId = json.channelSourceId;
      this.channelDestId = json.channelDestId;
      this.networkDestId = json.networkDestId;
      this.kind = json.kind;
      this.htlcSecret = json.htlcSecret ? new HtlcSecret().fromJSON(json.htlcSecret) : undefined;
      this.revSecret = json.revSecret ? new RevSecret().fromJSON(json.revSecret) : undefined;
      this.amount = json.amount ? new Bn().fromJSON(json.amount) : undefined;
      this.revocable = json.revocable;
      this.redeemScript = json.redeemScript ? Script.fromJSON(json.redeemScript) : undefined;
      this.scriptPubkey = json.scriptPubkey ? Script.fromJSON(json.scriptPubkey) : undefined;
      return this;
    }
  }, {
    key: 'toPublic',
    value: function toPublic() {
      var outputDesc = new Output();
      outputDesc.channelSourcePath = this.channelSourcePath;
      outputDesc.channelDestPath = this.channelDestPath;
      outputDesc.networkSourceId = this.networkSourceId;
      outputDesc.channelSourceId = this.channelSourceId;
      outputDesc.channelDestId = this.channelDestId;
      outputDesc.networkDestId = this.networkDestId;
      outputDesc.kind = this.kind;
      outputDesc.htlcSecret = this.htlcSecret ? this.htlcSecret.toPublic() : undefined;
      outputDesc.revSecret = this.revSecret ? this.revSecret.toPublic() : undefined;
      outputDesc.amount = this.amount;
      outputDesc.revocable = this.revocable;
      outputDesc.redeemScript = this.redeemScript ? this.redeemScript.toJSON() : undefined;
      outputDesc.scriptPubkey = this.scriptPubkey ? this.scriptPubkey.toJSON() : undefined;
      return outputDesc;
    }
  }]);

  return Output;
}(Struct);

module.exports = Output;

},{"./scrts/htlc-secret":6,"./scrts/rev-secret":7,"yours-bitcoin/lib/bn":321,"yours-bitcoin/lib/script":334,"yours-bitcoin/lib/struct":336}],6:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Secret = require('./secret');
var asink = require('asink');

var HtlcSecret = function (_Secret) {
  _inherits(HtlcSecret, _Secret);

  function HtlcSecret() {
    _classCallCheck(this, HtlcSecret);

    var _this = _possibleConstructorReturn(this, (HtlcSecret.__proto__ || Object.getPrototypeOf(HtlcSecret)).call(this));

    _this.fromObject({});
    return _this;
  }

  _createClass(HtlcSecret, [{
    key: 'asyncCheck',
    value: function asyncCheck(otherSecret) {
      return asink(regeneratorRuntime.mark(function _callee() {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return this.asyncSuperCheck();

              case 2:
                return _context.abrupt('return', _context.sent);

              case 3:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }), this);
    }
  }, {
    key: 'toPublic',
    value: function toPublic() {
      var secret = new HtlcSecret();
      secret.hash = this.hash;
      return secret;
    }
  }]);

  return HtlcSecret;
}(Secret);

module.exports = HtlcSecret;

},{"./secret":8,"asink":13}],7:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Secret = require('./secret');
var asink = require('asink');

var RevocationSecret = function (_Secret) {
  _inherits(RevocationSecret, _Secret);

  function RevocationSecret() {
    _classCallCheck(this, RevocationSecret);

    var _this = _possibleConstructorReturn(this, (RevocationSecret.__proto__ || Object.getPrototypeOf(RevocationSecret)).call(this));

    _this.fromObject({});
    return _this;
  }

  _createClass(RevocationSecret, [{
    key: 'asyncCheck',
    value: function asyncCheck(otherSecret) {
      return asink(regeneratorRuntime.mark(function _callee() {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!otherSecret) {
                  _context.next = 3;
                  break;
                }

                if (!(!otherSecret.hash || otherSecret.hash.toString('hex') !== this.hash.toString('hex'))) {
                  _context.next = 3;
                  break;
                }

                throw new Error('Provided secret does not match local secret');

              case 3:
                _context.next = 5;
                return this.asyncSuperCheck();

              case 5:
                return _context.abrupt('return', _context.sent);

              case 6:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }), this);
    }
  }, {
    key: 'toPublic',
    value: function toPublic() {
      var secret = new RevocationSecret();
      secret.hash = this.hash;
      return secret;
    }
  }]);

  return RevocationSecret;
}(Secret);

module.exports = RevocationSecret;

},{"./secret":8,"asink":13}],8:[function(require,module,exports){
(function (Buffer){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Struct = require('yours-bitcoin/lib/struct');
var asink = require('asink');
var Hash = require('yours-bitcoin/lib/hash');
var Random = require('yours-bitcoin/lib/random');

var Secret = function (_Struct) {
  _inherits(Secret, _Struct);

  function Secret(buf, hash) {
    _classCallCheck(this, Secret);

    var _this = _possibleConstructorReturn(this, (Secret.__proto__ || Object.getPrototypeOf(Secret)).call(this));

    _this.fromObject({ buf: buf, hash: hash });
    return _this;
  }

  _createClass(Secret, [{
    key: 'asyncInitialize',
    value: function asyncInitialize() {
      return asink(regeneratorRuntime.mark(function _callee() {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                this.generateBuf();
                _context.next = 3;
                return this.asyncGenerateHash();

              case 3:
                return _context.abrupt('return', this);

              case 4:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }), this);
    }
  }, {
    key: 'generateBuf',
    value: function generateBuf() {
      this.buf = Random.getRandomBuffer(32);
    }
  }, {
    key: 'asyncGenerateHash',
    value: function asyncGenerateHash() {
      return asink(regeneratorRuntime.mark(function _callee2() {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (this.buf) {
                  _context2.next = 2;
                  break;
                }

                return _context2.abrupt('return', new Error('buffer must be generated before hash can be'));

              case 2:
                _context2.next = 4;
                return Hash.asyncSha256Ripemd160(this.buf);

              case 4:
                this.hash = _context2.sent;

              case 5:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }), this);
    }
  }, {
    key: 'asyncSuperCheck',
    value: function asyncSuperCheck() {
      return asink(regeneratorRuntime.mark(function _callee3() {
        var hashedBuf;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                if (this.buf) {
                  _context3.next = 2;
                  break;
                }

                throw new Error('secret.buf is not set');

              case 2:
                if (this.hash) {
                  _context3.next = 4;
                  break;
                }

                throw new Error('secret.hash is not set');

              case 4:
                _context3.next = 6;
                return Hash.asyncSha256Ripemd160(this.buf);

              case 6:
                hashedBuf = _context3.sent;
                return _context3.abrupt('return', hashedBuf.equals(this.hash));

              case 8:
              case 'end':
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }), this);
    }

    /*
     * returns a new secret with the buffer toPublic
     */

  }, {
    key: 'toPublic',
    value: function toPublic() {
      var secret = new Secret().fromObject(this);
      secret.buf = undefined;
      return secret;
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      var json = {};
      json.buf = this.buf ? this.buf.toString('hex') : undefined;
      json.hash = this.hash ? this.hash.toString('hex') : undefined;
      return json;
    }
  }, {
    key: 'fromJSON',
    value: function fromJSON(json) {
      this.buf = json.buf ? new Buffer(json.buf, 'hex') : undefined;
      this.hash = json.hash ? new Buffer(json.hash, 'hex') : undefined;
      return this;
    }
  }]);

  return Secret;
}(Struct);

module.exports = Secret;

}).call(this,require("buffer").Buffer)

},{"asink":13,"buffer":17,"yours-bitcoin/lib/hash":327,"yours-bitcoin/lib/random":333,"yours-bitcoin/lib/struct":336}],9:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var asink = require('asink');
var Tx = require('./tx');
var Output = require('../output');
var TxBuilder = require('yours-bitcoin/lib/tx-builder');
var Script = require('yours-bitcoin/lib/script');
var OpCode = require('yours-bitcoin/lib/op-code');
var Address = require('yours-bitcoin/lib/address');
var Bn = require('yours-bitcoin/lib/bn');
var Consts = require('../consts.js');

var Commitment = function (_Tx) {
  _inherits(Commitment, _Tx);

  function Commitment(outputs, txb) {
    _classCallCheck(this, Commitment);

    return _possibleConstructorReturn(this, (Commitment.__proto__ || Object.getPrototypeOf(Commitment)).call(this, { outputs: outputs, txb: txb }));
  }

  _createClass(Commitment, [{
    key: 'asyncBuild',
    value: function asyncBuild(fundingTxHash, fundingTxOut, multisigAddress, builderId, xPubs) {
      return asink(regeneratorRuntime.mark(function _callee() {
        var i;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (this.outputs) {
                  _context.next = 2;
                  break;
                }

                throw new Error('Commitment not sufficiently initialized');

              case 2:

                this.txb = new TxBuilder();
                this.txb.inputFromScriptHashMultiSig(fundingTxHash, 0, fundingTxOut, multisigAddress.script);
                for (i = 0; i < this.outputs.length; i++) {
                  // build output scripts
                  this.outputs[i].revocable = this.outputs[i].channelDestId !== builderId;
                  this.outputs[i].redeemScript = this.buildRedeemScript(this.outputs[i], builderId, xPubs);
                  this.outputs[i].scriptPubkey = Address.fromRedeemScript(this.outputs[i].redeemScript).toScript();

                  if (i < this.outputs.length - 1) {
                    this.txb.outputToScript(this.outputs[i].amount, this.outputs[i].scriptPubkey);
                  } else {
                    this.txb.setChangeScript(this.outputs[i].scriptPubkey);
                  }
                }

                this.txb.build();
                _context.next = 8;
                return this.txb.asyncSign(0, multisigAddress.keyPair, fundingTxOut);

              case 8:
                return _context.abrupt('return', this);

              case 9:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }), this);
    }
  }, {
    key: 'buildRedeemScript',
    value: function buildRedeemScript(outputObject, builderId, xPubs) {
      if (outputObject.kind === undefined) {
        throw new Error('Insufficient arguments for buildRedeemScript');
      }

      var sourcePath = outputObject.channelSourcePath;
      var sourceBip = xPubs[outputObject.channelSourceId];
      var sourcePubKey = sourceBip.derive(sourcePath).pubKey; // TODO: asyncDerive

      var destPath = outputObject.channelDestPath;
      var destBip = xPubs[outputObject.channelDestId];
      var destPubKey = destBip.derive(destPath).pubKey; // TODO: asyncDerive

      if (outputObject.kind === 'pubKey' && outputObject.channelDestId === builderId) {
        // build an spend to pubkey script
        return this.pubKeyRedeemScript(destPubKey);
      } else if (outputObject.kind === 'pubKey' && outputObject.channelDestId !== builderId) {
        // build a revocable spend to pubkey script
        return this.revPubKeyRedeemScript(destPubKey, sourcePubKey, outputObject);
      } else if (outputObject.kind === 'htlc' && outputObject.channelDestId === builderId) {
        // build an HTLC script
        return this.htlcRedeemScript(destPubKey, sourcePubKey, outputObject);
      }if (outputObject.kind === 'htlc' && outputObject.channelDestId !== builderId) {
        // build a revocable HTLC sctipt
        return this.revHtlcRedeemScript(destPubKey, sourcePubKey, outputObject);
      } else {
        throw new Error('invalid kind in Commitment.asyncBuild');
      }
    }
  }, {
    key: 'pubKeyRedeemScript',
    value: function pubKeyRedeemScript(destPubKey) {
      // output to channel dest
      return new Script().writeBuffer(destPubKey.toBuffer()).writeOpCode(OpCode.OP_CHECKSIG);
    }

    // all checks but the last should be ...VERIFY

  }, {
    key: 'revPubKeyRedeemScript',
    value: function revPubKeyRedeemScript(destPubKey, sourcePubKey, outputObject) {
      return new Script().writeOpCode(OpCode.OP_IF)
      // output to channel dest
      // encumbered by a CSV_DELAY CSV time lock
      // time lock is needed to allow channel source to spend via branch 2
      // should the tx be revoked
      .writeBuffer(destPubKey.toBuffer()).writeOpCode(OpCode.OP_CHECKSIG).writeBn(outputObject.csvDelay || Consts.CSV_DELAY).writeOpCode(OpCode.OP_CHECKSEQUENCEVERIFY).writeOpCode(OpCode.OP_DROP).writeOpCode(OpCode.OP_ELSE)
      // output to channel source
      // sourcePubKey & owner's revocation secret needed to spend
      // this branch is used if a revoked commitment tx has been broadcast
      .writeBuffer(sourcePubKey.toBuffer()).writeOpCode(OpCode.OP_CHECKSIGVERIFY).writeOpCode(OpCode.OP_HASH160).writeBuffer(outputObject.revSecret.hash).writeOpCode(OpCode.OP_EQUAL).writeOpCode(OpCode.OP_ENDIF);
    }
  }, {
    key: 'htlcRedeemScript',
    value: function htlcRedeemScript(destPubKey, sourcePubKey, outputObject) {
      var script = new Script().writeOpCode(OpCode.OP_IF)
      // output to channel dest
      // channel dest's sig & and network dest's HTLC secret needed to spend
      // this branch can be spent if chanel dest has the htlc secret
      .writeBuffer(destPubKey.toBuffer()) // push the agent's pubKey
      .writeOpCode(OpCode.OP_CHECKSIGVERIFY) // check sig against redeem script
      .writeOpCode(OpCode.OP_HASH160) // hash htlc secret from redeem script
      .writeBuffer(outputObject.htlcSecret.hash) // push htlc secret hash of the htlc secret
      .writeOpCode(OpCode.OP_EQUAL) // check equality
      .writeOpCode(OpCode.OP_ELSE)
      // output to channel source
      // channel source's sig needed to spend, subject to SVC lock
      // this branch can be spent if channel dest does not reveil the htlc secret in time
      .writeBuffer(sourcePubKey.toBuffer()).writeOpCode(OpCode.OP_CHECKSIG).writeBn(outputObject.csvDelay || Consts.CSV_DELAY).writeOpCode(OpCode.OP_CHECKSEQUENCEVERIFY).writeOpCode(OpCode.OP_DROP).writeOpCode(OpCode.OP_ENDIF);
      return script;
    }
  }, {
    key: 'revHtlcRedeemScript',
    value: function revHtlcRedeemScript(destPubKey, sourcePubKey, outputObject) {
      var longDelay = outputObject.csvDelay || Consts.CSV_DELAY;
      var shortDelay = longDelay.div(Bn(2));
      return new Script().writeOpCode(OpCode.OP_IF)
      // output to channel dest
      // channel dest's sig & and network dest's HTLC secret needed to spend
      // this branch can be spent if chanel dest has the htlc secret
      // corresponds to the first branch of the htlc script
      // must be encumbered by a time lock to allow channel source to spend if tx was revoked
      .writeBuffer(destPubKey.toBuffer()) // check pubkey
      .writeOpCode(OpCode.OP_CHECKSIGVERIFY).writeOpCode(OpCode.OP_HASH160) // check htlc secret
      .writeBuffer(outputObject.htlcSecret.hash).writeOpCode(OpCode.OP_EQUALVERIFY).writeBn(shortDelay) // check time lock
      .writeOpCode(OpCode.OP_CHECKSEQUENCEVERIFY).writeOpCode(OpCode.OP_ELSE).writeOpCode(OpCode.OP_IF)
      // output to channel source
      // channel source's sig needed to spend, subject to SVC lock
      // this branch can be spent if channel dest does not reveil the htlc secret in time
      // corresponds to second branch of htlc script
      .writeBuffer(sourcePubKey.toBuffer()).writeOpCode(OpCode.OP_CHECKSIG).writeBn(longDelay).writeOpCode(OpCode.OP_CHECKSEQUENCEVERIFY).writeOpCode(OpCode.OP_DROP).writeOpCode(OpCode.OP_ELSE)
      // output to channel source
      // sourcePubKey & owner's revocation secret needed to spend
      // this branch is used if a revoked commitment tx has been broadcast
      // this corresponds to second branch of rev pubKey script
      .writeBuffer(sourcePubKey.toBuffer()).writeOpCode(OpCode.OP_CHECKSIGVERIFY).writeOpCode(OpCode.OP_HASH160).writeBuffer(outputObject.revSecret.hash).writeOpCode(OpCode.OP_EQUAL).writeOpCode(OpCode.OP_ENDIF).writeOpCode(OpCode.OP_ENDIF);
    }
  }, {
    key: 'fromJSON',
    value: function fromJSON(json) {
      if (json.outputs) {
        this.outputs = [];
        for (var i in json.outputs) {
          this.outputs.push(new Output().fromJSON(json.outputs[i]));
        }
      }
      this.txb = json.txb ? new TxBuilder().fromJSON(json.txb) : undefined;
      return this;
    }
  }, {
    key: 'toPublic',
    value: function toPublic() {
      var commitment = new Commitment().fromObject();
      if (this.outputs) {
        commitment.outputs = [];
        for (var i in this.outputs) {
          commitment.outputs.push(this.outputs[i].toPublic());
        }
      }
      commitment.txb = this.txb;
      return commitment;
    }
  }]);

  return Commitment;
}(Tx);

module.exports = Commitment;

},{"../consts.js":4,"../output":5,"./tx":11,"asink":13,"yours-bitcoin/lib/address":318,"yours-bitcoin/lib/bn":321,"yours-bitcoin/lib/op-code":329,"yours-bitcoin/lib/script":334,"yours-bitcoin/lib/tx-builder":337}],10:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var asink = require('asink');
var TxBuilder = require('yours-bitcoin/lib/tx-builder');
var Tx = require('./tx');

var Funding = function (_Tx) {
  _inherits(Funding, _Tx);

  function Funding() {
    _classCallCheck(this, Funding);

    var _this = _possibleConstructorReturn(this, (Funding.__proto__ || Object.getPrototypeOf(Funding)).call(this));

    _this.fromObject({});
    return _this;
  }

  _createClass(Funding, [{
    key: 'asyncInitialize',
    value: function asyncInitialize(amount, sourceAddress, multisigAddress, inputTxHashbuf, inputTxoutnum, inputTxout, pubKey) {
      return asink(regeneratorRuntime.mark(function _callee() {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!(!amount || !sourceAddress || !multisigAddress || !inputTxHashbuf || typeof inputTxoutnum !== 'number' || !inputTxout || !pubKey)) {
                  _context.next = 2;
                  break;
                }

                throw new Error('Insufficient arguments for Funding.asyncInitialize');

              case 2:

                this.amount = amount;
                this.txb = new TxBuilder();
                this.txb.inputFromPubKeyHash(inputTxHashbuf, inputTxoutnum, inputTxout, pubKey);
                this.txb.setChangeAddress(sourceAddress.address);
                this.txb.outputToAddress(amount, multisigAddress.address);
                this.txb.build();
                this.txb.sign(0, sourceAddress.keyPair, inputTxout);

              case 9:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }), this);
    }
  }, {
    key: 'fromJSON',
    value: function fromJSON(json) {
      this.fromObject({
        amount: json.amount,
        txb: new TxBuilder().fromJSON(json.txb)
      });
      return this;
    }
  }, {
    key: 'asyncToPublic',
    value: function asyncToPublic() {
      return asink(regeneratorRuntime.mark(function _callee2() {
        var funding, hash;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                funding = new Funding();
                _context2.next = 3;
                return this.txb.tx.asyncHash();

              case 3:
                hash = _context2.sent;

                funding.amount = this.amount;
                funding.txb = new TxBuilder();
                funding.txb.tx.txOuts = this.txb.tx.txOuts;
                funding.txb.tx.hash = function () {
                  return hash;
                };
                return _context2.abrupt('return', funding);

              case 9:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }), this);
    }
  }]);

  return Funding;
}(Tx);

module.exports = Funding;

},{"./tx":11,"asink":13,"yours-bitcoin/lib/tx-builder":337}],11:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var asink = require('asink');
var Hash = require('yours-bitcoin/lib/hash');
var Struct = require('yours-bitcoin/lib/struct');
var Script = require('yours-bitcoin/lib/script');
var OpCode = require('yours-bitcoin/lib/op-code');

var Tx = function (_Struct) {
  _inherits(Tx, _Struct);

  function Tx() {
    _classCallCheck(this, Tx);

    var _this = _possibleConstructorReturn(this, (Tx.__proto__ || Object.getPrototypeOf(Tx)).call(this));

    _this.fromObject({});
    return _this;
  }

  _createClass(Tx, [{
    key: 'toP2shInput',
    value: function toP2shInput(script, redeemScript) {
      if (!script || !redeemScript) {
        throw new Error('Insufficient parameters for toP2shInput');
      }
      var newScript = Script.fromBuffer(script.toBuffer()); // copy
      newScript.writeBuffer(redeemScript.toBuffer());
      return newScript;
    }
  }, {
    key: 'asyncToP2shOutput',
    value: function asyncToP2shOutput(script) {
      return asink(regeneratorRuntime.mark(function _callee() {
        var scriptHash;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (script) {
                  _context.next = 2;
                  break;
                }

                throw new Error('Insufficient parameters for asyncToP2shOutput');

              case 2:
                _context.next = 4;
                return Hash.asyncSha256Ripemd160(script.toBuffer());

              case 4:
                scriptHash = _context.sent;
                return _context.abrupt('return', new Script().writeOpCode(OpCode.OP_HASH160).writeBuffer(scriptHash).writeOpCode(OpCode.OP_EQUAL));

              case 6:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }), this);
    }
  }]);

  return Tx;
}(Struct);

module.exports = Tx;

},{"asink":13,"yours-bitcoin/lib/hash":327,"yours-bitcoin/lib/op-code":329,"yours-bitcoin/lib/script":334,"yours-bitcoin/lib/struct":336}],12:[function(require,module,exports){
(function (Buffer){
// just a dummy at this point
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Struct = require('yours-bitcoin/lib/struct');
var Txout = require('yours-bitcoin/lib/tx-out');
var Address = require('yours-bitcoin/lib/address');

var Wallet = function (_Struct) {
  _inherits(Wallet, _Struct);

  function Wallet() {
    _classCallCheck(this, Wallet);

    var _this = _possibleConstructorReturn(this, (Wallet.__proto__ || Object.getPrototypeOf(Wallet)).call(this));

    _this.fromObject({});
    return _this;
  }

  /*
   * just a mockup at this point
   */


  _createClass(Wallet, [{
    key: 'getUnspentOutput',
    value: function getUnspentOutput(amount, pubkey) {
      // from line 444 scritp-examples
      var inputTxAddress = Address.fromPubKey(pubkey);
      var scriptPubkey = inputTxAddress.toScript();
      var inputTxHashbuf = new Buffer(32);
      inputTxHashbuf.fill(0); // a fake, non-existent input transaction
      var inputTxoutnum = 0;
      var inputTxout = new Txout(amount).setScript(scriptPubkey);

      return {
        inputTxout: new Txout(amount).setScript(inputTxAddress.toScript()),
        txhashbuf: inputTxHashbuf,
        txoutnum: inputTxoutnum,
        txout: inputTxout,
        pubKey: pubkey
      };
    }
  }, {
    key: 'fromJSON',
    value: function fromJSON(json) {
      this.fromObject({});
      return this;
    }
  }, {
    key: 'toPublic',
    value: function toPublic() {
      return this;
    }
  }]);

  return Wallet;
}(Struct);

module.exports = Wallet;

}).call(this,require("buffer").Buffer)

},{"buffer":17,"yours-bitcoin/lib/address":318,"yours-bitcoin/lib/struct":336,"yours-bitcoin/lib/tx-out":340}],13:[function(require,module,exports){
/**
 * asink
 * =====
 *
 * asink is the same thing as, or a rename of, spawn. spawn in turn is a tool
 * for repeatedly calling the .thens of promises yielded by a generator.
 * Basically, this makes it possible to write asynchronous, promisified code
 * with normal try/catches that look just like synchronous code. It creates
 * shorter and easier to understand code. Hypothetically, there will be a
 * feature in the next version of javascript, ES7, called "async functions",
 * which do exactly what asink does. When/if that happens and we can access it
 * in node, we can simply remove all calls to asink and our code should behave
 * in the same way.
 *
 * See:
 * http://tc39.github.io/ecmascript-asyncawait/
 * https://github.com/tc39/ecmascript-asyncawait
 * https://gist.github.com/jakearchibald/31b89cba627924972ad6
 * http://www.html5rocks.com/en/tutorials/es6/promises/
 * https://blogs.windows.com/msedgedev/2015/09/30/asynchronous-code-gets-easier-with-es2016-async-function-support-in-chakra-and-microsoft-edge/
 */
'use strict';

function spawn(genF, self) {
  return new Promise(function (resolve, reject) {
    var gen = genF.call(self);
    function step(nextF) {
      var next;
      try {
        next = nextF();
      } catch (e) {
        // finished with failure, reject the promise
        reject(e);
        return;
      }
      if (next.done) {
        // finished with success, resolve the promise
        resolve(next.value);
        return;
      }
      // not finished, chain off the yielded promise and `step` again
      Promise.resolve(next.value).then(function (v) {
        step(function () {
          return gen.next(v);
        });
      }, function (e) {
        step(function () {
          return gen.throw(e);
        });
      });
    }
    step(function () {
      return gen.next(undefined);
    });
  });
}
module.exports = spawn;

},{}],14:[function(require,module,exports){
(function (global){
"use strict";

require("core-js/shim");

require("regenerator-runtime/runtime");

require("core-js/fn/regexp/escape");

if (global._babelPolyfill) {
  throw new Error("only one instance of babel-polyfill is allowed");
}
global._babelPolyfill = true;

var DEFINE_PROPERTY = "defineProperty";
function define(O, key, value) {
  O[key] || Object[DEFINE_PROPERTY](O, key, {
    writable: true,
    configurable: true,
    value: value
  });
}

define(String.prototype, "padLeft", "".padStart);
define(String.prototype, "padRight", "".padEnd);

"pop,reverse,shift,keys,values,entries,indexOf,every,some,forEach,map,filter,find,findIndex,includes,join,slice,concat,push,splice,unshift,sort,lastIndexOf,reduce,reduceRight,copyWithin,fill".split(",").forEach(function (key) {
  [][key] && define(Array, key, Function.call.bind([][key]));
});
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"core-js/fn/regexp/escape":18,"core-js/shim":311,"regenerator-runtime/runtime":317}],15:[function(require,module,exports){
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function placeHoldersCount (b64) {
  var len = b64.length
  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // the number of equal signs (place holders)
  // if there are two placeholders, than the two characters before it
  // represent one byte
  // if there is only one, then the three characters before it represent 2 bytes
  // this is just a cheap hack to not do indexOf twice
  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0
}

function byteLength (b64) {
  // base64 is 4/3 + up to two characters of the original data
  return b64.length * 3 / 4 - placeHoldersCount(b64)
}

function toByteArray (b64) {
  var i, j, l, tmp, placeHolders, arr
  var len = b64.length
  placeHolders = placeHoldersCount(b64)

  arr = new Arr(len * 3 / 4 - placeHolders)

  // if there are placeholders, only get up to the last complete 4 chars
  l = placeHolders > 0 ? len - 4 : len

  var L = 0

  for (i = 0, j = 0; i < l; i += 4, j += 3) {
    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]
    arr[L++] = (tmp >> 16) & 0xFF
    arr[L++] = (tmp >> 8) & 0xFF
    arr[L++] = tmp & 0xFF
  }

  if (placeHolders === 2) {
    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[L++] = tmp & 0xFF
  } else if (placeHolders === 1) {
    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[L++] = (tmp >> 8) & 0xFF
    arr[L++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var output = ''
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    output += lookup[tmp >> 2]
    output += lookup[(tmp << 4) & 0x3F]
    output += '=='
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])
    output += lookup[tmp >> 10]
    output += lookup[(tmp >> 4) & 0x3F]
    output += lookup[(tmp << 2) & 0x3F]
    output += '='
  }

  parts.push(output)

  return parts.join('')
}

},{}],16:[function(require,module,exports){

},{}],17:[function(require,module,exports){
(function (global){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')
var isArray = require('isarray')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
  ? global.TYPED_ARRAY_SUPPORT
  : typedArraySupport()

/*
 * Export kMaxLength after typed array support is determined.
 */
exports.kMaxLength = kMaxLength()

function typedArraySupport () {
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
}

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

function createBuffer (that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length')
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length)
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length)
    }
    that.length = length
  }

  return that
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length)
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(this, arg)
  }
  return from(this, arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype
  return arr
}

function from (that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset)
  }

  return fromObject(that, value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length)
}

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype
  Buffer.__proto__ = Uint8Array
  if (typeof Symbol !== 'undefined' && Symbol.species &&
      Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    })
  }
}

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (that, size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(that, size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(that, size).fill(fill, encoding)
      : createBuffer(that, size).fill(fill)
  }
  return createBuffer(that, size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding)
}

function allocUnsafe (that, size) {
  assertSize(size)
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0
    }
  }
  return that
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size)
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  that = createBuffer(that, length)

  var actual = that.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual)
  }

  return that
}

function fromArrayLike (that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  that = createBuffer(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayBuffer (that, array, byteOffset, length) {
  array.byteLength // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array)
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset)
  } else {
    array = new Uint8Array(array, byteOffset, length)
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array)
  }
  return that
}

function fromObject (that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    that = createBuffer(that, len)

    if (that.length === 0) {
      return that
    }

    obj.copy(that, 0, 0, len)
    return that
  }

  if (obj) {
    if ((typeof ArrayBuffer !== 'undefined' &&
        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0)
      }
      return fromArrayLike(that, obj)
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length | 0
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT &&
        typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end)
    newBuf.__proto__ = Buffer.prototype
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start]
    }
  }

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = (value & 0xff)
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : utf8ToBytes(new Buffer(val, encoding).toString())
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

function isnan (val) {
  return val !== val // eslint-disable-line no-self-compare
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"base64-js":15,"ieee754":312,"isarray":314}],18:[function(require,module,exports){
require('../../modules/core.regexp.escape');
module.exports = require('../../modules/_core').RegExp.escape;
},{"../../modules/_core":39,"../../modules/core.regexp.escape":135}],19:[function(require,module,exports){
module.exports = function(it){
  if(typeof it != 'function')throw TypeError(it + ' is not a function!');
  return it;
};
},{}],20:[function(require,module,exports){
var cof = require('./_cof');
module.exports = function(it, msg){
  if(typeof it != 'number' && cof(it) != 'Number')throw TypeError(msg);
  return +it;
};
},{"./_cof":34}],21:[function(require,module,exports){
// 22.1.3.31 Array.prototype[@@unscopables]
var UNSCOPABLES = require('./_wks')('unscopables')
  , ArrayProto  = Array.prototype;
if(ArrayProto[UNSCOPABLES] == undefined)require('./_hide')(ArrayProto, UNSCOPABLES, {});
module.exports = function(key){
  ArrayProto[UNSCOPABLES][key] = true;
};
},{"./_hide":56,"./_wks":133}],22:[function(require,module,exports){
module.exports = function(it, Constructor, name, forbiddenField){
  if(!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)){
    throw TypeError(name + ': incorrect invocation!');
  } return it;
};
},{}],23:[function(require,module,exports){
var isObject = require('./_is-object');
module.exports = function(it){
  if(!isObject(it))throw TypeError(it + ' is not an object!');
  return it;
};
},{"./_is-object":65}],24:[function(require,module,exports){
// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
'use strict';
var toObject = require('./_to-object')
  , toIndex  = require('./_to-index')
  , toLength = require('./_to-length');

module.exports = [].copyWithin || function copyWithin(target/*= 0*/, start/*= 0, end = @length*/){
  var O     = toObject(this)
    , len   = toLength(O.length)
    , to    = toIndex(target, len)
    , from  = toIndex(start, len)
    , end   = arguments.length > 2 ? arguments[2] : undefined
    , count = Math.min((end === undefined ? len : toIndex(end, len)) - from, len - to)
    , inc   = 1;
  if(from < to && to < from + count){
    inc  = -1;
    from += count - 1;
    to   += count - 1;
  }
  while(count-- > 0){
    if(from in O)O[to] = O[from];
    else delete O[to];
    to   += inc;
    from += inc;
  } return O;
};
},{"./_to-index":121,"./_to-length":124,"./_to-object":125}],25:[function(require,module,exports){
// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
'use strict';
var toObject = require('./_to-object')
  , toIndex  = require('./_to-index')
  , toLength = require('./_to-length');
module.exports = function fill(value /*, start = 0, end = @length */){
  var O      = toObject(this)
    , length = toLength(O.length)
    , aLen   = arguments.length
    , index  = toIndex(aLen > 1 ? arguments[1] : undefined, length)
    , end    = aLen > 2 ? arguments[2] : undefined
    , endPos = end === undefined ? length : toIndex(end, length);
  while(endPos > index)O[index++] = value;
  return O;
};
},{"./_to-index":121,"./_to-length":124,"./_to-object":125}],26:[function(require,module,exports){
var forOf = require('./_for-of');

module.exports = function(iter, ITERATOR){
  var result = [];
  forOf(iter, false, result.push, result, ITERATOR);
  return result;
};

},{"./_for-of":53}],27:[function(require,module,exports){
// false -> Array#indexOf
// true  -> Array#includes
var toIObject = require('./_to-iobject')
  , toLength  = require('./_to-length')
  , toIndex   = require('./_to-index');
module.exports = function(IS_INCLUDES){
  return function($this, el, fromIndex){
    var O      = toIObject($this)
      , length = toLength(O.length)
      , index  = toIndex(fromIndex, length)
      , value;
    // Array#includes uses SameValueZero equality algorithm
    if(IS_INCLUDES && el != el)while(length > index){
      value = O[index++];
      if(value != value)return true;
    // Array#toIndex ignores holes, Array#includes - not
    } else for(;length > index; index++)if(IS_INCLUDES || index in O){
      if(O[index] === el)return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};
},{"./_to-index":121,"./_to-iobject":123,"./_to-length":124}],28:[function(require,module,exports){
// 0 -> Array#forEach
// 1 -> Array#map
// 2 -> Array#filter
// 3 -> Array#some
// 4 -> Array#every
// 5 -> Array#find
// 6 -> Array#findIndex
var ctx      = require('./_ctx')
  , IObject  = require('./_iobject')
  , toObject = require('./_to-object')
  , toLength = require('./_to-length')
  , asc      = require('./_array-species-create');
module.exports = function(TYPE, $create){
  var IS_MAP        = TYPE == 1
    , IS_FILTER     = TYPE == 2
    , IS_SOME       = TYPE == 3
    , IS_EVERY      = TYPE == 4
    , IS_FIND_INDEX = TYPE == 6
    , NO_HOLES      = TYPE == 5 || IS_FIND_INDEX
    , create        = $create || asc;
  return function($this, callbackfn, that){
    var O      = toObject($this)
      , self   = IObject(O)
      , f      = ctx(callbackfn, that, 3)
      , length = toLength(self.length)
      , index  = 0
      , result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined
      , val, res;
    for(;length > index; index++)if(NO_HOLES || index in self){
      val = self[index];
      res = f(val, index, O);
      if(TYPE){
        if(IS_MAP)result[index] = res;            // map
        else if(res)switch(TYPE){
          case 3: return true;                    // some
          case 5: return val;                     // find
          case 6: return index;                   // findIndex
          case 2: result.push(val);               // filter
        } else if(IS_EVERY)return false;          // every
      }
    }
    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
  };
};
},{"./_array-species-create":31,"./_ctx":41,"./_iobject":61,"./_to-length":124,"./_to-object":125}],29:[function(require,module,exports){
var aFunction = require('./_a-function')
  , toObject  = require('./_to-object')
  , IObject   = require('./_iobject')
  , toLength  = require('./_to-length');

module.exports = function(that, callbackfn, aLen, memo, isRight){
  aFunction(callbackfn);
  var O      = toObject(that)
    , self   = IObject(O)
    , length = toLength(O.length)
    , index  = isRight ? length - 1 : 0
    , i      = isRight ? -1 : 1;
  if(aLen < 2)for(;;){
    if(index in self){
      memo = self[index];
      index += i;
      break;
    }
    index += i;
    if(isRight ? index < 0 : length <= index){
      throw TypeError('Reduce of empty array with no initial value');
    }
  }
  for(;isRight ? index >= 0 : length > index; index += i)if(index in self){
    memo = callbackfn(memo, self[index], index, O);
  }
  return memo;
};
},{"./_a-function":19,"./_iobject":61,"./_to-length":124,"./_to-object":125}],30:[function(require,module,exports){
var isObject = require('./_is-object')
  , isArray  = require('./_is-array')
  , SPECIES  = require('./_wks')('species');

module.exports = function(original){
  var C;
  if(isArray(original)){
    C = original.constructor;
    // cross-realm fallback
    if(typeof C == 'function' && (C === Array || isArray(C.prototype)))C = undefined;
    if(isObject(C)){
      C = C[SPECIES];
      if(C === null)C = undefined;
    }
  } return C === undefined ? Array : C;
};
},{"./_is-array":63,"./_is-object":65,"./_wks":133}],31:[function(require,module,exports){
// 9.4.2.3 ArraySpeciesCreate(originalArray, length)
var speciesConstructor = require('./_array-species-constructor');

module.exports = function(original, length){
  return new (speciesConstructor(original))(length);
};
},{"./_array-species-constructor":30}],32:[function(require,module,exports){
'use strict';
var aFunction  = require('./_a-function')
  , isObject   = require('./_is-object')
  , invoke     = require('./_invoke')
  , arraySlice = [].slice
  , factories  = {};

var construct = function(F, len, args){
  if(!(len in factories)){
    for(var n = [], i = 0; i < len; i++)n[i] = 'a[' + i + ']';
    factories[len] = Function('F,a', 'return new F(' + n.join(',') + ')');
  } return factories[len](F, args);
};

module.exports = Function.bind || function bind(that /*, args... */){
  var fn       = aFunction(this)
    , partArgs = arraySlice.call(arguments, 1);
  var bound = function(/* args... */){
    var args = partArgs.concat(arraySlice.call(arguments));
    return this instanceof bound ? construct(fn, args.length, args) : invoke(fn, args, that);
  };
  if(isObject(fn.prototype))bound.prototype = fn.prototype;
  return bound;
};
},{"./_a-function":19,"./_invoke":60,"./_is-object":65}],33:[function(require,module,exports){
// getting tag from 19.1.3.6 Object.prototype.toString()
var cof = require('./_cof')
  , TAG = require('./_wks')('toStringTag')
  // ES3 wrong here
  , ARG = cof(function(){ return arguments; }()) == 'Arguments';

// fallback for IE11 Script Access Denied error
var tryGet = function(it, key){
  try {
    return it[key];
  } catch(e){ /* empty */ }
};

module.exports = function(it){
  var O, T, B;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
    // @@toStringTag case
    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
    // builtinTag case
    : ARG ? cof(O)
    // ES3 arguments fallback
    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
};
},{"./_cof":34,"./_wks":133}],34:[function(require,module,exports){
var toString = {}.toString;

module.exports = function(it){
  return toString.call(it).slice(8, -1);
};
},{}],35:[function(require,module,exports){
'use strict';
var dP          = require('./_object-dp').f
  , create      = require('./_object-create')
  , redefineAll = require('./_redefine-all')
  , ctx         = require('./_ctx')
  , anInstance  = require('./_an-instance')
  , defined     = require('./_defined')
  , forOf       = require('./_for-of')
  , $iterDefine = require('./_iter-define')
  , step        = require('./_iter-step')
  , setSpecies  = require('./_set-species')
  , DESCRIPTORS = require('./_descriptors')
  , fastKey     = require('./_meta').fastKey
  , SIZE        = DESCRIPTORS ? '_s' : 'size';

var getEntry = function(that, key){
  // fast case
  var index = fastKey(key), entry;
  if(index !== 'F')return that._i[index];
  // frozen object case
  for(entry = that._f; entry; entry = entry.n){
    if(entry.k == key)return entry;
  }
};

module.exports = {
  getConstructor: function(wrapper, NAME, IS_MAP, ADDER){
    var C = wrapper(function(that, iterable){
      anInstance(that, C, NAME, '_i');
      that._i = create(null); // index
      that._f = undefined;    // first entry
      that._l = undefined;    // last entry
      that[SIZE] = 0;         // size
      if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);
    });
    redefineAll(C.prototype, {
      // 23.1.3.1 Map.prototype.clear()
      // 23.2.3.2 Set.prototype.clear()
      clear: function clear(){
        for(var that = this, data = that._i, entry = that._f; entry; entry = entry.n){
          entry.r = true;
          if(entry.p)entry.p = entry.p.n = undefined;
          delete data[entry.i];
        }
        that._f = that._l = undefined;
        that[SIZE] = 0;
      },
      // 23.1.3.3 Map.prototype.delete(key)
      // 23.2.3.4 Set.prototype.delete(value)
      'delete': function(key){
        var that  = this
          , entry = getEntry(that, key);
        if(entry){
          var next = entry.n
            , prev = entry.p;
          delete that._i[entry.i];
          entry.r = true;
          if(prev)prev.n = next;
          if(next)next.p = prev;
          if(that._f == entry)that._f = next;
          if(that._l == entry)that._l = prev;
          that[SIZE]--;
        } return !!entry;
      },
      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
      forEach: function forEach(callbackfn /*, that = undefined */){
        anInstance(this, C, 'forEach');
        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3)
          , entry;
        while(entry = entry ? entry.n : this._f){
          f(entry.v, entry.k, this);
          // revert to the last existing entry
          while(entry && entry.r)entry = entry.p;
        }
      },
      // 23.1.3.7 Map.prototype.has(key)
      // 23.2.3.7 Set.prototype.has(value)
      has: function has(key){
        return !!getEntry(this, key);
      }
    });
    if(DESCRIPTORS)dP(C.prototype, 'size', {
      get: function(){
        return defined(this[SIZE]);
      }
    });
    return C;
  },
  def: function(that, key, value){
    var entry = getEntry(that, key)
      , prev, index;
    // change existing entry
    if(entry){
      entry.v = value;
    // create new entry
    } else {
      that._l = entry = {
        i: index = fastKey(key, true), // <- index
        k: key,                        // <- key
        v: value,                      // <- value
        p: prev = that._l,             // <- previous entry
        n: undefined,                  // <- next entry
        r: false                       // <- removed
      };
      if(!that._f)that._f = entry;
      if(prev)prev.n = entry;
      that[SIZE]++;
      // add to index
      if(index !== 'F')that._i[index] = entry;
    } return that;
  },
  getEntry: getEntry,
  setStrong: function(C, NAME, IS_MAP){
    // add .keys, .values, .entries, [@@iterator]
    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
    $iterDefine(C, NAME, function(iterated, kind){
      this._t = iterated;  // target
      this._k = kind;      // kind
      this._l = undefined; // previous
    }, function(){
      var that  = this
        , kind  = that._k
        , entry = that._l;
      // revert to the last existing entry
      while(entry && entry.r)entry = entry.p;
      // get next entry
      if(!that._t || !(that._l = entry = entry ? entry.n : that._t._f)){
        // or finish the iteration
        that._t = undefined;
        return step(1);
      }
      // return step by kind
      if(kind == 'keys'  )return step(0, entry.k);
      if(kind == 'values')return step(0, entry.v);
      return step(0, [entry.k, entry.v]);
    }, IS_MAP ? 'entries' : 'values' , !IS_MAP, true);

    // add [@@species], 23.1.2.2, 23.2.2.2
    setSpecies(NAME);
  }
};
},{"./_an-instance":22,"./_ctx":41,"./_defined":43,"./_descriptors":44,"./_for-of":53,"./_iter-define":69,"./_iter-step":71,"./_meta":78,"./_object-create":82,"./_object-dp":83,"./_redefine-all":102,"./_set-species":107}],36:[function(require,module,exports){
// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var classof = require('./_classof')
  , from    = require('./_array-from-iterable');
module.exports = function(NAME){
  return function toJSON(){
    if(classof(this) != NAME)throw TypeError(NAME + "#toJSON isn't generic");
    return from(this);
  };
};
},{"./_array-from-iterable":26,"./_classof":33}],37:[function(require,module,exports){
'use strict';
var redefineAll       = require('./_redefine-all')
  , getWeak           = require('./_meta').getWeak
  , anObject          = require('./_an-object')
  , isObject          = require('./_is-object')
  , anInstance        = require('./_an-instance')
  , forOf             = require('./_for-of')
  , createArrayMethod = require('./_array-methods')
  , $has              = require('./_has')
  , arrayFind         = createArrayMethod(5)
  , arrayFindIndex    = createArrayMethod(6)
  , id                = 0;

// fallback for uncaught frozen keys
var uncaughtFrozenStore = function(that){
  return that._l || (that._l = new UncaughtFrozenStore);
};
var UncaughtFrozenStore = function(){
  this.a = [];
};
var findUncaughtFrozen = function(store, key){
  return arrayFind(store.a, function(it){
    return it[0] === key;
  });
};
UncaughtFrozenStore.prototype = {
  get: function(key){
    var entry = findUncaughtFrozen(this, key);
    if(entry)return entry[1];
  },
  has: function(key){
    return !!findUncaughtFrozen(this, key);
  },
  set: function(key, value){
    var entry = findUncaughtFrozen(this, key);
    if(entry)entry[1] = value;
    else this.a.push([key, value]);
  },
  'delete': function(key){
    var index = arrayFindIndex(this.a, function(it){
      return it[0] === key;
    });
    if(~index)this.a.splice(index, 1);
    return !!~index;
  }
};

module.exports = {
  getConstructor: function(wrapper, NAME, IS_MAP, ADDER){
    var C = wrapper(function(that, iterable){
      anInstance(that, C, NAME, '_i');
      that._i = id++;      // collection id
      that._l = undefined; // leak store for uncaught frozen objects
      if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);
    });
    redefineAll(C.prototype, {
      // 23.3.3.2 WeakMap.prototype.delete(key)
      // 23.4.3.3 WeakSet.prototype.delete(value)
      'delete': function(key){
        if(!isObject(key))return false;
        var data = getWeak(key);
        if(data === true)return uncaughtFrozenStore(this)['delete'](key);
        return data && $has(data, this._i) && delete data[this._i];
      },
      // 23.3.3.4 WeakMap.prototype.has(key)
      // 23.4.3.4 WeakSet.prototype.has(value)
      has: function has(key){
        if(!isObject(key))return false;
        var data = getWeak(key);
        if(data === true)return uncaughtFrozenStore(this).has(key);
        return data && $has(data, this._i);
      }
    });
    return C;
  },
  def: function(that, key, value){
    var data = getWeak(anObject(key), true);
    if(data === true)uncaughtFrozenStore(that).set(key, value);
    else data[that._i] = value;
    return that;
  },
  ufstore: uncaughtFrozenStore
};
},{"./_an-instance":22,"./_an-object":23,"./_array-methods":28,"./_for-of":53,"./_has":55,"./_is-object":65,"./_meta":78,"./_redefine-all":102}],38:[function(require,module,exports){
'use strict';
var global            = require('./_global')
  , $export           = require('./_export')
  , redefine          = require('./_redefine')
  , redefineAll       = require('./_redefine-all')
  , meta              = require('./_meta')
  , forOf             = require('./_for-of')
  , anInstance        = require('./_an-instance')
  , isObject          = require('./_is-object')
  , fails             = require('./_fails')
  , $iterDetect       = require('./_iter-detect')
  , setToStringTag    = require('./_set-to-string-tag')
  , inheritIfRequired = require('./_inherit-if-required');

module.exports = function(NAME, wrapper, methods, common, IS_MAP, IS_WEAK){
  var Base  = global[NAME]
    , C     = Base
    , ADDER = IS_MAP ? 'set' : 'add'
    , proto = C && C.prototype
    , O     = {};
  var fixMethod = function(KEY){
    var fn = proto[KEY];
    redefine(proto, KEY,
      KEY == 'delete' ? function(a){
        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'has' ? function has(a){
        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'get' ? function get(a){
        return IS_WEAK && !isObject(a) ? undefined : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'add' ? function add(a){ fn.call(this, a === 0 ? 0 : a); return this; }
        : function set(a, b){ fn.call(this, a === 0 ? 0 : a, b); return this; }
    );
  };
  if(typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function(){
    new C().entries().next();
  }))){
    // create collection constructor
    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
    redefineAll(C.prototype, methods);
    meta.NEED = true;
  } else {
    var instance             = new C
      // early implementations not supports chaining
      , HASNT_CHAINING       = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance
      // V8 ~  Chromium 40- weak-collections throws on primitives, but should return false
      , THROWS_ON_PRIMITIVES = fails(function(){ instance.has(1); })
      // most early implementations doesn't supports iterables, most modern - not close it correctly
      , ACCEPT_ITERABLES     = $iterDetect(function(iter){ new C(iter); }) // eslint-disable-line no-new
      // for early implementations -0 and +0 not the same
      , BUGGY_ZERO = !IS_WEAK && fails(function(){
        // V8 ~ Chromium 42- fails only with 5+ elements
        var $instance = new C()
          , index     = 5;
        while(index--)$instance[ADDER](index, index);
        return !$instance.has(-0);
      });
    if(!ACCEPT_ITERABLES){ 
      C = wrapper(function(target, iterable){
        anInstance(target, C, NAME);
        var that = inheritIfRequired(new Base, target, C);
        if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);
        return that;
      });
      C.prototype = proto;
      proto.constructor = C;
    }
    if(THROWS_ON_PRIMITIVES || BUGGY_ZERO){
      fixMethod('delete');
      fixMethod('has');
      IS_MAP && fixMethod('get');
    }
    if(BUGGY_ZERO || HASNT_CHAINING)fixMethod(ADDER);
    // weak collections should not contains .clear method
    if(IS_WEAK && proto.clear)delete proto.clear;
  }

  setToStringTag(C, NAME);

  O[NAME] = C;
  $export($export.G + $export.W + $export.F * (C != Base), O);

  if(!IS_WEAK)common.setStrong(C, NAME, IS_MAP);

  return C;
};
},{"./_an-instance":22,"./_export":48,"./_fails":50,"./_for-of":53,"./_global":54,"./_inherit-if-required":59,"./_is-object":65,"./_iter-detect":70,"./_meta":78,"./_redefine":103,"./_redefine-all":102,"./_set-to-string-tag":108}],39:[function(require,module,exports){
var core = module.exports = {version: '2.4.0'};
if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef
},{}],40:[function(require,module,exports){
'use strict';
var $defineProperty = require('./_object-dp')
  , createDesc      = require('./_property-desc');

module.exports = function(object, index, value){
  if(index in object)$defineProperty.f(object, index, createDesc(0, value));
  else object[index] = value;
};
},{"./_object-dp":83,"./_property-desc":101}],41:[function(require,module,exports){
// optional / simple context binding
var aFunction = require('./_a-function');
module.exports = function(fn, that, length){
  aFunction(fn);
  if(that === undefined)return fn;
  switch(length){
    case 1: return function(a){
      return fn.call(that, a);
    };
    case 2: return function(a, b){
      return fn.call(that, a, b);
    };
    case 3: return function(a, b, c){
      return fn.call(that, a, b, c);
    };
  }
  return function(/* ...args */){
    return fn.apply(that, arguments);
  };
};
},{"./_a-function":19}],42:[function(require,module,exports){
'use strict';
var anObject    = require('./_an-object')
  , toPrimitive = require('./_to-primitive')
  , NUMBER      = 'number';

module.exports = function(hint){
  if(hint !== 'string' && hint !== NUMBER && hint !== 'default')throw TypeError('Incorrect hint');
  return toPrimitive(anObject(this), hint != NUMBER);
};
},{"./_an-object":23,"./_to-primitive":126}],43:[function(require,module,exports){
// 7.2.1 RequireObjectCoercible(argument)
module.exports = function(it){
  if(it == undefined)throw TypeError("Can't call method on  " + it);
  return it;
};
},{}],44:[function(require,module,exports){
// Thank's IE8 for his funny defineProperty
module.exports = !require('./_fails')(function(){
  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;
});
},{"./_fails":50}],45:[function(require,module,exports){
var isObject = require('./_is-object')
  , document = require('./_global').document
  // in old IE typeof document.createElement is 'object'
  , is = isObject(document) && isObject(document.createElement);
module.exports = function(it){
  return is ? document.createElement(it) : {};
};
},{"./_global":54,"./_is-object":65}],46:[function(require,module,exports){
// IE 8- don't enum bug keys
module.exports = (
  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
).split(',');
},{}],47:[function(require,module,exports){
// all enumerable object keys, includes symbols
var getKeys = require('./_object-keys')
  , gOPS    = require('./_object-gops')
  , pIE     = require('./_object-pie');
module.exports = function(it){
  var result     = getKeys(it)
    , getSymbols = gOPS.f;
  if(getSymbols){
    var symbols = getSymbols(it)
      , isEnum  = pIE.f
      , i       = 0
      , key;
    while(symbols.length > i)if(isEnum.call(it, key = symbols[i++]))result.push(key);
  } return result;
};
},{"./_object-gops":89,"./_object-keys":92,"./_object-pie":93}],48:[function(require,module,exports){
var global    = require('./_global')
  , core      = require('./_core')
  , hide      = require('./_hide')
  , redefine  = require('./_redefine')
  , ctx       = require('./_ctx')
  , PROTOTYPE = 'prototype';

var $export = function(type, name, source){
  var IS_FORCED = type & $export.F
    , IS_GLOBAL = type & $export.G
    , IS_STATIC = type & $export.S
    , IS_PROTO  = type & $export.P
    , IS_BIND   = type & $export.B
    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE]
    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})
    , expProto  = exports[PROTOTYPE] || (exports[PROTOTYPE] = {})
    , key, own, out, exp;
  if(IS_GLOBAL)source = name;
  for(key in source){
    // contains in native
    own = !IS_FORCED && target && target[key] !== undefined;
    // export native or passed
    out = (own ? target : source)[key];
    // bind timers to global for call from export context
    exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
    // extend global
    if(target)redefine(target, key, out, type & $export.U);
    // export
    if(exports[key] != out)hide(exports, key, exp);
    if(IS_PROTO && expProto[key] != out)expProto[key] = out;
  }
};
global.core = core;
// type bitmap
$export.F = 1;   // forced
$export.G = 2;   // global
$export.S = 4;   // static
$export.P = 8;   // proto
$export.B = 16;  // bind
$export.W = 32;  // wrap
$export.U = 64;  // safe
$export.R = 128; // real proto method for `library` 
module.exports = $export;
},{"./_core":39,"./_ctx":41,"./_global":54,"./_hide":56,"./_redefine":103}],49:[function(require,module,exports){
var MATCH = require('./_wks')('match');
module.exports = function(KEY){
  var re = /./;
  try {
    '/./'[KEY](re);
  } catch(e){
    try {
      re[MATCH] = false;
      return !'/./'[KEY](re);
    } catch(f){ /* empty */ }
  } return true;
};
},{"./_wks":133}],50:[function(require,module,exports){
module.exports = function(exec){
  try {
    return !!exec();
  } catch(e){
    return true;
  }
};
},{}],51:[function(require,module,exports){
'use strict';
var hide     = require('./_hide')
  , redefine = require('./_redefine')
  , fails    = require('./_fails')
  , defined  = require('./_defined')
  , wks      = require('./_wks');

module.exports = function(KEY, length, exec){
  var SYMBOL   = wks(KEY)
    , fns      = exec(defined, SYMBOL, ''[KEY])
    , strfn    = fns[0]
    , rxfn     = fns[1];
  if(fails(function(){
    var O = {};
    O[SYMBOL] = function(){ return 7; };
    return ''[KEY](O) != 7;
  })){
    redefine(String.prototype, KEY, strfn);
    hide(RegExp.prototype, SYMBOL, length == 2
      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
      // 21.2.5.11 RegExp.prototype[@@split](string, limit)
      ? function(string, arg){ return rxfn.call(string, this, arg); }
      // 21.2.5.6 RegExp.prototype[@@match](string)
      // 21.2.5.9 RegExp.prototype[@@search](string)
      : function(string){ return rxfn.call(string, this); }
    );
  }
};
},{"./_defined":43,"./_fails":50,"./_hide":56,"./_redefine":103,"./_wks":133}],52:[function(require,module,exports){
'use strict';
// 21.2.5.3 get RegExp.prototype.flags
var anObject = require('./_an-object');
module.exports = function(){
  var that   = anObject(this)
    , result = '';
  if(that.global)     result += 'g';
  if(that.ignoreCase) result += 'i';
  if(that.multiline)  result += 'm';
  if(that.unicode)    result += 'u';
  if(that.sticky)     result += 'y';
  return result;
};
},{"./_an-object":23}],53:[function(require,module,exports){
var ctx         = require('./_ctx')
  , call        = require('./_iter-call')
  , isArrayIter = require('./_is-array-iter')
  , anObject    = require('./_an-object')
  , toLength    = require('./_to-length')
  , getIterFn   = require('./core.get-iterator-method')
  , BREAK       = {}
  , RETURN      = {};
var exports = module.exports = function(iterable, entries, fn, that, ITERATOR){
  var iterFn = ITERATOR ? function(){ return iterable; } : getIterFn(iterable)
    , f      = ctx(fn, that, entries ? 2 : 1)
    , index  = 0
    , length, step, iterator, result;
  if(typeof iterFn != 'function')throw TypeError(iterable + ' is not iterable!');
  // fast case for arrays with default iterator
  if(isArrayIter(iterFn))for(length = toLength(iterable.length); length > index; index++){
    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
    if(result === BREAK || result === RETURN)return result;
  } else for(iterator = iterFn.call(iterable); !(step = iterator.next()).done; ){
    result = call(iterator, f, step.value, entries);
    if(result === BREAK || result === RETURN)return result;
  }
};
exports.BREAK  = BREAK;
exports.RETURN = RETURN;
},{"./_an-object":23,"./_ctx":41,"./_is-array-iter":62,"./_iter-call":67,"./_to-length":124,"./core.get-iterator-method":134}],54:[function(require,module,exports){
// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var global = module.exports = typeof window != 'undefined' && window.Math == Math
  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
if(typeof __g == 'number')__g = global; // eslint-disable-line no-undef
},{}],55:[function(require,module,exports){
var hasOwnProperty = {}.hasOwnProperty;
module.exports = function(it, key){
  return hasOwnProperty.call(it, key);
};
},{}],56:[function(require,module,exports){
var dP         = require('./_object-dp')
  , createDesc = require('./_property-desc');
module.exports = require('./_descriptors') ? function(object, key, value){
  return dP.f(object, key, createDesc(1, value));
} : function(object, key, value){
  object[key] = value;
  return object;
};
},{"./_descriptors":44,"./_object-dp":83,"./_property-desc":101}],57:[function(require,module,exports){
module.exports = require('./_global').document && document.documentElement;
},{"./_global":54}],58:[function(require,module,exports){
module.exports = !require('./_descriptors') && !require('./_fails')(function(){
  return Object.defineProperty(require('./_dom-create')('div'), 'a', {get: function(){ return 7; }}).a != 7;
});
},{"./_descriptors":44,"./_dom-create":45,"./_fails":50}],59:[function(require,module,exports){
var isObject       = require('./_is-object')
  , setPrototypeOf = require('./_set-proto').set;
module.exports = function(that, target, C){
  var P, S = target.constructor;
  if(S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && isObject(P) && setPrototypeOf){
    setPrototypeOf(that, P);
  } return that;
};
},{"./_is-object":65,"./_set-proto":106}],60:[function(require,module,exports){
// fast apply, http://jsperf.lnkit.com/fast-apply/5
module.exports = function(fn, args, that){
  var un = that === undefined;
  switch(args.length){
    case 0: return un ? fn()
                      : fn.call(that);
    case 1: return un ? fn(args[0])
                      : fn.call(that, args[0]);
    case 2: return un ? fn(args[0], args[1])
                      : fn.call(that, args[0], args[1]);
    case 3: return un ? fn(args[0], args[1], args[2])
                      : fn.call(that, args[0], args[1], args[2]);
    case 4: return un ? fn(args[0], args[1], args[2], args[3])
                      : fn.call(that, args[0], args[1], args[2], args[3]);
  } return              fn.apply(that, args);
};
},{}],61:[function(require,module,exports){
// fallback for non-array-like ES3 and non-enumerable old V8 strings
var cof = require('./_cof');
module.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){
  return cof(it) == 'String' ? it.split('') : Object(it);
};
},{"./_cof":34}],62:[function(require,module,exports){
// check on default Array iterator
var Iterators  = require('./_iterators')
  , ITERATOR   = require('./_wks')('iterator')
  , ArrayProto = Array.prototype;

module.exports = function(it){
  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
};
},{"./_iterators":72,"./_wks":133}],63:[function(require,module,exports){
// 7.2.2 IsArray(argument)
var cof = require('./_cof');
module.exports = Array.isArray || function isArray(arg){
  return cof(arg) == 'Array';
};
},{"./_cof":34}],64:[function(require,module,exports){
// 20.1.2.3 Number.isInteger(number)
var isObject = require('./_is-object')
  , floor    = Math.floor;
module.exports = function isInteger(it){
  return !isObject(it) && isFinite(it) && floor(it) === it;
};
},{"./_is-object":65}],65:[function(require,module,exports){
module.exports = function(it){
  return typeof it === 'object' ? it !== null : typeof it === 'function';
};
},{}],66:[function(require,module,exports){
// 7.2.8 IsRegExp(argument)
var isObject = require('./_is-object')
  , cof      = require('./_cof')
  , MATCH    = require('./_wks')('match');
module.exports = function(it){
  var isRegExp;
  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');
};
},{"./_cof":34,"./_is-object":65,"./_wks":133}],67:[function(require,module,exports){
// call something on iterator step with safe closing on error
var anObject = require('./_an-object');
module.exports = function(iterator, fn, value, entries){
  try {
    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
  // 7.4.6 IteratorClose(iterator, completion)
  } catch(e){
    var ret = iterator['return'];
    if(ret !== undefined)anObject(ret.call(iterator));
    throw e;
  }
};
},{"./_an-object":23}],68:[function(require,module,exports){
'use strict';
var create         = require('./_object-create')
  , descriptor     = require('./_property-desc')
  , setToStringTag = require('./_set-to-string-tag')
  , IteratorPrototype = {};

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
require('./_hide')(IteratorPrototype, require('./_wks')('iterator'), function(){ return this; });

module.exports = function(Constructor, NAME, next){
  Constructor.prototype = create(IteratorPrototype, {next: descriptor(1, next)});
  setToStringTag(Constructor, NAME + ' Iterator');
};
},{"./_hide":56,"./_object-create":82,"./_property-desc":101,"./_set-to-string-tag":108,"./_wks":133}],69:[function(require,module,exports){
'use strict';
var LIBRARY        = require('./_library')
  , $export        = require('./_export')
  , redefine       = require('./_redefine')
  , hide           = require('./_hide')
  , has            = require('./_has')
  , Iterators      = require('./_iterators')
  , $iterCreate    = require('./_iter-create')
  , setToStringTag = require('./_set-to-string-tag')
  , getPrototypeOf = require('./_object-gpo')
  , ITERATOR       = require('./_wks')('iterator')
  , BUGGY          = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`
  , FF_ITERATOR    = '@@iterator'
  , KEYS           = 'keys'
  , VALUES         = 'values';

var returnThis = function(){ return this; };

module.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED){
  $iterCreate(Constructor, NAME, next);
  var getMethod = function(kind){
    if(!BUGGY && kind in proto)return proto[kind];
    switch(kind){
      case KEYS: return function keys(){ return new Constructor(this, kind); };
      case VALUES: return function values(){ return new Constructor(this, kind); };
    } return function entries(){ return new Constructor(this, kind); };
  };
  var TAG        = NAME + ' Iterator'
    , DEF_VALUES = DEFAULT == VALUES
    , VALUES_BUG = false
    , proto      = Base.prototype
    , $native    = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]
    , $default   = $native || getMethod(DEFAULT)
    , $entries   = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined
    , $anyNative = NAME == 'Array' ? proto.entries || $native : $native
    , methods, key, IteratorPrototype;
  // Fix native
  if($anyNative){
    IteratorPrototype = getPrototypeOf($anyNative.call(new Base));
    if(IteratorPrototype !== Object.prototype){
      // Set @@toStringTag to native iterators
      setToStringTag(IteratorPrototype, TAG, true);
      // fix for some old engines
      if(!LIBRARY && !has(IteratorPrototype, ITERATOR))hide(IteratorPrototype, ITERATOR, returnThis);
    }
  }
  // fix Array#{values, @@iterator}.name in V8 / FF
  if(DEF_VALUES && $native && $native.name !== VALUES){
    VALUES_BUG = true;
    $default = function values(){ return $native.call(this); };
  }
  // Define iterator
  if((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])){
    hide(proto, ITERATOR, $default);
  }
  // Plug for library
  Iterators[NAME] = $default;
  Iterators[TAG]  = returnThis;
  if(DEFAULT){
    methods = {
      values:  DEF_VALUES ? $default : getMethod(VALUES),
      keys:    IS_SET     ? $default : getMethod(KEYS),
      entries: $entries
    };
    if(FORCED)for(key in methods){
      if(!(key in proto))redefine(proto, key, methods[key]);
    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
  }
  return methods;
};
},{"./_export":48,"./_has":55,"./_hide":56,"./_iter-create":68,"./_iterators":72,"./_library":74,"./_object-gpo":90,"./_redefine":103,"./_set-to-string-tag":108,"./_wks":133}],70:[function(require,module,exports){
var ITERATOR     = require('./_wks')('iterator')
  , SAFE_CLOSING = false;

try {
  var riter = [7][ITERATOR]();
  riter['return'] = function(){ SAFE_CLOSING = true; };
  Array.from(riter, function(){ throw 2; });
} catch(e){ /* empty */ }

module.exports = function(exec, skipClosing){
  if(!skipClosing && !SAFE_CLOSING)return false;
  var safe = false;
  try {
    var arr  = [7]
      , iter = arr[ITERATOR]();
    iter.next = function(){ return {done: safe = true}; };
    arr[ITERATOR] = function(){ return iter; };
    exec(arr);
  } catch(e){ /* empty */ }
  return safe;
};
},{"./_wks":133}],71:[function(require,module,exports){
module.exports = function(done, value){
  return {value: value, done: !!done};
};
},{}],72:[function(require,module,exports){
module.exports = {};
},{}],73:[function(require,module,exports){
var getKeys   = require('./_object-keys')
  , toIObject = require('./_to-iobject');
module.exports = function(object, el){
  var O      = toIObject(object)
    , keys   = getKeys(O)
    , length = keys.length
    , index  = 0
    , key;
  while(length > index)if(O[key = keys[index++]] === el)return key;
};
},{"./_object-keys":92,"./_to-iobject":123}],74:[function(require,module,exports){
module.exports = false;
},{}],75:[function(require,module,exports){
// 20.2.2.14 Math.expm1(x)
var $expm1 = Math.expm1;
module.exports = (!$expm1
  // Old FF bug
  || $expm1(10) > 22025.465794806719 || $expm1(10) < 22025.4657948067165168
  // Tor Browser bug
  || $expm1(-2e-17) != -2e-17
) ? function expm1(x){
  return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : Math.exp(x) - 1;
} : $expm1;
},{}],76:[function(require,module,exports){
// 20.2.2.20 Math.log1p(x)
module.exports = Math.log1p || function log1p(x){
  return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : Math.log(1 + x);
};
},{}],77:[function(require,module,exports){
// 20.2.2.28 Math.sign(x)
module.exports = Math.sign || function sign(x){
  return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
};
},{}],78:[function(require,module,exports){
var META     = require('./_uid')('meta')
  , isObject = require('./_is-object')
  , has      = require('./_has')
  , setDesc  = require('./_object-dp').f
  , id       = 0;
var isExtensible = Object.isExtensible || function(){
  return true;
};
var FREEZE = !require('./_fails')(function(){
  return isExtensible(Object.preventExtensions({}));
});
var setMeta = function(it){
  setDesc(it, META, {value: {
    i: 'O' + ++id, // object ID
    w: {}          // weak collections IDs
  }});
};
var fastKey = function(it, create){
  // return primitive with prefix
  if(!isObject(it))return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
  if(!has(it, META)){
    // can't set metadata to uncaught frozen object
    if(!isExtensible(it))return 'F';
    // not necessary to add metadata
    if(!create)return 'E';
    // add missing metadata
    setMeta(it);
  // return object ID
  } return it[META].i;
};
var getWeak = function(it, create){
  if(!has(it, META)){
    // can't set metadata to uncaught frozen object
    if(!isExtensible(it))return true;
    // not necessary to add metadata
    if(!create)return false;
    // add missing metadata
    setMeta(it);
  // return hash weak collections IDs
  } return it[META].w;
};
// add metadata on freeze-family methods calling
var onFreeze = function(it){
  if(FREEZE && meta.NEED && isExtensible(it) && !has(it, META))setMeta(it);
  return it;
};
var meta = module.exports = {
  KEY:      META,
  NEED:     false,
  fastKey:  fastKey,
  getWeak:  getWeak,
  onFreeze: onFreeze
};
},{"./_fails":50,"./_has":55,"./_is-object":65,"./_object-dp":83,"./_uid":130}],79:[function(require,module,exports){
var Map     = require('./es6.map')
  , $export = require('./_export')
  , shared  = require('./_shared')('metadata')
  , store   = shared.store || (shared.store = new (require('./es6.weak-map')));

var getOrCreateMetadataMap = function(target, targetKey, create){
  var targetMetadata = store.get(target);
  if(!targetMetadata){
    if(!create)return undefined;
    store.set(target, targetMetadata = new Map);
  }
  var keyMetadata = targetMetadata.get(targetKey);
  if(!keyMetadata){
    if(!create)return undefined;
    targetMetadata.set(targetKey, keyMetadata = new Map);
  } return keyMetadata;
};
var ordinaryHasOwnMetadata = function(MetadataKey, O, P){
  var metadataMap = getOrCreateMetadataMap(O, P, false);
  return metadataMap === undefined ? false : metadataMap.has(MetadataKey);
};
var ordinaryGetOwnMetadata = function(MetadataKey, O, P){
  var metadataMap = getOrCreateMetadataMap(O, P, false);
  return metadataMap === undefined ? undefined : metadataMap.get(MetadataKey);
};
var ordinaryDefineOwnMetadata = function(MetadataKey, MetadataValue, O, P){
  getOrCreateMetadataMap(O, P, true).set(MetadataKey, MetadataValue);
};
var ordinaryOwnMetadataKeys = function(target, targetKey){
  var metadataMap = getOrCreateMetadataMap(target, targetKey, false)
    , keys        = [];
  if(metadataMap)metadataMap.forEach(function(_, key){ keys.push(key); });
  return keys;
};
var toMetaKey = function(it){
  return it === undefined || typeof it == 'symbol' ? it : String(it);
};
var exp = function(O){
  $export($export.S, 'Reflect', O);
};

module.exports = {
  store: store,
  map: getOrCreateMetadataMap,
  has: ordinaryHasOwnMetadata,
  get: ordinaryGetOwnMetadata,
  set: ordinaryDefineOwnMetadata,
  keys: ordinaryOwnMetadataKeys,
  key: toMetaKey,
  exp: exp
};
},{"./_export":48,"./_shared":110,"./es6.map":165,"./es6.weak-map":271}],80:[function(require,module,exports){
var global    = require('./_global')
  , macrotask = require('./_task').set
  , Observer  = global.MutationObserver || global.WebKitMutationObserver
  , process   = global.process
  , Promise   = global.Promise
  , isNode    = require('./_cof')(process) == 'process';

module.exports = function(){
  var head, last, notify;

  var flush = function(){
    var parent, fn;
    if(isNode && (parent = process.domain))parent.exit();
    while(head){
      fn   = head.fn;
      head = head.next;
      try {
        fn();
      } catch(e){
        if(head)notify();
        else last = undefined;
        throw e;
      }
    } last = undefined;
    if(parent)parent.enter();
  };

  // Node.js
  if(isNode){
    notify = function(){
      process.nextTick(flush);
    };
  // browsers with MutationObserver
  } else if(Observer){
    var toggle = true
      , node   = document.createTextNode('');
    new Observer(flush).observe(node, {characterData: true}); // eslint-disable-line no-new
    notify = function(){
      node.data = toggle = !toggle;
    };
  // environments with maybe non-completely correct, but existent Promise
  } else if(Promise && Promise.resolve){
    var promise = Promise.resolve();
    notify = function(){
      promise.then(flush);
    };
  // for other environments - macrotask based on:
  // - setImmediate
  // - MessageChannel
  // - window.postMessag
  // - onreadystatechange
  // - setTimeout
  } else {
    notify = function(){
      // strange IE + webpack dev server bug - use .call(global)
      macrotask.call(global, flush);
    };
  }

  return function(fn){
    var task = {fn: fn, next: undefined};
    if(last)last.next = task;
    if(!head){
      head = task;
      notify();
    } last = task;
  };
};
},{"./_cof":34,"./_global":54,"./_task":120}],81:[function(require,module,exports){
'use strict';
// 19.1.2.1 Object.assign(target, source, ...)
var getKeys  = require('./_object-keys')
  , gOPS     = require('./_object-gops')
  , pIE      = require('./_object-pie')
  , toObject = require('./_to-object')
  , IObject  = require('./_iobject')
  , $assign  = Object.assign;

// should work with symbols and should have deterministic property order (V8 bug)
module.exports = !$assign || require('./_fails')(function(){
  var A = {}
    , B = {}
    , S = Symbol()
    , K = 'abcdefghijklmnopqrst';
  A[S] = 7;
  K.split('').forEach(function(k){ B[k] = k; });
  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
}) ? function assign(target, source){ // eslint-disable-line no-unused-vars
  var T     = toObject(target)
    , aLen  = arguments.length
    , index = 1
    , getSymbols = gOPS.f
    , isEnum     = pIE.f;
  while(aLen > index){
    var S      = IObject(arguments[index++])
      , keys   = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S)
      , length = keys.length
      , j      = 0
      , key;
    while(length > j)if(isEnum.call(S, key = keys[j++]))T[key] = S[key];
  } return T;
} : $assign;
},{"./_fails":50,"./_iobject":61,"./_object-gops":89,"./_object-keys":92,"./_object-pie":93,"./_to-object":125}],82:[function(require,module,exports){
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
var anObject    = require('./_an-object')
  , dPs         = require('./_object-dps')
  , enumBugKeys = require('./_enum-bug-keys')
  , IE_PROTO    = require('./_shared-key')('IE_PROTO')
  , Empty       = function(){ /* empty */ }
  , PROTOTYPE   = 'prototype';

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var createDict = function(){
  // Thrash, waste and sodomy: IE GC bug
  var iframe = require('./_dom-create')('iframe')
    , i      = enumBugKeys.length
    , lt     = '<'
    , gt     = '>'
    , iframeDocument;
  iframe.style.display = 'none';
  require('./_html').appendChild(iframe);
  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
  // createDict = iframe.contentWindow.Object;
  // html.removeChild(iframe);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
  iframeDocument.close();
  createDict = iframeDocument.F;
  while(i--)delete createDict[PROTOTYPE][enumBugKeys[i]];
  return createDict();
};

module.exports = Object.create || function create(O, Properties){
  var result;
  if(O !== null){
    Empty[PROTOTYPE] = anObject(O);
    result = new Empty;
    Empty[PROTOTYPE] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO] = O;
  } else result = createDict();
  return Properties === undefined ? result : dPs(result, Properties);
};

},{"./_an-object":23,"./_dom-create":45,"./_enum-bug-keys":46,"./_html":57,"./_object-dps":84,"./_shared-key":109}],83:[function(require,module,exports){
var anObject       = require('./_an-object')
  , IE8_DOM_DEFINE = require('./_ie8-dom-define')
  , toPrimitive    = require('./_to-primitive')
  , dP             = Object.defineProperty;

exports.f = require('./_descriptors') ? Object.defineProperty : function defineProperty(O, P, Attributes){
  anObject(O);
  P = toPrimitive(P, true);
  anObject(Attributes);
  if(IE8_DOM_DEFINE)try {
    return dP(O, P, Attributes);
  } catch(e){ /* empty */ }
  if('get' in Attributes || 'set' in Attributes)throw TypeError('Accessors not supported!');
  if('value' in Attributes)O[P] = Attributes.value;
  return O;
};
},{"./_an-object":23,"./_descriptors":44,"./_ie8-dom-define":58,"./_to-primitive":126}],84:[function(require,module,exports){
var dP       = require('./_object-dp')
  , anObject = require('./_an-object')
  , getKeys  = require('./_object-keys');

module.exports = require('./_descriptors') ? Object.defineProperties : function defineProperties(O, Properties){
  anObject(O);
  var keys   = getKeys(Properties)
    , length = keys.length
    , i = 0
    , P;
  while(length > i)dP.f(O, P = keys[i++], Properties[P]);
  return O;
};
},{"./_an-object":23,"./_descriptors":44,"./_object-dp":83,"./_object-keys":92}],85:[function(require,module,exports){
// Forced replacement prototype accessors methods
module.exports = require('./_library')|| !require('./_fails')(function(){
  var K = Math.random();
  // In FF throws only define methods
  __defineSetter__.call(null, K, function(){ /* empty */});
  delete require('./_global')[K];
});
},{"./_fails":50,"./_global":54,"./_library":74}],86:[function(require,module,exports){
var pIE            = require('./_object-pie')
  , createDesc     = require('./_property-desc')
  , toIObject      = require('./_to-iobject')
  , toPrimitive    = require('./_to-primitive')
  , has            = require('./_has')
  , IE8_DOM_DEFINE = require('./_ie8-dom-define')
  , gOPD           = Object.getOwnPropertyDescriptor;

exports.f = require('./_descriptors') ? gOPD : function getOwnPropertyDescriptor(O, P){
  O = toIObject(O);
  P = toPrimitive(P, true);
  if(IE8_DOM_DEFINE)try {
    return gOPD(O, P);
  } catch(e){ /* empty */ }
  if(has(O, P))return createDesc(!pIE.f.call(O, P), O[P]);
};
},{"./_descriptors":44,"./_has":55,"./_ie8-dom-define":58,"./_object-pie":93,"./_property-desc":101,"./_to-iobject":123,"./_to-primitive":126}],87:[function(require,module,exports){
// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
var toIObject = require('./_to-iobject')
  , gOPN      = require('./_object-gopn').f
  , toString  = {}.toString;

var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
  ? Object.getOwnPropertyNames(window) : [];

var getWindowNames = function(it){
  try {
    return gOPN(it);
  } catch(e){
    return windowNames.slice();
  }
};

module.exports.f = function getOwnPropertyNames(it){
  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
};

},{"./_object-gopn":88,"./_to-iobject":123}],88:[function(require,module,exports){
// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
var $keys      = require('./_object-keys-internal')
  , hiddenKeys = require('./_enum-bug-keys').concat('length', 'prototype');

exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O){
  return $keys(O, hiddenKeys);
};
},{"./_enum-bug-keys":46,"./_object-keys-internal":91}],89:[function(require,module,exports){
exports.f = Object.getOwnPropertySymbols;
},{}],90:[function(require,module,exports){
// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
var has         = require('./_has')
  , toObject    = require('./_to-object')
  , IE_PROTO    = require('./_shared-key')('IE_PROTO')
  , ObjectProto = Object.prototype;

module.exports = Object.getPrototypeOf || function(O){
  O = toObject(O);
  if(has(O, IE_PROTO))return O[IE_PROTO];
  if(typeof O.constructor == 'function' && O instanceof O.constructor){
    return O.constructor.prototype;
  } return O instanceof Object ? ObjectProto : null;
};
},{"./_has":55,"./_shared-key":109,"./_to-object":125}],91:[function(require,module,exports){
var has          = require('./_has')
  , toIObject    = require('./_to-iobject')
  , arrayIndexOf = require('./_array-includes')(false)
  , IE_PROTO     = require('./_shared-key')('IE_PROTO');

module.exports = function(object, names){
  var O      = toIObject(object)
    , i      = 0
    , result = []
    , key;
  for(key in O)if(key != IE_PROTO)has(O, key) && result.push(key);
  // Don't enum bug & hidden keys
  while(names.length > i)if(has(O, key = names[i++])){
    ~arrayIndexOf(result, key) || result.push(key);
  }
  return result;
};
},{"./_array-includes":27,"./_has":55,"./_shared-key":109,"./_to-iobject":123}],92:[function(require,module,exports){
// 19.1.2.14 / 15.2.3.14 Object.keys(O)
var $keys       = require('./_object-keys-internal')
  , enumBugKeys = require('./_enum-bug-keys');

module.exports = Object.keys || function keys(O){
  return $keys(O, enumBugKeys);
};
},{"./_enum-bug-keys":46,"./_object-keys-internal":91}],93:[function(require,module,exports){
exports.f = {}.propertyIsEnumerable;
},{}],94:[function(require,module,exports){
// most Object methods by ES6 should accept primitives
var $export = require('./_export')
  , core    = require('./_core')
  , fails   = require('./_fails');
module.exports = function(KEY, exec){
  var fn  = (core.Object || {})[KEY] || Object[KEY]
    , exp = {};
  exp[KEY] = exec(fn);
  $export($export.S + $export.F * fails(function(){ fn(1); }), 'Object', exp);
};
},{"./_core":39,"./_export":48,"./_fails":50}],95:[function(require,module,exports){
var getKeys   = require('./_object-keys')
  , toIObject = require('./_to-iobject')
  , isEnum    = require('./_object-pie').f;
module.exports = function(isEntries){
  return function(it){
    var O      = toIObject(it)
      , keys   = getKeys(O)
      , length = keys.length
      , i      = 0
      , result = []
      , key;
    while(length > i)if(isEnum.call(O, key = keys[i++])){
      result.push(isEntries ? [key, O[key]] : O[key]);
    } return result;
  };
};
},{"./_object-keys":92,"./_object-pie":93,"./_to-iobject":123}],96:[function(require,module,exports){
// all object keys, includes non-enumerable and symbols
var gOPN     = require('./_object-gopn')
  , gOPS     = require('./_object-gops')
  , anObject = require('./_an-object')
  , Reflect  = require('./_global').Reflect;
module.exports = Reflect && Reflect.ownKeys || function ownKeys(it){
  var keys       = gOPN.f(anObject(it))
    , getSymbols = gOPS.f;
  return getSymbols ? keys.concat(getSymbols(it)) : keys;
};
},{"./_an-object":23,"./_global":54,"./_object-gopn":88,"./_object-gops":89}],97:[function(require,module,exports){
var $parseFloat = require('./_global').parseFloat
  , $trim       = require('./_string-trim').trim;

module.exports = 1 / $parseFloat(require('./_string-ws') + '-0') !== -Infinity ? function parseFloat(str){
  var string = $trim(String(str), 3)
    , result = $parseFloat(string);
  return result === 0 && string.charAt(0) == '-' ? -0 : result;
} : $parseFloat;
},{"./_global":54,"./_string-trim":118,"./_string-ws":119}],98:[function(require,module,exports){
var $parseInt = require('./_global').parseInt
  , $trim     = require('./_string-trim').trim
  , ws        = require('./_string-ws')
  , hex       = /^[\-+]?0[xX]/;

module.exports = $parseInt(ws + '08') !== 8 || $parseInt(ws + '0x16') !== 22 ? function parseInt(str, radix){
  var string = $trim(String(str), 3);
  return $parseInt(string, (radix >>> 0) || (hex.test(string) ? 16 : 10));
} : $parseInt;
},{"./_global":54,"./_string-trim":118,"./_string-ws":119}],99:[function(require,module,exports){
'use strict';
var path      = require('./_path')
  , invoke    = require('./_invoke')
  , aFunction = require('./_a-function');
module.exports = function(/* ...pargs */){
  var fn     = aFunction(this)
    , length = arguments.length
    , pargs  = Array(length)
    , i      = 0
    , _      = path._
    , holder = false;
  while(length > i)if((pargs[i] = arguments[i++]) === _)holder = true;
  return function(/* ...args */){
    var that = this
      , aLen = arguments.length
      , j = 0, k = 0, args;
    if(!holder && !aLen)return invoke(fn, pargs, that);
    args = pargs.slice();
    if(holder)for(;length > j; j++)if(args[j] === _)args[j] = arguments[k++];
    while(aLen > k)args.push(arguments[k++]);
    return invoke(fn, args, that);
  };
};
},{"./_a-function":19,"./_invoke":60,"./_path":100}],100:[function(require,module,exports){
module.exports = require('./_global');
},{"./_global":54}],101:[function(require,module,exports){
module.exports = function(bitmap, value){
  return {
    enumerable  : !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable    : !(bitmap & 4),
    value       : value
  };
};
},{}],102:[function(require,module,exports){
var redefine = require('./_redefine');
module.exports = function(target, src, safe){
  for(var key in src)redefine(target, key, src[key], safe);
  return target;
};
},{"./_redefine":103}],103:[function(require,module,exports){
var global    = require('./_global')
  , hide      = require('./_hide')
  , has       = require('./_has')
  , SRC       = require('./_uid')('src')
  , TO_STRING = 'toString'
  , $toString = Function[TO_STRING]
  , TPL       = ('' + $toString).split(TO_STRING);

require('./_core').inspectSource = function(it){
  return $toString.call(it);
};

(module.exports = function(O, key, val, safe){
  var isFunction = typeof val == 'function';
  if(isFunction)has(val, 'name') || hide(val, 'name', key);
  if(O[key] === val)return;
  if(isFunction)has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));
  if(O === global){
    O[key] = val;
  } else {
    if(!safe){
      delete O[key];
      hide(O, key, val);
    } else {
      if(O[key])O[key] = val;
      else hide(O, key, val);
    }
  }
// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
})(Function.prototype, TO_STRING, function toString(){
  return typeof this == 'function' && this[SRC] || $toString.call(this);
});
},{"./_core":39,"./_global":54,"./_has":55,"./_hide":56,"./_uid":130}],104:[function(require,module,exports){
module.exports = function(regExp, replace){
  var replacer = replace === Object(replace) ? function(part){
    return replace[part];
  } : replace;
  return function(it){
    return String(it).replace(regExp, replacer);
  };
};
},{}],105:[function(require,module,exports){
// 7.2.9 SameValue(x, y)
module.exports = Object.is || function is(x, y){
  return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
};
},{}],106:[function(require,module,exports){
// Works with __proto__ only. Old v8 can't work with null proto objects.
/* eslint-disable no-proto */
var isObject = require('./_is-object')
  , anObject = require('./_an-object');
var check = function(O, proto){
  anObject(O);
  if(!isObject(proto) && proto !== null)throw TypeError(proto + ": can't set as prototype!");
};
module.exports = {
  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
    function(test, buggy, set){
      try {
        set = require('./_ctx')(Function.call, require('./_object-gopd').f(Object.prototype, '__proto__').set, 2);
        set(test, []);
        buggy = !(test instanceof Array);
      } catch(e){ buggy = true; }
      return function setPrototypeOf(O, proto){
        check(O, proto);
        if(buggy)O.__proto__ = proto;
        else set(O, proto);
        return O;
      };
    }({}, false) : undefined),
  check: check
};
},{"./_an-object":23,"./_ctx":41,"./_is-object":65,"./_object-gopd":86}],107:[function(require,module,exports){
'use strict';
var global      = require('./_global')
  , dP          = require('./_object-dp')
  , DESCRIPTORS = require('./_descriptors')
  , SPECIES     = require('./_wks')('species');

module.exports = function(KEY){
  var C = global[KEY];
  if(DESCRIPTORS && C && !C[SPECIES])dP.f(C, SPECIES, {
    configurable: true,
    get: function(){ return this; }
  });
};
},{"./_descriptors":44,"./_global":54,"./_object-dp":83,"./_wks":133}],108:[function(require,module,exports){
var def = require('./_object-dp').f
  , has = require('./_has')
  , TAG = require('./_wks')('toStringTag');

module.exports = function(it, tag, stat){
  if(it && !has(it = stat ? it : it.prototype, TAG))def(it, TAG, {configurable: true, value: tag});
};
},{"./_has":55,"./_object-dp":83,"./_wks":133}],109:[function(require,module,exports){
var shared = require('./_shared')('keys')
  , uid    = require('./_uid');
module.exports = function(key){
  return shared[key] || (shared[key] = uid(key));
};
},{"./_shared":110,"./_uid":130}],110:[function(require,module,exports){
var global = require('./_global')
  , SHARED = '__core-js_shared__'
  , store  = global[SHARED] || (global[SHARED] = {});
module.exports = function(key){
  return store[key] || (store[key] = {});
};
},{"./_global":54}],111:[function(require,module,exports){
// 7.3.20 SpeciesConstructor(O, defaultConstructor)
var anObject  = require('./_an-object')
  , aFunction = require('./_a-function')
  , SPECIES   = require('./_wks')('species');
module.exports = function(O, D){
  var C = anObject(O).constructor, S;
  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
};
},{"./_a-function":19,"./_an-object":23,"./_wks":133}],112:[function(require,module,exports){
var fails = require('./_fails');

module.exports = function(method, arg){
  return !!method && fails(function(){
    arg ? method.call(null, function(){}, 1) : method.call(null);
  });
};
},{"./_fails":50}],113:[function(require,module,exports){
var toInteger = require('./_to-integer')
  , defined   = require('./_defined');
// true  -> String#at
// false -> String#codePointAt
module.exports = function(TO_STRING){
  return function(that, pos){
    var s = String(defined(that))
      , i = toInteger(pos)
      , l = s.length
      , a, b;
    if(i < 0 || i >= l)return TO_STRING ? '' : undefined;
    a = s.charCodeAt(i);
    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
      ? TO_STRING ? s.charAt(i) : a
      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
  };
};
},{"./_defined":43,"./_to-integer":122}],114:[function(require,module,exports){
// helper for String#{startsWith, endsWith, includes}
var isRegExp = require('./_is-regexp')
  , defined  = require('./_defined');

module.exports = function(that, searchString, NAME){
  if(isRegExp(searchString))throw TypeError('String#' + NAME + " doesn't accept regex!");
  return String(defined(that));
};
},{"./_defined":43,"./_is-regexp":66}],115:[function(require,module,exports){
var $export = require('./_export')
  , fails   = require('./_fails')
  , defined = require('./_defined')
  , quot    = /"/g;
// B.2.3.2.1 CreateHTML(string, tag, attribute, value)
var createHTML = function(string, tag, attribute, value) {
  var S  = String(defined(string))
    , p1 = '<' + tag;
  if(attribute !== '')p1 += ' ' + attribute + '="' + String(value).replace(quot, '&quot;') + '"';
  return p1 + '>' + S + '</' + tag + '>';
};
module.exports = function(NAME, exec){
  var O = {};
  O[NAME] = exec(createHTML);
  $export($export.P + $export.F * fails(function(){
    var test = ''[NAME]('"');
    return test !== test.toLowerCase() || test.split('"').length > 3;
  }), 'String', O);
};
},{"./_defined":43,"./_export":48,"./_fails":50}],116:[function(require,module,exports){
// https://github.com/tc39/proposal-string-pad-start-end
var toLength = require('./_to-length')
  , repeat   = require('./_string-repeat')
  , defined  = require('./_defined');

module.exports = function(that, maxLength, fillString, left){
  var S            = String(defined(that))
    , stringLength = S.length
    , fillStr      = fillString === undefined ? ' ' : String(fillString)
    , intMaxLength = toLength(maxLength);
  if(intMaxLength <= stringLength || fillStr == '')return S;
  var fillLen = intMaxLength - stringLength
    , stringFiller = repeat.call(fillStr, Math.ceil(fillLen / fillStr.length));
  if(stringFiller.length > fillLen)stringFiller = stringFiller.slice(0, fillLen);
  return left ? stringFiller + S : S + stringFiller;
};

},{"./_defined":43,"./_string-repeat":117,"./_to-length":124}],117:[function(require,module,exports){
'use strict';
var toInteger = require('./_to-integer')
  , defined   = require('./_defined');

module.exports = function repeat(count){
  var str = String(defined(this))
    , res = ''
    , n   = toInteger(count);
  if(n < 0 || n == Infinity)throw RangeError("Count can't be negative");
  for(;n > 0; (n >>>= 1) && (str += str))if(n & 1)res += str;
  return res;
};
},{"./_defined":43,"./_to-integer":122}],118:[function(require,module,exports){
var $export = require('./_export')
  , defined = require('./_defined')
  , fails   = require('./_fails')
  , spaces  = require('./_string-ws')
  , space   = '[' + spaces + ']'
  , non     = '\u200b\u0085'
  , ltrim   = RegExp('^' + space + space + '*')
  , rtrim   = RegExp(space + space + '*$');

var exporter = function(KEY, exec, ALIAS){
  var exp   = {};
  var FORCE = fails(function(){
    return !!spaces[KEY]() || non[KEY]() != non;
  });
  var fn = exp[KEY] = FORCE ? exec(trim) : spaces[KEY];
  if(ALIAS)exp[ALIAS] = fn;
  $export($export.P + $export.F * FORCE, 'String', exp);
};

// 1 -> String#trimLeft
// 2 -> String#trimRight
// 3 -> String#trim
var trim = exporter.trim = function(string, TYPE){
  string = String(defined(string));
  if(TYPE & 1)string = string.replace(ltrim, '');
  if(TYPE & 2)string = string.replace(rtrim, '');
  return string;
};

module.exports = exporter;
},{"./_defined":43,"./_export":48,"./_fails":50,"./_string-ws":119}],119:[function(require,module,exports){
module.exports = '\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003' +
  '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';
},{}],120:[function(require,module,exports){
var ctx                = require('./_ctx')
  , invoke             = require('./_invoke')
  , html               = require('./_html')
  , cel                = require('./_dom-create')
  , global             = require('./_global')
  , process            = global.process
  , setTask            = global.setImmediate
  , clearTask          = global.clearImmediate
  , MessageChannel     = global.MessageChannel
  , counter            = 0
  , queue              = {}
  , ONREADYSTATECHANGE = 'onreadystatechange'
  , defer, channel, port;
var run = function(){
  var id = +this;
  if(queue.hasOwnProperty(id)){
    var fn = queue[id];
    delete queue[id];
    fn();
  }
};
var listener = function(event){
  run.call(event.data);
};
// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
if(!setTask || !clearTask){
  setTask = function setImmediate(fn){
    var args = [], i = 1;
    while(arguments.length > i)args.push(arguments[i++]);
    queue[++counter] = function(){
      invoke(typeof fn == 'function' ? fn : Function(fn), args);
    };
    defer(counter);
    return counter;
  };
  clearTask = function clearImmediate(id){
    delete queue[id];
  };
  // Node.js 0.8-
  if(require('./_cof')(process) == 'process'){
    defer = function(id){
      process.nextTick(ctx(run, id, 1));
    };
  // Browsers with MessageChannel, includes WebWorkers
  } else if(MessageChannel){
    channel = new MessageChannel;
    port    = channel.port2;
    channel.port1.onmessage = listener;
    defer = ctx(port.postMessage, port, 1);
  // Browsers with postMessage, skip WebWorkers
  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
  } else if(global.addEventListener && typeof postMessage == 'function' && !global.importScripts){
    defer = function(id){
      global.postMessage(id + '', '*');
    };
    global.addEventListener('message', listener, false);
  // IE8-
  } else if(ONREADYSTATECHANGE in cel('script')){
    defer = function(id){
      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function(){
        html.removeChild(this);
        run.call(id);
      };
    };
  // Rest old browsers
  } else {
    defer = function(id){
      setTimeout(ctx(run, id, 1), 0);
    };
  }
}
module.exports = {
  set:   setTask,
  clear: clearTask
};
},{"./_cof":34,"./_ctx":41,"./_dom-create":45,"./_global":54,"./_html":57,"./_invoke":60}],121:[function(require,module,exports){
var toInteger = require('./_to-integer')
  , max       = Math.max
  , min       = Math.min;
module.exports = function(index, length){
  index = toInteger(index);
  return index < 0 ? max(index + length, 0) : min(index, length);
};
},{"./_to-integer":122}],122:[function(require,module,exports){
// 7.1.4 ToInteger
var ceil  = Math.ceil
  , floor = Math.floor;
module.exports = function(it){
  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
};
},{}],123:[function(require,module,exports){
// to indexed object, toObject with fallback for non-array-like ES3 strings
var IObject = require('./_iobject')
  , defined = require('./_defined');
module.exports = function(it){
  return IObject(defined(it));
};
},{"./_defined":43,"./_iobject":61}],124:[function(require,module,exports){
// 7.1.15 ToLength
var toInteger = require('./_to-integer')
  , min       = Math.min;
module.exports = function(it){
  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
};
},{"./_to-integer":122}],125:[function(require,module,exports){
// 7.1.13 ToObject(argument)
var defined = require('./_defined');
module.exports = function(it){
  return Object(defined(it));
};
},{"./_defined":43}],126:[function(require,module,exports){
// 7.1.1 ToPrimitive(input [, PreferredType])
var isObject = require('./_is-object');
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
module.exports = function(it, S){
  if(!isObject(it))return it;
  var fn, val;
  if(S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
  if(typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it)))return val;
  if(!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
  throw TypeError("Can't convert object to primitive value");
};
},{"./_is-object":65}],127:[function(require,module,exports){
'use strict';
if(require('./_descriptors')){
  var LIBRARY             = require('./_library')
    , global              = require('./_global')
    , fails               = require('./_fails')
    , $export             = require('./_export')
    , $typed              = require('./_typed')
    , $buffer             = require('./_typed-buffer')
    , ctx                 = require('./_ctx')
    , anInstance          = require('./_an-instance')
    , propertyDesc        = require('./_property-desc')
    , hide                = require('./_hide')
    , redefineAll         = require('./_redefine-all')
    , toInteger           = require('./_to-integer')
    , toLength            = require('./_to-length')
    , toIndex             = require('./_to-index')
    , toPrimitive         = require('./_to-primitive')
    , has                 = require('./_has')
    , same                = require('./_same-value')
    , classof             = require('./_classof')
    , isObject            = require('./_is-object')
    , toObject            = require('./_to-object')
    , isArrayIter         = require('./_is-array-iter')
    , create              = require('./_object-create')
    , getPrototypeOf      = require('./_object-gpo')
    , gOPN                = require('./_object-gopn').f
    , getIterFn           = require('./core.get-iterator-method')
    , uid                 = require('./_uid')
    , wks                 = require('./_wks')
    , createArrayMethod   = require('./_array-methods')
    , createArrayIncludes = require('./_array-includes')
    , speciesConstructor  = require('./_species-constructor')
    , ArrayIterators      = require('./es6.array.iterator')
    , Iterators           = require('./_iterators')
    , $iterDetect         = require('./_iter-detect')
    , setSpecies          = require('./_set-species')
    , arrayFill           = require('./_array-fill')
    , arrayCopyWithin     = require('./_array-copy-within')
    , $DP                 = require('./_object-dp')
    , $GOPD               = require('./_object-gopd')
    , dP                  = $DP.f
    , gOPD                = $GOPD.f
    , RangeError          = global.RangeError
    , TypeError           = global.TypeError
    , Uint8Array          = global.Uint8Array
    , ARRAY_BUFFER        = 'ArrayBuffer'
    , SHARED_BUFFER       = 'Shared' + ARRAY_BUFFER
    , BYTES_PER_ELEMENT   = 'BYTES_PER_ELEMENT'
    , PROTOTYPE           = 'prototype'
    , ArrayProto          = Array[PROTOTYPE]
    , $ArrayBuffer        = $buffer.ArrayBuffer
    , $DataView           = $buffer.DataView
    , arrayForEach        = createArrayMethod(0)
    , arrayFilter         = createArrayMethod(2)
    , arraySome           = createArrayMethod(3)
    , arrayEvery          = createArrayMethod(4)
    , arrayFind           = createArrayMethod(5)
    , arrayFindIndex      = createArrayMethod(6)
    , arrayIncludes       = createArrayIncludes(true)
    , arrayIndexOf        = createArrayIncludes(false)
    , arrayValues         = ArrayIterators.values
    , arrayKeys           = ArrayIterators.keys
    , arrayEntries        = ArrayIterators.entries
    , arrayLastIndexOf    = ArrayProto.lastIndexOf
    , arrayReduce         = ArrayProto.reduce
    , arrayReduceRight    = ArrayProto.reduceRight
    , arrayJoin           = ArrayProto.join
    , arraySort           = ArrayProto.sort
    , arraySlice          = ArrayProto.slice
    , arrayToString       = ArrayProto.toString
    , arrayToLocaleString = ArrayProto.toLocaleString
    , ITERATOR            = wks('iterator')
    , TAG                 = wks('toStringTag')
    , TYPED_CONSTRUCTOR   = uid('typed_constructor')
    , DEF_CONSTRUCTOR     = uid('def_constructor')
    , ALL_CONSTRUCTORS    = $typed.CONSTR
    , TYPED_ARRAY         = $typed.TYPED
    , VIEW                = $typed.VIEW
    , WRONG_LENGTH        = 'Wrong length!';

  var $map = createArrayMethod(1, function(O, length){
    return allocate(speciesConstructor(O, O[DEF_CONSTRUCTOR]), length);
  });

  var LITTLE_ENDIAN = fails(function(){
    return new Uint8Array(new Uint16Array([1]).buffer)[0] === 1;
  });

  var FORCED_SET = !!Uint8Array && !!Uint8Array[PROTOTYPE].set && fails(function(){
    new Uint8Array(1).set({});
  });

  var strictToLength = function(it, SAME){
    if(it === undefined)throw TypeError(WRONG_LENGTH);
    var number = +it
      , length = toLength(it);
    if(SAME && !same(number, length))throw RangeError(WRONG_LENGTH);
    return length;
  };

  var toOffset = function(it, BYTES){
    var offset = toInteger(it);
    if(offset < 0 || offset % BYTES)throw RangeError('Wrong offset!');
    return offset;
  };

  var validate = function(it){
    if(isObject(it) && TYPED_ARRAY in it)return it;
    throw TypeError(it + ' is not a typed array!');
  };

  var allocate = function(C, length){
    if(!(isObject(C) && TYPED_CONSTRUCTOR in C)){
      throw TypeError('It is not a typed array constructor!');
    } return new C(length);
  };

  var speciesFromList = function(O, list){
    return fromList(speciesConstructor(O, O[DEF_CONSTRUCTOR]), list);
  };

  var fromList = function(C, list){
    var index  = 0
      , length = list.length
      , result = allocate(C, length);
    while(length > index)result[index] = list[index++];
    return result;
  };

  var addGetter = function(it, key, internal){
    dP(it, key, {get: function(){ return this._d[internal]; }});
  };

  var $from = function from(source /*, mapfn, thisArg */){
    var O       = toObject(source)
      , aLen    = arguments.length
      , mapfn   = aLen > 1 ? arguments[1] : undefined
      , mapping = mapfn !== undefined
      , iterFn  = getIterFn(O)
      , i, length, values, result, step, iterator;
    if(iterFn != undefined && !isArrayIter(iterFn)){
      for(iterator = iterFn.call(O), values = [], i = 0; !(step = iterator.next()).done; i++){
        values.push(step.value);
      } O = values;
    }
    if(mapping && aLen > 2)mapfn = ctx(mapfn, arguments[2], 2);
    for(i = 0, length = toLength(O.length), result = allocate(this, length); length > i; i++){
      result[i] = mapping ? mapfn(O[i], i) : O[i];
    }
    return result;
  };

  var $of = function of(/*...items*/){
    var index  = 0
      , length = arguments.length
      , result = allocate(this, length);
    while(length > index)result[index] = arguments[index++];
    return result;
  };

  // iOS Safari 6.x fails here
  var TO_LOCALE_BUG = !!Uint8Array && fails(function(){ arrayToLocaleString.call(new Uint8Array(1)); });

  var $toLocaleString = function toLocaleString(){
    return arrayToLocaleString.apply(TO_LOCALE_BUG ? arraySlice.call(validate(this)) : validate(this), arguments);
  };

  var proto = {
    copyWithin: function copyWithin(target, start /*, end */){
      return arrayCopyWithin.call(validate(this), target, start, arguments.length > 2 ? arguments[2] : undefined);
    },
    every: function every(callbackfn /*, thisArg */){
      return arrayEvery(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    fill: function fill(value /*, start, end */){ // eslint-disable-line no-unused-vars
      return arrayFill.apply(validate(this), arguments);
    },
    filter: function filter(callbackfn /*, thisArg */){
      return speciesFromList(this, arrayFilter(validate(this), callbackfn,
        arguments.length > 1 ? arguments[1] : undefined));
    },
    find: function find(predicate /*, thisArg */){
      return arrayFind(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
    },
    findIndex: function findIndex(predicate /*, thisArg */){
      return arrayFindIndex(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
    },
    forEach: function forEach(callbackfn /*, thisArg */){
      arrayForEach(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    indexOf: function indexOf(searchElement /*, fromIndex */){
      return arrayIndexOf(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
    },
    includes: function includes(searchElement /*, fromIndex */){
      return arrayIncludes(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
    },
    join: function join(separator){ // eslint-disable-line no-unused-vars
      return arrayJoin.apply(validate(this), arguments);
    },
    lastIndexOf: function lastIndexOf(searchElement /*, fromIndex */){ // eslint-disable-line no-unused-vars
      return arrayLastIndexOf.apply(validate(this), arguments);
    },
    map: function map(mapfn /*, thisArg */){
      return $map(validate(this), mapfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    reduce: function reduce(callbackfn /*, initialValue */){ // eslint-disable-line no-unused-vars
      return arrayReduce.apply(validate(this), arguments);
    },
    reduceRight: function reduceRight(callbackfn /*, initialValue */){ // eslint-disable-line no-unused-vars
      return arrayReduceRight.apply(validate(this), arguments);
    },
    reverse: function reverse(){
      var that   = this
        , length = validate(that).length
        , middle = Math.floor(length / 2)
        , index  = 0
        , value;
      while(index < middle){
        value         = that[index];
        that[index++] = that[--length];
        that[length]  = value;
      } return that;
    },
    some: function some(callbackfn /*, thisArg */){
      return arraySome(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    sort: function sort(comparefn){
      return arraySort.call(validate(this), comparefn);
    },
    subarray: function subarray(begin, end){
      var O      = validate(this)
        , length = O.length
        , $begin = toIndex(begin, length);
      return new (speciesConstructor(O, O[DEF_CONSTRUCTOR]))(
        O.buffer,
        O.byteOffset + $begin * O.BYTES_PER_ELEMENT,
        toLength((end === undefined ? length : toIndex(end, length)) - $begin)
      );
    }
  };

  var $slice = function slice(start, end){
    return speciesFromList(this, arraySlice.call(validate(this), start, end));
  };

  var $set = function set(arrayLike /*, offset */){
    validate(this);
    var offset = toOffset(arguments[1], 1)
      , length = this.length
      , src    = toObject(arrayLike)
      , len    = toLength(src.length)
      , index  = 0;
    if(len + offset > length)throw RangeError(WRONG_LENGTH);
    while(index < len)this[offset + index] = src[index++];
  };

  var $iterators = {
    entries: function entries(){
      return arrayEntries.call(validate(this));
    },
    keys: function keys(){
      return arrayKeys.call(validate(this));
    },
    values: function values(){
      return arrayValues.call(validate(this));
    }
  };

  var isTAIndex = function(target, key){
    return isObject(target)
      && target[TYPED_ARRAY]
      && typeof key != 'symbol'
      && key in target
      && String(+key) == String(key);
  };
  var $getDesc = function getOwnPropertyDescriptor(target, key){
    return isTAIndex(target, key = toPrimitive(key, true))
      ? propertyDesc(2, target[key])
      : gOPD(target, key);
  };
  var $setDesc = function defineProperty(target, key, desc){
    if(isTAIndex(target, key = toPrimitive(key, true))
      && isObject(desc)
      && has(desc, 'value')
      && !has(desc, 'get')
      && !has(desc, 'set')
      // TODO: add validation descriptor w/o calling accessors
      && !desc.configurable
      && (!has(desc, 'writable') || desc.writable)
      && (!has(desc, 'enumerable') || desc.enumerable)
    ){
      target[key] = desc.value;
      return target;
    } else return dP(target, key, desc);
  };

  if(!ALL_CONSTRUCTORS){
    $GOPD.f = $getDesc;
    $DP.f   = $setDesc;
  }

  $export($export.S + $export.F * !ALL_CONSTRUCTORS, 'Object', {
    getOwnPropertyDescriptor: $getDesc,
    defineProperty:           $setDesc
  });

  if(fails(function(){ arrayToString.call({}); })){
    arrayToString = arrayToLocaleString = function toString(){
      return arrayJoin.call(this);
    }
  }

  var $TypedArrayPrototype$ = redefineAll({}, proto);
  redefineAll($TypedArrayPrototype$, $iterators);
  hide($TypedArrayPrototype$, ITERATOR, $iterators.values);
  redefineAll($TypedArrayPrototype$, {
    slice:          $slice,
    set:            $set,
    constructor:    function(){ /* noop */ },
    toString:       arrayToString,
    toLocaleString: $toLocaleString
  });
  addGetter($TypedArrayPrototype$, 'buffer', 'b');
  addGetter($TypedArrayPrototype$, 'byteOffset', 'o');
  addGetter($TypedArrayPrototype$, 'byteLength', 'l');
  addGetter($TypedArrayPrototype$, 'length', 'e');
  dP($TypedArrayPrototype$, TAG, {
    get: function(){ return this[TYPED_ARRAY]; }
  });

  module.exports = function(KEY, BYTES, wrapper, CLAMPED){
    CLAMPED = !!CLAMPED;
    var NAME       = KEY + (CLAMPED ? 'Clamped' : '') + 'Array'
      , ISNT_UINT8 = NAME != 'Uint8Array'
      , GETTER     = 'get' + KEY
      , SETTER     = 'set' + KEY
      , TypedArray = global[NAME]
      , Base       = TypedArray || {}
      , TAC        = TypedArray && getPrototypeOf(TypedArray)
      , FORCED     = !TypedArray || !$typed.ABV
      , O          = {}
      , TypedArrayPrototype = TypedArray && TypedArray[PROTOTYPE];
    var getter = function(that, index){
      var data = that._d;
      return data.v[GETTER](index * BYTES + data.o, LITTLE_ENDIAN);
    };
    var setter = function(that, index, value){
      var data = that._d;
      if(CLAMPED)value = (value = Math.round(value)) < 0 ? 0 : value > 0xff ? 0xff : value & 0xff;
      data.v[SETTER](index * BYTES + data.o, value, LITTLE_ENDIAN);
    };
    var addElement = function(that, index){
      dP(that, index, {
        get: function(){
          return getter(this, index);
        },
        set: function(value){
          return setter(this, index, value);
        },
        enumerable: true
      });
    };
    if(FORCED){
      TypedArray = wrapper(function(that, data, $offset, $length){
        anInstance(that, TypedArray, NAME, '_d');
        var index  = 0
          , offset = 0
          , buffer, byteLength, length, klass;
        if(!isObject(data)){
          length     = strictToLength(data, true)
          byteLength = length * BYTES;
          buffer     = new $ArrayBuffer(byteLength);
        } else if(data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER){
          buffer = data;
          offset = toOffset($offset, BYTES);
          var $len = data.byteLength;
          if($length === undefined){
            if($len % BYTES)throw RangeError(WRONG_LENGTH);
            byteLength = $len - offset;
            if(byteLength < 0)throw RangeError(WRONG_LENGTH);
          } else {
            byteLength = toLength($length) * BYTES;
            if(byteLength + offset > $len)throw RangeError(WRONG_LENGTH);
          }
          length = byteLength / BYTES;
        } else if(TYPED_ARRAY in data){
          return fromList(TypedArray, data);
        } else {
          return $from.call(TypedArray, data);
        }
        hide(that, '_d', {
          b: buffer,
          o: offset,
          l: byteLength,
          e: length,
          v: new $DataView(buffer)
        });
        while(index < length)addElement(that, index++);
      });
      TypedArrayPrototype = TypedArray[PROTOTYPE] = create($TypedArrayPrototype$);
      hide(TypedArrayPrototype, 'constructor', TypedArray);
    } else if(!$iterDetect(function(iter){
      // V8 works with iterators, but fails in many other cases
      // https://code.google.com/p/v8/issues/detail?id=4552
      new TypedArray(null); // eslint-disable-line no-new
      new TypedArray(iter); // eslint-disable-line no-new
    }, true)){
      TypedArray = wrapper(function(that, data, $offset, $length){
        anInstance(that, TypedArray, NAME);
        var klass;
        // `ws` module bug, temporarily remove validation length for Uint8Array
        // https://github.com/websockets/ws/pull/645
        if(!isObject(data))return new Base(strictToLength(data, ISNT_UINT8));
        if(data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER){
          return $length !== undefined
            ? new Base(data, toOffset($offset, BYTES), $length)
            : $offset !== undefined
              ? new Base(data, toOffset($offset, BYTES))
              : new Base(data);
        }
        if(TYPED_ARRAY in data)return fromList(TypedArray, data);
        return $from.call(TypedArray, data);
      });
      arrayForEach(TAC !== Function.prototype ? gOPN(Base).concat(gOPN(TAC)) : gOPN(Base), function(key){
        if(!(key in TypedArray))hide(TypedArray, key, Base[key]);
      });
      TypedArray[PROTOTYPE] = TypedArrayPrototype;
      if(!LIBRARY)TypedArrayPrototype.constructor = TypedArray;
    }
    var $nativeIterator   = TypedArrayPrototype[ITERATOR]
      , CORRECT_ITER_NAME = !!$nativeIterator && ($nativeIterator.name == 'values' || $nativeIterator.name == undefined)
      , $iterator         = $iterators.values;
    hide(TypedArray, TYPED_CONSTRUCTOR, true);
    hide(TypedArrayPrototype, TYPED_ARRAY, NAME);
    hide(TypedArrayPrototype, VIEW, true);
    hide(TypedArrayPrototype, DEF_CONSTRUCTOR, TypedArray);

    if(CLAMPED ? new TypedArray(1)[TAG] != NAME : !(TAG in TypedArrayPrototype)){
      dP(TypedArrayPrototype, TAG, {
        get: function(){ return NAME; }
      });
    }

    O[NAME] = TypedArray;

    $export($export.G + $export.W + $export.F * (TypedArray != Base), O);

    $export($export.S, NAME, {
      BYTES_PER_ELEMENT: BYTES,
      from: $from,
      of: $of
    });

    if(!(BYTES_PER_ELEMENT in TypedArrayPrototype))hide(TypedArrayPrototype, BYTES_PER_ELEMENT, BYTES);

    $export($export.P, NAME, proto);

    setSpecies(NAME);

    $export($export.P + $export.F * FORCED_SET, NAME, {set: $set});

    $export($export.P + $export.F * !CORRECT_ITER_NAME, NAME, $iterators);

    $export($export.P + $export.F * (TypedArrayPrototype.toString != arrayToString), NAME, {toString: arrayToString});

    $export($export.P + $export.F * fails(function(){
      new TypedArray(1).slice();
    }), NAME, {slice: $slice});

    $export($export.P + $export.F * (fails(function(){
      return [1, 2].toLocaleString() != new TypedArray([1, 2]).toLocaleString()
    }) || !fails(function(){
      TypedArrayPrototype.toLocaleString.call([1, 2]);
    })), NAME, {toLocaleString: $toLocaleString});

    Iterators[NAME] = CORRECT_ITER_NAME ? $nativeIterator : $iterator;
    if(!LIBRARY && !CORRECT_ITER_NAME)hide(TypedArrayPrototype, ITERATOR, $iterator);
  };
} else module.exports = function(){ /* empty */ };
},{"./_an-instance":22,"./_array-copy-within":24,"./_array-fill":25,"./_array-includes":27,"./_array-methods":28,"./_classof":33,"./_ctx":41,"./_descriptors":44,"./_export":48,"./_fails":50,"./_global":54,"./_has":55,"./_hide":56,"./_is-array-iter":62,"./_is-object":65,"./_iter-detect":70,"./_iterators":72,"./_library":74,"./_object-create":82,"./_object-dp":83,"./_object-gopd":86,"./_object-gopn":88,"./_object-gpo":90,"./_property-desc":101,"./_redefine-all":102,"./_same-value":105,"./_set-species":107,"./_species-constructor":111,"./_to-index":121,"./_to-integer":122,"./_to-length":124,"./_to-object":125,"./_to-primitive":126,"./_typed":129,"./_typed-buffer":128,"./_uid":130,"./_wks":133,"./core.get-iterator-method":134,"./es6.array.iterator":146}],128:[function(require,module,exports){
'use strict';
var global         = require('./_global')
  , DESCRIPTORS    = require('./_descriptors')
  , LIBRARY        = require('./_library')
  , $typed         = require('./_typed')
  , hide           = require('./_hide')
  , redefineAll    = require('./_redefine-all')
  , fails          = require('./_fails')
  , anInstance     = require('./_an-instance')
  , toInteger      = require('./_to-integer')
  , toLength       = require('./_to-length')
  , gOPN           = require('./_object-gopn').f
  , dP             = require('./_object-dp').f
  , arrayFill      = require('./_array-fill')
  , setToStringTag = require('./_set-to-string-tag')
  , ARRAY_BUFFER   = 'ArrayBuffer'
  , DATA_VIEW      = 'DataView'
  , PROTOTYPE      = 'prototype'
  , WRONG_LENGTH   = 'Wrong length!'
  , WRONG_INDEX    = 'Wrong index!'
  , $ArrayBuffer   = global[ARRAY_BUFFER]
  , $DataView      = global[DATA_VIEW]
  , Math           = global.Math
  , RangeError     = global.RangeError
  , Infinity       = global.Infinity
  , BaseBuffer     = $ArrayBuffer
  , abs            = Math.abs
  , pow            = Math.pow
  , floor          = Math.floor
  , log            = Math.log
  , LN2            = Math.LN2
  , BUFFER         = 'buffer'
  , BYTE_LENGTH    = 'byteLength'
  , BYTE_OFFSET    = 'byteOffset'
  , $BUFFER        = DESCRIPTORS ? '_b' : BUFFER
  , $LENGTH        = DESCRIPTORS ? '_l' : BYTE_LENGTH
  , $OFFSET        = DESCRIPTORS ? '_o' : BYTE_OFFSET;

// IEEE754 conversions based on https://github.com/feross/ieee754
var packIEEE754 = function(value, mLen, nBytes){
  var buffer = Array(nBytes)
    , eLen   = nBytes * 8 - mLen - 1
    , eMax   = (1 << eLen) - 1
    , eBias  = eMax >> 1
    , rt     = mLen === 23 ? pow(2, -24) - pow(2, -77) : 0
    , i      = 0
    , s      = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0
    , e, m, c;
  value = abs(value)
  if(value != value || value === Infinity){
    m = value != value ? 1 : 0;
    e = eMax;
  } else {
    e = floor(log(value) / LN2);
    if(value * (c = pow(2, -e)) < 1){
      e--;
      c *= 2;
    }
    if(e + eBias >= 1){
      value += rt / c;
    } else {
      value += rt * pow(2, 1 - eBias);
    }
    if(value * c >= 2){
      e++;
      c /= 2;
    }
    if(e + eBias >= eMax){
      m = 0;
      e = eMax;
    } else if(e + eBias >= 1){
      m = (value * c - 1) * pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * pow(2, eBias - 1) * pow(2, mLen);
      e = 0;
    }
  }
  for(; mLen >= 8; buffer[i++] = m & 255, m /= 256, mLen -= 8);
  e = e << mLen | m;
  eLen += mLen;
  for(; eLen > 0; buffer[i++] = e & 255, e /= 256, eLen -= 8);
  buffer[--i] |= s * 128;
  return buffer;
};
var unpackIEEE754 = function(buffer, mLen, nBytes){
  var eLen  = nBytes * 8 - mLen - 1
    , eMax  = (1 << eLen) - 1
    , eBias = eMax >> 1
    , nBits = eLen - 7
    , i     = nBytes - 1
    , s     = buffer[i--]
    , e     = s & 127
    , m;
  s >>= 7;
  for(; nBits > 0; e = e * 256 + buffer[i], i--, nBits -= 8);
  m = e & (1 << -nBits) - 1;
  e >>= -nBits;
  nBits += mLen;
  for(; nBits > 0; m = m * 256 + buffer[i], i--, nBits -= 8);
  if(e === 0){
    e = 1 - eBias;
  } else if(e === eMax){
    return m ? NaN : s ? -Infinity : Infinity;
  } else {
    m = m + pow(2, mLen);
    e = e - eBias;
  } return (s ? -1 : 1) * m * pow(2, e - mLen);
};

var unpackI32 = function(bytes){
  return bytes[3] << 24 | bytes[2] << 16 | bytes[1] << 8 | bytes[0];
};
var packI8 = function(it){
  return [it & 0xff];
};
var packI16 = function(it){
  return [it & 0xff, it >> 8 & 0xff];
};
var packI32 = function(it){
  return [it & 0xff, it >> 8 & 0xff, it >> 16 & 0xff, it >> 24 & 0xff];
};
var packF64 = function(it){
  return packIEEE754(it, 52, 8);
};
var packF32 = function(it){
  return packIEEE754(it, 23, 4);
};

var addGetter = function(C, key, internal){
  dP(C[PROTOTYPE], key, {get: function(){ return this[internal]; }});
};

var get = function(view, bytes, index, isLittleEndian){
  var numIndex = +index
    , intIndex = toInteger(numIndex);
  if(numIndex != intIndex || intIndex < 0 || intIndex + bytes > view[$LENGTH])throw RangeError(WRONG_INDEX);
  var store = view[$BUFFER]._b
    , start = intIndex + view[$OFFSET]
    , pack  = store.slice(start, start + bytes);
  return isLittleEndian ? pack : pack.reverse();
};
var set = function(view, bytes, index, conversion, value, isLittleEndian){
  var numIndex = +index
    , intIndex = toInteger(numIndex);
  if(numIndex != intIndex || intIndex < 0 || intIndex + bytes > view[$LENGTH])throw RangeError(WRONG_INDEX);
  var store = view[$BUFFER]._b
    , start = intIndex + view[$OFFSET]
    , pack  = conversion(+value);
  for(var i = 0; i < bytes; i++)store[start + i] = pack[isLittleEndian ? i : bytes - i - 1];
};

var validateArrayBufferArguments = function(that, length){
  anInstance(that, $ArrayBuffer, ARRAY_BUFFER);
  var numberLength = +length
    , byteLength   = toLength(numberLength);
  if(numberLength != byteLength)throw RangeError(WRONG_LENGTH);
  return byteLength;
};

if(!$typed.ABV){
  $ArrayBuffer = function ArrayBuffer(length){
    var byteLength = validateArrayBufferArguments(this, length);
    this._b       = arrayFill.call(Array(byteLength), 0);
    this[$LENGTH] = byteLength;
  };

  $DataView = function DataView(buffer, byteOffset, byteLength){
    anInstance(this, $DataView, DATA_VIEW);
    anInstance(buffer, $ArrayBuffer, DATA_VIEW);
    var bufferLength = buffer[$LENGTH]
      , offset       = toInteger(byteOffset);
    if(offset < 0 || offset > bufferLength)throw RangeError('Wrong offset!');
    byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength);
    if(offset + byteLength > bufferLength)throw RangeError(WRONG_LENGTH);
    this[$BUFFER] = buffer;
    this[$OFFSET] = offset;
    this[$LENGTH] = byteLength;
  };

  if(DESCRIPTORS){
    addGetter($ArrayBuffer, BYTE_LENGTH, '_l');
    addGetter($DataView, BUFFER, '_b');
    addGetter($DataView, BYTE_LENGTH, '_l');
    addGetter($DataView, BYTE_OFFSET, '_o');
  }

  redefineAll($DataView[PROTOTYPE], {
    getInt8: function getInt8(byteOffset){
      return get(this, 1, byteOffset)[0] << 24 >> 24;
    },
    getUint8: function getUint8(byteOffset){
      return get(this, 1, byteOffset)[0];
    },
    getInt16: function getInt16(byteOffset /*, littleEndian */){
      var bytes = get(this, 2, byteOffset, arguments[1]);
      return (bytes[1] << 8 | bytes[0]) << 16 >> 16;
    },
    getUint16: function getUint16(byteOffset /*, littleEndian */){
      var bytes = get(this, 2, byteOffset, arguments[1]);
      return bytes[1] << 8 | bytes[0];
    },
    getInt32: function getInt32(byteOffset /*, littleEndian */){
      return unpackI32(get(this, 4, byteOffset, arguments[1]));
    },
    getUint32: function getUint32(byteOffset /*, littleEndian */){
      return unpackI32(get(this, 4, byteOffset, arguments[1])) >>> 0;
    },
    getFloat32: function getFloat32(byteOffset /*, littleEndian */){
      return unpackIEEE754(get(this, 4, byteOffset, arguments[1]), 23, 4);
    },
    getFloat64: function getFloat64(byteOffset /*, littleEndian */){
      return unpackIEEE754(get(this, 8, byteOffset, arguments[1]), 52, 8);
    },
    setInt8: function setInt8(byteOffset, value){
      set(this, 1, byteOffset, packI8, value);
    },
    setUint8: function setUint8(byteOffset, value){
      set(this, 1, byteOffset, packI8, value);
    },
    setInt16: function setInt16(byteOffset, value /*, littleEndian */){
      set(this, 2, byteOffset, packI16, value, arguments[2]);
    },
    setUint16: function setUint16(byteOffset, value /*, littleEndian */){
      set(this, 2, byteOffset, packI16, value, arguments[2]);
    },
    setInt32: function setInt32(byteOffset, value /*, littleEndian */){
      set(this, 4, byteOffset, packI32, value, arguments[2]);
    },
    setUint32: function setUint32(byteOffset, value /*, littleEndian */){
      set(this, 4, byteOffset, packI32, value, arguments[2]);
    },
    setFloat32: function setFloat32(byteOffset, value /*, littleEndian */){
      set(this, 4, byteOffset, packF32, value, arguments[2]);
    },
    setFloat64: function setFloat64(byteOffset, value /*, littleEndian */){
      set(this, 8, byteOffset, packF64, value, arguments[2]);
    }
  });
} else {
  if(!fails(function(){
    new $ArrayBuffer;     // eslint-disable-line no-new
  }) || !fails(function(){
    new $ArrayBuffer(.5); // eslint-disable-line no-new
  })){
    $ArrayBuffer = function ArrayBuffer(length){
      return new BaseBuffer(validateArrayBufferArguments(this, length));
    };
    var ArrayBufferProto = $ArrayBuffer[PROTOTYPE] = BaseBuffer[PROTOTYPE];
    for(var keys = gOPN(BaseBuffer), j = 0, key; keys.length > j; ){
      if(!((key = keys[j++]) in $ArrayBuffer))hide($ArrayBuffer, key, BaseBuffer[key]);
    };
    if(!LIBRARY)ArrayBufferProto.constructor = $ArrayBuffer;
  }
  // iOS Safari 7.x bug
  var view = new $DataView(new $ArrayBuffer(2))
    , $setInt8 = $DataView[PROTOTYPE].setInt8;
  view.setInt8(0, 2147483648);
  view.setInt8(1, 2147483649);
  if(view.getInt8(0) || !view.getInt8(1))redefineAll($DataView[PROTOTYPE], {
    setInt8: function setInt8(byteOffset, value){
      $setInt8.call(this, byteOffset, value << 24 >> 24);
    },
    setUint8: function setUint8(byteOffset, value){
      $setInt8.call(this, byteOffset, value << 24 >> 24);
    }
  }, true);
}
setToStringTag($ArrayBuffer, ARRAY_BUFFER);
setToStringTag($DataView, DATA_VIEW);
hide($DataView[PROTOTYPE], $typed.VIEW, true);
exports[ARRAY_BUFFER] = $ArrayBuffer;
exports[DATA_VIEW] = $DataView;
},{"./_an-instance":22,"./_array-fill":25,"./_descriptors":44,"./_fails":50,"./_global":54,"./_hide":56,"./_library":74,"./_object-dp":83,"./_object-gopn":88,"./_redefine-all":102,"./_set-to-string-tag":108,"./_to-integer":122,"./_to-length":124,"./_typed":129}],129:[function(require,module,exports){
var global = require('./_global')
  , hide   = require('./_hide')
  , uid    = require('./_uid')
  , TYPED  = uid('typed_array')
  , VIEW   = uid('view')
  , ABV    = !!(global.ArrayBuffer && global.DataView)
  , CONSTR = ABV
  , i = 0, l = 9, Typed;

var TypedArrayConstructors = (
  'Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array'
).split(',');

while(i < l){
  if(Typed = global[TypedArrayConstructors[i++]]){
    hide(Typed.prototype, TYPED, true);
    hide(Typed.prototype, VIEW, true);
  } else CONSTR = false;
}

module.exports = {
  ABV:    ABV,
  CONSTR: CONSTR,
  TYPED:  TYPED,
  VIEW:   VIEW
};
},{"./_global":54,"./_hide":56,"./_uid":130}],130:[function(require,module,exports){
var id = 0
  , px = Math.random();
module.exports = function(key){
  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
};
},{}],131:[function(require,module,exports){
var global         = require('./_global')
  , core           = require('./_core')
  , LIBRARY        = require('./_library')
  , wksExt         = require('./_wks-ext')
  , defineProperty = require('./_object-dp').f;
module.exports = function(name){
  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
  if(name.charAt(0) != '_' && !(name in $Symbol))defineProperty($Symbol, name, {value: wksExt.f(name)});
};
},{"./_core":39,"./_global":54,"./_library":74,"./_object-dp":83,"./_wks-ext":132}],132:[function(require,module,exports){
exports.f = require('./_wks');
},{"./_wks":133}],133:[function(require,module,exports){
var store      = require('./_shared')('wks')
  , uid        = require('./_uid')
  , Symbol     = require('./_global').Symbol
  , USE_SYMBOL = typeof Symbol == 'function';

var $exports = module.exports = function(name){
  return store[name] || (store[name] =
    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
};

$exports.store = store;
},{"./_global":54,"./_shared":110,"./_uid":130}],134:[function(require,module,exports){
var classof   = require('./_classof')
  , ITERATOR  = require('./_wks')('iterator')
  , Iterators = require('./_iterators');
module.exports = require('./_core').getIteratorMethod = function(it){
  if(it != undefined)return it[ITERATOR]
    || it['@@iterator']
    || Iterators[classof(it)];
};
},{"./_classof":33,"./_core":39,"./_iterators":72,"./_wks":133}],135:[function(require,module,exports){
// https://github.com/benjamingr/RexExp.escape
var $export = require('./_export')
  , $re     = require('./_replacer')(/[\\^$*+?.()|[\]{}]/g, '\\$&');

$export($export.S, 'RegExp', {escape: function escape(it){ return $re(it); }});

},{"./_export":48,"./_replacer":104}],136:[function(require,module,exports){
// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
var $export = require('./_export');

$export($export.P, 'Array', {copyWithin: require('./_array-copy-within')});

require('./_add-to-unscopables')('copyWithin');
},{"./_add-to-unscopables":21,"./_array-copy-within":24,"./_export":48}],137:[function(require,module,exports){
'use strict';
var $export = require('./_export')
  , $every  = require('./_array-methods')(4);

$export($export.P + $export.F * !require('./_strict-method')([].every, true), 'Array', {
  // 22.1.3.5 / 15.4.4.16 Array.prototype.every(callbackfn [, thisArg])
  every: function every(callbackfn /* , thisArg */){
    return $every(this, callbackfn, arguments[1]);
  }
});
},{"./_array-methods":28,"./_export":48,"./_strict-method":112}],138:[function(require,module,exports){
// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
var $export = require('./_export');

$export($export.P, 'Array', {fill: require('./_array-fill')});

require('./_add-to-unscopables')('fill');
},{"./_add-to-unscopables":21,"./_array-fill":25,"./_export":48}],139:[function(require,module,exports){
'use strict';
var $export = require('./_export')
  , $filter = require('./_array-methods')(2);

$export($export.P + $export.F * !require('./_strict-method')([].filter, true), 'Array', {
  // 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])
  filter: function filter(callbackfn /* , thisArg */){
    return $filter(this, callbackfn, arguments[1]);
  }
});
},{"./_array-methods":28,"./_export":48,"./_strict-method":112}],140:[function(require,module,exports){
'use strict';
// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)
var $export = require('./_export')
  , $find   = require('./_array-methods')(6)
  , KEY     = 'findIndex'
  , forced  = true;
// Shouldn't skip holes
if(KEY in [])Array(1)[KEY](function(){ forced = false; });
$export($export.P + $export.F * forced, 'Array', {
  findIndex: function findIndex(callbackfn/*, that = undefined */){
    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});
require('./_add-to-unscopables')(KEY);
},{"./_add-to-unscopables":21,"./_array-methods":28,"./_export":48}],141:[function(require,module,exports){
'use strict';
// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)
var $export = require('./_export')
  , $find   = require('./_array-methods')(5)
  , KEY     = 'find'
  , forced  = true;
// Shouldn't skip holes
if(KEY in [])Array(1)[KEY](function(){ forced = false; });
$export($export.P + $export.F * forced, 'Array', {
  find: function find(callbackfn/*, that = undefined */){
    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});
require('./_add-to-unscopables')(KEY);
},{"./_add-to-unscopables":21,"./_array-methods":28,"./_export":48}],142:[function(require,module,exports){
'use strict';
var $export  = require('./_export')
  , $forEach = require('./_array-methods')(0)
  , STRICT   = require('./_strict-method')([].forEach, true);

$export($export.P + $export.F * !STRICT, 'Array', {
  // 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])
  forEach: function forEach(callbackfn /* , thisArg */){
    return $forEach(this, callbackfn, arguments[1]);
  }
});
},{"./_array-methods":28,"./_export":48,"./_strict-method":112}],143:[function(require,module,exports){
'use strict';
var ctx            = require('./_ctx')
  , $export        = require('./_export')
  , toObject       = require('./_to-object')
  , call           = require('./_iter-call')
  , isArrayIter    = require('./_is-array-iter')
  , toLength       = require('./_to-length')
  , createProperty = require('./_create-property')
  , getIterFn      = require('./core.get-iterator-method');

$export($export.S + $export.F * !require('./_iter-detect')(function(iter){ Array.from(iter); }), 'Array', {
  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
  from: function from(arrayLike/*, mapfn = undefined, thisArg = undefined*/){
    var O       = toObject(arrayLike)
      , C       = typeof this == 'function' ? this : Array
      , aLen    = arguments.length
      , mapfn   = aLen > 1 ? arguments[1] : undefined
      , mapping = mapfn !== undefined
      , index   = 0
      , iterFn  = getIterFn(O)
      , length, result, step, iterator;
    if(mapping)mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
    // if object isn't iterable or it's array with default iterator - use simple case
    if(iterFn != undefined && !(C == Array && isArrayIter(iterFn))){
      for(iterator = iterFn.call(O), result = new C; !(step = iterator.next()).done; index++){
        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);
      }
    } else {
      length = toLength(O.length);
      for(result = new C(length); length > index; index++){
        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
      }
    }
    result.length = index;
    return result;
  }
});

},{"./_create-property":40,"./_ctx":41,"./_export":48,"./_is-array-iter":62,"./_iter-call":67,"./_iter-detect":70,"./_to-length":124,"./_to-object":125,"./core.get-iterator-method":134}],144:[function(require,module,exports){
'use strict';
var $export       = require('./_export')
  , $indexOf      = require('./_array-includes')(false)
  , $native       = [].indexOf
  , NEGATIVE_ZERO = !!$native && 1 / [1].indexOf(1, -0) < 0;

$export($export.P + $export.F * (NEGATIVE_ZERO || !require('./_strict-method')($native)), 'Array', {
  // 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])
  indexOf: function indexOf(searchElement /*, fromIndex = 0 */){
    return NEGATIVE_ZERO
      // convert -0 to +0
      ? $native.apply(this, arguments) || 0
      : $indexOf(this, searchElement, arguments[1]);
  }
});
},{"./_array-includes":27,"./_export":48,"./_strict-method":112}],145:[function(require,module,exports){
// 22.1.2.2 / 15.4.3.2 Array.isArray(arg)
var $export = require('./_export');

$export($export.S, 'Array', {isArray: require('./_is-array')});
},{"./_export":48,"./_is-array":63}],146:[function(require,module,exports){
'use strict';
var addToUnscopables = require('./_add-to-unscopables')
  , step             = require('./_iter-step')
  , Iterators        = require('./_iterators')
  , toIObject        = require('./_to-iobject');

// 22.1.3.4 Array.prototype.entries()
// 22.1.3.13 Array.prototype.keys()
// 22.1.3.29 Array.prototype.values()
// 22.1.3.30 Array.prototype[@@iterator]()
module.exports = require('./_iter-define')(Array, 'Array', function(iterated, kind){
  this._t = toIObject(iterated); // target
  this._i = 0;                   // next index
  this._k = kind;                // kind
// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
}, function(){
  var O     = this._t
    , kind  = this._k
    , index = this._i++;
  if(!O || index >= O.length){
    this._t = undefined;
    return step(1);
  }
  if(kind == 'keys'  )return step(0, index);
  if(kind == 'values')return step(0, O[index]);
  return step(0, [index, O[index]]);
}, 'values');

// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
Iterators.Arguments = Iterators.Array;

addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');
},{"./_add-to-unscopables":21,"./_iter-define":69,"./_iter-step":71,"./_iterators":72,"./_to-iobject":123}],147:[function(require,module,exports){
'use strict';
// 22.1.3.13 Array.prototype.join(separator)
var $export   = require('./_export')
  , toIObject = require('./_to-iobject')
  , arrayJoin = [].join;

// fallback for not array-like strings
$export($export.P + $export.F * (require('./_iobject') != Object || !require('./_strict-method')(arrayJoin)), 'Array', {
  join: function join(separator){
    return arrayJoin.call(toIObject(this), separator === undefined ? ',' : separator);
  }
});
},{"./_export":48,"./_iobject":61,"./_strict-method":112,"./_to-iobject":123}],148:[function(require,module,exports){
'use strict';
var $export       = require('./_export')
  , toIObject     = require('./_to-iobject')
  , toInteger     = require('./_to-integer')
  , toLength      = require('./_to-length')
  , $native       = [].lastIndexOf
  , NEGATIVE_ZERO = !!$native && 1 / [1].lastIndexOf(1, -0) < 0;

$export($export.P + $export.F * (NEGATIVE_ZERO || !require('./_strict-method')($native)), 'Array', {
  // 22.1.3.14 / 15.4.4.15 Array.prototype.lastIndexOf(searchElement [, fromIndex])
  lastIndexOf: function lastIndexOf(searchElement /*, fromIndex = @[*-1] */){
    // convert -0 to +0
    if(NEGATIVE_ZERO)return $native.apply(this, arguments) || 0;
    var O      = toIObject(this)
      , length = toLength(O.length)
      , index  = length - 1;
    if(arguments.length > 1)index = Math.min(index, toInteger(arguments[1]));
    if(index < 0)index = length + index;
    for(;index >= 0; index--)if(index in O)if(O[index] === searchElement)return index || 0;
    return -1;
  }
});
},{"./_export":48,"./_strict-method":112,"./_to-integer":122,"./_to-iobject":123,"./_to-length":124}],149:[function(require,module,exports){
'use strict';
var $export = require('./_export')
  , $map    = require('./_array-methods')(1);

$export($export.P + $export.F * !require('./_strict-method')([].map, true), 'Array', {
  // 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])
  map: function map(callbackfn /* , thisArg */){
    return $map(this, callbackfn, arguments[1]);
  }
});
},{"./_array-methods":28,"./_export":48,"./_strict-method":112}],150:[function(require,module,exports){
'use strict';
var $export        = require('./_export')
  , createProperty = require('./_create-property');

// WebKit Array.of isn't generic
$export($export.S + $export.F * require('./_fails')(function(){
  function F(){}
  return !(Array.of.call(F) instanceof F);
}), 'Array', {
  // 22.1.2.3 Array.of( ...items)
  of: function of(/* ...args */){
    var index  = 0
      , aLen   = arguments.length
      , result = new (typeof this == 'function' ? this : Array)(aLen);
    while(aLen > index)createProperty(result, index, arguments[index++]);
    result.length = aLen;
    return result;
  }
});
},{"./_create-property":40,"./_export":48,"./_fails":50}],151:[function(require,module,exports){
'use strict';
var $export = require('./_export')
  , $reduce = require('./_array-reduce');

$export($export.P + $export.F * !require('./_strict-method')([].reduceRight, true), 'Array', {
  // 22.1.3.19 / 15.4.4.22 Array.prototype.reduceRight(callbackfn [, initialValue])
  reduceRight: function reduceRight(callbackfn /* , initialValue */){
    return $reduce(this, callbackfn, arguments.length, arguments[1], true);
  }
});
},{"./_array-reduce":29,"./_export":48,"./_strict-method":112}],152:[function(require,module,exports){
'use strict';
var $export = require('./_export')
  , $reduce = require('./_array-reduce');

$export($export.P + $export.F * !require('./_strict-method')([].reduce, true), 'Array', {
  // 22.1.3.18 / 15.4.4.21 Array.prototype.reduce(callbackfn [, initialValue])
  reduce: function reduce(callbackfn /* , initialValue */){
    return $reduce(this, callbackfn, arguments.length, arguments[1], false);
  }
});
},{"./_array-reduce":29,"./_export":48,"./_strict-method":112}],153:[function(require,module,exports){
'use strict';
var $export    = require('./_export')
  , html       = require('./_html')
  , cof        = require('./_cof')
  , toIndex    = require('./_to-index')
  , toLength   = require('./_to-length')
  , arraySlice = [].slice;

// fallback for not array-like ES3 strings and DOM objects
$export($export.P + $export.F * require('./_fails')(function(){
  if(html)arraySlice.call(html);
}), 'Array', {
  slice: function slice(begin, end){
    var len   = toLength(this.length)
      , klass = cof(this);
    end = end === undefined ? len : end;
    if(klass == 'Array')return arraySlice.call(this, begin, end);
    var start  = toIndex(begin, len)
      , upTo   = toIndex(end, len)
      , size   = toLength(upTo - start)
      , cloned = Array(size)
      , i      = 0;
    for(; i < size; i++)cloned[i] = klass == 'String'
      ? this.charAt(start + i)
      : this[start + i];
    return cloned;
  }
});
},{"./_cof":34,"./_export":48,"./_fails":50,"./_html":57,"./_to-index":121,"./_to-length":124}],154:[function(require,module,exports){
'use strict';
var $export = require('./_export')
  , $some   = require('./_array-methods')(3);

$export($export.P + $export.F * !require('./_strict-method')([].some, true), 'Array', {
  // 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])
  some: function some(callbackfn /* , thisArg */){
    return $some(this, callbackfn, arguments[1]);
  }
});
},{"./_array-methods":28,"./_export":48,"./_strict-method":112}],155:[function(require,module,exports){
'use strict';
var $export   = require('./_export')
  , aFunction = require('./_a-function')
  , toObject  = require('./_to-object')
  , fails     = require('./_fails')
  , $sort     = [].sort
  , test      = [1, 2, 3];

$export($export.P + $export.F * (fails(function(){
  // IE8-
  test.sort(undefined);
}) || !fails(function(){
  // V8 bug
  test.sort(null);
  // Old WebKit
}) || !require('./_strict-method')($sort)), 'Array', {
  // 22.1.3.25 Array.prototype.sort(comparefn)
  sort: function sort(comparefn){
    return comparefn === undefined
      ? $sort.call(toObject(this))
      : $sort.call(toObject(this), aFunction(comparefn));
  }
});
},{"./_a-function":19,"./_export":48,"./_fails":50,"./_strict-method":112,"./_to-object":125}],156:[function(require,module,exports){
require('./_set-species')('Array');
},{"./_set-species":107}],157:[function(require,module,exports){
// 20.3.3.1 / 15.9.4.4 Date.now()
var $export = require('./_export');

$export($export.S, 'Date', {now: function(){ return new Date().getTime(); }});
},{"./_export":48}],158:[function(require,module,exports){
'use strict';
// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()
var $export = require('./_export')
  , fails   = require('./_fails')
  , getTime = Date.prototype.getTime;

var lz = function(num){
  return num > 9 ? num : '0' + num;
};

// PhantomJS / old WebKit has a broken implementations
$export($export.P + $export.F * (fails(function(){
  return new Date(-5e13 - 1).toISOString() != '0385-07-25T07:06:39.999Z';
}) || !fails(function(){
  new Date(NaN).toISOString();
})), 'Date', {
  toISOString: function toISOString(){
    if(!isFinite(getTime.call(this)))throw RangeError('Invalid time value');
    var d = this
      , y = d.getUTCFullYear()
      , m = d.getUTCMilliseconds()
      , s = y < 0 ? '-' : y > 9999 ? '+' : '';
    return s + ('00000' + Math.abs(y)).slice(s ? -6 : -4) +
      '-' + lz(d.getUTCMonth() + 1) + '-' + lz(d.getUTCDate()) +
      'T' + lz(d.getUTCHours()) + ':' + lz(d.getUTCMinutes()) +
      ':' + lz(d.getUTCSeconds()) + '.' + (m > 99 ? m : '0' + lz(m)) + 'Z';
  }
});
},{"./_export":48,"./_fails":50}],159:[function(require,module,exports){
'use strict';
var $export     = require('./_export')
  , toObject    = require('./_to-object')
  , toPrimitive = require('./_to-primitive');

$export($export.P + $export.F * require('./_fails')(function(){
  return new Date(NaN).toJSON() !== null || Date.prototype.toJSON.call({toISOString: function(){ return 1; }}) !== 1;
}), 'Date', {
  toJSON: function toJSON(key){
    var O  = toObject(this)
      , pv = toPrimitive(O);
    return typeof pv == 'number' && !isFinite(pv) ? null : O.toISOString();
  }
});
},{"./_export":48,"./_fails":50,"./_to-object":125,"./_to-primitive":126}],160:[function(require,module,exports){
var TO_PRIMITIVE = require('./_wks')('toPrimitive')
  , proto        = Date.prototype;

if(!(TO_PRIMITIVE in proto))require('./_hide')(proto, TO_PRIMITIVE, require('./_date-to-primitive'));
},{"./_date-to-primitive":42,"./_hide":56,"./_wks":133}],161:[function(require,module,exports){
var DateProto    = Date.prototype
  , INVALID_DATE = 'Invalid Date'
  , TO_STRING    = 'toString'
  , $toString    = DateProto[TO_STRING]
  , getTime      = DateProto.getTime;
if(new Date(NaN) + '' != INVALID_DATE){
  require('./_redefine')(DateProto, TO_STRING, function toString(){
    var value = getTime.call(this);
    return value === value ? $toString.call(this) : INVALID_DATE;
  });
}
},{"./_redefine":103}],162:[function(require,module,exports){
// 19.2.3.2 / 15.3.4.5 Function.prototype.bind(thisArg, args...)
var $export = require('./_export');

$export($export.P, 'Function', {bind: require('./_bind')});
},{"./_bind":32,"./_export":48}],163:[function(require,module,exports){
'use strict';
var isObject       = require('./_is-object')
  , getPrototypeOf = require('./_object-gpo')
  , HAS_INSTANCE   = require('./_wks')('hasInstance')
  , FunctionProto  = Function.prototype;
// 19.2.3.6 Function.prototype[@@hasInstance](V)
if(!(HAS_INSTANCE in FunctionProto))require('./_object-dp').f(FunctionProto, HAS_INSTANCE, {value: function(O){
  if(typeof this != 'function' || !isObject(O))return false;
  if(!isObject(this.prototype))return O instanceof this;
  // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:
  while(O = getPrototypeOf(O))if(this.prototype === O)return true;
  return false;
}});
},{"./_is-object":65,"./_object-dp":83,"./_object-gpo":90,"./_wks":133}],164:[function(require,module,exports){
var dP         = require('./_object-dp').f
  , createDesc = require('./_property-desc')
  , has        = require('./_has')
  , FProto     = Function.prototype
  , nameRE     = /^\s*function ([^ (]*)/
  , NAME       = 'name';

var isExtensible = Object.isExtensible || function(){
  return true;
};

// 19.2.4.2 name
NAME in FProto || require('./_descriptors') && dP(FProto, NAME, {
  configurable: true,
  get: function(){
    try {
      var that = this
        , name = ('' + that).match(nameRE)[1];
      has(that, NAME) || !isExtensible(that) || dP(that, NAME, createDesc(5, name));
      return name;
    } catch(e){
      return '';
    }
  }
});
},{"./_descriptors":44,"./_has":55,"./_object-dp":83,"./_property-desc":101}],165:[function(require,module,exports){
'use strict';
var strong = require('./_collection-strong');

// 23.1 Map Objects
module.exports = require('./_collection')('Map', function(get){
  return function Map(){ return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.1.3.6 Map.prototype.get(key)
  get: function get(key){
    var entry = strong.getEntry(this, key);
    return entry && entry.v;
  },
  // 23.1.3.9 Map.prototype.set(key, value)
  set: function set(key, value){
    return strong.def(this, key === 0 ? 0 : key, value);
  }
}, strong, true);
},{"./_collection":38,"./_collection-strong":35}],166:[function(require,module,exports){
// 20.2.2.3 Math.acosh(x)
var $export = require('./_export')
  , log1p   = require('./_math-log1p')
  , sqrt    = Math.sqrt
  , $acosh  = Math.acosh;

$export($export.S + $export.F * !($acosh
  // V8 bug: https://code.google.com/p/v8/issues/detail?id=3509
  && Math.floor($acosh(Number.MAX_VALUE)) == 710
  // Tor Browser bug: Math.acosh(Infinity) -> NaN 
  && $acosh(Infinity) == Infinity
), 'Math', {
  acosh: function acosh(x){
    return (x = +x) < 1 ? NaN : x > 94906265.62425156
      ? Math.log(x) + Math.LN2
      : log1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));
  }
});
},{"./_export":48,"./_math-log1p":76}],167:[function(require,module,exports){
// 20.2.2.5 Math.asinh(x)
var $export = require('./_export')
  , $asinh  = Math.asinh;

function asinh(x){
  return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : Math.log(x + Math.sqrt(x * x + 1));
}

// Tor Browser bug: Math.asinh(0) -> -0 
$export($export.S + $export.F * !($asinh && 1 / $asinh(0) > 0), 'Math', {asinh: asinh});
},{"./_export":48}],168:[function(require,module,exports){
// 20.2.2.7 Math.atanh(x)
var $export = require('./_export')
  , $atanh  = Math.atanh;

// Tor Browser bug: Math.atanh(-0) -> 0 
$export($export.S + $export.F * !($atanh && 1 / $atanh(-0) < 0), 'Math', {
  atanh: function atanh(x){
    return (x = +x) == 0 ? x : Math.log((1 + x) / (1 - x)) / 2;
  }
});
},{"./_export":48}],169:[function(require,module,exports){
// 20.2.2.9 Math.cbrt(x)
var $export = require('./_export')
  , sign    = require('./_math-sign');

$export($export.S, 'Math', {
  cbrt: function cbrt(x){
    return sign(x = +x) * Math.pow(Math.abs(x), 1 / 3);
  }
});
},{"./_export":48,"./_math-sign":77}],170:[function(require,module,exports){
// 20.2.2.11 Math.clz32(x)
var $export = require('./_export');

$export($export.S, 'Math', {
  clz32: function clz32(x){
    return (x >>>= 0) ? 31 - Math.floor(Math.log(x + 0.5) * Math.LOG2E) : 32;
  }
});
},{"./_export":48}],171:[function(require,module,exports){
// 20.2.2.12 Math.cosh(x)
var $export = require('./_export')
  , exp     = Math.exp;

$export($export.S, 'Math', {
  cosh: function cosh(x){
    return (exp(x = +x) + exp(-x)) / 2;
  }
});
},{"./_export":48}],172:[function(require,module,exports){
// 20.2.2.14 Math.expm1(x)
var $export = require('./_export')
  , $expm1  = require('./_math-expm1');

$export($export.S + $export.F * ($expm1 != Math.expm1), 'Math', {expm1: $expm1});
},{"./_export":48,"./_math-expm1":75}],173:[function(require,module,exports){
// 20.2.2.16 Math.fround(x)
var $export   = require('./_export')
  , sign      = require('./_math-sign')
  , pow       = Math.pow
  , EPSILON   = pow(2, -52)
  , EPSILON32 = pow(2, -23)
  , MAX32     = pow(2, 127) * (2 - EPSILON32)
  , MIN32     = pow(2, -126);

var roundTiesToEven = function(n){
  return n + 1 / EPSILON - 1 / EPSILON;
};


$export($export.S, 'Math', {
  fround: function fround(x){
    var $abs  = Math.abs(x)
      , $sign = sign(x)
      , a, result;
    if($abs < MIN32)return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;
    a = (1 + EPSILON32 / EPSILON) * $abs;
    result = a - (a - $abs);
    if(result > MAX32 || result != result)return $sign * Infinity;
    return $sign * result;
  }
});
},{"./_export":48,"./_math-sign":77}],174:[function(require,module,exports){
// 20.2.2.17 Math.hypot([value1[, value2[, … ]]])
var $export = require('./_export')
  , abs     = Math.abs;

$export($export.S, 'Math', {
  hypot: function hypot(value1, value2){ // eslint-disable-line no-unused-vars
    var sum  = 0
      , i    = 0
      , aLen = arguments.length
      , larg = 0
      , arg, div;
    while(i < aLen){
      arg = abs(arguments[i++]);
      if(larg < arg){
        div  = larg / arg;
        sum  = sum * div * div + 1;
        larg = arg;
      } else if(arg > 0){
        div  = arg / larg;
        sum += div * div;
      } else sum += arg;
    }
    return larg === Infinity ? Infinity : larg * Math.sqrt(sum);
  }
});
},{"./_export":48}],175:[function(require,module,exports){
// 20.2.2.18 Math.imul(x, y)
var $export = require('./_export')
  , $imul   = Math.imul;

// some WebKit versions fails with big numbers, some has wrong arity
$export($export.S + $export.F * require('./_fails')(function(){
  return $imul(0xffffffff, 5) != -5 || $imul.length != 2;
}), 'Math', {
  imul: function imul(x, y){
    var UINT16 = 0xffff
      , xn = +x
      , yn = +y
      , xl = UINT16 & xn
      , yl = UINT16 & yn;
    return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);
  }
});
},{"./_export":48,"./_fails":50}],176:[function(require,module,exports){
// 20.2.2.21 Math.log10(x)
var $export = require('./_export');

$export($export.S, 'Math', {
  log10: function log10(x){
    return Math.log(x) / Math.LN10;
  }
});
},{"./_export":48}],177:[function(require,module,exports){
// 20.2.2.20 Math.log1p(x)
var $export = require('./_export');

$export($export.S, 'Math', {log1p: require('./_math-log1p')});
},{"./_export":48,"./_math-log1p":76}],178:[function(require,module,exports){
// 20.2.2.22 Math.log2(x)
var $export = require('./_export');

$export($export.S, 'Math', {
  log2: function log2(x){
    return Math.log(x) / Math.LN2;
  }
});
},{"./_export":48}],179:[function(require,module,exports){
// 20.2.2.28 Math.sign(x)
var $export = require('./_export');

$export($export.S, 'Math', {sign: require('./_math-sign')});
},{"./_export":48,"./_math-sign":77}],180:[function(require,module,exports){
// 20.2.2.30 Math.sinh(x)
var $export = require('./_export')
  , expm1   = require('./_math-expm1')
  , exp     = Math.exp;

// V8 near Chromium 38 has a problem with very small numbers
$export($export.S + $export.F * require('./_fails')(function(){
  return !Math.sinh(-2e-17) != -2e-17;
}), 'Math', {
  sinh: function sinh(x){
    return Math.abs(x = +x) < 1
      ? (expm1(x) - expm1(-x)) / 2
      : (exp(x - 1) - exp(-x - 1)) * (Math.E / 2);
  }
});
},{"./_export":48,"./_fails":50,"./_math-expm1":75}],181:[function(require,module,exports){
// 20.2.2.33 Math.tanh(x)
var $export = require('./_export')
  , expm1   = require('./_math-expm1')
  , exp     = Math.exp;

$export($export.S, 'Math', {
  tanh: function tanh(x){
    var a = expm1(x = +x)
      , b = expm1(-x);
    return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x));
  }
});
},{"./_export":48,"./_math-expm1":75}],182:[function(require,module,exports){
// 20.2.2.34 Math.trunc(x)
var $export = require('./_export');

$export($export.S, 'Math', {
  trunc: function trunc(it){
    return (it > 0 ? Math.floor : Math.ceil)(it);
  }
});
},{"./_export":48}],183:[function(require,module,exports){
'use strict';
var global            = require('./_global')
  , has               = require('./_has')
  , cof               = require('./_cof')
  , inheritIfRequired = require('./_inherit-if-required')
  , toPrimitive       = require('./_to-primitive')
  , fails             = require('./_fails')
  , gOPN              = require('./_object-gopn').f
  , gOPD              = require('./_object-gopd').f
  , dP                = require('./_object-dp').f
  , $trim             = require('./_string-trim').trim
  , NUMBER            = 'Number'
  , $Number           = global[NUMBER]
  , Base              = $Number
  , proto             = $Number.prototype
  // Opera ~12 has broken Object#toString
  , BROKEN_COF        = cof(require('./_object-create')(proto)) == NUMBER
  , TRIM              = 'trim' in String.prototype;

// 7.1.3 ToNumber(argument)
var toNumber = function(argument){
  var it = toPrimitive(argument, false);
  if(typeof it == 'string' && it.length > 2){
    it = TRIM ? it.trim() : $trim(it, 3);
    var first = it.charCodeAt(0)
      , third, radix, maxCode;
    if(first === 43 || first === 45){
      third = it.charCodeAt(2);
      if(third === 88 || third === 120)return NaN; // Number('+0x1') should be NaN, old V8 fix
    } else if(first === 48){
      switch(it.charCodeAt(1)){
        case 66 : case 98  : radix = 2; maxCode = 49; break; // fast equal /^0b[01]+$/i
        case 79 : case 111 : radix = 8; maxCode = 55; break; // fast equal /^0o[0-7]+$/i
        default : return +it;
      }
      for(var digits = it.slice(2), i = 0, l = digits.length, code; i < l; i++){
        code = digits.charCodeAt(i);
        // parseInt parses a string to a first unavailable symbol
        // but ToNumber should return NaN if a string contains unavailable symbols
        if(code < 48 || code > maxCode)return NaN;
      } return parseInt(digits, radix);
    }
  } return +it;
};

if(!$Number(' 0o1') || !$Number('0b1') || $Number('+0x1')){
  $Number = function Number(value){
    var it = arguments.length < 1 ? 0 : value
      , that = this;
    return that instanceof $Number
      // check on 1..constructor(foo) case
      && (BROKEN_COF ? fails(function(){ proto.valueOf.call(that); }) : cof(that) != NUMBER)
        ? inheritIfRequired(new Base(toNumber(it)), that, $Number) : toNumber(it);
  };
  for(var keys = require('./_descriptors') ? gOPN(Base) : (
    // ES3:
    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +
    // ES6 (in case, if modules with ES6 Number statics required before):
    'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +
    'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger'
  ).split(','), j = 0, key; keys.length > j; j++){
    if(has(Base, key = keys[j]) && !has($Number, key)){
      dP($Number, key, gOPD(Base, key));
    }
  }
  $Number.prototype = proto;
  proto.constructor = $Number;
  require('./_redefine')(global, NUMBER, $Number);
}
},{"./_cof":34,"./_descriptors":44,"./_fails":50,"./_global":54,"./_has":55,"./_inherit-if-required":59,"./_object-create":82,"./_object-dp":83,"./_object-gopd":86,"./_object-gopn":88,"./_redefine":103,"./_string-trim":118,"./_to-primitive":126}],184:[function(require,module,exports){
// 20.1.2.1 Number.EPSILON
var $export = require('./_export');

$export($export.S, 'Number', {EPSILON: Math.pow(2, -52)});
},{"./_export":48}],185:[function(require,module,exports){
// 20.1.2.2 Number.isFinite(number)
var $export   = require('./_export')
  , _isFinite = require('./_global').isFinite;

$export($export.S, 'Number', {
  isFinite: function isFinite(it){
    return typeof it == 'number' && _isFinite(it);
  }
});
},{"./_export":48,"./_global":54}],186:[function(require,module,exports){
// 20.1.2.3 Number.isInteger(number)
var $export = require('./_export');

$export($export.S, 'Number', {isInteger: require('./_is-integer')});
},{"./_export":48,"./_is-integer":64}],187:[function(require,module,exports){
// 20.1.2.4 Number.isNaN(number)
var $export = require('./_export');

$export($export.S, 'Number', {
  isNaN: function isNaN(number){
    return number != number;
  }
});
},{"./_export":48}],188:[function(require,module,exports){
// 20.1.2.5 Number.isSafeInteger(number)
var $export   = require('./_export')
  , isInteger = require('./_is-integer')
  , abs       = Math.abs;

$export($export.S, 'Number', {
  isSafeInteger: function isSafeInteger(number){
    return isInteger(number) && abs(number) <= 0x1fffffffffffff;
  }
});
},{"./_export":48,"./_is-integer":64}],189:[function(require,module,exports){
// 20.1.2.6 Number.MAX_SAFE_INTEGER
var $export = require('./_export');

$export($export.S, 'Number', {MAX_SAFE_INTEGER: 0x1fffffffffffff});
},{"./_export":48}],190:[function(require,module,exports){
// 20.1.2.10 Number.MIN_SAFE_INTEGER
var $export = require('./_export');

$export($export.S, 'Number', {MIN_SAFE_INTEGER: -0x1fffffffffffff});
},{"./_export":48}],191:[function(require,module,exports){
var $export     = require('./_export')
  , $parseFloat = require('./_parse-float');
// 20.1.2.12 Number.parseFloat(string)
$export($export.S + $export.F * (Number.parseFloat != $parseFloat), 'Number', {parseFloat: $parseFloat});
},{"./_export":48,"./_parse-float":97}],192:[function(require,module,exports){
var $export   = require('./_export')
  , $parseInt = require('./_parse-int');
// 20.1.2.13 Number.parseInt(string, radix)
$export($export.S + $export.F * (Number.parseInt != $parseInt), 'Number', {parseInt: $parseInt});
},{"./_export":48,"./_parse-int":98}],193:[function(require,module,exports){
'use strict';
var $export      = require('./_export')
  , toInteger    = require('./_to-integer')
  , aNumberValue = require('./_a-number-value')
  , repeat       = require('./_string-repeat')
  , $toFixed     = 1..toFixed
  , floor        = Math.floor
  , data         = [0, 0, 0, 0, 0, 0]
  , ERROR        = 'Number.toFixed: incorrect invocation!'
  , ZERO         = '0';

var multiply = function(n, c){
  var i  = -1
    , c2 = c;
  while(++i < 6){
    c2 += n * data[i];
    data[i] = c2 % 1e7;
    c2 = floor(c2 / 1e7);
  }
};
var divide = function(n){
  var i = 6
    , c = 0;
  while(--i >= 0){
    c += data[i];
    data[i] = floor(c / n);
    c = (c % n) * 1e7;
  }
};
var numToString = function(){
  var i = 6
    , s = '';
  while(--i >= 0){
    if(s !== '' || i === 0 || data[i] !== 0){
      var t = String(data[i]);
      s = s === '' ? t : s + repeat.call(ZERO, 7 - t.length) + t;
    }
  } return s;
};
var pow = function(x, n, acc){
  return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);
};
var log = function(x){
  var n  = 0
    , x2 = x;
  while(x2 >= 4096){
    n += 12;
    x2 /= 4096;
  }
  while(x2 >= 2){
    n  += 1;
    x2 /= 2;
  } return n;
};

$export($export.P + $export.F * (!!$toFixed && (
  0.00008.toFixed(3) !== '0.000' ||
  0.9.toFixed(0) !== '1' ||
  1.255.toFixed(2) !== '1.25' ||
  1000000000000000128..toFixed(0) !== '1000000000000000128'
) || !require('./_fails')(function(){
  // V8 ~ Android 4.3-
  $toFixed.call({});
})), 'Number', {
  toFixed: function toFixed(fractionDigits){
    var x = aNumberValue(this, ERROR)
      , f = toInteger(fractionDigits)
      , s = ''
      , m = ZERO
      , e, z, j, k;
    if(f < 0 || f > 20)throw RangeError(ERROR);
    if(x != x)return 'NaN';
    if(x <= -1e21 || x >= 1e21)return String(x);
    if(x < 0){
      s = '-';
      x = -x;
    }
    if(x > 1e-21){
      e = log(x * pow(2, 69, 1)) - 69;
      z = e < 0 ? x * pow(2, -e, 1) : x / pow(2, e, 1);
      z *= 0x10000000000000;
      e = 52 - e;
      if(e > 0){
        multiply(0, z);
        j = f;
        while(j >= 7){
          multiply(1e7, 0);
          j -= 7;
        }
        multiply(pow(10, j, 1), 0);
        j = e - 1;
        while(j >= 23){
          divide(1 << 23);
          j -= 23;
        }
        divide(1 << j);
        multiply(1, 1);
        divide(2);
        m = numToString();
      } else {
        multiply(0, z);
        multiply(1 << -e, 0);
        m = numToString() + repeat.call(ZERO, f);
      }
    }
    if(f > 0){
      k = m.length;
      m = s + (k <= f ? '0.' + repeat.call(ZERO, f - k) + m : m.slice(0, k - f) + '.' + m.slice(k - f));
    } else {
      m = s + m;
    } return m;
  }
});
},{"./_a-number-value":20,"./_export":48,"./_fails":50,"./_string-repeat":117,"./_to-integer":122}],194:[function(require,module,exports){
'use strict';
var $export      = require('./_export')
  , $fails       = require('./_fails')
  , aNumberValue = require('./_a-number-value')
  , $toPrecision = 1..toPrecision;

$export($export.P + $export.F * ($fails(function(){
  // IE7-
  return $toPrecision.call(1, undefined) !== '1';
}) || !$fails(function(){
  // V8 ~ Android 4.3-
  $toPrecision.call({});
})), 'Number', {
  toPrecision: function toPrecision(precision){
    var that = aNumberValue(this, 'Number#toPrecision: incorrect invocation!');
    return precision === undefined ? $toPrecision.call(that) : $toPrecision.call(that, precision); 
  }
});
},{"./_a-number-value":20,"./_export":48,"./_fails":50}],195:[function(require,module,exports){
// 19.1.3.1 Object.assign(target, source)
var $export = require('./_export');

$export($export.S + $export.F, 'Object', {assign: require('./_object-assign')});
},{"./_export":48,"./_object-assign":81}],196:[function(require,module,exports){
var $export = require('./_export')
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
$export($export.S, 'Object', {create: require('./_object-create')});
},{"./_export":48,"./_object-create":82}],197:[function(require,module,exports){
var $export = require('./_export');
// 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)
$export($export.S + $export.F * !require('./_descriptors'), 'Object', {defineProperties: require('./_object-dps')});
},{"./_descriptors":44,"./_export":48,"./_object-dps":84}],198:[function(require,module,exports){
var $export = require('./_export');
// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
$export($export.S + $export.F * !require('./_descriptors'), 'Object', {defineProperty: require('./_object-dp').f});
},{"./_descriptors":44,"./_export":48,"./_object-dp":83}],199:[function(require,module,exports){
// 19.1.2.5 Object.freeze(O)
var isObject = require('./_is-object')
  , meta     = require('./_meta').onFreeze;

require('./_object-sap')('freeze', function($freeze){
  return function freeze(it){
    return $freeze && isObject(it) ? $freeze(meta(it)) : it;
  };
});
},{"./_is-object":65,"./_meta":78,"./_object-sap":94}],200:[function(require,module,exports){
// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
var toIObject                 = require('./_to-iobject')
  , $getOwnPropertyDescriptor = require('./_object-gopd').f;

require('./_object-sap')('getOwnPropertyDescriptor', function(){
  return function getOwnPropertyDescriptor(it, key){
    return $getOwnPropertyDescriptor(toIObject(it), key);
  };
});
},{"./_object-gopd":86,"./_object-sap":94,"./_to-iobject":123}],201:[function(require,module,exports){
// 19.1.2.7 Object.getOwnPropertyNames(O)
require('./_object-sap')('getOwnPropertyNames', function(){
  return require('./_object-gopn-ext').f;
});
},{"./_object-gopn-ext":87,"./_object-sap":94}],202:[function(require,module,exports){
// 19.1.2.9 Object.getPrototypeOf(O)
var toObject        = require('./_to-object')
  , $getPrototypeOf = require('./_object-gpo');

require('./_object-sap')('getPrototypeOf', function(){
  return function getPrototypeOf(it){
    return $getPrototypeOf(toObject(it));
  };
});
},{"./_object-gpo":90,"./_object-sap":94,"./_to-object":125}],203:[function(require,module,exports){
// 19.1.2.11 Object.isExtensible(O)
var isObject = require('./_is-object');

require('./_object-sap')('isExtensible', function($isExtensible){
  return function isExtensible(it){
    return isObject(it) ? $isExtensible ? $isExtensible(it) : true : false;
  };
});
},{"./_is-object":65,"./_object-sap":94}],204:[function(require,module,exports){
// 19.1.2.12 Object.isFrozen(O)
var isObject = require('./_is-object');

require('./_object-sap')('isFrozen', function($isFrozen){
  return function isFrozen(it){
    return isObject(it) ? $isFrozen ? $isFrozen(it) : false : true;
  };
});
},{"./_is-object":65,"./_object-sap":94}],205:[function(require,module,exports){
// 19.1.2.13 Object.isSealed(O)
var isObject = require('./_is-object');

require('./_object-sap')('isSealed', function($isSealed){
  return function isSealed(it){
    return isObject(it) ? $isSealed ? $isSealed(it) : false : true;
  };
});
},{"./_is-object":65,"./_object-sap":94}],206:[function(require,module,exports){
// 19.1.3.10 Object.is(value1, value2)
var $export = require('./_export');
$export($export.S, 'Object', {is: require('./_same-value')});
},{"./_export":48,"./_same-value":105}],207:[function(require,module,exports){
// 19.1.2.14 Object.keys(O)
var toObject = require('./_to-object')
  , $keys    = require('./_object-keys');

require('./_object-sap')('keys', function(){
  return function keys(it){
    return $keys(toObject(it));
  };
});
},{"./_object-keys":92,"./_object-sap":94,"./_to-object":125}],208:[function(require,module,exports){
// 19.1.2.15 Object.preventExtensions(O)
var isObject = require('./_is-object')
  , meta     = require('./_meta').onFreeze;

require('./_object-sap')('preventExtensions', function($preventExtensions){
  return function preventExtensions(it){
    return $preventExtensions && isObject(it) ? $preventExtensions(meta(it)) : it;
  };
});
},{"./_is-object":65,"./_meta":78,"./_object-sap":94}],209:[function(require,module,exports){
// 19.1.2.17 Object.seal(O)
var isObject = require('./_is-object')
  , meta     = require('./_meta').onFreeze;

require('./_object-sap')('seal', function($seal){
  return function seal(it){
    return $seal && isObject(it) ? $seal(meta(it)) : it;
  };
});
},{"./_is-object":65,"./_meta":78,"./_object-sap":94}],210:[function(require,module,exports){
// 19.1.3.19 Object.setPrototypeOf(O, proto)
var $export = require('./_export');
$export($export.S, 'Object', {setPrototypeOf: require('./_set-proto').set});
},{"./_export":48,"./_set-proto":106}],211:[function(require,module,exports){
'use strict';
// 19.1.3.6 Object.prototype.toString()
var classof = require('./_classof')
  , test    = {};
test[require('./_wks')('toStringTag')] = 'z';
if(test + '' != '[object z]'){
  require('./_redefine')(Object.prototype, 'toString', function toString(){
    return '[object ' + classof(this) + ']';
  }, true);
}
},{"./_classof":33,"./_redefine":103,"./_wks":133}],212:[function(require,module,exports){
var $export     = require('./_export')
  , $parseFloat = require('./_parse-float');
// 18.2.4 parseFloat(string)
$export($export.G + $export.F * (parseFloat != $parseFloat), {parseFloat: $parseFloat});
},{"./_export":48,"./_parse-float":97}],213:[function(require,module,exports){
var $export   = require('./_export')
  , $parseInt = require('./_parse-int');
// 18.2.5 parseInt(string, radix)
$export($export.G + $export.F * (parseInt != $parseInt), {parseInt: $parseInt});
},{"./_export":48,"./_parse-int":98}],214:[function(require,module,exports){
'use strict';
var LIBRARY            = require('./_library')
  , global             = require('./_global')
  , ctx                = require('./_ctx')
  , classof            = require('./_classof')
  , $export            = require('./_export')
  , isObject           = require('./_is-object')
  , aFunction          = require('./_a-function')
  , anInstance         = require('./_an-instance')
  , forOf              = require('./_for-of')
  , speciesConstructor = require('./_species-constructor')
  , task               = require('./_task').set
  , microtask          = require('./_microtask')()
  , PROMISE            = 'Promise'
  , TypeError          = global.TypeError
  , process            = global.process
  , $Promise           = global[PROMISE]
  , process            = global.process
  , isNode             = classof(process) == 'process'
  , empty              = function(){ /* empty */ }
  , Internal, GenericPromiseCapability, Wrapper;

var USE_NATIVE = !!function(){
  try {
    // correct subclassing with @@species support
    var promise     = $Promise.resolve(1)
      , FakePromise = (promise.constructor = {})[require('./_wks')('species')] = function(exec){ exec(empty, empty); };
    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
    return (isNode || typeof PromiseRejectionEvent == 'function') && promise.then(empty) instanceof FakePromise;
  } catch(e){ /* empty */ }
}();

// helpers
var sameConstructor = function(a, b){
  // with library wrapper special case
  return a === b || a === $Promise && b === Wrapper;
};
var isThenable = function(it){
  var then;
  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
};
var newPromiseCapability = function(C){
  return sameConstructor($Promise, C)
    ? new PromiseCapability(C)
    : new GenericPromiseCapability(C);
};
var PromiseCapability = GenericPromiseCapability = function(C){
  var resolve, reject;
  this.promise = new C(function($$resolve, $$reject){
    if(resolve !== undefined || reject !== undefined)throw TypeError('Bad Promise constructor');
    resolve = $$resolve;
    reject  = $$reject;
  });
  this.resolve = aFunction(resolve);
  this.reject  = aFunction(reject);
};
var perform = function(exec){
  try {
    exec();
  } catch(e){
    return {error: e};
  }
};
var notify = function(promise, isReject){
  if(promise._n)return;
  promise._n = true;
  var chain = promise._c;
  microtask(function(){
    var value = promise._v
      , ok    = promise._s == 1
      , i     = 0;
    var run = function(reaction){
      var handler = ok ? reaction.ok : reaction.fail
        , resolve = reaction.resolve
        , reject  = reaction.reject
        , domain  = reaction.domain
        , result, then;
      try {
        if(handler){
          if(!ok){
            if(promise._h == 2)onHandleUnhandled(promise);
            promise._h = 1;
          }
          if(handler === true)result = value;
          else {
            if(domain)domain.enter();
            result = handler(value);
            if(domain)domain.exit();
          }
          if(result === reaction.promise){
            reject(TypeError('Promise-chain cycle'));
          } else if(then = isThenable(result)){
            then.call(result, resolve, reject);
          } else resolve(result);
        } else reject(value);
      } catch(e){
        reject(e);
      }
    };
    while(chain.length > i)run(chain[i++]); // variable length - can't use forEach
    promise._c = [];
    promise._n = false;
    if(isReject && !promise._h)onUnhandled(promise);
  });
};
var onUnhandled = function(promise){
  task.call(global, function(){
    var value = promise._v
      , abrupt, handler, console;
    if(isUnhandled(promise)){
      abrupt = perform(function(){
        if(isNode){
          process.emit('unhandledRejection', value, promise);
        } else if(handler = global.onunhandledrejection){
          handler({promise: promise, reason: value});
        } else if((console = global.console) && console.error){
          console.error('Unhandled promise rejection', value);
        }
      });
      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
      promise._h = isNode || isUnhandled(promise) ? 2 : 1;
    } promise._a = undefined;
    if(abrupt)throw abrupt.error;
  });
};
var isUnhandled = function(promise){
  if(promise._h == 1)return false;
  var chain = promise._a || promise._c
    , i     = 0
    , reaction;
  while(chain.length > i){
    reaction = chain[i++];
    if(reaction.fail || !isUnhandled(reaction.promise))return false;
  } return true;
};
var onHandleUnhandled = function(promise){
  task.call(global, function(){
    var handler;
    if(isNode){
      process.emit('rejectionHandled', promise);
    } else if(handler = global.onrejectionhandled){
      handler({promise: promise, reason: promise._v});
    }
  });
};
var $reject = function(value){
  var promise = this;
  if(promise._d)return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  promise._v = value;
  promise._s = 2;
  if(!promise._a)promise._a = promise._c.slice();
  notify(promise, true);
};
var $resolve = function(value){
  var promise = this
    , then;
  if(promise._d)return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  try {
    if(promise === value)throw TypeError("Promise can't be resolved itself");
    if(then = isThenable(value)){
      microtask(function(){
        var wrapper = {_w: promise, _d: false}; // wrap
        try {
          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
        } catch(e){
          $reject.call(wrapper, e);
        }
      });
    } else {
      promise._v = value;
      promise._s = 1;
      notify(promise, false);
    }
  } catch(e){
    $reject.call({_w: promise, _d: false}, e); // wrap
  }
};

// constructor polyfill
if(!USE_NATIVE){
  // 25.4.3.1 Promise(executor)
  $Promise = function Promise(executor){
    anInstance(this, $Promise, PROMISE, '_h');
    aFunction(executor);
    Internal.call(this);
    try {
      executor(ctx($resolve, this, 1), ctx($reject, this, 1));
    } catch(err){
      $reject.call(this, err);
    }
  };
  Internal = function Promise(executor){
    this._c = [];             // <- awaiting reactions
    this._a = undefined;      // <- checked in isUnhandled reactions
    this._s = 0;              // <- state
    this._d = false;          // <- done
    this._v = undefined;      // <- value
    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
    this._n = false;          // <- notify
  };
  Internal.prototype = require('./_redefine-all')($Promise.prototype, {
    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
    then: function then(onFulfilled, onRejected){
      var reaction    = newPromiseCapability(speciesConstructor(this, $Promise));
      reaction.ok     = typeof onFulfilled == 'function' ? onFulfilled : true;
      reaction.fail   = typeof onRejected == 'function' && onRejected;
      reaction.domain = isNode ? process.domain : undefined;
      this._c.push(reaction);
      if(this._a)this._a.push(reaction);
      if(this._s)notify(this, false);
      return reaction.promise;
    },
    // 25.4.5.1 Promise.prototype.catch(onRejected)
    'catch': function(onRejected){
      return this.then(undefined, onRejected);
    }
  });
  PromiseCapability = function(){
    var promise  = new Internal;
    this.promise = promise;
    this.resolve = ctx($resolve, promise, 1);
    this.reject  = ctx($reject, promise, 1);
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, {Promise: $Promise});
require('./_set-to-string-tag')($Promise, PROMISE);
require('./_set-species')(PROMISE);
Wrapper = require('./_core')[PROMISE];

// statics
$export($export.S + $export.F * !USE_NATIVE, PROMISE, {
  // 25.4.4.5 Promise.reject(r)
  reject: function reject(r){
    var capability = newPromiseCapability(this)
      , $$reject   = capability.reject;
    $$reject(r);
    return capability.promise;
  }
});
$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
  // 25.4.4.6 Promise.resolve(x)
  resolve: function resolve(x){
    // instanceof instead of internal slot check because we should fix it without replacement native Promise core
    if(x instanceof $Promise && sameConstructor(x.constructor, this))return x;
    var capability = newPromiseCapability(this)
      , $$resolve  = capability.resolve;
    $$resolve(x);
    return capability.promise;
  }
});
$export($export.S + $export.F * !(USE_NATIVE && require('./_iter-detect')(function(iter){
  $Promise.all(iter)['catch'](empty);
})), PROMISE, {
  // 25.4.4.1 Promise.all(iterable)
  all: function all(iterable){
    var C          = this
      , capability = newPromiseCapability(C)
      , resolve    = capability.resolve
      , reject     = capability.reject;
    var abrupt = perform(function(){
      var values    = []
        , index     = 0
        , remaining = 1;
      forOf(iterable, false, function(promise){
        var $index        = index++
          , alreadyCalled = false;
        values.push(undefined);
        remaining++;
        C.resolve(promise).then(function(value){
          if(alreadyCalled)return;
          alreadyCalled  = true;
          values[$index] = value;
          --remaining || resolve(values);
        }, reject);
      });
      --remaining || resolve(values);
    });
    if(abrupt)reject(abrupt.error);
    return capability.promise;
  },
  // 25.4.4.4 Promise.race(iterable)
  race: function race(iterable){
    var C          = this
      , capability = newPromiseCapability(C)
      , reject     = capability.reject;
    var abrupt = perform(function(){
      forOf(iterable, false, function(promise){
        C.resolve(promise).then(capability.resolve, reject);
      });
    });
    if(abrupt)reject(abrupt.error);
    return capability.promise;
  }
});
},{"./_a-function":19,"./_an-instance":22,"./_classof":33,"./_core":39,"./_ctx":41,"./_export":48,"./_for-of":53,"./_global":54,"./_is-object":65,"./_iter-detect":70,"./_library":74,"./_microtask":80,"./_redefine-all":102,"./_set-species":107,"./_set-to-string-tag":108,"./_species-constructor":111,"./_task":120,"./_wks":133}],215:[function(require,module,exports){
// 26.1.1 Reflect.apply(target, thisArgument, argumentsList)
var $export   = require('./_export')
  , aFunction = require('./_a-function')
  , anObject  = require('./_an-object')
  , rApply    = (require('./_global').Reflect || {}).apply
  , fApply    = Function.apply;
// MS Edge argumentsList argument is optional
$export($export.S + $export.F * !require('./_fails')(function(){
  rApply(function(){});
}), 'Reflect', {
  apply: function apply(target, thisArgument, argumentsList){
    var T = aFunction(target)
      , L = anObject(argumentsList);
    return rApply ? rApply(T, thisArgument, L) : fApply.call(T, thisArgument, L);
  }
});
},{"./_a-function":19,"./_an-object":23,"./_export":48,"./_fails":50,"./_global":54}],216:[function(require,module,exports){
// 26.1.2 Reflect.construct(target, argumentsList [, newTarget])
var $export    = require('./_export')
  , create     = require('./_object-create')
  , aFunction  = require('./_a-function')
  , anObject   = require('./_an-object')
  , isObject   = require('./_is-object')
  , fails      = require('./_fails')
  , bind       = require('./_bind')
  , rConstruct = (require('./_global').Reflect || {}).construct;

// MS Edge supports only 2 arguments and argumentsList argument is optional
// FF Nightly sets third argument as `new.target`, but does not create `this` from it
var NEW_TARGET_BUG = fails(function(){
  function F(){}
  return !(rConstruct(function(){}, [], F) instanceof F);
});
var ARGS_BUG = !fails(function(){
  rConstruct(function(){});
});

$export($export.S + $export.F * (NEW_TARGET_BUG || ARGS_BUG), 'Reflect', {
  construct: function construct(Target, args /*, newTarget*/){
    aFunction(Target);
    anObject(args);
    var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);
    if(ARGS_BUG && !NEW_TARGET_BUG)return rConstruct(Target, args, newTarget);
    if(Target == newTarget){
      // w/o altered newTarget, optimization for 0-4 arguments
      switch(args.length){
        case 0: return new Target;
        case 1: return new Target(args[0]);
        case 2: return new Target(args[0], args[1]);
        case 3: return new Target(args[0], args[1], args[2]);
        case 4: return new Target(args[0], args[1], args[2], args[3]);
      }
      // w/o altered newTarget, lot of arguments case
      var $args = [null];
      $args.push.apply($args, args);
      return new (bind.apply(Target, $args));
    }
    // with altered newTarget, not support built-in constructors
    var proto    = newTarget.prototype
      , instance = create(isObject(proto) ? proto : Object.prototype)
      , result   = Function.apply.call(Target, instance, args);
    return isObject(result) ? result : instance;
  }
});
},{"./_a-function":19,"./_an-object":23,"./_bind":32,"./_export":48,"./_fails":50,"./_global":54,"./_is-object":65,"./_object-create":82}],217:[function(require,module,exports){
// 26.1.3 Reflect.defineProperty(target, propertyKey, attributes)
var dP          = require('./_object-dp')
  , $export     = require('./_export')
  , anObject    = require('./_an-object')
  , toPrimitive = require('./_to-primitive');

// MS Edge has broken Reflect.defineProperty - throwing instead of returning false
$export($export.S + $export.F * require('./_fails')(function(){
  Reflect.defineProperty(dP.f({}, 1, {value: 1}), 1, {value: 2});
}), 'Reflect', {
  defineProperty: function defineProperty(target, propertyKey, attributes){
    anObject(target);
    propertyKey = toPrimitive(propertyKey, true);
    anObject(attributes);
    try {
      dP.f(target, propertyKey, attributes);
      return true;
    } catch(e){
      return false;
    }
  }
});
},{"./_an-object":23,"./_export":48,"./_fails":50,"./_object-dp":83,"./_to-primitive":126}],218:[function(require,module,exports){
// 26.1.4 Reflect.deleteProperty(target, propertyKey)
var $export  = require('./_export')
  , gOPD     = require('./_object-gopd').f
  , anObject = require('./_an-object');

$export($export.S, 'Reflect', {
  deleteProperty: function deleteProperty(target, propertyKey){
    var desc = gOPD(anObject(target), propertyKey);
    return desc && !desc.configurable ? false : delete target[propertyKey];
  }
});
},{"./_an-object":23,"./_export":48,"./_object-gopd":86}],219:[function(require,module,exports){
'use strict';
// 26.1.5 Reflect.enumerate(target)
var $export  = require('./_export')
  , anObject = require('./_an-object');
var Enumerate = function(iterated){
  this._t = anObject(iterated); // target
  this._i = 0;                  // next index
  var keys = this._k = []       // keys
    , key;
  for(key in iterated)keys.push(key);
};
require('./_iter-create')(Enumerate, 'Object', function(){
  var that = this
    , keys = that._k
    , key;
  do {
    if(that._i >= keys.length)return {value: undefined, done: true};
  } while(!((key = keys[that._i++]) in that._t));
  return {value: key, done: false};
});

$export($export.S, 'Reflect', {
  enumerate: function enumerate(target){
    return new Enumerate(target);
  }
});
},{"./_an-object":23,"./_export":48,"./_iter-create":68}],220:[function(require,module,exports){
// 26.1.7 Reflect.getOwnPropertyDescriptor(target, propertyKey)
var gOPD     = require('./_object-gopd')
  , $export  = require('./_export')
  , anObject = require('./_an-object');

$export($export.S, 'Reflect', {
  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey){
    return gOPD.f(anObject(target), propertyKey);
  }
});
},{"./_an-object":23,"./_export":48,"./_object-gopd":86}],221:[function(require,module,exports){
// 26.1.8 Reflect.getPrototypeOf(target)
var $export  = require('./_export')
  , getProto = require('./_object-gpo')
  , anObject = require('./_an-object');

$export($export.S, 'Reflect', {
  getPrototypeOf: function getPrototypeOf(target){
    return getProto(anObject(target));
  }
});
},{"./_an-object":23,"./_export":48,"./_object-gpo":90}],222:[function(require,module,exports){
// 26.1.6 Reflect.get(target, propertyKey [, receiver])
var gOPD           = require('./_object-gopd')
  , getPrototypeOf = require('./_object-gpo')
  , has            = require('./_has')
  , $export        = require('./_export')
  , isObject       = require('./_is-object')
  , anObject       = require('./_an-object');

function get(target, propertyKey/*, receiver*/){
  var receiver = arguments.length < 3 ? target : arguments[2]
    , desc, proto;
  if(anObject(target) === receiver)return target[propertyKey];
  if(desc = gOPD.f(target, propertyKey))return has(desc, 'value')
    ? desc.value
    : desc.get !== undefined
      ? desc.get.call(receiver)
      : undefined;
  if(isObject(proto = getPrototypeOf(target)))return get(proto, propertyKey, receiver);
}

$export($export.S, 'Reflect', {get: get});
},{"./_an-object":23,"./_export":48,"./_has":55,"./_is-object":65,"./_object-gopd":86,"./_object-gpo":90}],223:[function(require,module,exports){
// 26.1.9 Reflect.has(target, propertyKey)
var $export = require('./_export');

$export($export.S, 'Reflect', {
  has: function has(target, propertyKey){
    return propertyKey in target;
  }
});
},{"./_export":48}],224:[function(require,module,exports){
// 26.1.10 Reflect.isExtensible(target)
var $export       = require('./_export')
  , anObject      = require('./_an-object')
  , $isExtensible = Object.isExtensible;

$export($export.S, 'Reflect', {
  isExtensible: function isExtensible(target){
    anObject(target);
    return $isExtensible ? $isExtensible(target) : true;
  }
});
},{"./_an-object":23,"./_export":48}],225:[function(require,module,exports){
// 26.1.11 Reflect.ownKeys(target)
var $export = require('./_export');

$export($export.S, 'Reflect', {ownKeys: require('./_own-keys')});
},{"./_export":48,"./_own-keys":96}],226:[function(require,module,exports){
// 26.1.12 Reflect.preventExtensions(target)
var $export            = require('./_export')
  , anObject           = require('./_an-object')
  , $preventExtensions = Object.preventExtensions;

$export($export.S, 'Reflect', {
  preventExtensions: function preventExtensions(target){
    anObject(target);
    try {
      if($preventExtensions)$preventExtensions(target);
      return true;
    } catch(e){
      return false;
    }
  }
});
},{"./_an-object":23,"./_export":48}],227:[function(require,module,exports){
// 26.1.14 Reflect.setPrototypeOf(target, proto)
var $export  = require('./_export')
  , setProto = require('./_set-proto');

if(setProto)$export($export.S, 'Reflect', {
  setPrototypeOf: function setPrototypeOf(target, proto){
    setProto.check(target, proto);
    try {
      setProto.set(target, proto);
      return true;
    } catch(e){
      return false;
    }
  }
});
},{"./_export":48,"./_set-proto":106}],228:[function(require,module,exports){
// 26.1.13 Reflect.set(target, propertyKey, V [, receiver])
var dP             = require('./_object-dp')
  , gOPD           = require('./_object-gopd')
  , getPrototypeOf = require('./_object-gpo')
  , has            = require('./_has')
  , $export        = require('./_export')
  , createDesc     = require('./_property-desc')
  , anObject       = require('./_an-object')
  , isObject       = require('./_is-object');

function set(target, propertyKey, V/*, receiver*/){
  var receiver = arguments.length < 4 ? target : arguments[3]
    , ownDesc  = gOPD.f(anObject(target), propertyKey)
    , existingDescriptor, proto;
  if(!ownDesc){
    if(isObject(proto = getPrototypeOf(target))){
      return set(proto, propertyKey, V, receiver);
    }
    ownDesc = createDesc(0);
  }
  if(has(ownDesc, 'value')){
    if(ownDesc.writable === false || !isObject(receiver))return false;
    existingDescriptor = gOPD.f(receiver, propertyKey) || createDesc(0);
    existingDescriptor.value = V;
    dP.f(receiver, propertyKey, existingDescriptor);
    return true;
  }
  return ownDesc.set === undefined ? false : (ownDesc.set.call(receiver, V), true);
}

$export($export.S, 'Reflect', {set: set});
},{"./_an-object":23,"./_export":48,"./_has":55,"./_is-object":65,"./_object-dp":83,"./_object-gopd":86,"./_object-gpo":90,"./_property-desc":101}],229:[function(require,module,exports){
var global            = require('./_global')
  , inheritIfRequired = require('./_inherit-if-required')
  , dP                = require('./_object-dp').f
  , gOPN              = require('./_object-gopn').f
  , isRegExp          = require('./_is-regexp')
  , $flags            = require('./_flags')
  , $RegExp           = global.RegExp
  , Base              = $RegExp
  , proto             = $RegExp.prototype
  , re1               = /a/g
  , re2               = /a/g
  // "new" creates a new object, old webkit buggy here
  , CORRECT_NEW       = new $RegExp(re1) !== re1;

if(require('./_descriptors') && (!CORRECT_NEW || require('./_fails')(function(){
  re2[require('./_wks')('match')] = false;
  // RegExp constructor can alter flags and IsRegExp works correct with @@match
  return $RegExp(re1) != re1 || $RegExp(re2) == re2 || $RegExp(re1, 'i') != '/a/i';
}))){
  $RegExp = function RegExp(p, f){
    var tiRE = this instanceof $RegExp
      , piRE = isRegExp(p)
      , fiU  = f === undefined;
    return !tiRE && piRE && p.constructor === $RegExp && fiU ? p
      : inheritIfRequired(CORRECT_NEW
        ? new Base(piRE && !fiU ? p.source : p, f)
        : Base((piRE = p instanceof $RegExp) ? p.source : p, piRE && fiU ? $flags.call(p) : f)
      , tiRE ? this : proto, $RegExp);
  };
  var proxy = function(key){
    key in $RegExp || dP($RegExp, key, {
      configurable: true,
      get: function(){ return Base[key]; },
      set: function(it){ Base[key] = it; }
    });
  };
  for(var keys = gOPN(Base), i = 0; keys.length > i; )proxy(keys[i++]);
  proto.constructor = $RegExp;
  $RegExp.prototype = proto;
  require('./_redefine')(global, 'RegExp', $RegExp);
}

require('./_set-species')('RegExp');
},{"./_descriptors":44,"./_fails":50,"./_flags":52,"./_global":54,"./_inherit-if-required":59,"./_is-regexp":66,"./_object-dp":83,"./_object-gopn":88,"./_redefine":103,"./_set-species":107,"./_wks":133}],230:[function(require,module,exports){
// 21.2.5.3 get RegExp.prototype.flags()
if(require('./_descriptors') && /./g.flags != 'g')require('./_object-dp').f(RegExp.prototype, 'flags', {
  configurable: true,
  get: require('./_flags')
});
},{"./_descriptors":44,"./_flags":52,"./_object-dp":83}],231:[function(require,module,exports){
// @@match logic
require('./_fix-re-wks')('match', 1, function(defined, MATCH, $match){
  // 21.1.3.11 String.prototype.match(regexp)
  return [function match(regexp){
    'use strict';
    var O  = defined(this)
      , fn = regexp == undefined ? undefined : regexp[MATCH];
    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
  }, $match];
});
},{"./_fix-re-wks":51}],232:[function(require,module,exports){
// @@replace logic
require('./_fix-re-wks')('replace', 2, function(defined, REPLACE, $replace){
  // 21.1.3.14 String.prototype.replace(searchValue, replaceValue)
  return [function replace(searchValue, replaceValue){
    'use strict';
    var O  = defined(this)
      , fn = searchValue == undefined ? undefined : searchValue[REPLACE];
    return fn !== undefined
      ? fn.call(searchValue, O, replaceValue)
      : $replace.call(String(O), searchValue, replaceValue);
  }, $replace];
});
},{"./_fix-re-wks":51}],233:[function(require,module,exports){
// @@search logic
require('./_fix-re-wks')('search', 1, function(defined, SEARCH, $search){
  // 21.1.3.15 String.prototype.search(regexp)
  return [function search(regexp){
    'use strict';
    var O  = defined(this)
      , fn = regexp == undefined ? undefined : regexp[SEARCH];
    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));
  }, $search];
});
},{"./_fix-re-wks":51}],234:[function(require,module,exports){
// @@split logic
require('./_fix-re-wks')('split', 2, function(defined, SPLIT, $split){
  'use strict';
  var isRegExp   = require('./_is-regexp')
    , _split     = $split
    , $push      = [].push
    , $SPLIT     = 'split'
    , LENGTH     = 'length'
    , LAST_INDEX = 'lastIndex';
  if(
    'abbc'[$SPLIT](/(b)*/)[1] == 'c' ||
    'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 ||
    'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 ||
    '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 ||
    '.'[$SPLIT](/()()/)[LENGTH] > 1 ||
    ''[$SPLIT](/.?/)[LENGTH]
  ){
    var NPCG = /()??/.exec('')[1] === undefined; // nonparticipating capturing group
    // based on es5-shim implementation, need to rework it
    $split = function(separator, limit){
      var string = String(this);
      if(separator === undefined && limit === 0)return [];
      // If `separator` is not a regex, use native split
      if(!isRegExp(separator))return _split.call(string, separator, limit);
      var output = [];
      var flags = (separator.ignoreCase ? 'i' : '') +
                  (separator.multiline ? 'm' : '') +
                  (separator.unicode ? 'u' : '') +
                  (separator.sticky ? 'y' : '');
      var lastLastIndex = 0;
      var splitLimit = limit === undefined ? 4294967295 : limit >>> 0;
      // Make `global` and avoid `lastIndex` issues by working with a copy
      var separatorCopy = new RegExp(separator.source, flags + 'g');
      var separator2, match, lastIndex, lastLength, i;
      // Doesn't need flags gy, but they don't hurt
      if(!NPCG)separator2 = new RegExp('^' + separatorCopy.source + '$(?!\\s)', flags);
      while(match = separatorCopy.exec(string)){
        // `separatorCopy.lastIndex` is not reliable cross-browser
        lastIndex = match.index + match[0][LENGTH];
        if(lastIndex > lastLastIndex){
          output.push(string.slice(lastLastIndex, match.index));
          // Fix browsers whose `exec` methods don't consistently return `undefined` for NPCG
          if(!NPCG && match[LENGTH] > 1)match[0].replace(separator2, function(){
            for(i = 1; i < arguments[LENGTH] - 2; i++)if(arguments[i] === undefined)match[i] = undefined;
          });
          if(match[LENGTH] > 1 && match.index < string[LENGTH])$push.apply(output, match.slice(1));
          lastLength = match[0][LENGTH];
          lastLastIndex = lastIndex;
          if(output[LENGTH] >= splitLimit)break;
        }
        if(separatorCopy[LAST_INDEX] === match.index)separatorCopy[LAST_INDEX]++; // Avoid an infinite loop
      }
      if(lastLastIndex === string[LENGTH]){
        if(lastLength || !separatorCopy.test(''))output.push('');
      } else output.push(string.slice(lastLastIndex));
      return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;
    };
  // Chakra, V8
  } else if('0'[$SPLIT](undefined, 0)[LENGTH]){
    $split = function(separator, limit){
      return separator === undefined && limit === 0 ? [] : _split.call(this, separator, limit);
    };
  }
  // 21.1.3.17 String.prototype.split(separator, limit)
  return [function split(separator, limit){
    var O  = defined(this)
      , fn = separator == undefined ? undefined : separator[SPLIT];
    return fn !== undefined ? fn.call(separator, O, limit) : $split.call(String(O), separator, limit);
  }, $split];
});
},{"./_fix-re-wks":51,"./_is-regexp":66}],235:[function(require,module,exports){
'use strict';
require('./es6.regexp.flags');
var anObject    = require('./_an-object')
  , $flags      = require('./_flags')
  , DESCRIPTORS = require('./_descriptors')
  , TO_STRING   = 'toString'
  , $toString   = /./[TO_STRING];

var define = function(fn){
  require('./_redefine')(RegExp.prototype, TO_STRING, fn, true);
};

// 21.2.5.14 RegExp.prototype.toString()
if(require('./_fails')(function(){ return $toString.call({source: 'a', flags: 'b'}) != '/a/b'; })){
  define(function toString(){
    var R = anObject(this);
    return '/'.concat(R.source, '/',
      'flags' in R ? R.flags : !DESCRIPTORS && R instanceof RegExp ? $flags.call(R) : undefined);
  });
// FF44- RegExp#toString has a wrong name
} else if($toString.name != TO_STRING){
  define(function toString(){
    return $toString.call(this);
  });
}
},{"./_an-object":23,"./_descriptors":44,"./_fails":50,"./_flags":52,"./_redefine":103,"./es6.regexp.flags":230}],236:[function(require,module,exports){
'use strict';
var strong = require('./_collection-strong');

// 23.2 Set Objects
module.exports = require('./_collection')('Set', function(get){
  return function Set(){ return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.2.3.1 Set.prototype.add(value)
  add: function add(value){
    return strong.def(this, value = value === 0 ? 0 : value, value);
  }
}, strong);
},{"./_collection":38,"./_collection-strong":35}],237:[function(require,module,exports){
'use strict';
// B.2.3.2 String.prototype.anchor(name)
require('./_string-html')('anchor', function(createHTML){
  return function anchor(name){
    return createHTML(this, 'a', 'name', name);
  }
});
},{"./_string-html":115}],238:[function(require,module,exports){
'use strict';
// B.2.3.3 String.prototype.big()
require('./_string-html')('big', function(createHTML){
  return function big(){
    return createHTML(this, 'big', '', '');
  }
});
},{"./_string-html":115}],239:[function(require,module,exports){
'use strict';
// B.2.3.4 String.prototype.blink()
require('./_string-html')('blink', function(createHTML){
  return function blink(){
    return createHTML(this, 'blink', '', '');
  }
});
},{"./_string-html":115}],240:[function(require,module,exports){
'use strict';
// B.2.3.5 String.prototype.bold()
require('./_string-html')('bold', function(createHTML){
  return function bold(){
    return createHTML(this, 'b', '', '');
  }
});
},{"./_string-html":115}],241:[function(require,module,exports){
'use strict';
var $export = require('./_export')
  , $at     = require('./_string-at')(false);
$export($export.P, 'String', {
  // 21.1.3.3 String.prototype.codePointAt(pos)
  codePointAt: function codePointAt(pos){
    return $at(this, pos);
  }
});
},{"./_export":48,"./_string-at":113}],242:[function(require,module,exports){
// 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])
'use strict';
var $export   = require('./_export')
  , toLength  = require('./_to-length')
  , context   = require('./_string-context')
  , ENDS_WITH = 'endsWith'
  , $endsWith = ''[ENDS_WITH];

$export($export.P + $export.F * require('./_fails-is-regexp')(ENDS_WITH), 'String', {
  endsWith: function endsWith(searchString /*, endPosition = @length */){
    var that = context(this, searchString, ENDS_WITH)
      , endPosition = arguments.length > 1 ? arguments[1] : undefined
      , len    = toLength(that.length)
      , end    = endPosition === undefined ? len : Math.min(toLength(endPosition), len)
      , search = String(searchString);
    return $endsWith
      ? $endsWith.call(that, search, end)
      : that.slice(end - search.length, end) === search;
  }
});
},{"./_export":48,"./_fails-is-regexp":49,"./_string-context":114,"./_to-length":124}],243:[function(require,module,exports){
'use strict';
// B.2.3.6 String.prototype.fixed()
require('./_string-html')('fixed', function(createHTML){
  return function fixed(){
    return createHTML(this, 'tt', '', '');
  }
});
},{"./_string-html":115}],244:[function(require,module,exports){
'use strict';
// B.2.3.7 String.prototype.fontcolor(color)
require('./_string-html')('fontcolor', function(createHTML){
  return function fontcolor(color){
    return createHTML(this, 'font', 'color', color);
  }
});
},{"./_string-html":115}],245:[function(require,module,exports){
'use strict';
// B.2.3.8 String.prototype.fontsize(size)
require('./_string-html')('fontsize', function(createHTML){
  return function fontsize(size){
    return createHTML(this, 'font', 'size', size);
  }
});
},{"./_string-html":115}],246:[function(require,module,exports){
var $export        = require('./_export')
  , toIndex        = require('./_to-index')
  , fromCharCode   = String.fromCharCode
  , $fromCodePoint = String.fromCodePoint;

// length should be 1, old FF problem
$export($export.S + $export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {
  // 21.1.2.2 String.fromCodePoint(...codePoints)
  fromCodePoint: function fromCodePoint(x){ // eslint-disable-line no-unused-vars
    var res  = []
      , aLen = arguments.length
      , i    = 0
      , code;
    while(aLen > i){
      code = +arguments[i++];
      if(toIndex(code, 0x10ffff) !== code)throw RangeError(code + ' is not a valid code point');
      res.push(code < 0x10000
        ? fromCharCode(code)
        : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00)
      );
    } return res.join('');
  }
});
},{"./_export":48,"./_to-index":121}],247:[function(require,module,exports){
// 21.1.3.7 String.prototype.includes(searchString, position = 0)
'use strict';
var $export  = require('./_export')
  , context  = require('./_string-context')
  , INCLUDES = 'includes';

$export($export.P + $export.F * require('./_fails-is-regexp')(INCLUDES), 'String', {
  includes: function includes(searchString /*, position = 0 */){
    return !!~context(this, searchString, INCLUDES)
      .indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined);
  }
});
},{"./_export":48,"./_fails-is-regexp":49,"./_string-context":114}],248:[function(require,module,exports){
'use strict';
// B.2.3.9 String.prototype.italics()
require('./_string-html')('italics', function(createHTML){
  return function italics(){
    return createHTML(this, 'i', '', '');
  }
});
},{"./_string-html":115}],249:[function(require,module,exports){
'use strict';
var $at  = require('./_string-at')(true);

// 21.1.3.27 String.prototype[@@iterator]()
require('./_iter-define')(String, 'String', function(iterated){
  this._t = String(iterated); // target
  this._i = 0;                // next index
// 21.1.5.2.1 %StringIteratorPrototype%.next()
}, function(){
  var O     = this._t
    , index = this._i
    , point;
  if(index >= O.length)return {value: undefined, done: true};
  point = $at(O, index);
  this._i += point.length;
  return {value: point, done: false};
});
},{"./_iter-define":69,"./_string-at":113}],250:[function(require,module,exports){
'use strict';
// B.2.3.10 String.prototype.link(url)
require('./_string-html')('link', function(createHTML){
  return function link(url){
    return createHTML(this, 'a', 'href', url);
  }
});
},{"./_string-html":115}],251:[function(require,module,exports){
var $export   = require('./_export')
  , toIObject = require('./_to-iobject')
  , toLength  = require('./_to-length');

$export($export.S, 'String', {
  // 21.1.2.4 String.raw(callSite, ...substitutions)
  raw: function raw(callSite){
    var tpl  = toIObject(callSite.raw)
      , len  = toLength(tpl.length)
      , aLen = arguments.length
      , res  = []
      , i    = 0;
    while(len > i){
      res.push(String(tpl[i++]));
      if(i < aLen)res.push(String(arguments[i]));
    } return res.join('');
  }
});
},{"./_export":48,"./_to-iobject":123,"./_to-length":124}],252:[function(require,module,exports){
var $export = require('./_export');

$export($export.P, 'String', {
  // 21.1.3.13 String.prototype.repeat(count)
  repeat: require('./_string-repeat')
});
},{"./_export":48,"./_string-repeat":117}],253:[function(require,module,exports){
'use strict';
// B.2.3.11 String.prototype.small()
require('./_string-html')('small', function(createHTML){
  return function small(){
    return createHTML(this, 'small', '', '');
  }
});
},{"./_string-html":115}],254:[function(require,module,exports){
// 21.1.3.18 String.prototype.startsWith(searchString [, position ])
'use strict';
var $export     = require('./_export')
  , toLength    = require('./_to-length')
  , context     = require('./_string-context')
  , STARTS_WITH = 'startsWith'
  , $startsWith = ''[STARTS_WITH];

$export($export.P + $export.F * require('./_fails-is-regexp')(STARTS_WITH), 'String', {
  startsWith: function startsWith(searchString /*, position = 0 */){
    var that   = context(this, searchString, STARTS_WITH)
      , index  = toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length))
      , search = String(searchString);
    return $startsWith
      ? $startsWith.call(that, search, index)
      : that.slice(index, index + search.length) === search;
  }
});
},{"./_export":48,"./_fails-is-regexp":49,"./_string-context":114,"./_to-length":124}],255:[function(require,module,exports){
'use strict';
// B.2.3.12 String.prototype.strike()
require('./_string-html')('strike', function(createHTML){
  return function strike(){
    return createHTML(this, 'strike', '', '');
  }
});
},{"./_string-html":115}],256:[function(require,module,exports){
'use strict';
// B.2.3.13 String.prototype.sub()
require('./_string-html')('sub', function(createHTML){
  return function sub(){
    return createHTML(this, 'sub', '', '');
  }
});
},{"./_string-html":115}],257:[function(require,module,exports){
'use strict';
// B.2.3.14 String.prototype.sup()
require('./_string-html')('sup', function(createHTML){
  return function sup(){
    return createHTML(this, 'sup', '', '');
  }
});
},{"./_string-html":115}],258:[function(require,module,exports){
'use strict';
// 21.1.3.25 String.prototype.trim()
require('./_string-trim')('trim', function($trim){
  return function trim(){
    return $trim(this, 3);
  };
});
},{"./_string-trim":118}],259:[function(require,module,exports){
'use strict';
// ECMAScript 6 symbols shim
var global         = require('./_global')
  , has            = require('./_has')
  , DESCRIPTORS    = require('./_descriptors')
  , $export        = require('./_export')
  , redefine       = require('./_redefine')
  , META           = require('./_meta').KEY
  , $fails         = require('./_fails')
  , shared         = require('./_shared')
  , setToStringTag = require('./_set-to-string-tag')
  , uid            = require('./_uid')
  , wks            = require('./_wks')
  , wksExt         = require('./_wks-ext')
  , wksDefine      = require('./_wks-define')
  , keyOf          = require('./_keyof')
  , enumKeys       = require('./_enum-keys')
  , isArray        = require('./_is-array')
  , anObject       = require('./_an-object')
  , toIObject      = require('./_to-iobject')
  , toPrimitive    = require('./_to-primitive')
  , createDesc     = require('./_property-desc')
  , _create        = require('./_object-create')
  , gOPNExt        = require('./_object-gopn-ext')
  , $GOPD          = require('./_object-gopd')
  , $DP            = require('./_object-dp')
  , $keys          = require('./_object-keys')
  , gOPD           = $GOPD.f
  , dP             = $DP.f
  , gOPN           = gOPNExt.f
  , $Symbol        = global.Symbol
  , $JSON          = global.JSON
  , _stringify     = $JSON && $JSON.stringify
  , PROTOTYPE      = 'prototype'
  , HIDDEN         = wks('_hidden')
  , TO_PRIMITIVE   = wks('toPrimitive')
  , isEnum         = {}.propertyIsEnumerable
  , SymbolRegistry = shared('symbol-registry')
  , AllSymbols     = shared('symbols')
  , OPSymbols      = shared('op-symbols')
  , ObjectProto    = Object[PROTOTYPE]
  , USE_NATIVE     = typeof $Symbol == 'function'
  , QObject        = global.QObject;
// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
var setSymbolDesc = DESCRIPTORS && $fails(function(){
  return _create(dP({}, 'a', {
    get: function(){ return dP(this, 'a', {value: 7}).a; }
  })).a != 7;
}) ? function(it, key, D){
  var protoDesc = gOPD(ObjectProto, key);
  if(protoDesc)delete ObjectProto[key];
  dP(it, key, D);
  if(protoDesc && it !== ObjectProto)dP(ObjectProto, key, protoDesc);
} : dP;

var wrap = function(tag){
  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
  sym._k = tag;
  return sym;
};

var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function(it){
  return typeof it == 'symbol';
} : function(it){
  return it instanceof $Symbol;
};

var $defineProperty = function defineProperty(it, key, D){
  if(it === ObjectProto)$defineProperty(OPSymbols, key, D);
  anObject(it);
  key = toPrimitive(key, true);
  anObject(D);
  if(has(AllSymbols, key)){
    if(!D.enumerable){
      if(!has(it, HIDDEN))dP(it, HIDDEN, createDesc(1, {}));
      it[HIDDEN][key] = true;
    } else {
      if(has(it, HIDDEN) && it[HIDDEN][key])it[HIDDEN][key] = false;
      D = _create(D, {enumerable: createDesc(0, false)});
    } return setSymbolDesc(it, key, D);
  } return dP(it, key, D);
};
var $defineProperties = function defineProperties(it, P){
  anObject(it);
  var keys = enumKeys(P = toIObject(P))
    , i    = 0
    , l = keys.length
    , key;
  while(l > i)$defineProperty(it, key = keys[i++], P[key]);
  return it;
};
var $create = function create(it, P){
  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
};
var $propertyIsEnumerable = function propertyIsEnumerable(key){
  var E = isEnum.call(this, key = toPrimitive(key, true));
  if(this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return false;
  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
};
var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key){
  it  = toIObject(it);
  key = toPrimitive(key, true);
  if(it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return;
  var D = gOPD(it, key);
  if(D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key]))D.enumerable = true;
  return D;
};
var $getOwnPropertyNames = function getOwnPropertyNames(it){
  var names  = gOPN(toIObject(it))
    , result = []
    , i      = 0
    , key;
  while(names.length > i){
    if(!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META)result.push(key);
  } return result;
};
var $getOwnPropertySymbols = function getOwnPropertySymbols(it){
  var IS_OP  = it === ObjectProto
    , names  = gOPN(IS_OP ? OPSymbols : toIObject(it))
    , result = []
    , i      = 0
    , key;
  while(names.length > i){
    if(has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true))result.push(AllSymbols[key]);
  } return result;
};

// 19.4.1.1 Symbol([description])
if(!USE_NATIVE){
  $Symbol = function Symbol(){
    if(this instanceof $Symbol)throw TypeError('Symbol is not a constructor!');
    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
    var $set = function(value){
      if(this === ObjectProto)$set.call(OPSymbols, value);
      if(has(this, HIDDEN) && has(this[HIDDEN], tag))this[HIDDEN][tag] = false;
      setSymbolDesc(this, tag, createDesc(1, value));
    };
    if(DESCRIPTORS && setter)setSymbolDesc(ObjectProto, tag, {configurable: true, set: $set});
    return wrap(tag);
  };
  redefine($Symbol[PROTOTYPE], 'toString', function toString(){
    return this._k;
  });

  $GOPD.f = $getOwnPropertyDescriptor;
  $DP.f   = $defineProperty;
  require('./_object-gopn').f = gOPNExt.f = $getOwnPropertyNames;
  require('./_object-pie').f  = $propertyIsEnumerable;
  require('./_object-gops').f = $getOwnPropertySymbols;

  if(DESCRIPTORS && !require('./_library')){
    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
  }

  wksExt.f = function(name){
    return wrap(wks(name));
  }
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, {Symbol: $Symbol});

for(var symbols = (
  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
).split(','), i = 0; symbols.length > i; )wks(symbols[i++]);

for(var symbols = $keys(wks.store), i = 0; symbols.length > i; )wksDefine(symbols[i++]);

$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
  // 19.4.2.1 Symbol.for(key)
  'for': function(key){
    return has(SymbolRegistry, key += '')
      ? SymbolRegistry[key]
      : SymbolRegistry[key] = $Symbol(key);
  },
  // 19.4.2.5 Symbol.keyFor(sym)
  keyFor: function keyFor(key){
    if(isSymbol(key))return keyOf(SymbolRegistry, key);
    throw TypeError(key + ' is not a symbol!');
  },
  useSetter: function(){ setter = true; },
  useSimple: function(){ setter = false; }
});

$export($export.S + $export.F * !USE_NATIVE, 'Object', {
  // 19.1.2.2 Object.create(O [, Properties])
  create: $create,
  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
  defineProperty: $defineProperty,
  // 19.1.2.3 Object.defineProperties(O, Properties)
  defineProperties: $defineProperties,
  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
  // 19.1.2.7 Object.getOwnPropertyNames(O)
  getOwnPropertyNames: $getOwnPropertyNames,
  // 19.1.2.8 Object.getOwnPropertySymbols(O)
  getOwnPropertySymbols: $getOwnPropertySymbols
});

// 24.3.2 JSON.stringify(value [, replacer [, space]])
$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function(){
  var S = $Symbol();
  // MS Edge converts symbol values to JSON as {}
  // WebKit converts symbol values to JSON as null
  // V8 throws on boxed symbols
  return _stringify([S]) != '[null]' || _stringify({a: S}) != '{}' || _stringify(Object(S)) != '{}';
})), 'JSON', {
  stringify: function stringify(it){
    if(it === undefined || isSymbol(it))return; // IE8 returns string on undefined
    var args = [it]
      , i    = 1
      , replacer, $replacer;
    while(arguments.length > i)args.push(arguments[i++]);
    replacer = args[1];
    if(typeof replacer == 'function')$replacer = replacer;
    if($replacer || !isArray(replacer))replacer = function(key, value){
      if($replacer)value = $replacer.call(this, key, value);
      if(!isSymbol(value))return value;
    };
    args[1] = replacer;
    return _stringify.apply($JSON, args);
  }
});

// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
$Symbol[PROTOTYPE][TO_PRIMITIVE] || require('./_hide')($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
// 19.4.3.5 Symbol.prototype[@@toStringTag]
setToStringTag($Symbol, 'Symbol');
// 20.2.1.9 Math[@@toStringTag]
setToStringTag(Math, 'Math', true);
// 24.3.3 JSON[@@toStringTag]
setToStringTag(global.JSON, 'JSON', true);
},{"./_an-object":23,"./_descriptors":44,"./_enum-keys":47,"./_export":48,"./_fails":50,"./_global":54,"./_has":55,"./_hide":56,"./_is-array":63,"./_keyof":73,"./_library":74,"./_meta":78,"./_object-create":82,"./_object-dp":83,"./_object-gopd":86,"./_object-gopn":88,"./_object-gopn-ext":87,"./_object-gops":89,"./_object-keys":92,"./_object-pie":93,"./_property-desc":101,"./_redefine":103,"./_set-to-string-tag":108,"./_shared":110,"./_to-iobject":123,"./_to-primitive":126,"./_uid":130,"./_wks":133,"./_wks-define":131,"./_wks-ext":132}],260:[function(require,module,exports){
'use strict';
var $export      = require('./_export')
  , $typed       = require('./_typed')
  , buffer       = require('./_typed-buffer')
  , anObject     = require('./_an-object')
  , toIndex      = require('./_to-index')
  , toLength     = require('./_to-length')
  , isObject     = require('./_is-object')
  , ArrayBuffer  = require('./_global').ArrayBuffer
  , speciesConstructor = require('./_species-constructor')
  , $ArrayBuffer = buffer.ArrayBuffer
  , $DataView    = buffer.DataView
  , $isView      = $typed.ABV && ArrayBuffer.isView
  , $slice       = $ArrayBuffer.prototype.slice
  , VIEW         = $typed.VIEW
  , ARRAY_BUFFER = 'ArrayBuffer';

$export($export.G + $export.W + $export.F * (ArrayBuffer !== $ArrayBuffer), {ArrayBuffer: $ArrayBuffer});

$export($export.S + $export.F * !$typed.CONSTR, ARRAY_BUFFER, {
  // 24.1.3.1 ArrayBuffer.isView(arg)
  isView: function isView(it){
    return $isView && $isView(it) || isObject(it) && VIEW in it;
  }
});

$export($export.P + $export.U + $export.F * require('./_fails')(function(){
  return !new $ArrayBuffer(2).slice(1, undefined).byteLength;
}), ARRAY_BUFFER, {
  // 24.1.4.3 ArrayBuffer.prototype.slice(start, end)
  slice: function slice(start, end){
    if($slice !== undefined && end === undefined)return $slice.call(anObject(this), start); // FF fix
    var len    = anObject(this).byteLength
      , first  = toIndex(start, len)
      , final  = toIndex(end === undefined ? len : end, len)
      , result = new (speciesConstructor(this, $ArrayBuffer))(toLength(final - first))
      , viewS  = new $DataView(this)
      , viewT  = new $DataView(result)
      , index  = 0;
    while(first < final){
      viewT.setUint8(index++, viewS.getUint8(first++));
    } return result;
  }
});

require('./_set-species')(ARRAY_BUFFER);
},{"./_an-object":23,"./_export":48,"./_fails":50,"./_global":54,"./_is-object":65,"./_set-species":107,"./_species-constructor":111,"./_to-index":121,"./_to-length":124,"./_typed":129,"./_typed-buffer":128}],261:[function(require,module,exports){
var $export = require('./_export');
$export($export.G + $export.W + $export.F * !require('./_typed').ABV, {
  DataView: require('./_typed-buffer').DataView
});
},{"./_export":48,"./_typed":129,"./_typed-buffer":128}],262:[function(require,module,exports){
require('./_typed-array')('Float32', 4, function(init){
  return function Float32Array(data, byteOffset, length){
    return init(this, data, byteOffset, length);
  };
});
},{"./_typed-array":127}],263:[function(require,module,exports){
require('./_typed-array')('Float64', 8, function(init){
  return function Float64Array(data, byteOffset, length){
    return init(this, data, byteOffset, length);
  };
});
},{"./_typed-array":127}],264:[function(require,module,exports){
require('./_typed-array')('Int16', 2, function(init){
  return function Int16Array(data, byteOffset, length){
    return init(this, data, byteOffset, length);
  };
});
},{"./_typed-array":127}],265:[function(require,module,exports){
require('./_typed-array')('Int32', 4, function(init){
  return function Int32Array(data, byteOffset, length){
    return init(this, data, byteOffset, length);
  };
});
},{"./_typed-array":127}],266:[function(require,module,exports){
require('./_typed-array')('Int8', 1, function(init){
  return function Int8Array(data, byteOffset, length){
    return init(this, data, byteOffset, length);
  };
});
},{"./_typed-array":127}],267:[function(require,module,exports){
require('./_typed-array')('Uint16', 2, function(init){
  return function Uint16Array(data, byteOffset, length){
    return init(this, data, byteOffset, length);
  };
});
},{"./_typed-array":127}],268:[function(require,module,exports){
require('./_typed-array')('Uint32', 4, function(init){
  return function Uint32Array(data, byteOffset, length){
    return init(this, data, byteOffset, length);
  };
});
},{"./_typed-array":127}],269:[function(require,module,exports){
require('./_typed-array')('Uint8', 1, function(init){
  return function Uint8Array(data, byteOffset, length){
    return init(this, data, byteOffset, length);
  };
});
},{"./_typed-array":127}],270:[function(require,module,exports){
require('./_typed-array')('Uint8', 1, function(init){
  return function Uint8ClampedArray(data, byteOffset, length){
    return init(this, data, byteOffset, length);
  };
}, true);
},{"./_typed-array":127}],271:[function(require,module,exports){
'use strict';
var each         = require('./_array-methods')(0)
  , redefine     = require('./_redefine')
  , meta         = require('./_meta')
  , assign       = require('./_object-assign')
  , weak         = require('./_collection-weak')
  , isObject     = require('./_is-object')
  , getWeak      = meta.getWeak
  , isExtensible = Object.isExtensible
  , uncaughtFrozenStore = weak.ufstore
  , tmp          = {}
  , InternalMap;

var wrapper = function(get){
  return function WeakMap(){
    return get(this, arguments.length > 0 ? arguments[0] : undefined);
  };
};

var methods = {
  // 23.3.3.3 WeakMap.prototype.get(key)
  get: function get(key){
    if(isObject(key)){
      var data = getWeak(key);
      if(data === true)return uncaughtFrozenStore(this).get(key);
      return data ? data[this._i] : undefined;
    }
  },
  // 23.3.3.5 WeakMap.prototype.set(key, value)
  set: function set(key, value){
    return weak.def(this, key, value);
  }
};

// 23.3 WeakMap Objects
var $WeakMap = module.exports = require('./_collection')('WeakMap', wrapper, methods, weak, true, true);

// IE11 WeakMap frozen keys fix
if(new $WeakMap().set((Object.freeze || Object)(tmp), 7).get(tmp) != 7){
  InternalMap = weak.getConstructor(wrapper);
  assign(InternalMap.prototype, methods);
  meta.NEED = true;
  each(['delete', 'has', 'get', 'set'], function(key){
    var proto  = $WeakMap.prototype
      , method = proto[key];
    redefine(proto, key, function(a, b){
      // store frozen objects on internal weakmap shim
      if(isObject(a) && !isExtensible(a)){
        if(!this._f)this._f = new InternalMap;
        var result = this._f[key](a, b);
        return key == 'set' ? this : result;
      // store all the rest on native weakmap
      } return method.call(this, a, b);
    });
  });
}
},{"./_array-methods":28,"./_collection":38,"./_collection-weak":37,"./_is-object":65,"./_meta":78,"./_object-assign":81,"./_redefine":103}],272:[function(require,module,exports){
'use strict';
var weak = require('./_collection-weak');

// 23.4 WeakSet Objects
require('./_collection')('WeakSet', function(get){
  return function WeakSet(){ return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.4.3.1 WeakSet.prototype.add(value)
  add: function add(value){
    return weak.def(this, value, true);
  }
}, weak, false, true);
},{"./_collection":38,"./_collection-weak":37}],273:[function(require,module,exports){
'use strict';
// https://github.com/tc39/Array.prototype.includes
var $export   = require('./_export')
  , $includes = require('./_array-includes')(true);

$export($export.P, 'Array', {
  includes: function includes(el /*, fromIndex = 0 */){
    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
  }
});

require('./_add-to-unscopables')('includes');
},{"./_add-to-unscopables":21,"./_array-includes":27,"./_export":48}],274:[function(require,module,exports){
// https://github.com/rwaldron/tc39-notes/blob/master/es6/2014-09/sept-25.md#510-globalasap-for-enqueuing-a-microtask
var $export   = require('./_export')
  , microtask = require('./_microtask')()
  , process   = require('./_global').process
  , isNode    = require('./_cof')(process) == 'process';

$export($export.G, {
  asap: function asap(fn){
    var domain = isNode && process.domain;
    microtask(domain ? domain.bind(fn) : fn);
  }
});
},{"./_cof":34,"./_export":48,"./_global":54,"./_microtask":80}],275:[function(require,module,exports){
// https://github.com/ljharb/proposal-is-error
var $export = require('./_export')
  , cof     = require('./_cof');

$export($export.S, 'Error', {
  isError: function isError(it){
    return cof(it) === 'Error';
  }
});
},{"./_cof":34,"./_export":48}],276:[function(require,module,exports){
// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var $export  = require('./_export');

$export($export.P + $export.R, 'Map', {toJSON: require('./_collection-to-json')('Map')});
},{"./_collection-to-json":36,"./_export":48}],277:[function(require,module,exports){
// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
var $export = require('./_export');

$export($export.S, 'Math', {
  iaddh: function iaddh(x0, x1, y0, y1){
    var $x0 = x0 >>> 0
      , $x1 = x1 >>> 0
      , $y0 = y0 >>> 0;
    return $x1 + (y1 >>> 0) + (($x0 & $y0 | ($x0 | $y0) & ~($x0 + $y0 >>> 0)) >>> 31) | 0;
  }
});
},{"./_export":48}],278:[function(require,module,exports){
// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
var $export = require('./_export');

$export($export.S, 'Math', {
  imulh: function imulh(u, v){
    var UINT16 = 0xffff
      , $u = +u
      , $v = +v
      , u0 = $u & UINT16
      , v0 = $v & UINT16
      , u1 = $u >> 16
      , v1 = $v >> 16
      , t  = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);
    return u1 * v1 + (t >> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >> 16);
  }
});
},{"./_export":48}],279:[function(require,module,exports){
// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
var $export = require('./_export');

$export($export.S, 'Math', {
  isubh: function isubh(x0, x1, y0, y1){
    var $x0 = x0 >>> 0
      , $x1 = x1 >>> 0
      , $y0 = y0 >>> 0;
    return $x1 - (y1 >>> 0) - ((~$x0 & $y0 | ~($x0 ^ $y0) & $x0 - $y0 >>> 0) >>> 31) | 0;
  }
});
},{"./_export":48}],280:[function(require,module,exports){
// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
var $export = require('./_export');

$export($export.S, 'Math', {
  umulh: function umulh(u, v){
    var UINT16 = 0xffff
      , $u = +u
      , $v = +v
      , u0 = $u & UINT16
      , v0 = $v & UINT16
      , u1 = $u >>> 16
      , v1 = $v >>> 16
      , t  = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);
    return u1 * v1 + (t >>> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >>> 16);
  }
});
},{"./_export":48}],281:[function(require,module,exports){
'use strict';
var $export         = require('./_export')
  , toObject        = require('./_to-object')
  , aFunction       = require('./_a-function')
  , $defineProperty = require('./_object-dp');

// B.2.2.2 Object.prototype.__defineGetter__(P, getter)
require('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {
  __defineGetter__: function __defineGetter__(P, getter){
    $defineProperty.f(toObject(this), P, {get: aFunction(getter), enumerable: true, configurable: true});
  }
});
},{"./_a-function":19,"./_descriptors":44,"./_export":48,"./_object-dp":83,"./_object-forced-pam":85,"./_to-object":125}],282:[function(require,module,exports){
'use strict';
var $export         = require('./_export')
  , toObject        = require('./_to-object')
  , aFunction       = require('./_a-function')
  , $defineProperty = require('./_object-dp');

// B.2.2.3 Object.prototype.__defineSetter__(P, setter)
require('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {
  __defineSetter__: function __defineSetter__(P, setter){
    $defineProperty.f(toObject(this), P, {set: aFunction(setter), enumerable: true, configurable: true});
  }
});
},{"./_a-function":19,"./_descriptors":44,"./_export":48,"./_object-dp":83,"./_object-forced-pam":85,"./_to-object":125}],283:[function(require,module,exports){
// https://github.com/tc39/proposal-object-values-entries
var $export  = require('./_export')
  , $entries = require('./_object-to-array')(true);

$export($export.S, 'Object', {
  entries: function entries(it){
    return $entries(it);
  }
});
},{"./_export":48,"./_object-to-array":95}],284:[function(require,module,exports){
// https://github.com/tc39/proposal-object-getownpropertydescriptors
var $export        = require('./_export')
  , ownKeys        = require('./_own-keys')
  , toIObject      = require('./_to-iobject')
  , gOPD           = require('./_object-gopd')
  , createProperty = require('./_create-property');

$export($export.S, 'Object', {
  getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object){
    var O       = toIObject(object)
      , getDesc = gOPD.f
      , keys    = ownKeys(O)
      , result  = {}
      , i       = 0
      , key;
    while(keys.length > i)createProperty(result, key = keys[i++], getDesc(O, key));
    return result;
  }
});
},{"./_create-property":40,"./_export":48,"./_object-gopd":86,"./_own-keys":96,"./_to-iobject":123}],285:[function(require,module,exports){
'use strict';
var $export                  = require('./_export')
  , toObject                 = require('./_to-object')
  , toPrimitive              = require('./_to-primitive')
  , getPrototypeOf           = require('./_object-gpo')
  , getOwnPropertyDescriptor = require('./_object-gopd').f;

// B.2.2.4 Object.prototype.__lookupGetter__(P)
require('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {
  __lookupGetter__: function __lookupGetter__(P){
    var O = toObject(this)
      , K = toPrimitive(P, true)
      , D;
    do {
      if(D = getOwnPropertyDescriptor(O, K))return D.get;
    } while(O = getPrototypeOf(O));
  }
});
},{"./_descriptors":44,"./_export":48,"./_object-forced-pam":85,"./_object-gopd":86,"./_object-gpo":90,"./_to-object":125,"./_to-primitive":126}],286:[function(require,module,exports){
'use strict';
var $export                  = require('./_export')
  , toObject                 = require('./_to-object')
  , toPrimitive              = require('./_to-primitive')
  , getPrototypeOf           = require('./_object-gpo')
  , getOwnPropertyDescriptor = require('./_object-gopd').f;

// B.2.2.5 Object.prototype.__lookupSetter__(P)
require('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {
  __lookupSetter__: function __lookupSetter__(P){
    var O = toObject(this)
      , K = toPrimitive(P, true)
      , D;
    do {
      if(D = getOwnPropertyDescriptor(O, K))return D.set;
    } while(O = getPrototypeOf(O));
  }
});
},{"./_descriptors":44,"./_export":48,"./_object-forced-pam":85,"./_object-gopd":86,"./_object-gpo":90,"./_to-object":125,"./_to-primitive":126}],287:[function(require,module,exports){
// https://github.com/tc39/proposal-object-values-entries
var $export = require('./_export')
  , $values = require('./_object-to-array')(false);

$export($export.S, 'Object', {
  values: function values(it){
    return $values(it);
  }
});
},{"./_export":48,"./_object-to-array":95}],288:[function(require,module,exports){
'use strict';
// https://github.com/zenparsing/es-observable
var $export     = require('./_export')
  , global      = require('./_global')
  , core        = require('./_core')
  , microtask   = require('./_microtask')()
  , OBSERVABLE  = require('./_wks')('observable')
  , aFunction   = require('./_a-function')
  , anObject    = require('./_an-object')
  , anInstance  = require('./_an-instance')
  , redefineAll = require('./_redefine-all')
  , hide        = require('./_hide')
  , forOf       = require('./_for-of')
  , RETURN      = forOf.RETURN;

var getMethod = function(fn){
  return fn == null ? undefined : aFunction(fn);
};

var cleanupSubscription = function(subscription){
  var cleanup = subscription._c;
  if(cleanup){
    subscription._c = undefined;
    cleanup();
  }
};

var subscriptionClosed = function(subscription){
  return subscription._o === undefined;
};

var closeSubscription = function(subscription){
  if(!subscriptionClosed(subscription)){
    subscription._o = undefined;
    cleanupSubscription(subscription);
  }
};

var Subscription = function(observer, subscriber){
  anObject(observer);
  this._c = undefined;
  this._o = observer;
  observer = new SubscriptionObserver(this);
  try {
    var cleanup      = subscriber(observer)
      , subscription = cleanup;
    if(cleanup != null){
      if(typeof cleanup.unsubscribe === 'function')cleanup = function(){ subscription.unsubscribe(); };
      else aFunction(cleanup);
      this._c = cleanup;
    }
  } catch(e){
    observer.error(e);
    return;
  } if(subscriptionClosed(this))cleanupSubscription(this);
};

Subscription.prototype = redefineAll({}, {
  unsubscribe: function unsubscribe(){ closeSubscription(this); }
});

var SubscriptionObserver = function(subscription){
  this._s = subscription;
};

SubscriptionObserver.prototype = redefineAll({}, {
  next: function next(value){
    var subscription = this._s;
    if(!subscriptionClosed(subscription)){
      var observer = subscription._o;
      try {
        var m = getMethod(observer.next);
        if(m)return m.call(observer, value);
      } catch(e){
        try {
          closeSubscription(subscription);
        } finally {
          throw e;
        }
      }
    }
  },
  error: function error(value){
    var subscription = this._s;
    if(subscriptionClosed(subscription))throw value;
    var observer = subscription._o;
    subscription._o = undefined;
    try {
      var m = getMethod(observer.error);
      if(!m)throw value;
      value = m.call(observer, value);
    } catch(e){
      try {
        cleanupSubscription(subscription);
      } finally {
        throw e;
      }
    } cleanupSubscription(subscription);
    return value;
  },
  complete: function complete(value){
    var subscription = this._s;
    if(!subscriptionClosed(subscription)){
      var observer = subscription._o;
      subscription._o = undefined;
      try {
        var m = getMethod(observer.complete);
        value = m ? m.call(observer, value) : undefined;
      } catch(e){
        try {
          cleanupSubscription(subscription);
        } finally {
          throw e;
        }
      } cleanupSubscription(subscription);
      return value;
    }
  }
});

var $Observable = function Observable(subscriber){
  anInstance(this, $Observable, 'Observable', '_f')._f = aFunction(subscriber);
};

redefineAll($Observable.prototype, {
  subscribe: function subscribe(observer){
    return new Subscription(observer, this._f);
  },
  forEach: function forEach(fn){
    var that = this;
    return new (core.Promise || global.Promise)(function(resolve, reject){
      aFunction(fn);
      var subscription = that.subscribe({
        next : function(value){
          try {
            return fn(value);
          } catch(e){
            reject(e);
            subscription.unsubscribe();
          }
        },
        error: reject,
        complete: resolve
      });
    });
  }
});

redefineAll($Observable, {
  from: function from(x){
    var C = typeof this === 'function' ? this : $Observable;
    var method = getMethod(anObject(x)[OBSERVABLE]);
    if(method){
      var observable = anObject(method.call(x));
      return observable.constructor === C ? observable : new C(function(observer){
        return observable.subscribe(observer);
      });
    }
    return new C(function(observer){
      var done = false;
      microtask(function(){
        if(!done){
          try {
            if(forOf(x, false, function(it){
              observer.next(it);
              if(done)return RETURN;
            }) === RETURN)return;
          } catch(e){
            if(done)throw e;
            observer.error(e);
            return;
          } observer.complete();
        }
      });
      return function(){ done = true; };
    });
  },
  of: function of(){
    for(var i = 0, l = arguments.length, items = Array(l); i < l;)items[i] = arguments[i++];
    return new (typeof this === 'function' ? this : $Observable)(function(observer){
      var done = false;
      microtask(function(){
        if(!done){
          for(var i = 0; i < items.length; ++i){
            observer.next(items[i]);
            if(done)return;
          } observer.complete();
        }
      });
      return function(){ done = true; };
    });
  }
});

hide($Observable.prototype, OBSERVABLE, function(){ return this; });

$export($export.G, {Observable: $Observable});

require('./_set-species')('Observable');
},{"./_a-function":19,"./_an-instance":22,"./_an-object":23,"./_core":39,"./_export":48,"./_for-of":53,"./_global":54,"./_hide":56,"./_microtask":80,"./_redefine-all":102,"./_set-species":107,"./_wks":133}],289:[function(require,module,exports){
var metadata                  = require('./_metadata')
  , anObject                  = require('./_an-object')
  , toMetaKey                 = metadata.key
  , ordinaryDefineOwnMetadata = metadata.set;

metadata.exp({defineMetadata: function defineMetadata(metadataKey, metadataValue, target, targetKey){
  ordinaryDefineOwnMetadata(metadataKey, metadataValue, anObject(target), toMetaKey(targetKey));
}});
},{"./_an-object":23,"./_metadata":79}],290:[function(require,module,exports){
var metadata               = require('./_metadata')
  , anObject               = require('./_an-object')
  , toMetaKey              = metadata.key
  , getOrCreateMetadataMap = metadata.map
  , store                  = metadata.store;

metadata.exp({deleteMetadata: function deleteMetadata(metadataKey, target /*, targetKey */){
  var targetKey   = arguments.length < 3 ? undefined : toMetaKey(arguments[2])
    , metadataMap = getOrCreateMetadataMap(anObject(target), targetKey, false);
  if(metadataMap === undefined || !metadataMap['delete'](metadataKey))return false;
  if(metadataMap.size)return true;
  var targetMetadata = store.get(target);
  targetMetadata['delete'](targetKey);
  return !!targetMetadata.size || store['delete'](target);
}});
},{"./_an-object":23,"./_metadata":79}],291:[function(require,module,exports){
var Set                     = require('./es6.set')
  , from                    = require('./_array-from-iterable')
  , metadata                = require('./_metadata')
  , anObject                = require('./_an-object')
  , getPrototypeOf          = require('./_object-gpo')
  , ordinaryOwnMetadataKeys = metadata.keys
  , toMetaKey               = metadata.key;

var ordinaryMetadataKeys = function(O, P){
  var oKeys  = ordinaryOwnMetadataKeys(O, P)
    , parent = getPrototypeOf(O);
  if(parent === null)return oKeys;
  var pKeys  = ordinaryMetadataKeys(parent, P);
  return pKeys.length ? oKeys.length ? from(new Set(oKeys.concat(pKeys))) : pKeys : oKeys;
};

metadata.exp({getMetadataKeys: function getMetadataKeys(target /*, targetKey */){
  return ordinaryMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));
}});
},{"./_an-object":23,"./_array-from-iterable":26,"./_metadata":79,"./_object-gpo":90,"./es6.set":236}],292:[function(require,module,exports){
var metadata               = require('./_metadata')
  , anObject               = require('./_an-object')
  , getPrototypeOf         = require('./_object-gpo')
  , ordinaryHasOwnMetadata = metadata.has
  , ordinaryGetOwnMetadata = metadata.get
  , toMetaKey              = metadata.key;

var ordinaryGetMetadata = function(MetadataKey, O, P){
  var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
  if(hasOwn)return ordinaryGetOwnMetadata(MetadataKey, O, P);
  var parent = getPrototypeOf(O);
  return parent !== null ? ordinaryGetMetadata(MetadataKey, parent, P) : undefined;
};

metadata.exp({getMetadata: function getMetadata(metadataKey, target /*, targetKey */){
  return ordinaryGetMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
}});
},{"./_an-object":23,"./_metadata":79,"./_object-gpo":90}],293:[function(require,module,exports){
var metadata                = require('./_metadata')
  , anObject                = require('./_an-object')
  , ordinaryOwnMetadataKeys = metadata.keys
  , toMetaKey               = metadata.key;

metadata.exp({getOwnMetadataKeys: function getOwnMetadataKeys(target /*, targetKey */){
  return ordinaryOwnMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));
}});
},{"./_an-object":23,"./_metadata":79}],294:[function(require,module,exports){
var metadata               = require('./_metadata')
  , anObject               = require('./_an-object')
  , ordinaryGetOwnMetadata = metadata.get
  , toMetaKey              = metadata.key;

metadata.exp({getOwnMetadata: function getOwnMetadata(metadataKey, target /*, targetKey */){
  return ordinaryGetOwnMetadata(metadataKey, anObject(target)
    , arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
}});
},{"./_an-object":23,"./_metadata":79}],295:[function(require,module,exports){
var metadata               = require('./_metadata')
  , anObject               = require('./_an-object')
  , getPrototypeOf         = require('./_object-gpo')
  , ordinaryHasOwnMetadata = metadata.has
  , toMetaKey              = metadata.key;

var ordinaryHasMetadata = function(MetadataKey, O, P){
  var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
  if(hasOwn)return true;
  var parent = getPrototypeOf(O);
  return parent !== null ? ordinaryHasMetadata(MetadataKey, parent, P) : false;
};

metadata.exp({hasMetadata: function hasMetadata(metadataKey, target /*, targetKey */){
  return ordinaryHasMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
}});
},{"./_an-object":23,"./_metadata":79,"./_object-gpo":90}],296:[function(require,module,exports){
var metadata               = require('./_metadata')
  , anObject               = require('./_an-object')
  , ordinaryHasOwnMetadata = metadata.has
  , toMetaKey              = metadata.key;

metadata.exp({hasOwnMetadata: function hasOwnMetadata(metadataKey, target /*, targetKey */){
  return ordinaryHasOwnMetadata(metadataKey, anObject(target)
    , arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
}});
},{"./_an-object":23,"./_metadata":79}],297:[function(require,module,exports){
var metadata                  = require('./_metadata')
  , anObject                  = require('./_an-object')
  , aFunction                 = require('./_a-function')
  , toMetaKey                 = metadata.key
  , ordinaryDefineOwnMetadata = metadata.set;

metadata.exp({metadata: function metadata(metadataKey, metadataValue){
  return function decorator(target, targetKey){
    ordinaryDefineOwnMetadata(
      metadataKey, metadataValue,
      (targetKey !== undefined ? anObject : aFunction)(target),
      toMetaKey(targetKey)
    );
  };
}});
},{"./_a-function":19,"./_an-object":23,"./_metadata":79}],298:[function(require,module,exports){
// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var $export  = require('./_export');

$export($export.P + $export.R, 'Set', {toJSON: require('./_collection-to-json')('Set')});
},{"./_collection-to-json":36,"./_export":48}],299:[function(require,module,exports){
'use strict';
// https://github.com/mathiasbynens/String.prototype.at
var $export = require('./_export')
  , $at     = require('./_string-at')(true);

$export($export.P, 'String', {
  at: function at(pos){
    return $at(this, pos);
  }
});
},{"./_export":48,"./_string-at":113}],300:[function(require,module,exports){
'use strict';
// https://tc39.github.io/String.prototype.matchAll/
var $export     = require('./_export')
  , defined     = require('./_defined')
  , toLength    = require('./_to-length')
  , isRegExp    = require('./_is-regexp')
  , getFlags    = require('./_flags')
  , RegExpProto = RegExp.prototype;

var $RegExpStringIterator = function(regexp, string){
  this._r = regexp;
  this._s = string;
};

require('./_iter-create')($RegExpStringIterator, 'RegExp String', function next(){
  var match = this._r.exec(this._s);
  return {value: match, done: match === null};
});

$export($export.P, 'String', {
  matchAll: function matchAll(regexp){
    defined(this);
    if(!isRegExp(regexp))throw TypeError(regexp + ' is not a regexp!');
    var S     = String(this)
      , flags = 'flags' in RegExpProto ? String(regexp.flags) : getFlags.call(regexp)
      , rx    = new RegExp(regexp.source, ~flags.indexOf('g') ? flags : 'g' + flags);
    rx.lastIndex = toLength(regexp.lastIndex);
    return new $RegExpStringIterator(rx, S);
  }
});
},{"./_defined":43,"./_export":48,"./_flags":52,"./_is-regexp":66,"./_iter-create":68,"./_to-length":124}],301:[function(require,module,exports){
'use strict';
// https://github.com/tc39/proposal-string-pad-start-end
var $export = require('./_export')
  , $pad    = require('./_string-pad');

$export($export.P, 'String', {
  padEnd: function padEnd(maxLength /*, fillString = ' ' */){
    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, false);
  }
});
},{"./_export":48,"./_string-pad":116}],302:[function(require,module,exports){
'use strict';
// https://github.com/tc39/proposal-string-pad-start-end
var $export = require('./_export')
  , $pad    = require('./_string-pad');

$export($export.P, 'String', {
  padStart: function padStart(maxLength /*, fillString = ' ' */){
    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, true);
  }
});
},{"./_export":48,"./_string-pad":116}],303:[function(require,module,exports){
'use strict';
// https://github.com/sebmarkbage/ecmascript-string-left-right-trim
require('./_string-trim')('trimLeft', function($trim){
  return function trimLeft(){
    return $trim(this, 1);
  };
}, 'trimStart');
},{"./_string-trim":118}],304:[function(require,module,exports){
'use strict';
// https://github.com/sebmarkbage/ecmascript-string-left-right-trim
require('./_string-trim')('trimRight', function($trim){
  return function trimRight(){
    return $trim(this, 2);
  };
}, 'trimEnd');
},{"./_string-trim":118}],305:[function(require,module,exports){
require('./_wks-define')('asyncIterator');
},{"./_wks-define":131}],306:[function(require,module,exports){
require('./_wks-define')('observable');
},{"./_wks-define":131}],307:[function(require,module,exports){
// https://github.com/ljharb/proposal-global
var $export = require('./_export');

$export($export.S, 'System', {global: require('./_global')});
},{"./_export":48,"./_global":54}],308:[function(require,module,exports){
var $iterators    = require('./es6.array.iterator')
  , redefine      = require('./_redefine')
  , global        = require('./_global')
  , hide          = require('./_hide')
  , Iterators     = require('./_iterators')
  , wks           = require('./_wks')
  , ITERATOR      = wks('iterator')
  , TO_STRING_TAG = wks('toStringTag')
  , ArrayValues   = Iterators.Array;

for(var collections = ['NodeList', 'DOMTokenList', 'MediaList', 'StyleSheetList', 'CSSRuleList'], i = 0; i < 5; i++){
  var NAME       = collections[i]
    , Collection = global[NAME]
    , proto      = Collection && Collection.prototype
    , key;
  if(proto){
    if(!proto[ITERATOR])hide(proto, ITERATOR, ArrayValues);
    if(!proto[TO_STRING_TAG])hide(proto, TO_STRING_TAG, NAME);
    Iterators[NAME] = ArrayValues;
    for(key in $iterators)if(!proto[key])redefine(proto, key, $iterators[key], true);
  }
}
},{"./_global":54,"./_hide":56,"./_iterators":72,"./_redefine":103,"./_wks":133,"./es6.array.iterator":146}],309:[function(require,module,exports){
var $export = require('./_export')
  , $task   = require('./_task');
$export($export.G + $export.B, {
  setImmediate:   $task.set,
  clearImmediate: $task.clear
});
},{"./_export":48,"./_task":120}],310:[function(require,module,exports){
// ie9- setTimeout & setInterval additional parameters fix
var global     = require('./_global')
  , $export    = require('./_export')
  , invoke     = require('./_invoke')
  , partial    = require('./_partial')
  , navigator  = global.navigator
  , MSIE       = !!navigator && /MSIE .\./.test(navigator.userAgent); // <- dirty ie9- check
var wrap = function(set){
  return MSIE ? function(fn, time /*, ...args */){
    return set(invoke(
      partial,
      [].slice.call(arguments, 2),
      typeof fn == 'function' ? fn : Function(fn)
    ), time);
  } : set;
};
$export($export.G + $export.B + $export.F * MSIE, {
  setTimeout:  wrap(global.setTimeout),
  setInterval: wrap(global.setInterval)
});
},{"./_export":48,"./_global":54,"./_invoke":60,"./_partial":99}],311:[function(require,module,exports){
require('./modules/es6.symbol');
require('./modules/es6.object.create');
require('./modules/es6.object.define-property');
require('./modules/es6.object.define-properties');
require('./modules/es6.object.get-own-property-descriptor');
require('./modules/es6.object.get-prototype-of');
require('./modules/es6.object.keys');
require('./modules/es6.object.get-own-property-names');
require('./modules/es6.object.freeze');
require('./modules/es6.object.seal');
require('./modules/es6.object.prevent-extensions');
require('./modules/es6.object.is-frozen');
require('./modules/es6.object.is-sealed');
require('./modules/es6.object.is-extensible');
require('./modules/es6.object.assign');
require('./modules/es6.object.is');
require('./modules/es6.object.set-prototype-of');
require('./modules/es6.object.to-string');
require('./modules/es6.function.bind');
require('./modules/es6.function.name');
require('./modules/es6.function.has-instance');
require('./modules/es6.parse-int');
require('./modules/es6.parse-float');
require('./modules/es6.number.constructor');
require('./modules/es6.number.to-fixed');
require('./modules/es6.number.to-precision');
require('./modules/es6.number.epsilon');
require('./modules/es6.number.is-finite');
require('./modules/es6.number.is-integer');
require('./modules/es6.number.is-nan');
require('./modules/es6.number.is-safe-integer');
require('./modules/es6.number.max-safe-integer');
require('./modules/es6.number.min-safe-integer');
require('./modules/es6.number.parse-float');
require('./modules/es6.number.parse-int');
require('./modules/es6.math.acosh');
require('./modules/es6.math.asinh');
require('./modules/es6.math.atanh');
require('./modules/es6.math.cbrt');
require('./modules/es6.math.clz32');
require('./modules/es6.math.cosh');
require('./modules/es6.math.expm1');
require('./modules/es6.math.fround');
require('./modules/es6.math.hypot');
require('./modules/es6.math.imul');
require('./modules/es6.math.log10');
require('./modules/es6.math.log1p');
require('./modules/es6.math.log2');
require('./modules/es6.math.sign');
require('./modules/es6.math.sinh');
require('./modules/es6.math.tanh');
require('./modules/es6.math.trunc');
require('./modules/es6.string.from-code-point');
require('./modules/es6.string.raw');
require('./modules/es6.string.trim');
require('./modules/es6.string.iterator');
require('./modules/es6.string.code-point-at');
require('./modules/es6.string.ends-with');
require('./modules/es6.string.includes');
require('./modules/es6.string.repeat');
require('./modules/es6.string.starts-with');
require('./modules/es6.string.anchor');
require('./modules/es6.string.big');
require('./modules/es6.string.blink');
require('./modules/es6.string.bold');
require('./modules/es6.string.fixed');
require('./modules/es6.string.fontcolor');
require('./modules/es6.string.fontsize');
require('./modules/es6.string.italics');
require('./modules/es6.string.link');
require('./modules/es6.string.small');
require('./modules/es6.string.strike');
require('./modules/es6.string.sub');
require('./modules/es6.string.sup');
require('./modules/es6.date.now');
require('./modules/es6.date.to-json');
require('./modules/es6.date.to-iso-string');
require('./modules/es6.date.to-string');
require('./modules/es6.date.to-primitive');
require('./modules/es6.array.is-array');
require('./modules/es6.array.from');
require('./modules/es6.array.of');
require('./modules/es6.array.join');
require('./modules/es6.array.slice');
require('./modules/es6.array.sort');
require('./modules/es6.array.for-each');
require('./modules/es6.array.map');
require('./modules/es6.array.filter');
require('./modules/es6.array.some');
require('./modules/es6.array.every');
require('./modules/es6.array.reduce');
require('./modules/es6.array.reduce-right');
require('./modules/es6.array.index-of');
require('./modules/es6.array.last-index-of');
require('./modules/es6.array.copy-within');
require('./modules/es6.array.fill');
require('./modules/es6.array.find');
require('./modules/es6.array.find-index');
require('./modules/es6.array.species');
require('./modules/es6.array.iterator');
require('./modules/es6.regexp.constructor');
require('./modules/es6.regexp.to-string');
require('./modules/es6.regexp.flags');
require('./modules/es6.regexp.match');
require('./modules/es6.regexp.replace');
require('./modules/es6.regexp.search');
require('./modules/es6.regexp.split');
require('./modules/es6.promise');
require('./modules/es6.map');
require('./modules/es6.set');
require('./modules/es6.weak-map');
require('./modules/es6.weak-set');
require('./modules/es6.typed.array-buffer');
require('./modules/es6.typed.data-view');
require('./modules/es6.typed.int8-array');
require('./modules/es6.typed.uint8-array');
require('./modules/es6.typed.uint8-clamped-array');
require('./modules/es6.typed.int16-array');
require('./modules/es6.typed.uint16-array');
require('./modules/es6.typed.int32-array');
require('./modules/es6.typed.uint32-array');
require('./modules/es6.typed.float32-array');
require('./modules/es6.typed.float64-array');
require('./modules/es6.reflect.apply');
require('./modules/es6.reflect.construct');
require('./modules/es6.reflect.define-property');
require('./modules/es6.reflect.delete-property');
require('./modules/es6.reflect.enumerate');
require('./modules/es6.reflect.get');
require('./modules/es6.reflect.get-own-property-descriptor');
require('./modules/es6.reflect.get-prototype-of');
require('./modules/es6.reflect.has');
require('./modules/es6.reflect.is-extensible');
require('./modules/es6.reflect.own-keys');
require('./modules/es6.reflect.prevent-extensions');
require('./modules/es6.reflect.set');
require('./modules/es6.reflect.set-prototype-of');
require('./modules/es7.array.includes');
require('./modules/es7.string.at');
require('./modules/es7.string.pad-start');
require('./modules/es7.string.pad-end');
require('./modules/es7.string.trim-left');
require('./modules/es7.string.trim-right');
require('./modules/es7.string.match-all');
require('./modules/es7.symbol.async-iterator');
require('./modules/es7.symbol.observable');
require('./modules/es7.object.get-own-property-descriptors');
require('./modules/es7.object.values');
require('./modules/es7.object.entries');
require('./modules/es7.object.define-getter');
require('./modules/es7.object.define-setter');
require('./modules/es7.object.lookup-getter');
require('./modules/es7.object.lookup-setter');
require('./modules/es7.map.to-json');
require('./modules/es7.set.to-json');
require('./modules/es7.system.global');
require('./modules/es7.error.is-error');
require('./modules/es7.math.iaddh');
require('./modules/es7.math.isubh');
require('./modules/es7.math.imulh');
require('./modules/es7.math.umulh');
require('./modules/es7.reflect.define-metadata');
require('./modules/es7.reflect.delete-metadata');
require('./modules/es7.reflect.get-metadata');
require('./modules/es7.reflect.get-metadata-keys');
require('./modules/es7.reflect.get-own-metadata');
require('./modules/es7.reflect.get-own-metadata-keys');
require('./modules/es7.reflect.has-metadata');
require('./modules/es7.reflect.has-own-metadata');
require('./modules/es7.reflect.metadata');
require('./modules/es7.asap');
require('./modules/es7.observable');
require('./modules/web.timers');
require('./modules/web.immediate');
require('./modules/web.dom.iterable');
module.exports = require('./modules/_core');
},{"./modules/_core":39,"./modules/es6.array.copy-within":136,"./modules/es6.array.every":137,"./modules/es6.array.fill":138,"./modules/es6.array.filter":139,"./modules/es6.array.find":141,"./modules/es6.array.find-index":140,"./modules/es6.array.for-each":142,"./modules/es6.array.from":143,"./modules/es6.array.index-of":144,"./modules/es6.array.is-array":145,"./modules/es6.array.iterator":146,"./modules/es6.array.join":147,"./modules/es6.array.last-index-of":148,"./modules/es6.array.map":149,"./modules/es6.array.of":150,"./modules/es6.array.reduce":152,"./modules/es6.array.reduce-right":151,"./modules/es6.array.slice":153,"./modules/es6.array.some":154,"./modules/es6.array.sort":155,"./modules/es6.array.species":156,"./modules/es6.date.now":157,"./modules/es6.date.to-iso-string":158,"./modules/es6.date.to-json":159,"./modules/es6.date.to-primitive":160,"./modules/es6.date.to-string":161,"./modules/es6.function.bind":162,"./modules/es6.function.has-instance":163,"./modules/es6.function.name":164,"./modules/es6.map":165,"./modules/es6.math.acosh":166,"./modules/es6.math.asinh":167,"./modules/es6.math.atanh":168,"./modules/es6.math.cbrt":169,"./modules/es6.math.clz32":170,"./modules/es6.math.cosh":171,"./modules/es6.math.expm1":172,"./modules/es6.math.fround":173,"./modules/es6.math.hypot":174,"./modules/es6.math.imul":175,"./modules/es6.math.log10":176,"./modules/es6.math.log1p":177,"./modules/es6.math.log2":178,"./modules/es6.math.sign":179,"./modules/es6.math.sinh":180,"./modules/es6.math.tanh":181,"./modules/es6.math.trunc":182,"./modules/es6.number.constructor":183,"./modules/es6.number.epsilon":184,"./modules/es6.number.is-finite":185,"./modules/es6.number.is-integer":186,"./modules/es6.number.is-nan":187,"./modules/es6.number.is-safe-integer":188,"./modules/es6.number.max-safe-integer":189,"./modules/es6.number.min-safe-integer":190,"./modules/es6.number.parse-float":191,"./modules/es6.number.parse-int":192,"./modules/es6.number.to-fixed":193,"./modules/es6.number.to-precision":194,"./modules/es6.object.assign":195,"./modules/es6.object.create":196,"./modules/es6.object.define-properties":197,"./modules/es6.object.define-property":198,"./modules/es6.object.freeze":199,"./modules/es6.object.get-own-property-descriptor":200,"./modules/es6.object.get-own-property-names":201,"./modules/es6.object.get-prototype-of":202,"./modules/es6.object.is":206,"./modules/es6.object.is-extensible":203,"./modules/es6.object.is-frozen":204,"./modules/es6.object.is-sealed":205,"./modules/es6.object.keys":207,"./modules/es6.object.prevent-extensions":208,"./modules/es6.object.seal":209,"./modules/es6.object.set-prototype-of":210,"./modules/es6.object.to-string":211,"./modules/es6.parse-float":212,"./modules/es6.parse-int":213,"./modules/es6.promise":214,"./modules/es6.reflect.apply":215,"./modules/es6.reflect.construct":216,"./modules/es6.reflect.define-property":217,"./modules/es6.reflect.delete-property":218,"./modules/es6.reflect.enumerate":219,"./modules/es6.reflect.get":222,"./modules/es6.reflect.get-own-property-descriptor":220,"./modules/es6.reflect.get-prototype-of":221,"./modules/es6.reflect.has":223,"./modules/es6.reflect.is-extensible":224,"./modules/es6.reflect.own-keys":225,"./modules/es6.reflect.prevent-extensions":226,"./modules/es6.reflect.set":228,"./modules/es6.reflect.set-prototype-of":227,"./modules/es6.regexp.constructor":229,"./modules/es6.regexp.flags":230,"./modules/es6.regexp.match":231,"./modules/es6.regexp.replace":232,"./modules/es6.regexp.search":233,"./modules/es6.regexp.split":234,"./modules/es6.regexp.to-string":235,"./modules/es6.set":236,"./modules/es6.string.anchor":237,"./modules/es6.string.big":238,"./modules/es6.string.blink":239,"./modules/es6.string.bold":240,"./modules/es6.string.code-point-at":241,"./modules/es6.string.ends-with":242,"./modules/es6.string.fixed":243,"./modules/es6.string.fontcolor":244,"./modules/es6.string.fontsize":245,"./modules/es6.string.from-code-point":246,"./modules/es6.string.includes":247,"./modules/es6.string.italics":248,"./modules/es6.string.iterator":249,"./modules/es6.string.link":250,"./modules/es6.string.raw":251,"./modules/es6.string.repeat":252,"./modules/es6.string.small":253,"./modules/es6.string.starts-with":254,"./modules/es6.string.strike":255,"./modules/es6.string.sub":256,"./modules/es6.string.sup":257,"./modules/es6.string.trim":258,"./modules/es6.symbol":259,"./modules/es6.typed.array-buffer":260,"./modules/es6.typed.data-view":261,"./modules/es6.typed.float32-array":262,"./modules/es6.typed.float64-array":263,"./modules/es6.typed.int16-array":264,"./modules/es6.typed.int32-array":265,"./modules/es6.typed.int8-array":266,"./modules/es6.typed.uint16-array":267,"./modules/es6.typed.uint32-array":268,"./modules/es6.typed.uint8-array":269,"./modules/es6.typed.uint8-clamped-array":270,"./modules/es6.weak-map":271,"./modules/es6.weak-set":272,"./modules/es7.array.includes":273,"./modules/es7.asap":274,"./modules/es7.error.is-error":275,"./modules/es7.map.to-json":276,"./modules/es7.math.iaddh":277,"./modules/es7.math.imulh":278,"./modules/es7.math.isubh":279,"./modules/es7.math.umulh":280,"./modules/es7.object.define-getter":281,"./modules/es7.object.define-setter":282,"./modules/es7.object.entries":283,"./modules/es7.object.get-own-property-descriptors":284,"./modules/es7.object.lookup-getter":285,"./modules/es7.object.lookup-setter":286,"./modules/es7.object.values":287,"./modules/es7.observable":288,"./modules/es7.reflect.define-metadata":289,"./modules/es7.reflect.delete-metadata":290,"./modules/es7.reflect.get-metadata":292,"./modules/es7.reflect.get-metadata-keys":291,"./modules/es7.reflect.get-own-metadata":294,"./modules/es7.reflect.get-own-metadata-keys":293,"./modules/es7.reflect.has-metadata":295,"./modules/es7.reflect.has-own-metadata":296,"./modules/es7.reflect.metadata":297,"./modules/es7.set.to-json":298,"./modules/es7.string.at":299,"./modules/es7.string.match-all":300,"./modules/es7.string.pad-end":301,"./modules/es7.string.pad-start":302,"./modules/es7.string.trim-left":303,"./modules/es7.string.trim-right":304,"./modules/es7.symbol.async-iterator":305,"./modules/es7.symbol.observable":306,"./modules/es7.system.global":307,"./modules/web.dom.iterable":308,"./modules/web.immediate":309,"./modules/web.timers":310}],312:[function(require,module,exports){
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],313:[function(require,module,exports){
'use strict';

/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */

// The _isBuffer check is for Safari 5-7 support, because it's missing
// Object.prototype.constructor. Remove this eventually
module.exports = function (obj) {
  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer);
};

function isBuffer(obj) {
  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj);
}

// For Node v0.10 support. Remove this eventually.
function isSlowBuffer(obj) {
  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0));
}

},{}],314:[function(require,module,exports){
var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

},{}],315:[function(require,module,exports){
(function (process){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// Split a filename into [root, dir, basename, ext], unix version
// 'root' is just a slash, or nothing.
var splitPathRe =
    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
var splitPath = function(filename) {
  return splitPathRe.exec(filename).slice(1);
};

// path.resolve([from ...], to)
// posix version
exports.resolve = function() {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = (i >= 0) ? arguments[i] : process.cwd();

    // Skip empty and invalid entries
    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
};

// path.normalize(path)
// posix version
exports.normalize = function(path) {
  var isAbsolute = exports.isAbsolute(path),
      trailingSlash = substr(path, -1) === '/';

  // Normalize the path
  path = normalizeArray(filter(path.split('/'), function(p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};

// posix version
exports.isAbsolute = function(path) {
  return path.charAt(0) === '/';
};

// posix version
exports.join = function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function(p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
};


// path.relative(from, to)
// posix version
exports.relative = function(from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};

exports.sep = '/';
exports.delimiter = ':';

exports.dirname = function(path) {
  var result = splitPath(path),
      root = result[0],
      dir = result[1];

  if (!root && !dir) {
    // No dirname whatsoever
    return '.';
  }

  if (dir) {
    // It has a dirname, strip trailing slash
    dir = dir.substr(0, dir.length - 1);
  }

  return root + dir;
};


exports.basename = function(path, ext) {
  var f = splitPath(path)[2];
  // TODO: make this comparison case-insensitive on windows?
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};


exports.extname = function(path) {
  return splitPath(path)[3];
};

function filter (xs, f) {
    if (xs.filter) return xs.filter(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        if (f(xs[i], i, xs)) res.push(xs[i]);
    }
    return res;
}

// String.prototype.substr - negative index don't work in IE8
var substr = 'ab'.substr(-1) === 'b'
    ? function (str, start, len) { return str.substr(start, len) }
    : function (str, start, len) {
        if (start < 0) start = str.length + start;
        return str.substr(start, len);
    }
;

}).call(this,require('_process'))

},{"_process":316}],316:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],317:[function(require,module,exports){
(function (process,global){
/**
 * Copyright (c) 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * https://raw.github.com/facebook/regenerator/master/LICENSE file. An
 * additional grant of patent rights can be found in the PATENTS file in
 * the same directory.
 */

!(function(global) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  var inModule = typeof module === "object";
  var runtime = global.regeneratorRuntime;
  if (runtime) {
    if (inModule) {
      // If regeneratorRuntime is defined globally and we're in a module,
      // make the exports object identical to regeneratorRuntime.
      module.exports = runtime;
    }
    // Don't bother evaluating the rest of this file if the runtime was
    // already defined globally.
    return;
  }

  // Define the runtime globally (as expected by generated code) as either
  // module.exports (if we're in a module) or a new, empty object.
  runtime = global.regeneratorRuntime = inModule ? module.exports : {};

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  runtime.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunctionPrototype[toStringTagSymbol] =
    GeneratorFunction.displayName = "GeneratorFunction";

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      prototype[method] = function(arg) {
        return this._invoke(method, arg);
      };
    });
  }

  runtime.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  runtime.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      if (!(toStringTagSymbol in genFun)) {
        genFun[toStringTagSymbol] = "GeneratorFunction";
      }
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  runtime.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return Promise.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return Promise.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration. If the Promise is rejected, however, the
          // result for this iteration will be rejected with the same
          // reason. Note that rejections of yielded Promises are not
          // thrown back into the generator function, as is the case
          // when an awaited Promise is rejected. This difference in
          // behavior between yield and await is important, because it
          // allows the consumer to decide what to do with the yielded
          // rejection (swallow it and continue, manually .throw it back
          // into the generator, abandon iteration, whatever). With
          // await, by contrast, there is no opportunity to examine the
          // rejection reason outside the generator function, so the
          // only option is to throw it from the await expression, and
          // let the generator function handle the exception.
          result.value = unwrapped;
          resolve(result);
        }, reject);
      }
    }

    if (typeof process === "object" && process.domain) {
      invoke = process.domain.bind(invoke);
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new Promise(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  runtime.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  runtime.async = function(innerFn, outerFn, self, tryLocsList) {
    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList)
    );

    return runtime.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          if (method === "return" ||
              (method === "throw" && delegate.iterator[method] === undefined)) {
            // A return or throw (when the delegate iterator has no throw
            // method) always terminates the yield* loop.
            context.delegate = null;

            // If the delegate iterator has a return method, give it a
            // chance to clean up.
            var returnMethod = delegate.iterator["return"];
            if (returnMethod) {
              var record = tryCatch(returnMethod, delegate.iterator, arg);
              if (record.type === "throw") {
                // If the return method threw an exception, let that
                // exception prevail over the original return or throw.
                method = "throw";
                arg = record.arg;
                continue;
              }
            }

            if (method === "return") {
              // Continue with the outer return, now that the delegate
              // iterator has been terminated.
              continue;
            }
          }

          var record = tryCatch(
            delegate.iterator[method],
            delegate.iterator,
            arg
          );

          if (record.type === "throw") {
            context.delegate = null;

            // Like returning generator.throw(uncaught), but without the
            // overhead of an extra function call.
            method = "throw";
            arg = record.arg;
            continue;
          }

          // Delegate generator ran and handled its own exceptions so
          // regardless of what the method was, we continue as if it is
          // "next" with an undefined arg.
          method = "next";
          arg = undefined;

          var info = record.arg;
          if (info.done) {
            context[delegate.resultName] = info.value;
            context.next = delegate.nextLoc;
          } else {
            state = GenStateSuspendedYield;
            return info;
          }

          context.delegate = null;
        }

        if (method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = arg;

        } else if (method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw arg;
          }

          if (context.dispatchException(arg)) {
            // If the dispatched exception was caught by a catch block,
            // then let that catch block handle the exception normally.
            method = "next";
            arg = undefined;
          }

        } else if (method === "return") {
          context.abrupt("return", arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          var info = {
            value: record.arg,
            done: context.done
          };

          if (record.arg === ContinueSentinel) {
            if (context.delegate && method === "next") {
              // Deliberately forget the last sent value so that we don't
              // accidentally pass it on to the delegate.
              arg = undefined;
            }
          } else {
            return info;
          }

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(arg) call above.
          method = "throw";
          arg = record.arg;
        }
      }
    };
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  Gp[toStringTagSymbol] = "Generator";

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  runtime.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  runtime.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;
        return !!caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.next = finallyEntry.finallyLoc;
      } else {
        this.complete(record);
      }

      return ContinueSentinel;
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = record.arg;
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      return ContinueSentinel;
    }
  };
})(
  // Among the various tricks for obtaining a reference to the global
  // object, this seems to be the most reliable technique that does not
  // use indirect eval (which violates Content Security Policy).
  typeof global === "object" ? global :
  typeof window === "object" ? window :
  typeof self === "object" ? self : this
);

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"_process":316}],318:[function(require,module,exports){
(function (Buffer){
/**
 * Bitcoin Address
 * ===============
 *
 * A bitcoin address. Normal use cases:
 * let address = new Address().fromPubKey(pubKey)
 * let address = new Address().fromRedeemScript(script)
 * let address = new Address().fromString(string)
 * let string = address.toString()
 * let script = address.toScript()
 * let isValid = Address.isValid(string)
 *
 * Can also do testnet:
 * let address = Address.Testnet()
 *
 * Note that an Address and an Addr are two completely different things. An
 * Address is what you send bitcoin to. An Addr is an ip address and port that
 * you connect to over the internet.
 */
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var dependencies = {
  Base58Check: require('./base-58-check'),
  Constants: require('./constants').Default.Address,
  Hash: require('./hash'),
  OpCode: require('./op-code'),
  PubKey: require('./pub-key'),
  Script: require('./script'),
  Struct: require('./struct'),
  Workers: require('./workers'),
  asink: require('asink')
};

var inject = function inject(deps) {
  var Base58Check = deps.Base58Check;
  var Constants = deps.Constants;
  var Hash = deps.Hash;
  var OpCode = deps.OpCode;
  var PubKey = deps.PubKey;
  var Script = deps.Script;
  var Struct = deps.Struct;
  var Workers = deps.Workers;
  var asink = deps.asink;

  var Address = function (_Struct) {
    _inherits(Address, _Struct);

    function Address(versionByteNum, hashBuf) {
      _classCallCheck(this, Address);

      return _possibleConstructorReturn(this, Object.getPrototypeOf(Address).call(this, { versionByteNum: versionByteNum, hashBuf: hashBuf }));
    }

    _createClass(Address, [{
      key: 'fromBuffer',
      value: function fromBuffer(buf) {
        if (buf.length !== 1 + 20) {
          throw new Error('address buffers must be exactly 21 bytes');
        }
        if (buf[0] !== Constants.pubKeyHash && buf[0] !== Constants.scriptHash) {
          throw new Error('address: invalid versionByteNum byte');
        }
        this.versionByteNum = buf[0];
        this.hashBuf = buf.slice(1);
        return this;
      }
    }, {
      key: 'fromPubKeyHashBuf',
      value: function fromPubKeyHashBuf(hashBuf) {
        this.hashBuf = hashBuf;
        this.versionByteNum = Constants['pubKeyHash'];
        return this;
      }
    }, {
      key: 'fromPubKey',
      value: function fromPubKey(pubKey) {
        var hashBuf = Hash.sha256Ripemd160(pubKey.toBuffer());
        return this.fromPubKeyHashBuf(hashBuf);
      }
    }, {
      key: 'asyncFromPubKey',
      value: function asyncFromPubKey(pubKey) {
        return asink(regeneratorRuntime.mark(function _callee() {
          var args, workersResult;
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  args = [pubKey];
                  _context.next = 3;
                  return Workers.asyncObjectMethod(this, 'fromPubKey', args);

                case 3:
                  workersResult = _context.sent;
                  return _context.abrupt('return', this.fromFastBuffer(workersResult.resbuf));

                case 5:
                case 'end':
                  return _context.stop();
              }
            }
          }, _callee, this);
        }), this);
      }
    }, {
      key: 'fromPrivKey',
      value: function fromPrivKey(privKey) {
        var pubKey = new PubKey().fromPrivKey(privKey);
        var hashBuf = Hash.sha256Ripemd160(pubKey.toBuffer());
        return this.fromPubKeyHashBuf(hashBuf);
      }
    }, {
      key: 'asyncFromPrivKey',
      value: function asyncFromPrivKey(privKey) {
        return asink(regeneratorRuntime.mark(function _callee2() {
          var args, workersResult;
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  args = [privKey];
                  _context2.next = 3;
                  return Workers.asyncObjectMethod(this, 'fromPrivKey', args);

                case 3:
                  workersResult = _context2.sent;
                  return _context2.abrupt('return', this.fromFastBuffer(workersResult.resbuf));

                case 5:
                case 'end':
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }), this);
      }
    }, {
      key: 'fromRedeemScriptHashBuf',
      value: function fromRedeemScriptHashBuf(hashBuf) {
        this.hashBuf = hashBuf;
        var typeStr = 'scriptHash';
        this.versionByteNum = Constants[typeStr];
        return this;
      }
    }, {
      key: 'fromRedeemScript',
      value: function fromRedeemScript(script) {
        var hashBuf = Hash.sha256Ripemd160(script.toBuffer());
        return this.fromRedeemScriptHashBuf(hashBuf);
      }
    }, {
      key: 'asyncFromRedeemScript',
      value: function asyncFromRedeemScript(script) {
        return asink(regeneratorRuntime.mark(function _callee3() {
          var args, workersResult;
          return regeneratorRuntime.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  args = [script];
                  _context3.next = 3;
                  return Workers.asyncObjectMethod(this, 'fromRedeemScript', args);

                case 3:
                  workersResult = _context3.sent;
                  return _context3.abrupt('return', this.fromFastBuffer(workersResult.resbuf));

                case 5:
                case 'end':
                  return _context3.stop();
              }
            }
          }, _callee3, this);
        }), this);
      }
    }, {
      key: 'fromString',
      value: function fromString(str) {
        var buf = Base58Check.decode(str);
        return this.fromBuffer(buf);
      }
    }, {
      key: 'asyncFromString',
      value: function asyncFromString(str) {
        return asink(regeneratorRuntime.mark(function _callee4() {
          var args, workersResult;
          return regeneratorRuntime.wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  args = [str];
                  _context4.next = 3;
                  return Workers.asyncObjectMethod(this, 'fromString', args);

                case 3:
                  workersResult = _context4.sent;
                  return _context4.abrupt('return', this.fromFastBuffer(workersResult.resbuf));

                case 5:
                case 'end':
                  return _context4.stop();
              }
            }
          }, _callee4, this);
        }), this);
      }
    }, {
      key: 'isValid',
      value: function isValid() {
        try {
          this.validate();
          return true;
        } catch (e) {
          return false;
        }
      }
    }, {
      key: 'type',
      value: function type() {
        if (this.versionByteNum === Constants['pubKeyHash']) {
          return 'pubKeyHash';
        } else if (this.versionByteNum === Constants['scriptHash']) {
          return 'scriptHash';
        } else {
          return 'unknown';
        }
      }
    }, {
      key: 'toScript',
      value: function toScript() {
        var type = this.type();
        var script = void 0;
        if (type === 'pubKeyHash') {
          script = new Script();
          script.writeOpCode(OpCode.OP_DUP);
          script.writeOpCode(OpCode.OP_HASH160);
          script.writeBuffer(this.hashBuf);
          script.writeOpCode(OpCode.OP_EQUALVERIFY);
          script.writeOpCode(OpCode.OP_CHECKSIG);
        } else if (type === 'scriptHash') {
          script = new Script();
          script.writeOpCode(OpCode.OP_HASH160);
          script.writeBuffer(this.hashBuf);
          script.writeOpCode(OpCode.OP_EQUAL);
        } else {
          throw new Error('script must be either pubKeyHash or scriptHash');
        }
        return script;
      }
    }, {
      key: 'toBuffer',
      value: function toBuffer() {
        var versionByteBuf = new Buffer([this.versionByteNum]);
        var buf = Buffer.concat([versionByteBuf, this.hashBuf]);
        return buf;
      }
    }, {
      key: 'toJSON',
      value: function toJSON() {
        var json = {};
        if (this.hashBuf) {
          json.hashBuf = this.hashBuf.toString('hex');
        }
        if (_typeof(this.versionByteNum) !== undefined) {
          json.versionByteNum = this.versionByteNum;
        }
        return json;
      }
    }, {
      key: 'fromJSON',
      value: function fromJSON(json) {
        if (json.hashBuf) {
          this.hashBuf = new Buffer(json.hashBuf, 'hex');
        }
        if (_typeof(json.versionByteNum) !== undefined) {
          this.versionByteNum = json.versionByteNum;
        }
        return this;
      }
    }, {
      key: 'toString',
      value: function toString() {
        return Base58Check.encode(this.toBuffer());
      }
    }, {
      key: 'asyncToString',
      value: function asyncToString() {
        return asink(regeneratorRuntime.mark(function _callee5() {
          var args, workersResult;
          return regeneratorRuntime.wrap(function _callee5$(_context5) {
            while (1) {
              switch (_context5.prev = _context5.next) {
                case 0:
                  args = [];
                  _context5.next = 3;
                  return Workers.asyncObjectMethod(this, 'toString', args);

                case 3:
                  workersResult = _context5.sent;
                  return _context5.abrupt('return', JSON.parse(workersResult.resbuf.toString()));

                case 5:
                case 'end':
                  return _context5.stop();
              }
            }
          }, _callee5, this);
        }), this);
      }
    }, {
      key: 'validate',
      value: function validate() {
        if (!Buffer.isBuffer(this.hashBuf) || this.hashBuf.length !== 20) {
          throw new Error('hashBuf must be a buffer of 20 bytes');
        }
        if (this.versionByteNum !== Constants['pubKeyHash'] && this.versionByteNum !== Constants['scriptHash']) {
          throw new Error('invalid versionByteNum');
        }
        return this;
      }
    }], [{
      key: 'fromPubKeyHashBuf',
      value: function fromPubKeyHashBuf(hashBuf) {
        return new this().fromPubKeyHashBuf(hashBuf);
      }
    }, {
      key: 'fromPubKey',
      value: function fromPubKey(pubKey) {
        return new this().fromPubKey(pubKey);
      }
    }, {
      key: 'asyncFromPubKey',
      value: function asyncFromPubKey(pubKey) {
        return new this().asyncFromPubKey(pubKey);
      }
    }, {
      key: 'fromPrivKey',
      value: function fromPrivKey(privKey) {
        return new this().fromPrivKey(privKey);
      }
    }, {
      key: 'asyncFromPrivKey',
      value: function asyncFromPrivKey(privKey) {
        return new this().fromPrivKey(privKey);
      }
    }, {
      key: 'fromRedeemScriptHashBuf',
      value: function fromRedeemScriptHashBuf(hashBuf) {
        return new this().fromRedeemScriptHashBuf(hashBuf);
      }
    }, {
      key: 'fromRedeemScript',
      value: function fromRedeemScript(script) {
        return new this().fromRedeemScript(script);
      }
    }, {
      key: 'asyncFromRedeemScript',
      value: function asyncFromRedeemScript(script) {
        return new this().asyncFromRedeemScript(script);
      }
    }, {
      key: 'asyncFromString',
      value: function asyncFromString(str) {
        return new this().asyncFromString(str);
      }
    }, {
      key: 'isValid',
      value: function isValid(addrstr) {
        var address = void 0;
        try {
          address = new Address().fromString(addrstr);
        } catch (e) {
          return false;
        }
        return address.isValid();
      }
    }]);

    return Address;
  }(Struct);

  return Address;
};

inject = require('injecter')(inject, dependencies);
var Address = inject();
Address.Mainnet = inject({
  Constants: require('./constants').Mainnet.Address
});
Address.Testnet = inject({
  Constants: require('./constants').Testnet.Address
});
module.exports = Address;

}).call(this,require("buffer").Buffer)

},{"./base-58-check":319,"./constants":325,"./hash":327,"./op-code":329,"./pub-key":332,"./script":334,"./struct":336,"./workers":345,"asink":346,"buffer":17,"injecter":375}],319:[function(require,module,exports){
(function (Buffer){
/**
 * Base58 Check Encoding
 * =====================
 *
 * Base58 check encoding. The usual way to use it is
 * new Base58Check(buf).toString() or new Base58Check(str).toBuffer().
 */
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var dependencies = {
  Base58: require('./base-58'),
  cmp: require('./cmp'),
  Hash: require('./hash'),
  Struct: require('./struct')
};

var inject = function inject(deps) {
  var Base58 = deps.Base58;
  var cmp = deps.cmp;
  var Hash = deps.Hash;
  var Struct = deps.Struct;

  var Base58Check = function (_Struct) {
    _inherits(Base58Check, _Struct);

    function Base58Check(buf) {
      _classCallCheck(this, Base58Check);

      return _possibleConstructorReturn(this, Object.getPrototypeOf(Base58Check).call(this, { buf: buf }));
    }

    _createClass(Base58Check, [{
      key: 'fromHex',
      value: function fromHex(hex) {
        return this.fromBuffer(new Buffer(hex, 'hex'));
      }
    }, {
      key: 'toHex',
      value: function toHex() {
        return this.toBuffer().toString('hex');
      }
    }, {
      key: 'fromBuffer',
      value: function fromBuffer(buf) {
        this.buf = buf;
        return this;
      }
    }, {
      key: 'fromString',
      value: function fromString(str) {
        var buf = Base58Check.decode(str);
        this.buf = buf;
        return this;
      }
    }, {
      key: 'toBuffer',
      value: function toBuffer() {
        return this.buf;
      }
    }, {
      key: 'toString',
      value: function toString() {
        return Base58Check.encode(this.buf);
      }
    }], [{
      key: 'decode',
      value: function decode(s) {
        if (typeof s !== 'string') {
          throw new Error('Input must be a string');
        }

        var buf = Base58.decode(s);

        if (buf.length < 4) {
          throw new Error('Input string too short');
        }

        var data = buf.slice(0, -4);
        var csum = buf.slice(-4);

        var hash = Hash.sha256Sha256(data);
        var hash4 = hash.slice(0, 4);

        if (!cmp(csum, hash4)) {
          throw new Error('Checksum mismatch');
        }

        return data;
      }
    }, {
      key: 'encode',
      value: function encode(buf) {
        if (!Buffer.isBuffer(buf)) {
          throw new Error('Input must be a buffer');
        }
        var checkedBuf = new Buffer(buf.length + 4);
        var hash = Hash.sha256Sha256(buf);
        buf.copy(checkedBuf);
        hash.copy(checkedBuf, buf.length);
        return Base58.encode(checkedBuf);
      }
    }]);

    return Base58Check;
  }(Struct);

  return Base58Check;
};

inject = require('injecter')(inject, dependencies);
var Base58Check = inject();
module.exports = Base58Check;

}).call(this,require("buffer").Buffer)

},{"./base-58":320,"./cmp":324,"./hash":327,"./struct":336,"buffer":17,"injecter":375}],320:[function(require,module,exports){
(function (Buffer){
/**
 * Base58 Encoding
 * ===============
 *
 * Base58 (no check)
 */
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var dependencies = {
  bs58: require('bs58'),
  Struct: require('./struct')
};

var inject = function inject(deps) {
  var bs58 = deps.bs58;
  var Struct = deps.Struct;

  var Base58 = function (_Struct) {
    _inherits(Base58, _Struct);

    function Base58(buf) {
      _classCallCheck(this, Base58);

      return _possibleConstructorReturn(this, Object.getPrototypeOf(Base58).call(this, { buf: buf }));
    }

    _createClass(Base58, [{
      key: 'fromHex',
      value: function fromHex(hex) {
        return this.fromBuffer(new Buffer(hex, 'hex'));
      }
    }, {
      key: 'toHex',
      value: function toHex() {
        return this.toBuffer().toString('hex');
      }
    }, {
      key: 'fromBuffer',
      value: function fromBuffer(buf) {
        this.buf = buf;
        return this;
      }
    }, {
      key: 'fromString',
      value: function fromString(str) {
        var buf = Base58.decode(str);
        this.buf = buf;
        return this;
      }
    }, {
      key: 'toBuffer',
      value: function toBuffer() {
        return this.buf;
      }
    }, {
      key: 'toString',
      value: function toString() {
        return Base58.encode(this.buf);
      }
    }], [{
      key: 'encode',
      value: function encode(buf) {
        if (!Buffer.isBuffer(buf)) {
          throw new Error('Input should be a buffer');
        }
        return bs58.encode(buf);
      }
    }, {
      key: 'decode',
      value: function decode(str) {
        if (typeof str !== 'string') {
          throw new Error('Input should be a string');
        }
        return new Buffer(bs58.decode(str));
      }
    }]);

    return Base58;
  }(Struct);

  return Base58;
};

inject = require('injecter')(inject, dependencies);
var Base58 = inject();
module.exports = Base58;

}).call(this,require("buffer").Buffer)

},{"./struct":336,"bs58":350,"buffer":17,"injecter":375}],321:[function(require,module,exports){
(function (Buffer){
/**
 * Big Number
 * ==========
 *
 * Since javascript numbers are only precise up to 53 bits, and bitcoin is
 * based on cryptography that uses 256 bit numbers, we must use a big number
 * library. The library we use at the moment is Fedor Indutny's bn.js library.
 * Since big numbers are extremely useful, we provide some very basic wrappers
 * for his big number class and expose it. The wrappers merely allow you to do,
 * say, bn.cmp(num) instead of just bn.cmp(bn), which is nice. The primary way
 * to use this is:
 * let bn = BN(str) // str is base 10
 * let bn = BN(num)
 * let bn = BN().fromBuffer(buf)
 * let bn = BN().fromSm(buf); // sign+magnitude format, first bit is sign
 *
 * For little endian, pass in an options value:
 * let bn = BN().fromBuffer(buf, {endian: 'little'})
 * let bn = BN().fromSm(buf, {endian: 'little'})
 *
 * Getting output:
 * let str = BN().toString() // produces base 10 string
 * let buf = BN().toBuffer() // produces buffer representation
 * let buf = BN().toBuffer({size: 32}) //produced 32 byte buffer
 */
'use strict';

var dependencies = {
  _BN: require('bn.js')
};

var inject = function inject(deps) {
  var _BN = deps._BN;

  function BN(n, base) {
    for (var _len = arguments.length, rest = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      rest[_key - 2] = arguments[_key];
    }

    if (!(this instanceof BN)) {
      return new (Function.prototype.bind.apply(BN, [null].concat([n, base], rest)))();
    }
    _BN.call.apply(_BN, [this, n, base].concat(rest));
  }

  Object.keys(_BN).forEach(function (key) {
    BN[key] = _BN[key];
  });
  BN.prototype = Object.create(_BN.prototype);
  BN.prototype.constructor = BN;

  function reverseBuf(buf) {
    var buf2 = new Buffer(buf.length);
    for (var i = 0; i < buf.length; i++) {
      buf2[i] = buf[buf.length - 1 - i];
    }
    return buf2;
  }

  BN.prototype.fromHex = function (hex, opts) {
    return this.fromBuffer(new Buffer(hex, 'hex'), opts);
  };

  BN.prototype.toHex = function (opts) {
    return this.toBuffer(opts).toString('hex');
  };

  BN.prototype.toJSON = function () {
    return this.toString();
  };

  BN.prototype.fromJSON = function (str) {
    var bn = BN(str);
    bn.copy(this);
    return this;
  };

  BN.prototype.fromNumber = function (n) {
    var bn = BN(n);
    bn.copy(this);
    return this;
  };

  BN.prototype.toNumber = function () {
    return parseInt(this['toString'](10), 10);
  };

  BN.prototype.fromString = function (str, base) {
    var bn = BN(str, base);
    bn.copy(this);
    return this;
  };

  BN.fromBuffer = function (buf) {
    var opts = arguments.length <= 1 || arguments[1] === undefined ? { endian: 'big' } : arguments[1];

    if (opts.endian === 'little') {
      buf = reverseBuf(buf);
    }
    var hex = buf.toString('hex');
    var bn = new BN(hex, 16);
    return bn;
  };

  BN.prototype.fromBuffer = function (buf, opts) {
    var bn = BN.fromBuffer(buf, opts);
    bn.copy(this);

    return this;
  };

  BN.prototype.toBuffer = function () {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? { size: undefined, endian: 'big' } : arguments[0];

    var buf = void 0;
    if (opts.size) {
      var hex = this.toString(16, 2);
      var natlen = hex.length / 2;
      buf = new Buffer(hex, 'hex');

      if (natlen === opts.size) {
        // pass
      } else if (natlen > opts.size) {
        buf = buf.slice(natlen - buf.length, buf.length);
      } else if (natlen < opts.size) {
        var rbuf = new Buffer(opts.size);
        for (var i = 0; i < buf.length; i++) {
          rbuf[rbuf.length - 1 - i] = buf[buf.length - 1 - i];
        }
        for (var _i = 0; _i < opts.size - natlen; _i++) {
          rbuf[_i] = 0;
        }
        buf = rbuf;
      }
    } else {
      var _hex = this.toString(16, 2);
      buf = new Buffer(_hex, 'hex');
    }

    if (opts.endian === 'little') {
      buf = reverseBuf(buf);
    }
    var longzero = new Buffer([0]);
    if (Buffer.compare(buf, longzero) === 0) {
      return new Buffer([]);
    }
    return buf;
  };

  /**
   * Signed magnitude buffer. Most significant bit represents sign (0 = positive,
   * 1 = negative).
   */
  BN.prototype.fromSm = function (buf) {
    var opts = arguments.length <= 1 || arguments[1] === undefined ? { endian: 'big' } : arguments[1];

    if (buf.length === 0) {
      this.fromBuffer(new Buffer([0]));
    }

    var endian = opts.endian;
    if (endian === 'little') {
      buf = reverseBuf(buf);
    }

    if (buf[0] & 0x80) {
      buf[0] = buf[0] & 0x7f;
      this.fromBuffer(buf);
      this.neg().copy(this);
    } else {
      this.fromBuffer(buf);
    }
    return this;
  };

  BN.prototype.toSm = function () {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? { endian: 'big' } : arguments[0];

    var endian = opts.endian;

    var buf = void 0;
    if (this.cmp(0) === -1) {
      buf = this.neg().toBuffer();
      if (buf[0] & 0x80) {
        buf = Buffer.concat([new Buffer([0x80]), buf]);
      } else {
        buf[0] = buf[0] | 0x80;
      }
    } else {
      buf = this.toBuffer();
      if (buf[0] & 0x80) {
        buf = Buffer.concat([new Buffer([0x00]), buf]);
      }
    }

    if (buf.length === 1 & buf[0] === 0) {
      buf = new Buffer([]);
    }

    if (endian === 'little') {
      buf = reverseBuf(buf);
    }

    return buf;
  };

  /**
   * Produce a BN from the "bits" value in a blockheader. Analagous to Bitcoin
   * Core's uint256 SetCompact method. bits is assumed to be UInt32.
   */
  BN.prototype.fromBits = function (bits) {
    var opts = arguments.length <= 1 || arguments[1] === undefined ? { strict: false } : arguments[1];

    // To performed bitwise operations in javascript, we need to convert to a
    // signed 32 bit value.
    var buf = new Buffer(4);
    buf.writeUInt32BE(bits, 0);
    bits = buf.readInt32BE(0);
    if (opts.strict && bits & 0x00800000) {
      throw new Error('negative bit set');
    }
    var nsize = bits >> 24;
    var nword = bits & 0x007fffff;
    buf = new Buffer(4);
    buf.writeInt32BE(nword);
    if (nsize <= 3) {
      buf = buf.slice(1, nsize + 1);
    } else {
      var fill = new Buffer(nsize - 3);
      fill.fill(0);
      buf = Buffer.concat([buf, fill]);
    }
    this.fromBuffer(buf);
    if (bits & 0x00800000) {
      BN(0).sub(this).copy(this);
    }
    return this;
  };

  /**
   * Convert BN to the "bits" value in a blockheader. Analagous to Bitcoin
   * Core's uint256 GetCompact method. bits is a UInt32.
   */
  BN.prototype.toBits = function () {
    var buf = void 0;
    if (this.lt(0)) {
      buf = this.neg().toBuffer();
    } else {
      buf = this.toBuffer();
    }
    var nsize = buf.length;
    var nword = void 0;
    if (nsize > 3) {
      nword = Buffer.concat([new Buffer([0]), buf.slice(0, 3)]).readUInt32BE(0);
    } else if (nsize <= 3) {
      var blank = new Buffer(3 - nsize + 1);
      blank.fill(0);
      nword = Buffer.concat([blank, buf.slice(0, nsize)]).readUInt32BE(0);
    }
    if (nword & 0x00800000) {
      // The most significant bit denotes sign. Do not want unless number is
      // actually negative.
      nword >>= 8;
      nsize++;
    }
    if (this.lt(0)) {
      nword |= 0x00800000;
    }
    var bits = nsize << 24 | nword;
    // convert bits to UInt32 before returnIng
    buf = new Buffer(4);
    buf.writeInt32BE(bits, 0);
    return buf.readUInt32BE(0);
  };

  // This is analogous to the constructor for CScriptNum in bitcoind. Many ops
  // in bitcoind's script interpreter use CScriptNum, which is not really a
  // proper bignum. Instead, an error is thrown if trying to input a number
  // bigger than 4 bytes. We copy that behavior here. There is one exception -
  // in CHECKLOCKTIMEVERIFY, the numbers are allowed to be up to 5 bytes long.
  // We allow for setting that variable here for use in CHECKLOCKTIMEVERIFY.
  BN.prototype.fromScriptNumBuffer = function (buf, fRequireMinimal, nMaxNumSize) {
    if (nMaxNumSize === undefined) {
      nMaxNumSize = 4;
    }
    if (buf.length > nMaxNumSize) {
      throw new Error('script number overflow');
    }
    if (fRequireMinimal && buf.length > 0) {
      // Check that the number is encoded with the minimum possible
      // number of bytes.
      //
      // If the most-significant-byte - excluding the sign bit - is zero
      // then we're not minimal. Note how this test also rejects the
      // negative-zero encoding, 0x80.
      if ((buf[buf.length - 1] & 0x7f) === 0) {
        // One exception: if there's more than one byte and the most
        // significant bit of the second-most-significant-byte is set
        // it would conflict with the sign bit. An example of this case
        // is +-255, which encode to 0xff00 and 0xff80 respectively.
        // (big-endian).
        if (buf.length <= 1 || (buf[buf.length - 2] & 0x80) === 0) {
          throw new Error('non-minimally encoded script number');
        }
      }
    }
    return this.fromSm(buf, { endian: 'little' });
  };

  // The corollary to the above, with the notable exception that we do not throw
  // an error if the output is larger than four bytes. (Which can happen if
  // performing a numerical operation that results in an overflow to more than 4
  // bytes).
  BN.prototype.toScriptNumBuffer = function (buf) {
    return this.toSm({ endian: 'little' });
  };

  BN.prototype.neg = function () {
    var _neg = _BN.prototype.neg.call(this);
    var neg = Object.create(BN.prototype);
    _neg.copy(neg);
    return neg;
  };

  BN.prototype.add = function (bn) {
    var _bn = _BN.prototype.add.call(this, bn);
    bn = Object.create(BN.prototype);
    _bn.copy(bn);
    return bn;
  };

  BN.prototype.sub = function (bn) {
    var _bn = _BN.prototype.sub.call(this, bn);
    bn = Object.create(BN.prototype);
    _bn.copy(bn);
    return bn;
  };

  BN.prototype.mul = function (bn) {
    var _bn = _BN.prototype.mul.call(this, bn);
    bn = Object.create(BN.prototype);
    _bn.copy(bn);
    return bn;
  };

  /**
   * to be used if this is positive.
   */
  BN.prototype.mod = function (bn) {
    var _bn = _BN.prototype.mod.call(this, bn);
    bn = Object.create(BN.prototype);
    _bn.copy(bn);
    return bn;
  };

  /**
   * to be used if this is negative.
   */
  BN.prototype.umod = function (bn) {
    var _bn = _BN.prototype.umod.call(this, bn);
    bn = Object.create(BN.prototype);
    _bn.copy(bn);
    return bn;
  };

  BN.prototype.invm = function (bn) {
    var _bn = _BN.prototype.invm.call(this, bn);
    bn = Object.create(BN.prototype);
    _bn.copy(bn);
    return bn;
  };

  BN.prototype.div = function (bn) {
    var _bn = _BN.prototype.div.call(this, bn);
    bn = Object.create(BN.prototype);
    _bn.copy(bn);
    return bn;
  };

  BN.prototype.cmp = function (bn) {
    return _BN.prototype.cmp.call(this, bn);
  };

  /**
   * All the standard big number operations operate on other big numbers. e.g.,
   * bn1.add(bn2). But it is frequenly valuble to add numbers or strings, e.g.
   * bn.add(5) or bn.add('5'). The decorator wraps all methods where this would
   * be convenient and makes that possible.
   */
  function decorate(name) {
    BN.prototype['_' + name] = BN.prototype[name];
    var f = function f(b) {
      if (typeof b === 'string') {
        b = new BN(b);
      } else if (typeof b === 'number') {
        b = new BN(b.toString());
      }
      return this['_' + name](b);
    };
    BN.prototype[name] = f;
  }

  BN.prototype.eq = function (b) {
    return this.cmp(b) === 0;
  };

  BN.prototype.neq = function (b) {
    return this.cmp(b) !== 0;
  };

  BN.prototype.gt = function (b) {
    return this.cmp(b) > 0;
  };

  BN.prototype.geq = function (b) {
    return this.cmp(b) >= 0;
  };

  BN.prototype.lt = function (b) {
    return this.cmp(b) < 0;
  };

  BN.prototype.leq = function (b) {
    return this.cmp(b) <= 0;
  };

  decorate('add');
  decorate('sub');
  decorate('mul');
  decorate('mod');
  decorate('invm');
  decorate('div');
  decorate('cmp');
  decorate('gt');
  decorate('geq');
  decorate('lt');
  decorate('leq');

  return BN;
};

inject = require('injecter')(inject, dependencies);
var BN = inject();
module.exports = BN;

}).call(this,require("buffer").Buffer)

},{"bn.js":348,"buffer":17,"injecter":375}],322:[function(require,module,exports){
(function (Buffer){
/**
 * Buffer Reader
 * =============
 *
 * This is a convenience class for reading VarInts and other basic types from a
 * buffer. This class is most useful for reading VarInts, and also for signed
 * or unsigned integers of various types. It can also read a buffer in reverse
 * order, which is useful in bitcoin which uses little endian numbers a lot so
 * you find that you must reverse things. You probably want to use it like:
 * varInt = new Br(buf).readnew VarInt()
 */
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var dependencies = {
  Bn: require('./bn')
};

var inject = function inject(deps) {
  var Bn = deps.Bn;

  var Br = function () {
    function Br(buf) {
      _classCallCheck(this, Br);

      this.fromObject({ buf: buf });
    }

    _createClass(Br, [{
      key: 'fromObject',
      value: function fromObject(obj) {
        this.buf = obj.buf || this.buf || undefined;
        this.pos = obj.pos || this.pos || 0;
        return this;
      }
    }, {
      key: 'eof',
      value: function eof() {
        return this.pos >= this.buf.length;
      }
    }, {
      key: 'read',
      value: function read() {
        var len = arguments.length <= 0 || arguments[0] === undefined ? this.buf.length : arguments[0];

        var buf = this.buf.slice(this.pos, this.pos + len);
        this.pos = this.pos + len;
        return buf;
      }
    }, {
      key: 'readReverse',
      value: function readReverse() {
        var len = arguments.length <= 0 || arguments[0] === undefined ? this.buf.length : arguments[0];

        var buf = this.buf.slice(this.pos, this.pos + len);
        this.pos = this.pos + len;
        var buf2 = new Buffer(buf.length);
        for (var i = 0; i < buf2.length; i++) {
          buf2[i] = buf[buf.length - 1 - i];
        }
        return buf2;
      }
    }, {
      key: 'readUInt8',
      value: function readUInt8() {
        var val = this.buf.readUInt8(this.pos);
        this.pos = this.pos + 1;
        return val;
      }
    }, {
      key: 'readInt8',
      value: function readInt8() {
        var val = this.buf.readInt8(this.pos);
        this.pos = this.pos + 1;
        return val;
      }
    }, {
      key: 'readUInt16BE',
      value: function readUInt16BE() {
        var val = this.buf.readUInt16BE(this.pos);
        this.pos = this.pos + 2;
        return val;
      }
    }, {
      key: 'readInt16BE',
      value: function readInt16BE() {
        var val = this.buf.readInt16BE(this.pos);
        this.pos = this.pos + 2;
        return val;
      }
    }, {
      key: 'readUInt16LE',
      value: function readUInt16LE() {
        var val = this.buf.readUInt16LE(this.pos);
        this.pos = this.pos + 2;
        return val;
      }
    }, {
      key: 'readInt16LE',
      value: function readInt16LE() {
        var val = this.buf.readInt16LE(this.pos);
        this.pos = this.pos + 2;
        return val;
      }
    }, {
      key: 'readUInt32BE',
      value: function readUInt32BE() {
        var val = this.buf.readUInt32BE(this.pos);
        this.pos = this.pos + 4;
        return val;
      }
    }, {
      key: 'readInt32BE',
      value: function readInt32BE() {
        var val = this.buf.readInt32BE(this.pos);
        this.pos = this.pos + 4;
        return val;
      }
    }, {
      key: 'readUInt32LE',
      value: function readUInt32LE() {
        var val = this.buf.readUInt32LE(this.pos);
        this.pos = this.pos + 4;
        return val;
      }
    }, {
      key: 'readInt32LE',
      value: function readInt32LE() {
        var val = this.buf.readInt32LE(this.pos);
        this.pos = this.pos + 4;
        return val;
      }
    }, {
      key: 'readUInt64BEBn',
      value: function readUInt64BEBn() {
        var buf = this.buf.slice(this.pos, this.pos + 8);
        var bn = new Bn().fromBuffer(buf);
        this.pos = this.pos + 8;
        return bn;
      }
    }, {
      key: 'readUInt64LEBn',
      value: function readUInt64LEBn() {
        var buf = this.readReverse(8);
        var bn = new Bn().fromBuffer(buf);
        return bn;
      }
    }, {
      key: 'readVarIntNum',
      value: function readVarIntNum() {
        var first = this.readUInt8();
        var bn = void 0,
            n = void 0;
        switch (first) {
          case 0xFD:
            return this.readUInt16LE();
          case 0xFE:
            return this.readUInt32LE();
          case 0xFF:
            bn = this.readUInt64LEBn();
            n = bn.toNumber();
            if (n <= Math.pow(2, 53)) {
              return n;
            } else {
              throw new Error('number too large to retain precision - use readVarIntBn');
            }
          default:
            return first;
        }
      }
    }, {
      key: 'readVarIntBuf',
      value: function readVarIntBuf() {
        var first = this.buf.readUInt8(this.pos);
        switch (first) {
          case 0xFD:
            return this.read(1 + 2);
          case 0xFE:
            return this.read(1 + 4);
          case 0xFF:
            return this.read(1 + 8);
          default:
            return this.read(1);
        }
      }
    }, {
      key: 'readVarIntBn',
      value: function readVarIntBn() {
        var first = this.readUInt8();
        switch (first) {
          case 0xFD:
            return new Bn(this.readUInt16LE());
          case 0xFE:
            return new Bn(this.readUInt32LE());
          case 0xFF:
            return this.readUInt64LEBn();
          default:
            return new Bn(first);
        }
      }
    }]);

    return Br;
  }();

  return Br;
};

inject = require('injecter')(inject, dependencies);
var Br = inject();
module.exports = Br;

}).call(this,require("buffer").Buffer)

},{"./bn":321,"buffer":17,"injecter":375}],323:[function(require,module,exports){
(function (Buffer){
/**
 * Buffer Writer
 * =============
 *
 * This is the writing complement of the Br. You can easily write
 * VarInts and other basic number types. The way to use it is: buf =
 * new Bw().write(buf1).write(buf2).toBuffer()
 */
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var dependencies = {};

var inject = function inject(deps) {
  var Bw = function () {
    function Bw(bufs) {
      _classCallCheck(this, Bw);

      this.fromObject({ bufs: bufs });
    }

    _createClass(Bw, [{
      key: 'fromObject',
      value: function fromObject(obj) {
        this.bufs = obj.bufs || this.bufs || [];
        return this;
      }
    }, {
      key: 'getLength',
      value: function getLength() {
        var len = 0;
        for (var i in this.bufs) {
          var buf = this.bufs[i];
          len = len + buf.length;
        }
        return len;
      }
    }, {
      key: 'toBuffer',
      value: function toBuffer() {
        return Buffer.concat(this.bufs);
      }
    }, {
      key: 'write',
      value: function write(buf) {
        this.bufs.push(buf);
        return this;
      }
    }, {
      key: 'writeReverse',
      value: function writeReverse(buf) {
        var buf2 = new Buffer(buf.length);
        for (var i = 0; i < buf2.length; i++) {
          buf2[i] = buf[buf.length - 1 - i];
        }
        this.bufs.push(buf2);
        return this;
      }
    }, {
      key: 'writeUInt8',
      value: function writeUInt8(n) {
        var buf = new Buffer(1);
        buf.writeUInt8(n, 0);
        this.write(buf);
        return this;
      }
    }, {
      key: 'writeInt8',
      value: function writeInt8(n) {
        var buf = new Buffer(1);
        buf.writeInt8(n, 0);
        this.write(buf);
        return this;
      }
    }, {
      key: 'writeUInt16BE',
      value: function writeUInt16BE(n) {
        var buf = new Buffer(2);
        buf.writeUInt16BE(n, 0);
        this.write(buf);
        return this;
      }
    }, {
      key: 'writeInt16BE',
      value: function writeInt16BE(n) {
        var buf = new Buffer(2);
        buf.writeInt16BE(n, 0);
        this.write(buf);
        return this;
      }
    }, {
      key: 'writeUInt16LE',
      value: function writeUInt16LE(n) {
        var buf = new Buffer(2);
        buf.writeUInt16LE(n, 0);
        this.write(buf);
        return this;
      }
    }, {
      key: 'writeInt16LE',
      value: function writeInt16LE(n) {
        var buf = new Buffer(2);
        buf.writeInt16LE(n, 0);
        this.write(buf);
        return this;
      }
    }, {
      key: 'writeUInt32BE',
      value: function writeUInt32BE(n) {
        var buf = new Buffer(4);
        buf.writeUInt32BE(n, 0);
        this.write(buf);
        return this;
      }
    }, {
      key: 'writeInt32BE',
      value: function writeInt32BE(n) {
        var buf = new Buffer(4);
        buf.writeInt32BE(n, 0);
        this.write(buf);
        return this;
      }
    }, {
      key: 'writeUInt32LE',
      value: function writeUInt32LE(n) {
        var buf = new Buffer(4);
        buf.writeUInt32LE(n, 0);
        this.write(buf);
        return this;
      }
    }, {
      key: 'writeInt32LE',
      value: function writeInt32LE(n) {
        var buf = new Buffer(4);
        buf.writeInt32LE(n, 0);
        this.write(buf);
        return this;
      }
    }, {
      key: 'writeUInt64BEBn',
      value: function writeUInt64BEBn(bn) {
        var buf = bn.toBuffer({ size: 8 });
        this.write(buf);
        return this;
      }
    }, {
      key: 'writeUInt64LEBn',
      value: function writeUInt64LEBn(bn) {
        var buf = bn.toBuffer({ size: 8 });
        this.writeReverse(buf);
        return this;
      }
    }, {
      key: 'writeVarIntNum',
      value: function writeVarIntNum(n) {
        var buf = Bw.varIntBufNum(n);
        this.write(buf);
        return this;
      }
    }, {
      key: 'writeVarIntBn',
      value: function writeVarIntBn(bn) {
        var buf = Bw.varIntBufBn(bn);
        this.write(buf);
        return this;
      }
    }], [{
      key: 'varIntBufNum',
      value: function varIntBufNum(n) {
        var buf = void 0;
        if (n < 253) {
          buf = new Buffer(1);
          buf.writeUInt8(n, 0);
        } else if (n < 0x10000) {
          buf = new Buffer(1 + 2);
          buf.writeUInt8(253, 0);
          buf.writeUInt16LE(n, 1);
        } else if (n < 0x100000000) {
          buf = new Buffer(1 + 4);
          buf.writeUInt8(254, 0);
          buf.writeUInt32LE(n, 1);
        } else {
          buf = new Buffer(1 + 8);
          buf.writeUInt8(255, 0);
          buf.writeInt32LE(n & -1, 1);
          buf.writeUInt32LE(Math.floor(n / 0x100000000), 5);
        }
        return buf;
      }
    }, {
      key: 'varIntBufBn',
      value: function varIntBufBn(bn) {
        var buf = void 0;
        var n = bn.toNumber();
        if (n < 253) {
          buf = new Buffer(1);
          buf.writeUInt8(n, 0);
        } else if (n < 0x10000) {
          buf = new Buffer(1 + 2);
          buf.writeUInt8(253, 0);
          buf.writeUInt16LE(n, 1);
        } else if (n < 0x100000000) {
          buf = new Buffer(1 + 4);
          buf.writeUInt8(254, 0);
          buf.writeUInt32LE(n, 1);
        } else {
          var bw = new Bw();
          bw.writeUInt8(255);
          bw.writeUInt64LEBn(bn);
          buf = bw.toBuffer();
        }
        return buf;
      }
    }]);

    return Bw;
  }();

  return Bw;
};

inject = require('injecter')(inject, dependencies);
var Bw = inject();
module.exports = Bw;

}).call(this,require("buffer").Buffer)

},{"buffer":17,"injecter":375}],324:[function(require,module,exports){
(function (Buffer){
/**
 * Constant-Time Buffer Compare
 * ============================
 *
 * A constant-time comparison function. This should be used in any security
 * sensitive code where leaking timing information may lead to lessened
 * security. Note that if the buffers are not equal in length, this function
 * loops for the longest buffer, which may not be necessary. Usually this
 * function should be used for buffers that would otherwise be equal length,
 * such as a hash, particularly Hmacs.
 *
 * The algorithm here, which is XORs each byte (or, if undefined, 0) with the
 * corresponding other byte, and then ORs that with a running total (d), is
 * adapted from here:
 *
 * https://groups.google.com/forum/#!topic/keyczar-discuss/VXHsoJSLKhM
 */
'use strict';

module.exports = function cmp(buf1, buf2) {
  if (!Buffer.isBuffer(buf1) || !Buffer.isBuffer(buf2)) {
    throw new Error('buf1 and buf2 must be buffers');
  }
  if (buf1.length !== buf2.length) {
    return false;
  }

  var d = 0;
  for (var i = 0; i < buf1.length; i++) {
    var x = buf1[i];
    var y = buf2[i];
    d |= x ^ y;
  }

  return d === 0;
};

}).call(this,{"isBuffer":require("../../is-buffer/index.js")})

},{"../../is-buffer/index.js":313}],325:[function(require,module,exports){
(function (process){
/**
 * Constants
 * =========
 *
 * Constants used to distinguish mainnet from testnet.
 */
'use strict';

var Constants = module.exports;

Constants.Mainnet = {
  maxsize: 0x02000000, // MAX_SIZE
  Address: {
    pubKeyHash: 0x00,
    scriptHash: 0x05
  },
  Bip32: {
    pubKey: 0x0488b21e,
    privKey: 0x0488ade4
  },
  Block: {
    maxNBits: 0x1d00ffff,
    magicNum: 0xf9beb4d9
  },
  Msg: {
    magicNum: 0xf9beb4d9,
    versionBytesNum: 70012 // as of Bitcoin Core v0.12.0
  },
  PrivKey: {
    versionByteNum: 0x80
  },
  StealthAddress: {
    versionByteNum: 42
  },
  TxBuilder: {
    feePerKbNum: 0.0001e8,
    dustNum: 546
  }
};

Constants.Testnet = Object.assign({}, Constants.Mainnet, {
  Address: {
    pubKeyHash: 0x6f,
    scriptHash: 0xc4
  },
  Bip32: {
    pubKey: 0x043587cf,
    privKey: 0x04358394
  },
  Block: {
    maxNBits: 0x1d00ffff,
    magicNum: 0x0b110907
  },
  Msg: {
    magicNum: 0x0b110907,
    versionBytesNum: 70012 // as of Bitcoin Core v0.12.0
  },
  Network: {
    maxconnections: 20,
    minconnections: 8,
    port: 8333,
    rendezvous: {
      host: 'localhost',
      port: 3000,
      path: '/'
    }
  },
  PrivKey: {
    versionByteNum: 0xef
  },
  StealthAddress: {
    versionByteNum: 43
  }
});

Constants.Regtest = Object.assign({}, Constants.Mainnet, {
  Network: {
    maxconnections: 20,
    minconnections: 8,
    port: 18444,
    rendezvous: {
      host: 'localhost',
      port: 3000,
      path: '/'
    }
  }
});

/**
 * Yours Bitcoin can be globally configured to mainnet, testnet, or regtest. Via the
 * inject pattern, you always have access to the other networks at any time.
 * However, it is very convenient to be able to change the default
 * configuration. The default is mainnet, which can be changed to testnet or
 * regtest.
 */
if (process.env.YOURS_BITCOIN_NETWORK === 'testnet') {
  Constants.Default = Object.assign({}, Constants.Testnet);
} else if (process.env.YOURS_BITCOIN_NETWORK === 'regtest') {
  Constants.Default = Object.assign({}, Constants.Regtest);
} else {
  process.env.YOURS_BITCOIN_NETWORK = 'mainnet';
  Constants.Default = Object.assign({}, Constants.Mainnet);
}

}).call(this,require('_process'))

},{"_process":316}],326:[function(require,module,exports){
(function (Buffer){
/**
 * Ecdsa
 * =====
 *
 * Ecdsa is the signature algorithm used by bitcoin. The way you probably want
 * to use this is with the static Ecdsa.sign( ... ) and Ecdsa.verify( ... )
 * functions. Note that in bitcoin, the hashBuf is little endian, so if you are
 * signIng or verifying something that has to do with a transaction, you should
 * explicitly plug in that it is little endian as an option to the sign and
 * verify functions.
 *
 * This implementation of Ecdsa uses deterministic signatures as defined in RFC
 * 6979 as the default, which has become a defacto standard in bitcoin wallets
 * due to recurring security issues around using a value of k pulled from a
 * possibly faulty entropy pool. If you use the same value of k twice, someone
 * can derive your private key. Deterministic k prevents this without needing
 * an entropy pool.
 */
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var dependencies = {
  Bn: require('./bn'),
  Hash: require('./hash'),
  KeyPair: require('./key-pair'),
  Point: require('./point'),
  PubKey: require('./pub-key'),
  Random: require('./random'),
  Sig: require('./sig'),
  Struct: require('./struct'),
  Workers: require('./workers'),
  asink: require('asink')
};

var inject = function inject(deps) {
  var Bn = deps.Bn;
  var Hash = deps.Hash;
  var KeyPair = deps.KeyPair;
  var Point = deps.Point;
  var PubKey = deps.PubKey;
  var Random = deps.Random;
  var Sig = deps.Sig;
  var Struct = deps.Struct;
  var Workers = deps.Workers;
  var asink = deps.asink;

  var Ecdsa = function (_Struct) {
    _inherits(Ecdsa, _Struct);

    function Ecdsa(sig, keyPair, hashBuf, k, endian, verified) {
      _classCallCheck(this, Ecdsa);

      return _possibleConstructorReturn(this, Object.getPrototypeOf(Ecdsa).call(this, { sig: sig, keyPair: keyPair, hashBuf: hashBuf, k: k, endian: endian, verified: verified }));
    }

    _createClass(Ecdsa, [{
      key: 'toJSON',
      value: function toJSON() {
        return {
          sig: this.sig ? this.sig.toString() : undefined,
          keyPair: this.keyPair ? this.keyPair.toBuffer().toString('hex') : undefined,
          hashBuf: this.hashBuf ? this.hashBuf.toString('hex') : undefined,
          k: this.k ? this.k.toString() : undefined,
          endian: this.endian,
          verified: this.verified
        };
      }
    }, {
      key: 'fromJSON',
      value: function fromJSON(json) {
        this.sig = json.sig ? new Sig().fromString(json.sig) : undefined;
        this.keyPair = json.keyPair ? new KeyPair().fromBuffer(new Buffer(json.keyPair, 'hex')) : undefined;
        this.hashBuf = json.hashBuf ? new Buffer(json.hashBuf, 'hex') : undefined;
        this.k = json.k ? new Bn().fromString(json.k) : undefined;
        this.endian = json.endian;
        this.verified = json.verified;
        return this;
      }
    }, {
      key: 'toBuffer',
      value: function toBuffer() {
        var str = JSON.stringify(this.toJSON());
        return new Buffer(str);
      }
    }, {
      key: 'fromBuffer',
      value: function fromBuffer(buf) {
        var json = JSON.parse(buf.toString());
        return this.fromJSON(json);
      }
    }, {
      key: 'calcrecovery',
      value: function calcrecovery() {
        for (var recovery = 0; recovery < 4; recovery++) {
          var Qprime = void 0;
          this.sig.recovery = recovery;
          try {
            Qprime = this.sig2PubKey();
          } catch (e) {
            continue;
          }

          if (Qprime.point.eq(this.keyPair.pubKey.point)) {
            var compressed = this.keyPair.pubKey.compressed;
            this.sig.compressed = this.keyPair.pubKey.compressed === undefined ? true : compressed;
            return this;
          }
        }

        this.sig.recovery = undefined;
        throw new Error('Unable to find valid recovery factor');
      }
    }, {
      key: 'asyncCalcrecovery',
      value: function asyncCalcrecovery() {
        return asink(regeneratorRuntime.mark(function _callee() {
          var workersResult;
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _context.next = 2;
                  return Workers.asyncObjectMethod(this, 'calcrecovery', []);

                case 2:
                  workersResult = _context.sent;
                  return _context.abrupt('return', this.fromFastBuffer(workersResult.resbuf));

                case 4:
                case 'end':
                  return _context.stop();
              }
            }
          }, _callee, this);
        }), this);
      }

      /**
       * Calculates the recovery factor, and mutates sig so that it now contains
       * the recovery factor and the "compressed" variable. Throws an exception on
       * failure.
       */

    }, {
      key: 'fromString',
      value: function fromString(str) {
        var obj = JSON.parse(str);
        if (obj.hashBuf) {
          this.hashBuf = new Buffer(obj.hashBuf, 'hex');
        }
        if (obj.keyPair) {
          this.keyPair = new KeyPair().fromString(obj.keyPair);
        }
        if (obj.sig) {
          this.sig = new Sig().fromString(obj.sig);
        }
        if (obj.k) {
          this.k = new Bn(obj.k, 10);
        }
        return this;
      }
    }, {
      key: 'randomK',
      value: function randomK() {
        var N = Point.getN();
        var k = void 0;
        do {
          k = new Bn().fromBuffer(Random.getRandomBuffer(32));
        } while (!(k.lt(N) && k.gt(0)));
        this.k = k;
        return this;
      }

      /**
       * The traditional Ecdsa algorithm uses a purely random value of k. This has
       * the negative that when signIng, your entropy must be good, or the private
       * key can be recovered if two signatures use the same value of k. It turns out
       * that k does not have to be purely random. It can be deterministic, so long
       * as an attacker can't guess it. RFC 6979 specifies how to do this using a
       * combination of the private key and the hash of the thing to be signed. It is
       * best practice to use this value, which can be tested for byte-for-byte
       * accuracy, and is resistant to a broken RNG. Note that it is actually the
       * case that bitcoin private keys have been compromised through that attack.
       * Deterministic k is a best practice.
       *
       * https://tools.ietf.org/html/rfc6979#section-3.2
       */

    }, {
      key: 'deterministicK',
      value: function deterministicK(badrs) {
        var v = new Buffer(32);
        v.fill(0x01);
        var k = new Buffer(32);
        k.fill(0x00);
        var x = this.keyPair.privKey.bn.toBuffer({ size: 32 });
        k = Hash.sha256Hmac(Buffer.concat([v, new Buffer([0x00]), x, this.hashBuf]), k);
        v = Hash.sha256Hmac(v, k);
        k = Hash.sha256Hmac(Buffer.concat([v, new Buffer([0x01]), x, this.hashBuf]), k);
        v = Hash.sha256Hmac(v, k);
        v = Hash.sha256Hmac(v, k);
        var T = new Bn().fromBuffer(v);
        var N = Point.getN();

        // if r or s were invalid when this function was used in signIng,
        // we do not want to actually compute r, s here for efficiency, so,
        // we can increment badrs. explained at end of RFC 6979 section 3.2
        if (badrs === undefined) {
          badrs = 0;
        }
        // also explained in 3.2, we must ensure T is in the proper range (0, N)
        for (var i = 0; i < badrs || !(T.lt(N) && T.gt(0)); i++) {
          k = Hash.sha256Hmac(Buffer.concat([v, new Buffer([0x00])]), k);
          v = Hash.sha256Hmac(v, k);
          v = Hash.sha256Hmac(v, k);
          T = new Bn().fromBuffer(v);
        }

        this.k = T;
        return this;
      }

      /**
       * Information about public key recovery:
       * https://bitcointalk.org/index.php?topic=6430.0
       * http://stackoverflow.com/questions/19665491/how-do-i-get-an-ecdsa-public-key-from-just-a-bitcoin-signature-sec1-4-1-6-k
       * This code was originally taken from BitcoinJS
       */

    }, {
      key: 'sig2PubKey',
      value: function sig2PubKey() {
        var recovery = this.sig.recovery;
        if (!(recovery === 0 || recovery === 1 || recovery === 2 || recovery === 3)) {
          throw new Error('i must be equal to 0, 1, 2, or 3');
        }

        var e = new Bn().fromBuffer(this.hashBuf);
        var r = this.sig.r;
        var s = this.sig.s;

        // A set LSB signifies that the y-coordinate is odd
        var isYOdd = recovery & 1;

        // The more significant bit specifies whether we should use the
        // first or second candidate key.
        var isSecondKey = recovery >> 1;

        var n = Point.getN();
        var G = Point.getG();

        // 1.1 LEt x = r + jn
        var x = isSecondKey ? r.add(n) : r;
        var R = Point.fromX(isYOdd, x);

        // 1.4 Check that nR is at infinity
        var nR = R.mul(n);

        if (!nR.isInfinity()) {
          throw new Error('nR is not a valid curve point');
        }

        // Compute -e from e
        var eNeg = e.neg().umod(n);

        // 1.6.1 Compute Q = r^-1 (sR - eG)
        // Q = r^-1 (sR + -eG)
        var rInv = r.invm(n);

        // let Q = R.multiplyTwo(s, G, eNeg).mul(rInv)
        var Q = R.mul(s).add(G.mul(eNeg)).mul(rInv);

        var pubKey = new PubKey(Q);
        pubKey.compressed = this.sig.compressed;
        pubKey.validate();

        return pubKey;
      }
    }, {
      key: 'asyncSig2PubKey',
      value: function asyncSig2PubKey() {
        return asink(regeneratorRuntime.mark(function _callee2() {
          var workersResult;
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  _context2.next = 2;
                  return Workers.asyncObjectMethod(this, 'sig2PubKey', []);

                case 2:
                  workersResult = _context2.sent;
                  return _context2.abrupt('return', PubKey.fromFastBuffer(workersResult.resbuf));

                case 4:
                case 'end':
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }), this);
      }
    }, {
      key: 'verifyStr',
      value: function verifyStr() {
        if (!Buffer.isBuffer(this.hashBuf) || this.hashBuf.length !== 32) {
          return 'hashBuf must be a 32 byte buffer';
        }

        try {
          this.keyPair.pubKey.validate();
        } catch (e) {
          return 'Invalid pubKey: ' + e;
        }

        var r = this.sig.r;
        var s = this.sig.s;
        if (!(r.gt(0) && r.lt(Point.getN())) || !(s.gt(0) && s.lt(Point.getN()))) {
          return 'r and s not in range';
        }

        var e = new Bn().fromBuffer(this.hashBuf, this.endian ? { endian: this.endian } : undefined);
        var n = Point.getN();
        var sinv = s.invm(n);
        var u1 = sinv.mul(e).mod(n);
        var u2 = sinv.mul(r).mod(n);

        var p = Point.getG().mulAdd(u1, this.keyPair.pubKey.point, u2);
        // let p = Point.getG().mulAdd(u1, this.keyPair.pubKey.point, u2)
        if (p.isInfinity()) {
          return 'p is infinity';
        }

        if (!(p.getX().mod(n).cmp(r) === 0)) {
          return 'Invalid signature';
        } else {
          return false;
        }
      }
    }, {
      key: 'sign',
      value: function sign() {
        var hashBuf = this.hashBuf;
        var privKey = this.keyPair.privKey;

        var d = privKey.bn;

        if (!hashBuf || !privKey || !d) {
          throw new Error('invalid parameters');
        }

        if (!Buffer.isBuffer(hashBuf) || hashBuf.length !== 32) {
          throw new Error('hashBuf must be a 32 byte buffer');
        }

        var N = Point.getN();
        var G = Point.getG();
        var e = new Bn().fromBuffer(hashBuf, this.endian ? { endian: this.endian } : undefined);

        // try different values of k until r, s are valid
        var badrs = 0;
        var k = void 0,
            Q = void 0,
            r = void 0,
            s = void 0;
        do {
          if (!this.k || badrs > 0) {
            this.deterministicK(badrs);
          }
          badrs++;
          k = this.k;
          Q = G.mul(k);
          r = Q.getX().mod(N);
          s = k.invm(N).mul(e.add(d.mul(r))).mod(N);
        } while (r.cmp(0) <= 0 || s.cmp(0) <= 0);

        // enforce low s
        // see Bip 62, "low S values in signatures"
        if (s.gt(new Bn().fromBuffer(new Buffer('7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0', 'hex')))) {
          s = Point.getN().sub(s);
        }
        this.sig = Sig.fromObject({ r: r, s: s, compressed: this.keyPair.pubKey.compressed });
        return this;
      }
    }, {
      key: 'asyncSign',
      value: function asyncSign() {
        return asink(regeneratorRuntime.mark(function _callee3() {
          var workersResult;
          return regeneratorRuntime.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  _context3.next = 2;
                  return Workers.asyncObjectMethod(this, 'sign', []);

                case 2:
                  workersResult = _context3.sent;
                  return _context3.abrupt('return', this.fromFastBuffer(workersResult.resbuf));

                case 4:
                case 'end':
                  return _context3.stop();
              }
            }
          }, _callee3, this);
        }), this);
      }
    }, {
      key: 'signRandomK',
      value: function signRandomK() {
        this.randomK();
        return this.sign();
      }
    }, {
      key: 'toString',
      value: function toString() {
        var obj = {};
        if (this.hashBuf) {
          obj.hashBuf = this.hashBuf.toString('hex');
        }
        if (this.keyPair) {
          obj.keyPair = this.keyPair.toString();
        }
        if (this.sig) {
          obj.sig = this.sig.toString();
        }
        if (this.k) {
          obj.k = this.k.toString();
        }
        return JSON.stringify(obj);
      }
    }, {
      key: 'verify',
      value: function verify() {
        if (!this.verifyStr()) {
          this.verified = true;
        } else {
          this.verified = false;
        }
        return this;
      }
    }, {
      key: 'asyncVerify',
      value: function asyncVerify() {
        return asink(regeneratorRuntime.mark(function _callee4() {
          var workersResult;
          return regeneratorRuntime.wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  _context4.next = 2;
                  return Workers.asyncObjectMethod(this, 'verify', []);

                case 2:
                  workersResult = _context4.sent;
                  return _context4.abrupt('return', this.fromFastBuffer(workersResult.resbuf));

                case 4:
                case 'end':
                  return _context4.stop();
              }
            }
          }, _callee4, this);
        }), this);
      }
    }], [{
      key: 'calcrecovery',
      value: function calcrecovery(sig, pubKey, hashBuf) {
        var ecdsa = new Ecdsa().fromObject({
          sig: sig,
          keyPair: new KeyPair().fromObject({ pubKey: pubKey }),
          hashBuf: hashBuf
        });
        return ecdsa.calcrecovery().sig;
      }
    }, {
      key: 'asyncCalcrecovery',
      value: function asyncCalcrecovery(sig, pubKey, hashBuf) {
        return asink(regeneratorRuntime.mark(function _callee5() {
          var workersResult;
          return regeneratorRuntime.wrap(function _callee5$(_context5) {
            while (1) {
              switch (_context5.prev = _context5.next) {
                case 0:
                  _context5.next = 2;
                  return Workers.asyncClassMethod('Ecdsa', 'calcrecovery', [sig, pubKey, hashBuf]);

                case 2:
                  workersResult = _context5.sent;
                  return _context5.abrupt('return', new Sig().fromFastBuffer(workersResult.resbuf));

                case 4:
                case 'end':
                  return _context5.stop();
              }
            }
          }, _callee5, this);
        }), this);
      }
    }, {
      key: 'sig2PubKey',
      value: function sig2PubKey(sig, hashBuf) {
        var ecdsa = new Ecdsa().fromObject({
          sig: sig,
          hashBuf: hashBuf
        });
        return ecdsa.sig2PubKey();
      }
    }, {
      key: 'asyncSig2PubKey',
      value: function asyncSig2PubKey(sig, hashBuf) {
        return asink(regeneratorRuntime.mark(function _callee6() {
          var ecdsa, pubKey;
          return regeneratorRuntime.wrap(function _callee6$(_context6) {
            while (1) {
              switch (_context6.prev = _context6.next) {
                case 0:
                  ecdsa = new Ecdsa().fromObject({
                    sig: sig,
                    hashBuf: hashBuf
                  });
                  _context6.next = 3;
                  return ecdsa.asyncSig2PubKey();

                case 3:
                  pubKey = _context6.sent;
                  return _context6.abrupt('return', pubKey);

                case 5:
                case 'end':
                  return _context6.stop();
              }
            }
          }, _callee6, this);
        }), this);
      }
    }, {
      key: 'sign',
      value: function sign(hashBuf, keyPair, endian) {
        return new Ecdsa().fromObject({
          hashBuf: hashBuf,
          endian: endian,
          keyPair: keyPair
        }).sign().sig;
      }
    }, {
      key: 'asyncSign',
      value: function asyncSign(hashBuf, keyPair, endian) {
        return asink(regeneratorRuntime.mark(function _callee7() {
          var ecdsa;
          return regeneratorRuntime.wrap(function _callee7$(_context7) {
            while (1) {
              switch (_context7.prev = _context7.next) {
                case 0:
                  ecdsa = new Ecdsa().fromObject({
                    hashBuf: hashBuf,
                    endian: endian,
                    keyPair: keyPair
                  });
                  _context7.next = 3;
                  return ecdsa.asyncSign();

                case 3:
                  return _context7.abrupt('return', ecdsa.sig);

                case 4:
                case 'end':
                  return _context7.stop();
              }
            }
          }, _callee7, this);
        }), this);
      }
    }, {
      key: 'verify',
      value: function verify(hashBuf, sig, pubKey, endian) {
        return new Ecdsa().fromObject({
          hashBuf: hashBuf,
          endian: endian,
          sig: sig,
          keyPair: new KeyPair().fromObject({ pubKey: pubKey })
        }).verify().verified;
      }
    }, {
      key: 'asyncVerify',
      value: function asyncVerify(hashBuf, sig, pubKey, endian) {
        return asink(regeneratorRuntime.mark(function _callee8() {
          var ecdsa;
          return regeneratorRuntime.wrap(function _callee8$(_context8) {
            while (1) {
              switch (_context8.prev = _context8.next) {
                case 0:
                  ecdsa = new Ecdsa().fromObject({
                    hashBuf: hashBuf,
                    endian: endian,
                    sig: sig,
                    keyPair: new KeyPair().fromObject({ pubKey: pubKey })
                  });
                  _context8.next = 3;
                  return ecdsa.asyncVerify();

                case 3:
                  return _context8.abrupt('return', ecdsa.verified);

                case 4:
                case 'end':
                  return _context8.stop();
              }
            }
          }, _callee8, this);
        }), this);
      }
    }]);

    return Ecdsa;
  }(Struct);

  return Ecdsa;
};

inject = require('injecter')(inject, dependencies);
var Ecdsa = inject();
Ecdsa.Mainnet = inject({
  KeyPair: require('./key-pair').Mainnet
});
Ecdsa.Testnet = inject({
  KeyPair: require('./key-pair').Testnet
});
module.exports = Ecdsa;

}).call(this,require("buffer").Buffer)

},{"./bn":321,"./hash":327,"./key-pair":328,"./point":330,"./pub-key":332,"./random":333,"./sig":335,"./struct":336,"./workers":345,"asink":346,"buffer":17,"injecter":375}],327:[function(require,module,exports){
(function (Buffer){
/**
 * Hash
 * ====
 *
 * Some hash functions are used through out bitcoin. We expose them here as a
 * convenience.
 */
'use strict';

var dependencies = {
  Workers: require('./workers'),
  asink: require('asink'),
  hashjs: require('hash.js')
};

var inject = function inject(deps) {
  var Workers = deps.Workers;
  var asink = deps.asink;
  var hashjs = deps.hashjs;

  var Hash = {};

  Hash.sha1 = function (buf) {
    if (!Buffer.isBuffer(buf)) {
      throw new Error('sha1 hash must be of a buffer');
    }
    var Sha1 = hashjs.sha1;
    var hash = new Sha1().update(buf).digest();
    return new Buffer(hash);
  };

  Hash.sha1.blockSize = 512;

  Hash.asyncSha1 = function (buf) {
    return asink(regeneratorRuntime.mark(function _callee() {
      var args, workersResult;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              args = [buf];
              _context.next = 3;
              return Workers.asyncClassMethod('Hash', 'sha1', args);

            case 3:
              workersResult = _context.sent;
              return _context.abrupt('return', workersResult.resbuf);

            case 5:
            case 'end':
              return _context.stop();
          }
        }
      }, _callee, this);
    }), this);
  };

  Hash.sha256 = function (buf) {
    if (!Buffer.isBuffer(buf)) {
      throw new Error('sha256 hash must be of a buffer');
    }
    var Sha256 = hashjs.sha256;
    var hash = new Sha256().update(buf).digest();
    return new Buffer(hash);
  };

  Hash.sha256.blockSize = 512;

  Hash.asyncSha256 = function (buf) {
    return asink(regeneratorRuntime.mark(function _callee2() {
      var args, workersResult;
      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              args = [buf];
              _context2.next = 3;
              return Workers.asyncClassMethod('Hash', 'sha256', args);

            case 3:
              workersResult = _context2.sent;
              return _context2.abrupt('return', workersResult.resbuf);

            case 5:
            case 'end':
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }), this);
  };

  Hash.sha256Sha256 = function (buf) {
    try {
      return Hash.sha256(Hash.sha256(buf));
    } catch (e) {
      throw new Error('sha256Sha256 hash must be of a buffer: ' + e);
    }
  };

  Hash.asyncSha256Sha256 = function (buf) {
    return asink(regeneratorRuntime.mark(function _callee3() {
      var args, workersResult;
      return regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              args = [buf];
              _context3.next = 3;
              return Workers.asyncClassMethod('Hash', 'sha256Sha256', args);

            case 3:
              workersResult = _context3.sent;
              return _context3.abrupt('return', workersResult.resbuf);

            case 5:
            case 'end':
              return _context3.stop();
          }
        }
      }, _callee3, this);
    }), this);
  };

  Hash.ripemd160 = function (buf) {
    if (!Buffer.isBuffer(buf)) {
      throw new Error('ripemd160 hash must be of a buffer');
    }
    var Ripemd160 = hashjs.ripemd160;
    var hash = new Ripemd160().update(buf).digest();
    return new Buffer(hash);
  };

  Hash.asyncRipemd160 = function (buf) {
    return asink(regeneratorRuntime.mark(function _callee4() {
      var args, workersResult;
      return regeneratorRuntime.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              args = [buf];
              _context4.next = 3;
              return Workers.asyncClassMethod('Hash', 'ripemd160', args);

            case 3:
              workersResult = _context4.sent;
              return _context4.abrupt('return', workersResult.resbuf);

            case 5:
            case 'end':
              return _context4.stop();
          }
        }
      }, _callee4, this);
    }), this);
  };

  Hash.sha256Ripemd160 = function (buf) {
    try {
      return Hash.ripemd160(Hash.sha256(buf));
    } catch (e) {
      throw new Error('sha256Ripemd160 hash must be of a buffer: ' + e);
    }
  };

  Hash.asyncSha256Ripemd160 = function (buf) {
    return asink(regeneratorRuntime.mark(function _callee5() {
      var args, workersResult;
      return regeneratorRuntime.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              args = [buf];
              _context5.next = 3;
              return Workers.asyncClassMethod('Hash', 'sha256Ripemd160', args);

            case 3:
              workersResult = _context5.sent;
              return _context5.abrupt('return', workersResult.resbuf);

            case 5:
            case 'end':
              return _context5.stop();
          }
        }
      }, _callee5, this);
    }), this);
  };

  Hash.sha512 = function (buf) {
    if (!Buffer.isBuffer(buf)) {
      throw new Error('sha512 hash must be of a buffer');
    }
    var Sha512 = hashjs.sha512;
    var hash = new Sha512().update(buf).digest();
    return new Buffer(hash);
  };

  Hash.asyncSha512 = function (buf) {
    return asink(regeneratorRuntime.mark(function _callee6() {
      var args, workersResult;
      return regeneratorRuntime.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              args = [buf];
              _context6.next = 3;
              return Workers.asyncClassMethod('Hash', 'sha512', args);

            case 3:
              workersResult = _context6.sent;
              return _context6.abrupt('return', workersResult.resbuf);

            case 5:
            case 'end':
              return _context6.stop();
          }
        }
      }, _callee6, this);
    }), this);
  };

  Hash.sha512.blockSize = 1024;

  Hash.hmac = function (hashFStr, data, key) {
    if (hashFStr !== 'sha1' && hashFStr !== 'sha256' && hashFStr !== 'sha512') {
      throw new Error('invalid choice of hash function');
    }

    var hashf = Hash[hashFStr];

    if (!Buffer.isBuffer(data) || !Buffer.isBuffer(key)) {
      throw new Error('data and key must be buffers');
    }

    // http://en.wikipedia.org/wiki/Hash-based_message_authentication_code
    // http://tools.ietf.org/html/rfc4868#section-2
    var blockSize = hashf.blockSize / 8;

    if (key.length > blockSize) {
      key = hashf(key);
    }

    if (key.length < blockSize) {
      var fill = new Buffer(blockSize);
      fill.fill(0, key.length);
      key.copy(fill);
      key = fill;
    }

    var oKeyPad = new Buffer(blockSize);
    var iKeyPad = new Buffer(blockSize);
    for (var i = 0; i < blockSize; i++) {
      oKeyPad[i] = 0x5c ^ key[i];
      iKeyPad[i] = 0x36 ^ key[i];
    }

    return hashf(Buffer.concat([oKeyPad, hashf(Buffer.concat([iKeyPad, data]))]));
  };

  Hash.sha1Hmac = function (data, key) {
    return Hash.hmac('sha1', data, key);
  };

  Hash.asyncSha1Hmac = function (data, key) {
    return asink(regeneratorRuntime.mark(function _callee7() {
      var args, workersResult;
      return regeneratorRuntime.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              args = [data, key];
              _context7.next = 3;
              return Workers.asyncClassMethod('Hash', 'sha1Hmac', args);

            case 3:
              workersResult = _context7.sent;
              return _context7.abrupt('return', workersResult.resbuf);

            case 5:
            case 'end':
              return _context7.stop();
          }
        }
      }, _callee7, this);
    }), this);
  };

  Hash.sha1Hmac.bitsize = 160;

  Hash.sha256Hmac = function (data, key) {
    return Hash.hmac('sha256', data, key);
  };

  Hash.asyncSha256Hmac = function (data, key) {
    return asink(regeneratorRuntime.mark(function _callee8() {
      var args, workersResult;
      return regeneratorRuntime.wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              args = [data, key];
              _context8.next = 3;
              return Workers.asyncClassMethod('Hash', 'sha256Hmac', args);

            case 3:
              workersResult = _context8.sent;
              return _context8.abrupt('return', workersResult.resbuf);

            case 5:
            case 'end':
              return _context8.stop();
          }
        }
      }, _callee8, this);
    }), this);
  };

  Hash.sha256Hmac.bitsize = 256;

  Hash.sha512Hmac = function (data, key) {
    return Hash.hmac('sha512', data, key);
  };

  Hash.asyncSha512Hmac = function (data, key) {
    return asink(regeneratorRuntime.mark(function _callee9() {
      var args, workersResult;
      return regeneratorRuntime.wrap(function _callee9$(_context9) {
        while (1) {
          switch (_context9.prev = _context9.next) {
            case 0:
              args = [data, key];
              _context9.next = 3;
              return Workers.asyncClassMethod('Hash', 'sha512Hmac', args);

            case 3:
              workersResult = _context9.sent;
              return _context9.abrupt('return', workersResult.resbuf);

            case 5:
            case 'end':
              return _context9.stop();
          }
        }
      }, _callee9, this);
    }), this);
  };

  Hash.sha512Hmac.bitsize = 512;

  return Hash;
};

inject = require('injecter')(inject, dependencies);
var Hash = inject();
module.exports = Hash;

}).call(this,require("buffer").Buffer)

},{"./workers":345,"asink":346,"buffer":17,"hash.js":368,"injecter":375}],328:[function(require,module,exports){
/**
 * KeyPair
 * =======
 *
 * A keyPair is a collection of a private key and a public key.
 * let keyPair = new KeyPair().fromRandom()
 * let keyPair = new KeyPair().fromPrivKey(privKey)
 * let privKey = keyPair.privKey
 * let pubKey = keyPair.pubKey
 */
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var dependencies = {
  PrivKey: require('./priv-key'),
  PubKey: require('./pub-key'),
  Struct: require('./struct'),
  Bw: require('./bw'),
  asink: require('asink')
};

var inject = function inject(deps) {
  var PrivKey = deps.PrivKey;
  var PubKey = deps.PubKey;
  var Struct = deps.Struct;
  var Bw = deps.Bw;
  var asink = deps.asink;

  var KeyPair = function (_Struct) {
    _inherits(KeyPair, _Struct);

    function KeyPair(privKey, pubKey) {
      _classCallCheck(this, KeyPair);

      return _possibleConstructorReturn(this, Object.getPrototypeOf(KeyPair).call(this, { privKey: privKey, pubKey: pubKey }));
    }

    _createClass(KeyPair, [{
      key: 'fromJSON',
      value: function fromJSON(json) {
        if (json.privKey) {
          this.privKey = PrivKey.fromJSON(json.privKey);
        }
        if (json.pubKey) {
          this.pubKey = PubKey.fromJSON(json.pubKey);
        }
        return this;
      }
      /*
          toJSON () {
            let json = {}
            if (this.privKey && this.privKey !== undefined) {
              json.privKey = this.privKey.toJSON()
            }
            if (this.pubKey && this.pubKey !== undefined) {
              json.pubKey = this.pubKey.toJSON()
            }
            return json
          }
      */

    }, {
      key: 'fromBr',
      value: function fromBr(br) {
        var buflen1 = br.readUInt8();
        if (buflen1 > 0) {
          this.privKey = new PrivKey().fromFastBuffer(br.read(buflen1));
        }
        var buflen2 = br.readUInt8();
        if (buflen2 > 0) {
          this.pubKey = new PubKey().fromFastBuffer(br.read(buflen2));
        }
        return this;
      }
    }, {
      key: 'toBw',
      value: function toBw(bw) {
        if (!bw) {
          bw = new Bw();
        }
        if (this.privKey) {
          var privKeybuf = this.privKey.toFastBuffer();
          bw.writeUInt8(privKeybuf.length);
          bw.write(privKeybuf);
        } else {
          bw.writeUInt8(0);
        }
        if (this.pubKey) {
          var pubKeybuf = this.pubKey.toFastBuffer();
          bw.writeUInt8(pubKeybuf.length);
          bw.write(pubKeybuf);
        } else {
          bw.writeUInt8(0);
        }
        return bw;
      }
    }, {
      key: 'fromString',
      value: function fromString(str) {
        return this.fromJSON(JSON.parse(str));
      }
    }, {
      key: 'toString',
      value: function toString() {
        return JSON.stringify(this.toJSON());
      }
    }, {
      key: 'toPublic',
      value: function toPublic() {
        var keyPair = new KeyPair().fromObject(this);
        keyPair.privKey = undefined;
        return keyPair;
      }
    }, {
      key: 'fromPrivKey',
      value: function fromPrivKey(privKey) {
        this.privKey = privKey;
        this.pubKey = new PubKey().fromPrivKey(privKey);
        return this;
      }
    }, {
      key: 'asyncFromPrivKey',
      value: function asyncFromPrivKey(privKey) {
        return asink(regeneratorRuntime.mark(function _callee() {
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  this.privKey = privKey;
                  _context.next = 3;
                  return new PubKey().asyncFromPrivKey(privKey);

                case 3:
                  this.pubKey = _context.sent;
                  return _context.abrupt('return', this);

                case 5:
                case 'end':
                  return _context.stop();
              }
            }
          }, _callee, this);
        }), this);
      }
    }, {
      key: 'fromRandom',
      value: function fromRandom() {
        this.privKey = new PrivKey().fromRandom();
        this.pubKey = new PubKey().fromPrivKey(this.privKey);
        return this;
      }
    }, {
      key: 'asyncFromRandom',
      value: function asyncFromRandom() {
        return asink(regeneratorRuntime.mark(function _callee2() {
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  this.privKey = new PrivKey().fromRandom();
                  return _context2.abrupt('return', this.asyncFromPrivKey(this.privKey));

                case 2:
                case 'end':
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }), this);
      }
    }], [{
      key: 'fromPrivKey',
      value: function fromPrivKey(privKey) {
        return new this().fromPrivKey(privKey);
      }
    }, {
      key: 'asyncFromPrivKey',
      value: function asyncFromPrivKey(privKey) {
        return new this().asyncFromPrivKey(privKey);
      }
    }, {
      key: 'fromRandom',
      value: function fromRandom() {
        return new this().fromRandom();
      }
    }, {
      key: 'asyncFromRandom',
      value: function asyncFromRandom() {
        return new this().asyncFromRandom();
      }
    }]);

    return KeyPair;
  }(Struct);

  return KeyPair;
};

inject = require('injecter')(inject, dependencies);
var KeyPair = inject();
KeyPair.Mainnet = inject({
  PrivKey: require('./priv-key').Mainnet
});
KeyPair.Testnet = inject({
  PrivKey: require('./priv-key').Testnet
});
module.exports = KeyPair;

},{"./bw":323,"./priv-key":331,"./pub-key":332,"./struct":336,"asink":346,"injecter":375}],329:[function(require,module,exports){
/*
 * OpCode
 * ======
 *
 * An opCode is one of the operations in the bitcoin scripting language. Each
 * operation is just a number from 0-255, and it has a corresponding string,
 * e.g. "OP_RETURN", which comes from the name of that constant in the bitcoind
 * source code. The way you probably want to use this is with
 * new OpCode(str).toNumber() or new OpCode(num).toString()
 */
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var dependencies = {
  Struct: require('./struct')
};

var inject = function inject(deps) {
  var Struct = deps.Struct;
  var map = void 0;

  var OpCode = function (_Struct) {
    _inherits(OpCode, _Struct);

    function OpCode(num) {
      _classCallCheck(this, OpCode);

      return _possibleConstructorReturn(this, Object.getPrototypeOf(OpCode).call(this, { num: num }));
    }

    _createClass(OpCode, [{
      key: 'fromNumber',
      value: function fromNumber(num) {
        this.num = num;
        return this;
      }
    }, {
      key: 'toNumber',
      value: function toNumber() {
        return this.num;
      }
    }, {
      key: 'fromString',
      value: function fromString(str) {
        var num = map[str];
        if (num === undefined) {
          throw new Error('Invalid opCodeStr');
        }
        this.num = num;
        return this;
      }
    }, {
      key: 'toString',
      value: function toString() {
        var str = OpCode.str[this.num];
        if (str === undefined) {
          if (this.num > 0 && this.num < OpCode.OP_PUSHDATA1) {
            return this.num.toString();
          }
          throw new Error('OpCode does not have a string representation');
        }
        return str;
      }
    }], [{
      key: 'fromNumber',
      value: function fromNumber(num) {
        return new this().fromNumber(num);
      }
    }, {
      key: 'fromString',
      value: function fromString(str) {
        return new this().fromString(str);
      }
    }]);

    return OpCode;
  }(Struct);

  map = {
    // push value
    OP_FALSE: 0x00,
    OP_0: 0x00,
    OP_PUSHDATA1: 0x4c,
    OP_PUSHDATA2: 0x4d,
    OP_PUSHDATA4: 0x4e,
    OP_1NEGATE: 0x4f,
    OP_RESERVED: 0x50,
    OP_TRUE: 0x51,
    OP_1: 0x51,
    OP_2: 0x52,
    OP_3: 0x53,
    OP_4: 0x54,
    OP_5: 0x55,
    OP_6: 0x56,
    OP_7: 0x57,
    OP_8: 0x58,
    OP_9: 0x59,
    OP_10: 0x5a,
    OP_11: 0x5b,
    OP_12: 0x5c,
    OP_13: 0x5d,
    OP_14: 0x5e,
    OP_15: 0x5f,
    OP_16: 0x60,

    // control
    OP_NOP: 0x61,
    OP_VER: 0x62,
    OP_IF: 0x63,
    OP_NOTIF: 0x64,
    OP_VERIF: 0x65,
    OP_VERNOTIF: 0x66,
    OP_ELSE: 0x67,
    OP_ENDIF: 0x68,
    OP_VERIFY: 0x69,
    OP_RETURN: 0x6a,

    // stack ops
    OP_TOALTSTACK: 0x6b,
    OP_FROMALTSTACK: 0x6c,
    OP_2DROP: 0x6d,
    OP_2DUP: 0x6e,
    OP_3DUP: 0x6f,
    OP_2OVER: 0x70,
    OP_2ROT: 0x71,
    OP_2SWAP: 0x72,
    OP_IFDUP: 0x73,
    OP_DEPTH: 0x74,
    OP_DROP: 0x75,
    OP_DUP: 0x76,
    OP_NIP: 0x77,
    OP_OVER: 0x78,
    OP_PICK: 0x79,
    OP_ROLL: 0x7a,
    OP_ROT: 0x7b,
    OP_SWAP: 0x7c,
    OP_TUCK: 0x7d,

    // splice ops
    OP_CAT: 0x7e,
    OP_SUBSTR: 0x7f,
    OP_LEFT: 0x80,
    OP_RIGHT: 0x81,
    OP_SIZE: 0x82,

    // bit logic
    OP_INVERT: 0x83,
    OP_AND: 0x84,
    OP_OR: 0x85,
    OP_XOR: 0x86,
    OP_EQUAL: 0x87,
    OP_EQUALVERIFY: 0x88,
    OP_RESERVED1: 0x89,
    OP_RESERVED2: 0x8a,

    // numeric
    OP_1ADD: 0x8b,
    OP_1SUB: 0x8c,
    OP_2MUL: 0x8d,
    OP_2DIV: 0x8e,
    OP_NEGATE: 0x8f,
    OP_ABS: 0x90,
    OP_NOT: 0x91,
    OP_0NOTEQUAL: 0x92,

    OP_ADD: 0x93,
    OP_SUB: 0x94,
    OP_MUL: 0x95,
    OP_DIV: 0x96,
    OP_MOD: 0x97,
    OP_LSHIFT: 0x98,
    OP_RSHIFT: 0x99,

    OP_BOOLAND: 0x9a,
    OP_BOOLOR: 0x9b,
    OP_NUMEQUAL: 0x9c,
    OP_NUMEQUALVERIFY: 0x9d,
    OP_NUMNOTEQUAL: 0x9e,
    OP_LESSTHAN: 0x9f,
    OP_GREATERTHAN: 0xa0,
    OP_LESSTHANOREQUAL: 0xa1,
    OP_GREATERTHANOREQUAL: 0xa2,
    OP_MIN: 0xa3,
    OP_MAX: 0xa4,

    OP_WITHIN: 0xa5,

    // crypto
    OP_RIPEMD160: 0xa6,
    OP_SHA1: 0xa7,
    OP_SHA256: 0xa8,
    OP_HASH160: 0xa9,
    OP_HASH256: 0xaa,
    OP_CODESEPARATOR: 0xab,
    OP_CHECKSIG: 0xac,
    OP_CHECKSIGVERIFY: 0xad,
    OP_CHECKMULTISIG: 0xae,
    OP_CHECKMULTISIGVERIFY: 0xaf,

    // expansion
    OP_NOP1: 0xb0,
    OP_NOP2: 0xb1,
    OP_CHECKLOCKTIMEVERIFY: 0xb1,
    OP_NOP3: 0xb2,
    OP_CHECKSEQUENCEVERIFY: 0xb2,
    OP_NOP4: 0xb3,
    OP_NOP5: 0xb4,
    OP_NOP6: 0xb5,
    OP_NOP7: 0xb6,
    OP_NOP8: 0xb7,
    OP_NOP9: 0xb8,
    OP_NOP10: 0xb9,

    // template matching params
    OP_SMALLDATA: 0xf9,
    OP_SMALLINTEGER: 0xfa,
    OP_PUBKEYS: 0xfb,
    OP_PUBKEYHASH: 0xfd,
    OP_PUBKEY: 0xfe,

    OP_INVALIDOPCODE: 0xff
  };

  OpCode.str = {};

  for (var k in map) {
    OpCode[k] = map[k];
    if (map.hasOwnProperty(k)) {
      OpCode.str[map[k]] = k;
    }
  }

  return OpCode;
};

inject = require('injecter')(inject, dependencies);
var OpCode = inject();
module.exports = OpCode;

},{"./struct":336,"injecter":375}],330:[function(require,module,exports){
/**
 * Point (on secp256k1)
 * ====================
 *
 * A point is a point on the secp256k1 curve which is the elliptic curve used
 * by bitcoin. This code is a wrapper for Fedor Indutny's Point class from his
 * elliptic library. This code adds a few minor conveniences, but is mostly the
 * same. Since Fedor's code returns points and big numbers that are instances
 * of his point and big number classes, we have to wrap all the methods such as
 * getX() to return the Yours Bitcoin point and big number types.
 */
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var dependencies = {
  Bn: require('./bn'),
  elliptic: require('elliptic')
};

var inject = function inject(deps) {
  var Bn = deps.Bn;
  var elliptic = deps.elliptic;

  var ec = elliptic.curves.secp256k1;
  var _point = ec.curve.point();
  var _Point = _point.constructor;

  var Point = function (_Point2) {
    _inherits(Point, _Point2);

    function Point(x, y, isRed) {
      _classCallCheck(this, Point);

      return _possibleConstructorReturn(this, Object.getPrototypeOf(Point).call(this, ec.curve, x, y, isRed));
    }

    _createClass(Point, [{
      key: 'copyFrom',
      value: function copyFrom(point) {
        if (!(point instanceof _Point)) {
          throw new Error('point should be an external point');
        }
        Object.keys(point).forEach(function (key) {
          this[key] = point[key];
        }.bind(this));
        return this;
      }
    }, {
      key: 'add',
      value: function add(p) {
        p = _Point.prototype.add.call(this, p);
        var point = Object.create(Point.prototype);
        return point.copyFrom(p);
      }
    }, {
      key: 'mul',
      value: function mul(bn) {
        var p = _Point.prototype.mul.call(this, bn);
        var point = Object.create(Point.prototype);
        return point.copyFrom(p);
      }
    }, {
      key: 'mulAdd',
      value: function mulAdd(bn1, point, bn2) {
        var p = _Point.prototype.mulAdd.call(this, bn1, point, bn2);
        point = Object.create(Point.prototype);
        return point.copyFrom(p);
      }
    }, {
      key: 'getX',
      value: function getX() {
        var _x = _Point.prototype.getX.call(this);
        var x = Object.create(Bn.prototype);
        _x.copy(x);
        return x;
      }
    }, {
      key: 'getY',
      value: function getY() {
        var _y = _Point.prototype.getY.call(this);
        var y = Object.create(Bn.prototype);
        _y.copy(y);
        return y;
      }
    }, {
      key: 'fromX',
      value: function fromX(isOdd, x) {
        var point = Point.fromX(isOdd, x);
        return this.copyFrom(point);
      }
    }, {
      key: 'toJSON',
      value: function toJSON() {
        return {
          x: this.getX().toString(),
          y: this.getY().toString()
        };
      }
    }, {
      key: 'fromJSON',
      value: function fromJSON(json) {
        var x = new Bn().fromString(json.x);
        var y = new Bn().fromString(json.y);
        var point = new Point(x, y);
        return this.copyFrom(point);
      }
    }, {
      key: 'toString',
      value: function toString() {
        return JSON.stringify(this.toJSON());
      }
    }, {
      key: 'fromString',
      value: function fromString(str) {
        var json = JSON.parse(str);
        var p = new Point().fromJSON(json);
        return this.copyFrom(p);
      }
    }, {
      key: 'validate',


      // https://www.iacr.org/archive/pkc2003/25670211/25670211.pdf
      value: function validate() {
        var p2 = Point.fromX(this.getY().isOdd(), this.getX());
        if (!(p2.getY().cmp(this.getY()) === 0)) {
          throw new Error('Invalid y value of public key');
        }
        if (!(this.getX().gt(-1) && this.getX().lt(Point.getN())) || !(this.getY().gt(-1) && this.getY().lt(Point.getN()))) {
          throw new Error('Point does not lie on the curve');
        }
        if (!this.mul(Point.getN()).isInfinity()) {
          throw new Error('Point times N must be infinity');
        }
        return this;
      }
    }], [{
      key: 'fromX',
      value: function fromX(isOdd, x) {
        var _point = ec.curve.pointFromX(x, isOdd);
        var point = Object.create(Point.prototype);
        return point.copyFrom(_point);
      }
    }, {
      key: 'getG',
      value: function getG() {
        var _g = ec.curve.g;
        var g = Object.create(Point.prototype);
        return g.copyFrom(_g);
      }
    }, {
      key: 'getN',
      value: function getN() {
        return new Bn(ec.curve.n.toArray());
      }
    }]);

    return Point;
  }(_Point);

  return Point;
};

inject = require('injecter')(inject, dependencies);
var Point = inject();
module.exports = Point;

},{"./bn":321,"elliptic":351,"injecter":375}],331:[function(require,module,exports){
(function (Buffer){
/**
 * Private Key
 * ===========
 *
 * A private key is used for signIng transactions (or messages). The primary
 * way to use this is new PrivKey().fromRandom(), or new PrivKey().fromBuffer(buf).
 */
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var dependencies = {
  Bn: require('./bn'),
  Point: require('./point'),
  Constants: require('./constants').Default.PrivKey,
  Base58Check: require('./base-58-check'),
  Random: require('./random'),
  Struct: require('./struct')
};

var inject = function inject(deps) {
  var Bn = deps.Bn;
  var Point = deps.Point;
  var Constants = deps.Constants;
  var Base58Check = deps.Base58Check;
  var Random = deps.Random;
  var Struct = deps.Struct;

  var PrivKey = function (_Struct) {
    _inherits(PrivKey, _Struct);

    function PrivKey(bn, compressed) {
      _classCallCheck(this, PrivKey);

      return _possibleConstructorReturn(this, Object.getPrototypeOf(PrivKey).call(this, { bn: bn, compressed: compressed }));
    }

    _createClass(PrivKey, [{
      key: 'fromJSON',
      value: function fromJSON(json) {
        this.fromHex(json);
        return this;
      }
    }, {
      key: 'toJSON',
      value: function toJSON() {
        return this.toHex();
      }
    }, {
      key: 'fromRandom',
      value: function fromRandom() {
        var privBuf = void 0,
            bn = void 0,
            condition = void 0;

        do {
          privBuf = Random.getRandomBuffer(32);
          bn = new Bn().fromBuffer(privBuf);
          condition = bn.lt(Point.getN());
        } while (!condition);

        this.fromObject({
          bn: bn,
          compressed: true
        });
        return this;
      }
    }, {
      key: 'toBuffer',
      value: function toBuffer() {
        var compressed = this.compressed;

        if (compressed === undefined) {
          compressed = true;
        }

        var privBuf = this.bn.toBuffer({ size: 32 });
        var buf = void 0;
        if (compressed) {
          buf = Buffer.concat([new Buffer([Constants.versionByteNum]), privBuf, new Buffer([0x01])]);
        } else {
          buf = Buffer.concat([new Buffer([Constants.versionByteNum]), privBuf]);
        }

        return buf;
      }
    }, {
      key: 'fromBuffer',
      value: function fromBuffer(buf) {
        if (buf.length === 1 + 32 + 1 && buf[1 + 32 + 1 - 1] === 1) {
          this.compressed = true;
        } else if (buf.length === 1 + 32) {
          this.compressed = false;
        } else {
          throw new Error('LEngth of privKey buffer must be 33 (uncompressed pubKey) or 34 (compressed pubKey)');
        }

        if (buf[0] !== Constants.versionByteNum) {
          throw new Error('Invalid versionByteNum byte');
        }

        return this.fromBn(new Bn().fromBuffer(buf.slice(1, 1 + 32)));
      }
    }, {
      key: 'toBn',
      value: function toBn() {
        return this.bn;
      }
    }, {
      key: 'fromBn',
      value: function fromBn(bn) {
        this.bn = bn;
        return this;
      }
    }, {
      key: 'validate',
      value: function validate() {
        if (!this.bn.lt(Point.getN())) {
          throw new Error('Number must be less than N');
        }
        if (typeof this.compressed !== 'boolean') {
          throw new Error('Must specify whether the corresponding public key is compressed or not (true or false)');
        }
        return this;
      }

      /**
       * Output the private key a Wallet Import Format (Wif) string.
       */

    }, {
      key: 'toWif',
      value: function toWif() {
        return Base58Check.encode(this.toBuffer());
      }

      /**
       * Input the private key from a Wallet Import Format (Wif) string.
       */

    }, {
      key: 'fromWif',
      value: function fromWif(str) {
        return this.fromBuffer(Base58Check.decode(str));
      }
    }, {
      key: 'toString',
      value: function toString() {
        return this.toWif();
      }
    }, {
      key: 'fromString',
      value: function fromString(str) {
        return this.fromWif(str);
      }
    }], [{
      key: 'fromRandom',
      value: function fromRandom() {
        return new this().fromRandom();
      }
    }, {
      key: 'fromBn',
      value: function fromBn(bn) {
        return new this().fromBn(bn);
      }
    }, {
      key: 'fromWif',
      value: function fromWif(str) {
        return new this().fromWif(str);
      }
    }]);

    return PrivKey;
  }(Struct);

  return PrivKey;
};

inject = require('injecter')(inject, dependencies);
var PrivKey = inject();
PrivKey.Mainnet = inject({
  Constants: require('./constants').Mainnet.PrivKey
});
PrivKey.Testnet = inject({
  Constants: require('./constants').Testnet.PrivKey
});
module.exports = PrivKey;

}).call(this,require("buffer").Buffer)

},{"./base-58-check":319,"./bn":321,"./constants":325,"./point":330,"./random":333,"./struct":336,"buffer":17,"injecter":375}],332:[function(require,module,exports){
(function (Buffer){
/**
 * Public Key
 * ==========
 *
 * A public key corresponds to a private key. If you have a private key, you
 * can find the corresponding public key with new PubKey().fromPrivKey(privKey).
 */
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var dependencies = {
  Point: require('./point'),
  Bn: require('./bn'),
  Bw: require('./bw'),
  Struct: require('./struct'),
  Workers: require('./workers'),
  asink: require('asink')
};

var inject = function inject(deps) {
  var Point = deps.Point;
  var Bn = deps.Bn;
  var Bw = deps.Bw;
  var Struct = deps.Struct;
  var Workers = deps.Workers;
  var asink = deps.asink;

  var PubKey = function (_Struct) {
    _inherits(PubKey, _Struct);

    function PubKey(point) {
      _classCallCheck(this, PubKey);

      return _possibleConstructorReturn(this, Object.getPrototypeOf(PubKey).call(this, { point: point }));
    }

    _createClass(PubKey, [{
      key: 'fromJSON',
      value: function fromJSON(json) {
        this.fromFastHex(json);
        return this;
      }
    }, {
      key: 'toJSON',
      value: function toJSON() {
        return this.toFastHex();
      }
    }, {
      key: 'fromPrivKey',
      value: function fromPrivKey(privKey) {
        this.fromObject({
          point: Point.getG().mul(privKey.bn),
          compressed: privKey.compressed
        });
        return this;
      }
    }, {
      key: 'asyncFromPrivKey',
      value: function asyncFromPrivKey(privKey) {
        return asink(regeneratorRuntime.mark(function _callee() {
          var workersResult;
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _context.next = 2;
                  return Workers.asyncObjectMethod(this, 'fromPrivKey', [privKey]);

                case 2:
                  workersResult = _context.sent;
                  return _context.abrupt('return', this.fromFastBuffer(workersResult.resbuf));

                case 4:
                case 'end':
                  return _context.stop();
              }
            }
          }, _callee, this);
        }), this);
      }
    }, {
      key: 'fromBuffer',
      value: function fromBuffer(buf, strict) {
        return this.fromDer(buf, strict);
      }
    }, {
      key: 'asyncFromBuffer',
      value: function asyncFromBuffer(buf, strict) {
        return asink(regeneratorRuntime.mark(function _callee2() {
          var args, workersResult;
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  args = [buf, strict];
                  _context2.next = 3;
                  return Workers.asyncObjectMethod(this, 'fromBuffer', args);

                case 3:
                  workersResult = _context2.sent;
                  return _context2.abrupt('return', this.fromFastBuffer(workersResult.resbuf));

                case 5:
                case 'end':
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }), this);
      }
    }, {
      key: 'fromFastBuffer',
      value: function fromFastBuffer(buf) {
        if (buf.length === 0) {
          return this;
        }
        var compressed = Boolean(buf[0]);
        buf = buf.slice(1);
        this.fromDer(buf);
        this.compressed = compressed;
        return this;
      }

      /**
       * In order to mimic the non-strict style of OpenSSL, set strict = false. For
       * information and what prefixes 0x06 and 0x07 mean, in addition to the normal
       * compressed and uncompressed public keys, see the message by Peter Wuille
       * where he discovered these "hybrid pubKeys" on the mailing list:
       * http://sourceforge.net/p/bitcoin/mailman/message/29416133/
       */

    }, {
      key: 'fromDer',
      value: function fromDer(buf, strict) {
        if (strict === undefined) {
          strict = true;
        } else {
          strict = false;
        }
        if (buf[0] === 0x04 || !strict && (buf[0] === 0x06 || buf[0] === 0x07)) {
          var xbuf = buf.slice(1, 33);
          var ybuf = buf.slice(33, 65);
          if (xbuf.length !== 32 || ybuf.length !== 32 || buf.length !== 65) {
            throw new Error('LEngth of x and y must be 32 bytes');
          }
          var x = new Bn(xbuf);
          var y = new Bn(ybuf);
          this.point = new Point(x, y);
          this.compressed = false;
        } else if (buf[0] === 0x03) {
          var _xbuf = buf.slice(1);
          var _x = new Bn(_xbuf);
          this.fromX(true, _x);
          this.compressed = true;
        } else if (buf[0] === 0x02) {
          var _xbuf2 = buf.slice(1);
          var _x2 = new Bn(_xbuf2);
          this.fromX(false, _x2);
          this.compressed = true;
        } else {
          throw new Error('Invalid DER format pubKey');
        }
        return this;
      }
    }, {
      key: 'fromString',
      value: function fromString(str) {
        this.fromDer(new Buffer(str, 'hex'));
        return this;
      }
    }, {
      key: 'fromX',
      value: function fromX(odd, x) {
        if (typeof odd !== 'boolean') {
          throw new Error('Must specify whether y is odd or not (true or false)');
        }
        this.point = Point.fromX(odd, x);
        return this;
      }
    }, {
      key: 'toBuffer',
      value: function toBuffer() {
        var compressed = this.compressed === undefined ? true : this.compressed;
        return this.toDer(compressed);
      }
    }, {
      key: 'toFastBuffer',
      value: function toFastBuffer() {
        if (!this.point) {
          return new Buffer(0);
        }
        var bw = new Bw();
        var compressed = this.compressed === undefined ? true : Boolean(this.compressed);
        bw.writeUInt8(Number(compressed));
        bw.write(this.toDer(false));
        return bw.toBuffer();
      }
    }, {
      key: 'toDer',
      value: function toDer(compressed) {
        compressed = compressed === undefined ? this.compressed : compressed;
        if (typeof compressed !== 'boolean') {
          throw new Error('Must specify whether the public key is compressed or not (true or false)');
        }

        var x = this.point.getX();
        var y = this.point.getY();

        var xbuf = x.toBuffer({ size: 32 });
        var ybuf = y.toBuffer({ size: 32 });

        var prefix = void 0;
        if (!compressed) {
          prefix = new Buffer([0x04]);
          return Buffer.concat([prefix, xbuf, ybuf]);
        } else {
          var odd = ybuf[ybuf.length - 1] % 2;
          if (odd) {
            prefix = new Buffer([0x03]);
          } else {
            prefix = new Buffer([0x02]);
          }
          return Buffer.concat([prefix, xbuf]);
        }
      }
    }, {
      key: 'toString',
      value: function toString() {
        var compressed = this.compressed === undefined ? true : this.compressed;
        return this.toDer(compressed).toString('hex');
      }

      /**
       * Translated from bitcoind's IsCompressedOrUncompressedPubKey
       */

    }, {
      key: 'validate',


      // https://www.iacr.org/archive/pkc2003/25670211/25670211.pdf
      value: function validate() {
        if (this.point.isInfinity()) {
          throw new Error('point: Point cannot be equal to Infinity');
        }
        if (this.point.eq(new Point(new Bn(0), new Bn(0)))) {
          throw new Error('point: Point cannot be equal to 0, 0');
        }
        this.point.validate();
        return this;
      }
    }], [{
      key: 'fromPrivKey',
      value: function fromPrivKey(privKey) {
        return new this().fromPrivKey(privKey);
      }
    }, {
      key: 'asyncFromPrivKey',
      value: function asyncFromPrivKey(privKey) {
        return new this().asyncFromPrivKey(privKey);
      }
    }, {
      key: 'fromDer',
      value: function fromDer(buf, strict) {
        return new this().fromDer(buf, strict);
      }
    }, {
      key: 'fromX',
      value: function fromX(odd, x) {
        return new this().fromX(odd, x);
      }
    }, {
      key: 'isCompressedOrUncompressed',
      value: function isCompressedOrUncompressed(buf) {
        if (buf.length < 33) {
          //  Non-canonical public key: too short
          return false;
        }
        if (buf[0] === 0x04) {
          if (buf.length !== 65) {
            //  Non-canonical public key: invalid length for uncompressed key
            return false;
          }
        } else if (buf[0] === 0x02 || buf[0] === 0x03) {
          if (buf.length !== 33) {
            //  Non-canonical public key: invalid length for compressed key
            return false;
          }
        } else {
          //  Non-canonical public key: neither compressed nor uncompressed
          return false;
        }
        return true;
      }
    }]);

    return PubKey;
  }(Struct);

  return PubKey;
};

inject = require('injecter')(inject, dependencies);
var PubKey = inject();
module.exports = PubKey;

}).call(this,require("buffer").Buffer)

},{"./bn":321,"./bw":323,"./point":330,"./struct":336,"./workers":345,"asink":346,"buffer":17,"injecter":375}],333:[function(require,module,exports){
/**
 * Random Number Generator
 * =======================
 *
 * Random numbers are important in bitcoin primarily for generating private
 * keys. It is also important for creating signatures if you are using a random
 * value of k, but Yours Bitcoin defaults to using deterministic k. That means
 * computing a random private key, or a random seed for use in Bip39 or Bip32,
 * is the primary use of the random number generator.  Note that the simplicity
 * of this class is extremely carefully considered. It is easy to audit that
 * this code runs node's randomBytes function. It is also easy to audit that
 * the randomBytes method is correctly interpreted as
 * window.crypto.getRandomValues when this code is browserified by browserify,
 * and thus also works correctly in the browser. We deliberately do not do
 * anything else to this random number in order to minimize possible errors in
 * this absolutely critical code.
 */
'use strict';

var dependencies = {
  randomBytes: require('randombytes')
};

var inject = function inject(deps) {
  var randomBytes = deps.randomBytes;

  var Random = {};

  Random.getRandomBuffer = function (size) {
    return randomBytes(size);
  };

  return Random;
};

inject = require('injecter')(inject, dependencies);
var Random = inject();
module.exports = Random;

},{"injecter":375,"randombytes":376}],334:[function(require,module,exports){
(function (Buffer){
/*
 * Script
 * ======
 *
 * Script is the scripting language built into bitcoin. The Script class lets
 * you create an instance of a script, e.g. for a scriptSig or a scriptPubKey.
 * It understands both the binary format, as well as two different string
 * formats. The default string format, to/fromString, is a custom format only
 * used by Yours Bitcoin because it is isomorphic to the binary format (or as
 * isomorphic as it can be ... since OP_0 and OP_FALSE have the same byte
 * value, and so do OP_1 and OP_TRUE). The bitcoind string format is also
 * support, but that format is not isomorphic (i.e., if you pull in a string
 * and then write it again, you are likely to get back a different string, even
 * if you don't use OP_0, OP_FALSE, OP_1, or OP_TRUE).
 */
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var dependencies = {
  Bn: require('./bn'),
  Br: require('./br'),
  Bw: require('./bw'),
  cmp: require('./cmp'),
  OpCode: require('./op-code'),
  PubKey: require('./pub-key'),
  Sig: require('./sig'),
  Struct: require('./struct')
};

var inject = function inject(deps) {
  var Bn = deps.Bn;
  var Br = deps.Br;
  var Bw = deps.Bw;
  var cmp = deps.cmp;
  var OpCode = deps.OpCode;
  var PubKey = deps.PubKey;
  var Sig = deps.Sig;
  var Struct = deps.Struct;

  var Script = function (_Struct) {
    _inherits(Script, _Struct);

    function Script() {
      var chunks = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];

      _classCallCheck(this, Script);

      return _possibleConstructorReturn(this, Object.getPrototypeOf(Script).call(this, { chunks: chunks }));
    }

    _createClass(Script, [{
      key: 'fromJSON',
      value: function fromJSON(json) {
        return this.fromString(json);
      }
    }, {
      key: 'toJSON',
      value: function toJSON() {
        return this.toString();
      }
    }, {
      key: 'fromBuffer',
      value: function fromBuffer(buf) {
        this.chunks = [];

        var br = new Br(buf);
        while (!br.eof()) {
          var opCodeNum = br.readUInt8();

          var len = void 0,
              _buf = void 0;
          if (opCodeNum > 0 && opCodeNum < OpCode.OP_PUSHDATA1) {
            len = opCodeNum;
            this.chunks.push({
              buf: br.read(len),
              len: len,
              opCodeNum: opCodeNum
            });
          } else if (opCodeNum === OpCode.OP_PUSHDATA1) {
            len = br.readUInt8();
            var _buf2 = br.read(len);
            this.chunks.push({
              buf: _buf2,
              len: len,
              opCodeNum: opCodeNum
            });
          } else if (opCodeNum === OpCode.OP_PUSHDATA2) {
            len = br.readUInt16LE();
            _buf = br.read(len);
            this.chunks.push({
              buf: _buf,
              len: len,
              opCodeNum: opCodeNum
            });
          } else if (opCodeNum === OpCode.OP_PUSHDATA4) {
            len = br.readUInt32LE();
            _buf = br.read(len);
            this.chunks.push({
              buf: _buf,
              len: len,
              opCodeNum: opCodeNum
            });
          } else {
            this.chunks.push({
              opCodeNum: opCodeNum
            });
          }
        }

        return this;
      }
    }, {
      key: 'toBuffer',
      value: function toBuffer() {
        var bw = new Bw();

        for (var i = 0; i < this.chunks.length; i++) {
          var chunk = this.chunks[i];
          var opCodeNum = chunk.opCodeNum;
          bw.writeUInt8(opCodeNum);
          if (chunk.buf) {
            if (opCodeNum < OpCode.OP_PUSHDATA1) {
              bw.write(chunk.buf);
            } else if (opCodeNum === OpCode.OP_PUSHDATA1) {
              bw.writeUInt8(chunk.len);
              bw.write(chunk.buf);
            } else if (opCodeNum === OpCode.OP_PUSHDATA2) {
              bw.writeUInt16LE(chunk.len);
              bw.write(chunk.buf);
            } else if (opCodeNum === OpCode.OP_PUSHDATA4) {
              bw.writeUInt32LE(chunk.len);
              bw.write(chunk.buf);
            }
          }
        }

        return bw.toBuffer();
      }
    }, {
      key: 'fromString',
      value: function fromString(str) {
        this.chunks = [];
        if (str === '' || str === undefined) {
          return this;
        }

        var tokens = str.split(' ');
        var i = 0;
        while (i < tokens.length) {
          var token = tokens[i];
          var opCodeNum = void 0;
          try {
            var opCode = new OpCode().fromString(token);
            opCodeNum = opCode.toNumber();
          } catch (err) {}

          if (opCodeNum === undefined) {
            opCodeNum = parseInt(token, 10);
            if (opCodeNum > 0 && opCodeNum < OpCode.OP_PUSHDATA1) {
              this.chunks.push({
                buf: new Buffer(tokens[i + 1].slice(2), 'hex'),
                len: opCodeNum,
                opCodeNum: opCodeNum
              });
              i = i + 2;
            } else if (opCodeNum === 0) {
              this.chunks.push({
                opCodeNum: 0
              });
              i = i + 1;
            } else {
              throw new Error('Invalid script');
            }
          } else if (opCodeNum === OpCode.OP_PUSHDATA1 || opCodeNum === OpCode.OP_PUSHDATA2 || opCodeNum === OpCode.OP_PUSHDATA4) {
            if (tokens[i + 2].slice(0, 2) !== '0x') {
              throw new Error('Pushdata data must start with 0x');
            }
            this.chunks.push({
              buf: new Buffer(tokens[i + 2].slice(2), 'hex'),
              len: parseInt(tokens[i + 1], 10),
              opCodeNum: opCodeNum
            });
            i = i + 3;
          } else {
            this.chunks.push({
              opCodeNum: opCodeNum
            });
            i = i + 1;
          }
        }
        return this;
      }
    }, {
      key: 'toString',
      value: function toString() {
        var str = '';

        for (var i = 0; i < this.chunks.length; i++) {
          var chunk = this.chunks[i];
          var opCodeNum = chunk.opCodeNum;
          if (!chunk.buf) {
            if (OpCode.str[opCodeNum] !== undefined) {
              str = str + ' ' + new OpCode(opCodeNum).toString();
            } else {
              str = str + ' ' + '0x' + opCodeNum.toString(16);
            }
          } else {
            if (opCodeNum === OpCode.OP_PUSHDATA1 || opCodeNum === OpCode.OP_PUSHDATA2 || opCodeNum === OpCode.OP_PUSHDATA4) {
              str = str + ' ' + new OpCode(opCodeNum).toString();
            }
            str = str + ' ' + chunk.len;
            str = str + ' ' + '0x' + chunk.buf.toString('hex');
          }
        }

        return str.substr(1);
      }

      /**
       * Input the script from the script string format used in bitcoind data tests
       */

    }, {
      key: 'fromBitcoindString',
      value: function fromBitcoindString(str) {
        var bw = new Bw();
        var tokens = str.split(' ');
        var i = void 0;
        for (i = 0; i < tokens.length; i++) {
          var token = tokens[i];
          if (token === '') {
            continue;
          }
          if (token[0] === '0' && token[1] === 'x') {
            var hex = token.slice(2);
            bw.write(new Buffer(hex, 'hex'));
          } else if (token[0] === "'") {
            var tstr = token.slice(1, token.length - 1);
            var cbuf = new Buffer(tstr);
            var tbuf = new Script().writeBuffer(cbuf).toBuffer();
            bw.write(tbuf);
          } else if (OpCode['OP_' + token] !== undefined) {
            var opstr = 'OP_' + token;
            var opCodeNum = OpCode[opstr];
            bw.writeUInt8(opCodeNum);
          } else if (typeof OpCode[token] === 'number') {
            var _opstr = token;
            var _opCodeNum = OpCode[_opstr];
            bw.writeUInt8(_opCodeNum);
          } else if (!isNaN(parseInt(token, 10))) {
            var bn = new Bn(token);
            var script = new Script().writeBn(bn);
            var _tbuf = script.toBuffer();
            bw.write(_tbuf);
          } else {
            throw new Error('Could not determine type of script value');
          }
        }
        var buf = bw.toBuffer();
        return this.fromBuffer(buf);
      }
    }, {
      key: 'toBitcoindString',


      /**
       * Output the script to the script string format used in bitcoind data tests.
       */
      value: function toBitcoindString() {
        var str = '';
        for (var i = 0; i < this.chunks.length; i++) {
          var chunk = this.chunks[i];
          if (chunk.buf) {
            var buf = new Script([chunk]).toBuffer();
            var hex = buf.toString('hex');
            str = str + ' ' + '0x' + hex;
          } else if (OpCode.str[chunk.opCodeNum] !== undefined) {
            var ostr = new OpCode(chunk.opCodeNum).toString();
            str = str + ' ' + ostr.slice(3); // remove OP_
          } else {
            str = str + ' ' + '0x' + chunk.opCodeNum.toString(16);
          }
        }
        return str.substr(1);
      }

      /**
       * Turn script into a standard pubKeyHash output script
       */

    }, {
      key: 'fromPubKeyHash',
      value: function fromPubKeyHash(hashBuf) {
        if (hashBuf.length !== 20) {
          throw new Error('hashBuf must be a 20 byte buffer');
        }
        this.writeOpCode(OpCode.OP_DUP);
        this.writeOpCode(OpCode.OP_HASH160);
        this.writeBuffer(hashBuf);
        this.writeOpCode(OpCode.OP_EQUALVERIFY);
        this.writeOpCode(OpCode.OP_CHECKSIG);
        return this;
      }
    }, {
      key: 'fromScriptHash',


      /**
       * Turn script into a standard scriptHash (p2sh) output script
       */
      value: function fromScriptHash(hashBuf) {
        if (hashBuf.length !== 20) {
          throw new Error('hashBuf must be a 20 byte buffer');
        }
        this.writeOpCode(OpCode.OP_HASH160);
        this.writeBuffer(hashBuf);
        this.writeOpCode(OpCode.OP_EQUAL);
        return this;
      }
    }, {
      key: 'fromPubKeys',


      /**
       * Generate a multisig output script from a list of public keys. sort
       * defaults to true. If sort is true, the pubKeys are sorted
       * lexicographically.
      */
      value: function fromPubKeys(m, pubKeys) {
        var sort = arguments.length <= 2 || arguments[2] === undefined ? true : arguments[2];

        if (typeof m !== 'number') {
          throw new Error('m must be a number');
        }
        if (sort === true) {
          pubKeys = Script.sortPubKeys(pubKeys);
        }
        this.writeOpCode(m + OpCode.OP_1 - 1);
        for (var i in pubKeys) {
          this.writeBuffer(pubKeys[i].toBuffer());
        }
        this.writeOpCode(pubKeys.length + OpCode.OP_1 - 1);
        this.writeOpCode(OpCode.OP_CHECKMULTISIG);
        return this;
      }
    }, {
      key: 'removeCodeseparators',
      value: function removeCodeseparators() {
        var chunks = [];
        for (var i = 0; i < this.chunks.length; i++) {
          if (this.chunks[i].opCodeNum !== OpCode.OP_CODESEPARATOR) {
            chunks.push(this.chunks[i]);
          }
        }
        this.chunks = chunks;
        return this;
      }
    }, {
      key: 'isPushOnly',
      value: function isPushOnly() {
        for (var i = 0; i < this.chunks.length; i++) {
          var chunk = this.chunks[i];
          var opCodeNum = chunk.opCodeNum;
          if (opCodeNum > OpCode.OP_16) {
            return false;
          }
        }
        return true;
      }
    }, {
      key: 'isOpReturn',
      value: function isOpReturn() {
        if (this.chunks[0].opCodeNum === OpCode.OP_RETURN && (this.chunks.length === 1 || this.chunks.length === 2 && this.chunks[1].buf && this.chunks[1].buf.length <= 40 && this.chunks[1].length === this.chunks.len)) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: 'isPubKeyHashOut',
      value: function isPubKeyHashOut() {
        if (this.chunks[0] && this.chunks[0].opCodeNum === OpCode.OP_DUP && this.chunks[1] && this.chunks[1].opCodeNum === OpCode.OP_HASH160 && this.chunks[2].buf && this.chunks[3] && this.chunks[3].opCodeNum === OpCode.OP_EQUALVERIFY && this.chunks[4] && this.chunks[4].opCodeNum === OpCode.OP_CHECKSIG) {
          return true;
        } else {
          return false;
        }
      }

      /**
       * A pubKeyHash input should consist of two push operations. The first push
       * operation may be OP_0, which means the signature is missing, which is true
       * for some partially signed (and invalid) transactions.
       */

    }, {
      key: 'isPubKeyHashIn',
      value: function isPubKeyHashIn() {
        if (this.chunks.length === 2 && (this.chunks[0].buf || this.chunks[0].opCodeNum === OpCode.OP_0) && this.chunks[1].buf) {
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: 'isScriptHashOut',
      value: function isScriptHashOut() {
        var buf = this.toBuffer();
        return buf.length === 23 && buf[0] === OpCode.OP_HASH160 && buf[1] === 0x14 && buf[22] === OpCode.OP_EQUAL;
      }

      /**
       * Note that these are frequently indistinguishable from pubKeyHashin
       */

    }, {
      key: 'isScriptHashIn',
      value: function isScriptHashIn() {
        if (!this.isPushOnly()) {
          return false;
        }
        try {
          new Script().fromBuffer(this.chunks[this.chunks.length - 1].buf);
        } catch (err) {
          return false;
        }
        return true;
      }

      /**
       * Convenience method to check if a script is both scriptHash (p2sh) and if
       * the redeemScript inside is a multisig output. This is the standard format
       * for inputs of most multisig transactions.
       */

    }, {
      key: 'isScriptHashMultiSigIn',
      value: function isScriptHashMultiSigIn() {
        if (!this.isScriptHashIn()) {
          return false;
        }
        var redeemScript = void 0;
        try {
          redeemScript = new Script().fromBuffer(this.chunks[this.chunks.length - 1].buf);
        } catch (err) {
          return false;
        }
        return redeemScript.isMultiSigOut();
      }
    }, {
      key: 'isMultiSigOut',
      value: function isMultiSigOut() {
        var m = this.chunks[0].opCodeNum - OpCode.OP_1 + 1;
        if (!(m >= 1 && m <= 16)) {
          return false;
        }
        var pubKeychunks = this.chunks.slice(1, this.chunks.length - 2);
        if (!pubKeychunks.every(function (chunk) {
          try {
            var buf = chunk.buf;
            var pubKey = new PubKey().fromDer(buf);
            pubKey.validate();
            return true;
          } catch (err) {
            return false;
          }
        })) {
          return false;
        }
        var n = this.chunks[this.chunks.length - 2].opCodeNum - OpCode.OP_1 + 1;
        if (!(n >= m && n <= 16)) {
          return false;
        }
        if (this.chunks[1 + n + 1].opCodeNum !== OpCode.OP_CHECKMULTISIG) {
          return false;
        }
        return true;
      }
    }, {
      key: 'isMultiSigIn',
      value: function isMultiSigIn() {
        if (this.chunks[0].opCodeNum !== OpCode.OP_0) {
          return false;
        }
        var remainIng = this.chunks.slice(1);
        if (remainIng.length < 1) {
          return false;
        }
        return remainIng.every(function (chunk) {
          return Buffer.isBuffer(chunk.buf) && Sig.IsTxDer(chunk.buf);
        });
      }

      /**
       * Analagous to bitcoind's FindAndDelete. Find and delete equivalent chunks,
       * typically used with push data chunks.  Note that this will find and delete
       * not just the same data, but the same data with the same push data op as
       * produced by default. i.e., if a pushdata in a tx does not use the minimal
       * pushdata op, then when you try to remove the data it is pushing, it will not
       * be removed, because they do not use the same pushdata op.
       */

    }, {
      key: 'findAndDelete',
      value: function findAndDelete(script) {
        var buf = script.toBuffer();
        for (var i = 0; i < this.chunks.length; i++) {
          var script2 = new Script([this.chunks[i]]);
          var buf2 = script2.toBuffer();
          if (cmp(buf, buf2)) {
            this.chunks.splice(i, 1);
          }
        }
        return this;
      }
    }, {
      key: 'writeScript',
      value: function writeScript(script) {
        this.chunks = this.chunks.concat(script.chunks);
        return this;
      }
    }, {
      key: 'writeString',
      value: function writeString(str) {
        var script = new Script().fromString(str);
        this.chunks = this.chunks.concat(script.chunks);
        return this;
      }
    }, {
      key: 'writeOpCode',
      value: function writeOpCode(opCodeNum) {
        this.chunks.push({ opCodeNum: opCodeNum });
        return this;
      }
    }, {
      key: 'setChunkOpCode',
      value: function setChunkOpCode(i, opCodeNum) {
        this.chunks[i] = { opCodeNum: opCodeNum };
        return this;
      }

      // write a big number in the minimal way

    }, {
      key: 'writeBn',
      value: function writeBn(bn) {
        if (bn.cmp(0) === OpCode.OP_0) {
          this.chunks.push({
            opCodeNum: OpCode.OP_0
          });
        } else if (bn.cmp(-1) === 0) {
          this.chunks.push({
            opCodeNum: OpCode.OP_1NEGATE
          });
        } else if (bn.cmp(1) >= 0 && bn.cmp(16) <= 0) {
          // see OP_1 - OP_16
          this.chunks.push({
            opCodeNum: bn.toNumber() + OpCode.OP_1 - 1
          });
        } else {
          var buf = bn.toSm({ endian: 'little' });
          this.writeBuffer(buf);
        }
        return this;
      }
    }, {
      key: 'setChunkBn',
      value: function setChunkBn(i, bn) {
        this.chunks[i] = new Script().writeBn(bn).chunks[0];
        return this;
      }

      // note: this does not necessarily write buffers in the minimal way
      // to write numbers in the minimal way, see writeBn

    }, {
      key: 'writeBuffer',
      value: function writeBuffer(buf) {
        var opCodeNum = void 0;
        var len = buf.length;
        if (buf.length > 0 && buf.length < OpCode.OP_PUSHDATA1) {
          opCodeNum = buf.length;
        } else if (buf.length === 0) {
          opCodeNum = OpCode.OP_0;
        } else if (buf.length < Math.pow(2, 8)) {
          opCodeNum = OpCode.OP_PUSHDATA1;
        } else if (buf.length < Math.pow(2, 16)) {
          opCodeNum = OpCode.OP_PUSHDATA2;
        } else if (buf.length < Math.pow(2, 32)) {
          opCodeNum = OpCode.OP_PUSHDATA4;
        } else {
          throw new Error("You can't push that much data");
        }
        this.chunks.push({
          buf: buf,
          len: len,
          opCodeNum: opCodeNum
        });
        return this;
      }
    }, {
      key: 'setChunkBuffer',
      value: function setChunkBuffer(i, buf) {
        this.chunks[i] = new Script().writeBuffer(buf).chunks[0];
        return this;
      }

      // make sure a push is the smallest way to push that particular data
      // comes from bitcoind's script interpreter CheckMinimalPush function

    }, {
      key: 'checkMinimalPush',
      value: function checkMinimalPush(i) {
        var chunk = this.chunks[i];
        var buf = chunk.buf;
        var opCodeNum = chunk.opCodeNum;
        if (!buf) {
          return true;
        }
        if (buf.length === 0) {
          // Could have used OP_0.
          return opCodeNum === OpCode.OP_0;
        } else if (buf.length === 1 && buf[0] >= 1 && buf[0] <= 16) {
          // Could have used OP_1 .. OP_16.
          return opCodeNum === OpCode.OP_1 + (buf[0] - 1);
        } else if (buf.length === 1 && buf[0] === 0x81) {
          // Could have used OP_1NEGATE.
          return opCodeNum === OpCode.OP_1NEGATE;
        } else if (buf.length <= 75) {
          // Could have used a direct push (opCode indicating number of bytes pushed + those bytes).
          return opCodeNum === buf.length;
        } else if (buf.length <= 255) {
          // Could have used OP_PUSHDATA.
          return opCodeNum === OpCode.OP_PUSHDATA1;
        } else if (buf.length <= 65535) {
          // Could have used OP_PUSHDATA2.
          return opCodeNum === OpCode.OP_PUSHDATA2;
        }
        return true;
      }
    }], [{
      key: 'fromBitcoindString',
      value: function fromBitcoindString(str) {
        return new this().fromBitcoindString(str);
      }
    }, {
      key: 'fromPubKeyHash',
      value: function fromPubKeyHash(hashBuf) {
        return new this().fromPubKeyHash(hashBuf);
      }
    }, {
      key: 'fromScriptHash',
      value: function fromScriptHash(hashBuf) {
        return new this().fromScriptHash(hashBuf);
      }
    }, {
      key: 'sortPubKeys',
      value: function sortPubKeys(pubKeys) {
        return pubKeys.slice().sort(function (pubKey1, pubKey2) {
          var buf1 = pubKey1.toBuffer();
          var buf2 = pubKey2.toBuffer();
          var len = buf1.length > buf1.length ? buf1.length : buf2.length;
          for (var i = 0; i <= len; i++) {
            if (buf1[i] === undefined) {
              return -1; // shorter strings come first
            }
            if (buf2[i] === undefined) {
              return 1;
            }
            if (buf1[i] < buf2[i]) {
              return -1;
            }
            if (buf1[i] > buf2[i]) {
              return 1;
            } else {
              continue;
            }
          }
        });
      }
    }, {
      key: 'fromPubKeys',
      value: function fromPubKeys(m, pubKeys, sort) {
        return new this().fromPubKeys(m, pubKeys, sort);
      }
    }, {
      key: 'writeScript',
      value: function writeScript(script) {
        return new this().writeScript(script);
      }
    }, {
      key: 'writeString',
      value: function writeString(str) {
        return new this().writeString(str);
      }
    }, {
      key: 'writeOpCode',
      value: function writeOpCode(opCodeNum) {
        return new this().writeOpCode(opCodeNum);
      }
    }, {
      key: 'writeBn',
      value: function writeBn(bn) {
        return new this().writeBn(bn);
      }
    }, {
      key: 'writeBuffer',
      value: function writeBuffer(buf) {
        return new this().writeBuffer(buf);
      }
    }]);

    return Script;
  }(Struct);

  return Script;
};

inject = require('injecter')(inject, dependencies);
var Script = inject();
module.exports = Script;

}).call(this,require("buffer").Buffer)

},{"./bn":321,"./br":322,"./bw":323,"./cmp":324,"./op-code":329,"./pub-key":332,"./sig":335,"./struct":336,"buffer":17,"injecter":375}],335:[function(require,module,exports){
(function (Buffer){
/**
 * Signature
 * =========
 *
 * A signature is the thing you make when you want to sign a transaction, or
 * the thing you want to verify if you want to ensure that someone signed a
 * transaction. It has an r and s value, which are the cryptographic big
 * numbers that define a signature. And since this is a bitcoin library, it
 * also has nHashType, which is the way to hash a transaction and is used in
 * the binary format of a signature when it is in a transaction. We also
 * support a public key recover value, recovery, allowing one to compute the
 * public key from a signature. The "compressed" value is also necessary to
 * accurately compute the public key from a signature.
 *
 * There are a few different formats of a signature in bitcoin. One is DER, the
 * other is the TxFormat which is the same as DER but with the nHashType byte
 * appended, and the final one is Compact, which is used by Bitcoin Signed
 * Message (Bsm).
 */
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var dependencies = {
  Bn: require('./bn'),
  Struct: require('./struct')
};

var inject = function inject(deps) {
  var Bn = deps.Bn;
  var Struct = deps.Struct;

  /**
   * r, s: big numbers constiting a cryptographic signature
   * nHashType: found at the end of a signature in a transaction
   * recovery: public key recovery number
   * compressed: whether the recovered pubKey is compressed
   */

  var Sig = function (_Struct) {
    _inherits(Sig, _Struct);

    function Sig(r, s, nHashType, recovery, compressed) {
      _classCallCheck(this, Sig);

      return _possibleConstructorReturn(this, Object.getPrototypeOf(Sig).call(this, { r: r, s: s, nHashType: nHashType, recovery: recovery, compressed: compressed }));
    }

    _createClass(Sig, [{
      key: 'fromBuffer',
      value: function fromBuffer(buf) {
        try {
          return this.fromDer(buf, true);
        } catch (e) {}
        try {
          return this.fromCompact(buf);
        } catch (e) {}
        return this.fromTxFormat(buf);
      }
    }, {
      key: 'toBuffer',
      value: function toBuffer() {
        if (this.nHashType !== undefined) {
          return this.toTxFormat();
        } else if (this.recovery !== undefined) {
          return this.toCompact();
        }
        return this.toDer();
      }

      // The format used by "message"

    }, {
      key: 'fromCompact',
      value: function fromCompact(buf) {
        var compressed = true;
        var recovery = buf.slice(0, 1)[0] - 27 - 4;
        if (recovery < 0) {
          compressed = false;
          recovery = recovery + 4;
        }

        var b2 = buf.slice(1, 33);
        var b3 = buf.slice(33, 65);

        if (!(recovery === 0 || recovery === 1 || recovery === 2 || recovery === 3)) {
          throw new Error('i must be 0, 1, 2, or 3');
        }
        if (b2.length !== 32) {
          throw new Error('r must be 32 bytes');
        }
        if (b3.length !== 32 || buf.length > 65) {
          throw new Error('s must be 32 bytes');
        }

        this.compressed = compressed;
        this.recovery = recovery;
        this.r = new Bn().fromBuffer(b2);
        this.s = new Bn().fromBuffer(b3);

        return this;
      }
    }, {
      key: 'fromDer',


      // The format used in a tx, except without the nHashType at the end
      value: function fromDer(buf, strict) {
        var obj = Sig.parseDer(buf, strict);
        this.r = obj.r;
        this.s = obj.s;

        return this;
      }
    }, {
      key: 'fromTxFormat',


      // The format used in a tx
      value: function fromTxFormat(buf) {
        if (buf.length === 0) {
          // allow setting a "blank" signature
          this.r = new Bn(1);
          this.s = new Bn(1);
          this.nHashType = 1;
          return this;
        }
        var nHashType = buf.readUInt8(buf.length - 1);
        var derbuf = buf.slice(0, buf.length - 1);
        this.fromDer(derbuf, false);
        this.nHashType = nHashType;
        return this;
      }
    }, {
      key: 'fromString',
      value: function fromString(str) {
        return this.fromHex(str);
      }

      /**
       * In order to mimic the non-strict DER encoding of OpenSSL, set strict = false.
       */

    }, {
      key: 'hasLowS',


      /**
       * Compares to bitcoind's IsLowDERSignature
       * See also Ecdsa signature algorithm which enforces this.
       * See also Bip 62, "low S values in signatures"
       */
      value: function hasLowS() {
        if (this.s.lt(1) || this.s.gt(Bn.fromBuffer(new Buffer('7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0', 'hex')))) {
          return false;
        }
        return true;
      }

      /**
       * Ensures the nHashType is exactly equal to one of the standard options or combinations thereof.
       * Translated from bitcoind's IsDefinedHashtypeSignature
       */

    }, {
      key: 'hasDefinedHashType',
      value: function hasDefinedHashType() {
        if (this.nHashType < Sig.SIGHASH_ALL || this.nHashType > Sig.SIGHASH_SINGLE) {
          return false;
        }
        return true;
      }
    }, {
      key: 'toCompact',
      value: function toCompact(recovery, compressed) {
        recovery = typeof recovery === 'number' ? recovery : this.recovery;
        compressed = typeof compressed === 'boolean' ? compressed : this.compressed;

        if (!(recovery === 0 || recovery === 1 || recovery === 2 || recovery === 3)) {
          throw new Error('recovery must be equal to 0, 1, 2, or 3');
        }

        var val = recovery + 27 + 4;
        if (compressed === false) {
          val = val - 4;
        }
        var b1 = new Buffer([val]);
        var b2 = this.r.toBuffer({ size: 32 });
        var b3 = this.s.toBuffer({ size: 32 });
        return Buffer.concat([b1, b2, b3]);
      }
    }, {
      key: 'toDer',
      value: function toDer() {
        var rnbuf = this.r.toBuffer();
        var snbuf = this.s.toBuffer();

        var rneg = rnbuf[0] & 0x80;
        var sneg = snbuf[0] & 0x80;

        var rbuf = rneg ? Buffer.concat([new Buffer([0x00]), rnbuf]) : rnbuf;
        var sbuf = sneg ? Buffer.concat([new Buffer([0x00]), snbuf]) : snbuf;

        var length = 2 + rbuf.length + 2 + sbuf.length;
        var rlength = rbuf.length;
        var slength = sbuf.length;
        var rheader = 0x02;
        var sheader = 0x02;
        var header = 0x30;

        var der = Buffer.concat([new Buffer([header, length, rheader, rlength]), rbuf, new Buffer([sheader, slength]), sbuf]);
        return der;
      }
    }, {
      key: 'toTxFormat',
      value: function toTxFormat() {
        var derbuf = this.toDer();
        var buf = new Buffer(1);
        buf.writeUInt8(this.nHashType, 0);
        return Buffer.concat([derbuf, buf]);
      }
    }, {
      key: 'toString',
      value: function toString() {
        return this.toHex();
      }
    }], [{
      key: 'fromCompact',
      value: function fromCompact(buf) {
        return new this().fromCompact(buf);
      }
    }, {
      key: 'fromDer',
      value: function fromDer(buf, strict) {
        return new this().fromDer(buf, strict);
      }
    }, {
      key: 'fromTxFormat',
      value: function fromTxFormat(buf) {
        return new this().fromTxFormat(buf);
      }
    }, {
      key: 'parseDer',
      value: function parseDer(buf, strict) {
        if (strict === undefined) {
          strict = true;
        }

        if (!Buffer.isBuffer(buf)) {
          throw new Error('DER formatted signature should be a buffer');
        }

        var header = buf[0];

        if (header !== 0x30) {
          throw new Error('Header byte should be 0x30');
        }

        var length = buf[1];
        var buflength = buf.slice(2).length;
        if (strict && length !== buflength) {
          throw new Error('LEngth byte should length of what follows');
        } else {
          length = length < buflength ? length : buflength;
        }

        var rheader = buf[2 + 0];
        if (rheader !== 0x02) {
          throw new Error('Integer byte for r should be 0x02');
        }

        var rlength = buf[2 + 1];
        var rbuf = buf.slice(2 + 2, 2 + 2 + rlength);
        var r = new Bn().fromBuffer(rbuf);
        var rneg = buf[2 + 1 + 1] === 0x00;
        if (rlength !== rbuf.length) {
          throw new Error('LEngth of r incorrect');
        }

        var sheader = buf[2 + 2 + rlength + 0];
        if (sheader !== 0x02) {
          throw new Error('Integer byte for s should be 0x02');
        }

        var slength = buf[2 + 2 + rlength + 1];
        var sbuf = buf.slice(2 + 2 + rlength + 2, 2 + 2 + rlength + 2 + slength);
        var s = new Bn().fromBuffer(sbuf);
        var sneg = buf[2 + 2 + rlength + 2 + 2] === 0x00;
        if (slength !== sbuf.length) {
          throw new Error('LEngth of s incorrect');
        }

        var sumlength = 2 + 2 + rlength + 2 + slength;
        if (length !== sumlength - 2) {
          throw new Error('LEngth of signature incorrect');
        }

        var obj = {
          header: header,
          length: length,
          rheader: rheader,
          rlength: rlength,
          rneg: rneg,
          rbuf: rbuf,
          r: r,
          sheader: sheader,
          slength: slength,
          sneg: sneg,
          sbuf: sbuf,
          s: s
        };

        return obj;
      }

      /**
       * This function is translated from bitcoind's IsDERSignature and is used in
       * the script interpreter.  This "DER" format actually includes an extra byte,
       * the nHashType, at the end. It is really the tx format, not DER format.
       *
       * A canonical signature exists of: [30] [total len] [02] [len R] [R] [02] [len S] [S] [hashtype]
       * Where R and S are not negative (their first byte has its highest bit not set), and not
       * excessively padded (do not start with a 0 byte, unless an otherwise negative number follows,
       * in which case a single 0 byte is necessary and even required).
       *
       * See https://bitcointalk.org/index.php?topic=8392.msg127623#msg127623
       */

    }, {
      key: 'IsTxDer',
      value: function IsTxDer(buf) {
        if (buf.length < 9) {
          //  Non-canonical signature: too short
          return false;
        }
        if (buf.length > 73) {
          // Non-canonical signature: too long
          return false;
        }
        if (buf[0] !== 0x30) {
          //  Non-canonical signature: wrong type
          return false;
        }
        if (buf[1] !== buf.length - 3) {
          //  Non-canonical signature: wrong length marker
          return false;
        }
        var nLEnR = buf[3];
        if (5 + nLEnR >= buf.length) {
          //  Non-canonical signature: S length misplaced
          return false;
        }
        var nLEnS = buf[5 + nLEnR];
        if (nLEnR + nLEnS + 7 !== buf.length) {
          //  Non-canonical signature: R+S length mismatch
          return false;
        }

        var R = buf.slice(4);
        if (buf[4 - 2] !== 0x02) {
          //  Non-canonical signature: R value type mismatch
          return false;
        }
        if (nLEnR === 0) {
          //  Non-canonical signature: R length is zero
          return false;
        }
        if (R[0] & 0x80) {
          //  Non-canonical signature: R value negative
          return false;
        }
        if (nLEnR > 1 && R[0] === 0x00 && !(R[1] & 0x80)) {
          //  Non-canonical signature: R value excessively padded
          return false;
        }

        var S = buf.slice(6 + nLEnR);
        if (buf[6 + nLEnR - 2] !== 0x02) {
          //  Non-canonical signature: S value type mismatch
          return false;
        }
        if (nLEnS === 0) {
          //  Non-canonical signature: S length is zero
          return false;
        }
        if (S[0] & 0x80) {
          //  Non-canonical signature: S value negative
          return false;
        }
        if (nLEnS > 1 && S[0] === 0x00 && !(S[1] & 0x80)) {
          //  Non-canonical signature: S value excessively padded
          return false;
        }
        return true;
      }
    }]);

    return Sig;
  }(Struct);

  Sig.SIGHASH_ALL = 0x00000001;
  Sig.SIGHASH_NONE = 0x00000002;
  Sig.SIGHASH_SINGLE = 0x00000003;
  Sig.SIGHASH_ANYONECANPAY = 0x00000080;

  return Sig;
};

inject = require('injecter')(inject, dependencies);
var Sig = inject();
module.exports = Sig;

}).call(this,require("buffer").Buffer)

},{"./bn":321,"./struct":336,"buffer":17,"injecter":375}],336:[function(require,module,exports){
(function (Buffer){
/**
 * Structure
 * =========
 *
 * A convenient structure to extend objects from that comes with very common
 * boiler plate instance methods:
 * - fromObject
 * - fromBr
 * - toBw
 * - fromBuffer
 * - fromFastBuffer
 * - toBuffer
 * - toFastBuffer
 * - fromHex
 * - toHex
 * - fromString
 * - toString
 * - fromJSON
 * - toJSON
 * - cloneByBuffer
 * - cloneByFastBuffer
 * - cloneByHex
 * - cloneByString
 * - cloneByJSON
 *
 * As well as static methods for:
 * - fromObject
 * - fromBr
 * - fromBuffer
 * - fromFastBuffer
 * - fromHex
 * - fromString
 * - fromJSON
 *
 * The "expect" method also facilitates deserializing a sequence of buffers
 * into an object.
 */
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var dependencies = {
  Br: require('./br'),
  Bw: require('./bw')
};

var inject = function inject(deps) {
  var Br = deps.Br;
  var Bw = deps.Bw;

  var Struct = function () {
    function Struct(obj) {
      _classCallCheck(this, Struct);

      this.fromObject(obj);
    }

    _createClass(Struct, [{
      key: 'fromObject',
      value: function fromObject(obj) {
        if (!obj) {
          return this;
        }
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = Object.keys(obj)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var key = _step.value;

            if (obj[key] !== undefined) {
              this[key] = obj[key];
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        return this;
      }
    }, {
      key: 'fromBr',
      value: function fromBr(br) {
        if (!(br instanceof Br)) {
          throw new Error('br must be a buffer reader');
        }
        throw new Error('not implemented');
      }
    }, {
      key: 'asyncFromBr',
      value: function asyncFromBr(br) {
        if (!(br instanceof Br)) {
          throw new Error('br must be a buffer reader');
        }
        throw new Error('not implemented');
      }
    }, {
      key: 'toBw',
      value: function toBw(bw) {
        throw new Error('not implemented');
      }
    }, {
      key: 'asyncToBw',
      value: function asyncToBw(bw) {
        throw new Error('not implemented');
      }

      /**
       * It is very often the case that you want to create a bitcoin object from a
       * stream of small buffers rather than from a buffer of the correct length.
       * For instance, if streaming from the network or disk. The genFromBuffers
       * method is a generator which produces an iterator. Use .next(buf) to pass
       * in a small buffer. The iterator will end when it has received enough data
       * to produce the object. In some cases it is able to yield the number of
       * bytes it is expecting, but that is not always known.
       */

    }, {
      key: 'genFromBuffers',
      value: regeneratorRuntime.mark(function genFromBuffers() {
        return regeneratorRuntime.wrap(function genFromBuffers$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                throw new Error('not implemented');

              case 1:
              case 'end':
                return _context.stop();
            }
          }
        }, genFromBuffers, this);
      })

      /**
       * A convenience method used by from the genFromBuffers* generators.
       * Basically lets you expect a certain number of bytes (len) and keeps
       * yielding until you give it enough. It yields the expected amount
       * remainIng, and returns an object containIng a buffer of the expected
       * length, and, if any, the remainder buffer.
       */

    }, {
      key: 'expect',
      value: regeneratorRuntime.mark(function expect(len, startbuf) {
        var buf, bw, gotlen, remainderbuf, remainderlen, overlen;
        return regeneratorRuntime.wrap(function expect$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                buf = startbuf;
                bw = new Bw();
                gotlen = 0;

                if (startbuf) {
                  bw.write(startbuf);
                  gotlen += startbuf.length;
                }
                remainderbuf = void 0;

              case 5:
                if (!(gotlen < len)) {
                  _context2.next = 16;
                  break;
                }

                remainderlen = len - gotlen;
                _context2.next = 9;
                return remainderlen;

              case 9:
                buf = _context2.sent;

                if (buf) {
                  _context2.next = 12;
                  break;
                }

                return _context2.abrupt('continue', 5);

              case 12:
                bw.write(buf);
                gotlen += buf.length;
                _context2.next = 5;
                break;

              case 16:
                buf = bw.toBuffer();
                overlen = gotlen - len;

                remainderbuf = buf.slice(buf.length - overlen, buf.length);
                buf = buf.slice(0, buf.length - overlen);
                return _context2.abrupt('return', {
                  buf: buf,
                  remainderbuf: remainderbuf
                });

              case 21:
              case 'end':
                return _context2.stop();
            }
          }
        }, expect, this);
      })

      /**
       * Convert a buffer into an object, i.e. deserialize the object.
       */

    }, {
      key: 'fromBuffer',
      value: function fromBuffer(buf) {
        if (!Buffer.isBuffer(buf)) {
          throw new Error('buf must be a buffer');
        }
        var br = new Br(buf);

        for (var _len = arguments.length, rest = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          rest[_key - 1] = arguments[_key];
        }

        return this.fromBr.apply(this, [br].concat(rest));
      }
    }, {
      key: 'asyncFromBuffer',
      value: function asyncFromBuffer(buf) {
        if (!Buffer.isBuffer(buf)) {
          throw new Error('buf must be a buffer');
        }
        var br = new Br(buf);

        for (var _len2 = arguments.length, rest = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
          rest[_key2 - 1] = arguments[_key2];
        }

        return this.asyncFromBr.apply(this, [br].concat(rest));
      }
    }, {
      key: 'fromFastBuffer',


      /**
       * The complement of toFastBuffer - see description for toFastBuffer
       */
      value: function fromFastBuffer(buf) {
        if (buf.length === 0) {
          return this;
        } else {
          for (var _len3 = arguments.length, rest = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
            rest[_key3 - 1] = arguments[_key3];
          }

          return this.fromBuffer.apply(this, [buf].concat(rest));
        }
      }
    }, {
      key: 'toBuffer',


      /**
       * Convert the object into a buffer, i.e. serialize the object. This method
       * may block the main thread.
       */
      value: function toBuffer() {
        return this.toBw.apply(this, arguments).toBuffer();
      }
    }, {
      key: 'asyncToBuffer',
      value: function asyncToBuffer() {
        return this.asyncToBw.apply(this, arguments).then(function (bw) {
          return bw.toBuffer();
        });
      }

      /**
       * Sometimes the toBuffer method has cryptography and blocks the main thread,
       * and we need a non-blocking way to serialize an object. That is what
       * toFastBuffer is. Of course it defaults to just using toBuffer if an object
       * hasn't implemented it. If your regular toBuffer method blocks, like with
       * Bip32, then you should implement this method to be non-blocking. This
       * method is used to send objects to the workers. i.e., for converting a
       * Bip32 object to a string, we need to encode it as a buffer in a
       * non-blocking manner with toFastBuffer, send it to a worker, then the
       * worker converts it to a string, which is a blocking operation.
       *
       * It is very common to want to convert a blank object to a zero length
       * buffer, so we can transport a blank object to a worker. So that behavior
       * is included by default.
       */

    }, {
      key: 'toFastBuffer',
      value: function toFastBuffer() {
        if (Object.keys(this).length === 0) {
          return new Buffer(0);
        } else {
          return this.toBuffer.apply(this, arguments);
        }
      }
    }, {
      key: 'fromHex',
      value: function fromHex(hex) {
        var buf = void 0;
        try {
          buf = new Buffer(hex, 'hex');
        } catch (e) {
          throw new Error('invalid hex string');
        }

        for (var _len4 = arguments.length, rest = Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
          rest[_key4 - 1] = arguments[_key4];
        }

        return this.fromBuffer.apply(this, [buf].concat(rest));
      }
    }, {
      key: 'asyncFromHex',
      value: function asyncFromHex(hex) {
        var buf = void 0;
        try {
          buf = new Buffer(hex, 'hex');
        } catch (e) {
          throw new Error('invalid hex string');
        }

        for (var _len5 = arguments.length, rest = Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
          rest[_key5 - 1] = arguments[_key5];
        }

        return this.asyncFromBuffer.apply(this, [buf].concat(rest));
      }
    }, {
      key: 'fromFastHex',
      value: function fromFastHex(hex) {
        var buf = void 0;
        try {
          buf = new Buffer(hex, 'hex');
        } catch (e) {
          throw new Error('invalid hex string');
        }

        for (var _len6 = arguments.length, rest = Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {
          rest[_key6 - 1] = arguments[_key6];
        }

        return this.fromFastBuffer.apply(this, [buf].concat(rest));
      }
    }, {
      key: 'toHex',
      value: function toHex() {
        return this.toBuffer.apply(this, arguments).toString('hex');
      }
    }, {
      key: 'asyncToHex',
      value: function asyncToHex() {
        return this.asyncToBuffer.apply(this, arguments).then(function (buf) {
          return buf.toString('hex');
        });
      }
    }, {
      key: 'toFastHex',
      value: function toFastHex() {
        return this.toFastBuffer.apply(this, arguments).toString('hex');
      }
    }, {
      key: 'fromString',
      value: function fromString(str) {
        if (typeof str !== 'string') {
          throw new Error('str must be a string');
        }

        for (var _len7 = arguments.length, rest = Array(_len7 > 1 ? _len7 - 1 : 0), _key7 = 1; _key7 < _len7; _key7++) {
          rest[_key7 - 1] = arguments[_key7];
        }

        return this.fromHex.apply(this, [str].concat(rest));
      }
    }, {
      key: 'asyncFromString',
      value: function asyncFromString(str) {
        if (typeof str !== 'string') {
          throw new Error('str must be a string');
        }

        for (var _len8 = arguments.length, rest = Array(_len8 > 1 ? _len8 - 1 : 0), _key8 = 1; _key8 < _len8; _key8++) {
          rest[_key8 - 1] = arguments[_key8];
        }

        return this.asyncFromHex.apply(this, [str].concat(rest));
      }
    }, {
      key: 'toString',
      value: function toString() {
        return this.toHex.apply(this, arguments);
      }
    }, {
      key: 'asyncToString',
      value: function asyncToString() {
        return this.asyncToHex.apply(this, arguments);
      }
    }, {
      key: 'fromJSON',
      value: function fromJSON(json) {
        throw new Error('not implemented');
      }
    }, {
      key: 'asyncFromJSON',
      value: function asyncFromJSON(json) {
        throw new Error('not implemented');
      }
    }, {
      key: 'toJSON',
      value: function toJSON() {
        var json = {};
        for (var val in this) {
          // arrays
          if (this[val] instanceof Array) {
            var arr = [];
            for (var i in this[val]) {
              if (typeof this[val][i].toJSON === 'function') {
                arr.push(this[val][i].toJSON());
              } else {
                arr.push(JSON.stringify(this[val][i]));
              }
            }
            json[val] = arr;
            // objects
          } else if (_typeof(this[val]) === 'object' && typeof this[val].toJSON === 'function') {
            json[val] = this[val].toJSON();
            // booleans, numbers, and strings
          } else if (typeof this[val] === 'boolean' || typeof this[val] === 'number' || typeof this[val] === 'string') {
            json[val] = this[val];
            // throw an error for objects that do not implement toJSON
          } else if (_typeof(this[val]) === 'object') {
            throw new Error('not implemented');
          }
        }
        return json;
        // throw new Error('not implemented')
      }
    }, {
      key: 'asyncToJSON',
      value: function asyncToJSON() {
        throw new Error('not implemented');
      }
    }, {
      key: 'clone',
      value: function clone() {
        // TODO: Should this be more intelligent about picking which clone method
        // to default to?
        return this.cloneByJSON();
      }
    }, {
      key: 'cloneByBuffer',
      value: function cloneByBuffer() {
        return new this.constructor().fromBuffer(this.toBuffer());
      }
    }, {
      key: 'cloneByFastBuffer',
      value: function cloneByFastBuffer() {
        return new this.constructor().fromFastBuffer(this.toFastBuffer());
      }
    }, {
      key: 'cloneByHex',
      value: function cloneByHex() {
        return new this.constructor().fromHex(this.toHex());
      }
    }, {
      key: 'cloneByString',
      value: function cloneByString() {
        return new this.constructor().fromString(this.toString());
      }
    }, {
      key: 'cloneByJSON',
      value: function cloneByJSON() {
        return new this.constructor().fromJSON(this.toJSON());
      }
    }], [{
      key: 'fromObject',
      value: function fromObject(obj) {
        return new this().fromObject(obj);
      }
    }, {
      key: 'fromBr',
      value: function fromBr(br) {
        return new this().fromBr(br);
      }
    }, {
      key: 'asyncFromBr',
      value: function asyncFromBr(br) {
        return new this().asyncFromBr(br);
      }
    }, {
      key: 'fromBuffer',
      value: function fromBuffer() {
        var _ref;

        return (_ref = new this()).fromBuffer.apply(_ref, arguments);
      }
    }, {
      key: 'asyncFromBuffer',
      value: function asyncFromBuffer(buf) {
        var _ref2;

        for (var _len9 = arguments.length, rest = Array(_len9 > 1 ? _len9 - 1 : 0), _key9 = 1; _key9 < _len9; _key9++) {
          rest[_key9 - 1] = arguments[_key9];
        }

        return (_ref2 = new this()).asyncFromBuffer.apply(_ref2, [buf].concat(rest));
      }
    }, {
      key: 'fromFastBuffer',
      value: function fromFastBuffer() {
        var _ref3;

        return (_ref3 = new this()).fromFastBuffer.apply(_ref3, arguments);
      }
    }, {
      key: 'fromHex',
      value: function fromHex(hex) {
        var _ref4;

        for (var _len10 = arguments.length, rest = Array(_len10 > 1 ? _len10 - 1 : 0), _key10 = 1; _key10 < _len10; _key10++) {
          rest[_key10 - 1] = arguments[_key10];
        }

        return (_ref4 = new this()).fromHex.apply(_ref4, [hex].concat(rest));
      }
    }, {
      key: 'asyncFromHex',
      value: function asyncFromHex(hex) {
        var _ref5;

        for (var _len11 = arguments.length, rest = Array(_len11 > 1 ? _len11 - 1 : 0), _key11 = 1; _key11 < _len11; _key11++) {
          rest[_key11 - 1] = arguments[_key11];
        }

        return (_ref5 = new this()).asyncFromHex.apply(_ref5, [hex].concat(rest));
      }
    }, {
      key: 'fromFastHex',
      value: function fromFastHex(hex) {
        var _ref6;

        for (var _len12 = arguments.length, rest = Array(_len12 > 1 ? _len12 - 1 : 0), _key12 = 1; _key12 < _len12; _key12++) {
          rest[_key12 - 1] = arguments[_key12];
        }

        return (_ref6 = new this()).fromFastHex.apply(_ref6, [hex].concat(rest));
      }
    }, {
      key: 'fromString',
      value: function fromString(str) {
        var _ref7;

        for (var _len13 = arguments.length, rest = Array(_len13 > 1 ? _len13 - 1 : 0), _key13 = 1; _key13 < _len13; _key13++) {
          rest[_key13 - 1] = arguments[_key13];
        }

        return (_ref7 = new this()).fromString.apply(_ref7, [str].concat(rest));
      }
    }, {
      key: 'asyncFromString',
      value: function asyncFromString(str) {
        var _ref8;

        for (var _len14 = arguments.length, rest = Array(_len14 > 1 ? _len14 - 1 : 0), _key14 = 1; _key14 < _len14; _key14++) {
          rest[_key14 - 1] = arguments[_key14];
        }

        return (_ref8 = new this()).asyncFromString.apply(_ref8, [str].concat(rest));
      }
    }, {
      key: 'fromJSON',
      value: function fromJSON(json) {
        var _ref9;

        for (var _len15 = arguments.length, rest = Array(_len15 > 1 ? _len15 - 1 : 0), _key15 = 1; _key15 < _len15; _key15++) {
          rest[_key15 - 1] = arguments[_key15];
        }

        return (_ref9 = new this()).fromJSON.apply(_ref9, [json].concat(rest));
      }
    }, {
      key: 'asyncFromJSON',
      value: function asyncFromJSON(json) {
        var _ref10;

        for (var _len16 = arguments.length, rest = Array(_len16 > 1 ? _len16 - 1 : 0), _key16 = 1; _key16 < _len16; _key16++) {
          rest[_key16 - 1] = arguments[_key16];
        }

        return (_ref10 = new this()).asyncFromJSON.apply(_ref10, [json].concat(rest));
      }
    }]);

    return Struct;
  }();

  return Struct;
};

inject = require('injecter')(inject, dependencies);
var Struct = inject();
module.exports = Struct;

}).call(this,require("buffer").Buffer)

},{"./br":322,"./bw":323,"buffer":17,"injecter":375}],337:[function(require,module,exports){
(function (Buffer){
/**
 * Transaction Builder (experimental)
 * ==================================
 *
 * Transaction Builder. This is a, yet unfinished, convenience class for
 * building pubKeyHash and p2sh transactions, and also for verifying arbitrary
 * transactions (and their inputs). You can (or will be able to) pay to
 * pubKeyHash to p2sh and can spend pubKeyHash or p2sh-pubKeyHash or
 * p2sh-multisig.
 */
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var dependencies = {
  Address: require('./address'),
  Constants: require('./constants').Default.TxBuilder,
  Bn: require('./bn'),
  PubKey: require('./pub-key'),
  Script: require('./script'),
  Sig: require('./sig'),
  Struct: require('./struct'),
  Tx: require('./tx'),
  TxIn: require('./tx-in'),
  TxOut: require('./tx-out'),
  TxOutMap: require('./tx-out-map'),
  VarInt: require('./var-int'),
  asink: require('asink')
};

var inject = function inject(deps) {
  var Address = deps.Address;
  var Constants = deps.Constants;
  var Bn = deps.Bn;
  var PubKey = deps.PubKey;
  var Script = deps.Script;
  var Sig = deps.Sig;
  var Struct = deps.Struct;
  var Tx = deps.Tx;
  var TxIn = deps.TxIn;
  var TxOut = deps.TxOut;
  var TxOutMap = deps.TxOutMap;
  var VarInt = deps.VarInt;
  var asink = deps.asink;

  var TxBuilder = function (_Struct) {
    _inherits(TxBuilder, _Struct);

    function TxBuilder() {
      var tx = arguments.length <= 0 || arguments[0] === undefined ? new Tx() : arguments[0];
      var txIns = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];
      var txOuts = arguments.length <= 2 || arguments[2] === undefined ? [] : arguments[2];
      var uTxOutMap = arguments.length <= 3 || arguments[3] === undefined ? new TxOutMap() : arguments[3];
      var changeScript = arguments[4];
      var feePerKbNum = arguments.length <= 5 || arguments[5] === undefined ? Constants.feePerKbNum : arguments[5];
      var nLockTime = arguments.length <= 6 || arguments[6] === undefined ? 0 : arguments[6];
      var versionBytesNum = arguments.length <= 7 || arguments[7] === undefined ? 1 : arguments[7];

      _classCallCheck(this, TxBuilder);

      return _possibleConstructorReturn(this, Object.getPrototypeOf(TxBuilder).call(this, { tx: tx, txIns: txIns, txOuts: txOuts, uTxOutMap: uTxOutMap, changeScript: changeScript, feePerKbNum: feePerKbNum, nLockTime: nLockTime, versionBytesNum: versionBytesNum }));
    }

    _createClass(TxBuilder, [{
      key: 'toJSON',
      value: function toJSON() {
        var json = {};
        json.tx = this.tx.toHex();
        json.txIns = this.txIns.map(function (txIn) {
          return txIn.toHex();
        });
        json.txOuts = this.txOuts.map(function (txOut) {
          return txOut.toHex();
        });
        json.uTxOutMap = this.uTxOutMap.toJSON();
        if (this.changeScript) {
          json.changeScript = this.changeScript.toHex();
        }
        json.feePerKbNum = this.feePerKbNum;
        return json;
      }
    }, {
      key: 'fromJSON',
      value: function fromJSON(json) {
        this.tx = new Tx().fromHex(json.tx);
        this.txIns = json.txIns.map(function (txIn) {
          return TxIn.fromHex(txIn);
        });
        this.txOuts = json.txOuts.map(function (txOut) {
          return TxOut.fromHex(txOut);
        });
        this.uTxOutMap = new TxOutMap().fromJSON(json.uTxOutMap);
        if (json.changeScript) {
          this.changeScript = new Script().fromHex(json.changeScript);
        }
        this.feePerKbNum = json.feePerKbNum;
        return this;
      }
    }, {
      key: 'setFeePerKbNum',
      value: function setFeePerKbNum(feePerKbNum) {
        this.feePerKbNum = feePerKbNum;
        return this;
      }
    }, {
      key: 'setChangeAddress',
      value: function setChangeAddress(changeAddress) {
        this.changeScript = changeAddress.toScript();
        return this;
      }
    }, {
      key: 'setChangeScript',
      value: function setChangeScript(changeScript) {
        this.changeScript = changeScript;
        return this;
      }

      /**
       * nLockTime is an unsigned integer.
       */

    }, {
      key: 'setNLocktime',
      value: function setNLocktime(nLockTime) {
        this.nLockTime = nLockTime;
        return this;
      }
    }, {
      key: 'setVersion',
      value: function setVersion(versionBytesNum) {
        this.versionBytesNum = versionBytesNum;
        return this;
      }

      /**
       * Import a transaction partially signed by someone else. The only thing you
       * can do after this is sign one or more inputs. Usually used for multisig
       * transactions. uTxOutMap is optional. It is not necessary so long as you
       * pass in the txOut when you sign.
       */

    }, {
      key: 'importPartiallySignedTx',
      value: function importPartiallySignedTx(tx, uTxOutMap) {
        this.tx = tx;
        if (uTxOutMap) {
          this.uTxOutMap = uTxOutMap;
        }
        return this;
      }

      /**
       * Pay "from" a script - in other words, add an input to the transaction.
       */

    }, {
      key: 'inputFromScript',
      value: function inputFromScript(txHashBuf, txOutNum, txOut, script, nSequence) {
        if (!Buffer.isBuffer(txHashBuf) || !(typeof txOutNum === 'number') || !(txOut instanceof TxOut) || !(script instanceof Script)) {
          throw new Error('invalid one of: txHashBuf, txOutNum, txOut, script');
        }
        this.txIns.push(TxIn.fromProperties(txHashBuf, txOutNum, script, nSequence));
        this.uTxOutMap.add(txHashBuf, txOutNum, txOut);
        return this;
      }

      /**
       * Pay "from" a pubKeyHash output - in other words, add an input to the
       * transaction.
       */

    }, {
      key: 'inputFromPubKeyHash',
      value: function inputFromPubKeyHash(txHashBuf, txOutNum, txOut, pubKey, nSequence) {
        if (!Buffer.isBuffer(txHashBuf) || !(typeof txOutNum === 'number') || !(txOut instanceof TxOut) || !(pubKey instanceof PubKey)) {
          throw new Error('invalid one of: txHashBuf, txOutNum, txOut, pubKey');
        }
        this.txIns.push(new TxIn().fromObject({ nSequence: nSequence }).fromPubKeyHashTxOut(txHashBuf, txOutNum, txOut, pubKey));
        this.uTxOutMap.add(txHashBuf, txOutNum, txOut);
        return this;
      }

      /**
       * Pay "from" a scriptHash (p2sh) output - in other words, add an input to
       * the transaction.
       */

    }, {
      key: 'inputFromScriptHashMultiSig',
      value: function inputFromScriptHashMultiSig(txHashBuf, txOutNum, txOut, redeemScript, nSequence) {
        if (!Buffer.isBuffer(txHashBuf) || !(typeof txOutNum === 'number') || !(txOut instanceof TxOut) || !(redeemScript instanceof Script)) {
          throw new Error('invalid one of: txHashBuf, txOutNum, txOut, redeemScript');
        }
        this.txIns.push(new TxIn().fromObject({ nSequence: nSequence }).fromScriptHashMultiSigTxOut(txHashBuf, txOutNum, txOut, redeemScript));
        this.uTxOutMap.add(txHashBuf, txOutNum, txOut);
        return this;
      }

      /**
       * An address to send funds to, along with the amount. The amount should be
       * denominated in satoshis, not bitcoins.
       */

    }, {
      key: 'outputToAddress',
      value: function outputToAddress(valueBn, addr) {
        if (!(addr instanceof Address) || !(valueBn instanceof Bn)) {
          throw new Error('addr must be an Address, and valueBn must be a Bn');
        }
        var script = void 0;
        if (addr.type() === 'scriptHash') {
          script = new Script().fromScriptHash(addr.hashBuf);
        } else if (addr.type() === 'pubKeyHash') {
          script = new Script().fromPubKeyHash(addr.hashBuf);
        } else {
          throw new Error('invalid address type');
        }
        this.outputToScript(valueBn, script);
        return this;
      }

      /**
       * A script to send funds to, along with the amount. The amount should be
       * denominated in satoshis, not bitcoins.
       */

    }, {
      key: 'outputToScript',
      value: function outputToScript(valueBn, script) {
        if (!(script instanceof Script) || !(valueBn instanceof Bn)) {
          throw new Error('script must be a Script, and valueBn must be a Bn');
        }
        var txOut = TxOut.fromProperties(valueBn, script);
        this.txOuts.push(txOut);
        return this;
      }
    }, {
      key: 'buildOutputs',
      value: function buildOutputs() {
        var _this2 = this;

        var outamount = new Bn(0);
        this.txOuts.forEach(function (txOut) {
          outamount = outamount.add(txOut.valueBn);
          _this2.tx.addTxOut(txOut);
        });
        return outamount;
      }
    }, {
      key: 'buildInputs',
      value: function buildInputs(outamount) {
        var extraInputsNum = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];

        var inamount = new Bn(0);
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = this.txIns[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var txIn = _step.value;

            var txOut = this.uTxOutMap.get(txIn.txHashBuf, txIn.txOutNum);
            inamount = inamount.add(txOut.valueBn);
            this.tx.addTxIn(txIn);
            if (inamount.geq(outamount)) {
              if (extraInputsNum <= 0) {
                break;
              }
              extraInputsNum--;
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        if (inamount.lt(outamount)) {
          throw new Error('not enough funds for output');
        }
        return inamount;
      }

      // For now this method only supports pubKeyHash inputs. It assumes we have
      // not yet added signatures to our inputs.
      // TODO: Support it when the signatures are already on the inputs.
      // TODO: Support p2sh inputs.

    }, {
      key: 'estimateSize',
      value: function estimateSize() {
        // largest possible sig size
        var sigsize = 1 + 1 + 1 + 1 + 32 + 1 + 1 + 32 + 1;
        var size = this.tx.toBuffer().length;
        size = size + sigsize * this.tx.txIns.length;
        size = size + 1; // assume txInsVi increases by 1 byte
        return size;
      }
    }, {
      key: 'estimateFee',
      value: function estimateFee() {
        // TODO: Support calculating fees from p2sh multisig.
        var fee = Math.ceil(this.estimateSize() / 1000) * this.feePerKbNum;
        return new Bn(fee);
      }

      /**
       * Builds the transaction and adds the appropriate fee by subtracting from
       * the change output. Note that by default the TxBuilder will use as many
       * inputs as necessary to pay the output amounts and the required fee. The
       * TxBuilder will not necessarily us all the inputs. To force the TxBuilder
       * to use all the inputs (such as if you wish to spend the entire balance
       * of a wallet), set the argument useAllInputs = true.
       */

    }, {
      key: 'build',
      value: function build() {
        var useAllInputs = arguments.length <= 0 || arguments[0] === undefined ? false : arguments[0];

        var changeAmount = void 0,
            shouldfeebn = void 0;
        for (var extraInputsNum = useAllInputs ? this.txIns.length - 1 : 0; extraInputsNum < this.txIns.length; extraInputsNum++) {
          this.tx = new Tx();
          var outamount = this.buildOutputs();
          var changeScript = this.changeScript;
          var changeTxOut = TxOut.fromProperties(new Bn(0), changeScript);
          this.tx.addTxOut(changeTxOut);

          var inamount = this.buildInputs(outamount, extraInputsNum);

          // TODO: What if change amount is less than dust?
          // Set change amount from inamount - outamount
          changeAmount = inamount.sub(outamount);
          this.tx.txOuts[this.tx.txOuts.length - 1].valueBn = changeAmount;

          shouldfeebn = this.estimateFee();
          if (changeAmount.geq(shouldfeebn) && changeAmount.sub(shouldfeebn).gt(Constants.dustNum)) {
            break;
          }
        }
        if (changeAmount.geq(shouldfeebn)) {
          // Subtract fee from change
          // TODO: What if change is less than dust? What if change is 0?
          changeAmount = changeAmount.sub(shouldfeebn);
          this.tx.txOuts[this.tx.txOuts.length - 1].valueBn = changeAmount;

          if (changeAmount.lt(Constants.dustNum)) {
            throw new Error('unable to create change amount greater than dust');
          }

          this.tx.nLockTime = this.nLockTime;
          this.tx.versionBytesNum = this.versionBytesNum;
          return this;
        } else {
          throw new Error('unable to gather enough inputs for outputs and fee');
        }
      }

      /**
       * Check if all signatures are present in a p2sh multisig input script.
       */

    }, {
      key: 'fillPubKeyHashSig',


      /**
       * Given the signature for a transaction, fill it in the appropriate place
       * for an input that spends a pubKeyHash output.
       */
      value: function fillPubKeyHashSig(i, keyPair, sig) {
        var txIn = this.tx.txIns[i];
        txIn.script.chunks[0] = new Script().writeBuffer(sig.toTxFormat()).chunks[0];
        txIn.scriptVi = VarInt.fromNumber(txIn.script.toBuffer().length);
        return this;
      }
    }, {
      key: 'fillScriptHashMultiSigSig',
      value: function fillScriptHashMultiSigSig(i, keyPair, sig, redeemScript) {
        var txIn = this.tx.txIns[i];
        var script = txIn.script;

        // three normal opCodes, and the rest are pubKeys
        var pubKeychunks = redeemScript.chunks.slice(1, redeemScript.chunks.length - 2);

        var pubKeybufs = pubKeychunks.map(function (chunk) {
          return chunk.buf;
        });
        var pubKeybuf = keyPair.pubKey.toBuffer();

        // find which pubKey in the redeemScript is the one we are trying to sign
        var thisPubKeyIndex = void 0;
        for (thisPubKeyIndex = 0; thisPubKeyIndex < pubKeybufs.length; thisPubKeyIndex++) {
          if (Buffer.compare(pubKeybuf, pubKeybufs[thisPubKeyIndex]) === 0) {
            break;
          }
          if (thisPubKeyIndex >= pubKeybufs.length - 1) {
            throw new Error('cannot sign; pubKey not found in input ' + i);
          }
        }

        script.chunks[thisPubKeyIndex + 1] = new Script().writeBuffer(sig.toTxFormat()).chunks[0];
        var m = redeemScript.chunks[0].opCodeNum - 0x50;
        if (TxBuilder.allSigsPresent(m, script)) {
          txIn.script = TxBuilder.removeBlankSigs(script);
        }
        txIn.scriptVi = VarInt.fromNumber(txIn.script.toBuffer().length);
        return this;
      }

      /**
       * Sign an input, but do not fill the signature into the transaction. Return
       * the signature.
       *
       * For a normal transaction, subScript is usually the scriptPubKey. For a
       * p2sh transaction, subScript is usually the redeemScript. If you're not
       * normal because you're using OP_CODESEPARATORs, you know what to do.
       */

    }, {
      key: 'getSig',
      value: function getSig(keyPair, nHashType, nIn, subScript) {
        nHashType = nHashType === undefined ? Sig.SIGHASH_ALL : nHashType;
        return this.tx.sign(keyPair, nHashType, nIn, subScript);
      }

      /**
       * Asynchronously sign an input in a worker, but do not fill the signature
       * into the transaction. Return the signature.
       */

    }, {
      key: 'asyncGetSig',
      value: function asyncGetSig(keyPair, nHashType, nIn, subScript) {
        nHashType = nHashType === undefined ? Sig.SIGHASH_ALL : nHashType;
        return this.tx.asyncSign(keyPair, nHashType, nIn, subScript);
      }

      /**
       * Sign ith input with keyPair and insert the signature into the transaction.
       * This method only works for some standard transaction types. For
       * non-standard transaction types, use getSig.
       */

    }, {
      key: 'sign',
      value: function sign(i, keyPair, txOut) {
        var txIn = this.tx.txIns[i];
        var script = txIn.script;
        if (script.isPubKeyHashIn()) {
          var txHashBuf = txIn.txHashBuf;
          var txOutNum = txIn.txOutNum;
          if (!txOut) {
            txOut = this.uTxOutMap.get(txHashBuf, txOutNum);
          }
          var outScript = txOut.script;
          var subScript = outScript; // true for standard script types
          var sig = this.getSig(keyPair, Sig.SIGHASH_ALL, i, subScript);
          this.fillPubKeyHashSig(i, keyPair, sig, subScript);
        } else if (script.isScriptHashIn()) {
          var redeemScript = new Script().fromBuffer(script.chunks[script.chunks.length - 1].buf);
          var _subScript = redeemScript;
          if (!redeemScript.isMultiSigOut()) {
            throw new Error('cannot sign non-multisig scriptHash script type for input ' + i);
          }
          var _sig = this.tx.sign(keyPair, Sig.SIGHASH_ALL, i, _subScript);
          this.fillScriptHashMultiSigSig(i, keyPair, _sig, redeemScript);
        } else {
          throw new Error('cannot sign unknown script type for input ' + i);
        }
        return this;
      }

      /**
       * Asynchronously sign ith input with keyPair in a worker and insert the
       * signature into the transaction.  This method only works for some standard
       * transaction types. For non-standard transaction types, use asyncGetSig.
       */

    }, {
      key: 'asyncSign',
      value: function asyncSign(i, keyPair, txOut) {
        return asink(regeneratorRuntime.mark(function _callee() {
          var txIn, script, txHashBuf, txOutNum, outScript, subScript, sig, redeemScript, _subScript2, _sig2;

          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  txIn = this.tx.txIns[i];
                  script = txIn.script;

                  if (!script.isPubKeyHashIn()) {
                    _context.next = 14;
                    break;
                  }

                  txHashBuf = txIn.txHashBuf;
                  txOutNum = txIn.txOutNum;

                  if (!txOut) {
                    txOut = this.uTxOutMap.get(txHashBuf, txOutNum);
                  }
                  outScript = txOut.script;
                  subScript = outScript; // true for standard script types

                  _context.next = 10;
                  return this.asyncGetSig(keyPair, Sig.SIGHASH_ALL, i, subScript);

                case 10:
                  sig = _context.sent;

                  this.fillPubKeyHashSig(i, keyPair, sig, subScript);
                  _context.next = 26;
                  break;

                case 14:
                  if (!script.isScriptHashIn()) {
                    _context.next = 25;
                    break;
                  }

                  redeemScript = new Script().fromBuffer(script.chunks[script.chunks.length - 1].buf);
                  _subScript2 = redeemScript;

                  if (redeemScript.isMultiSigOut()) {
                    _context.next = 19;
                    break;
                  }

                  throw new Error('cannot sign non-multisig scriptHash script type for input ' + i);

                case 19:
                  _context.next = 21;
                  return this.tx.asyncSign(keyPair, Sig.SIGHASH_ALL, i, _subScript2);

                case 21:
                  _sig2 = _context.sent;

                  this.fillScriptHashMultiSigSig(i, keyPair, _sig2, redeemScript);
                  _context.next = 26;
                  break;

                case 25:
                  throw new Error('cannot sign unknown script type for input ' + i);

                case 26:
                  return _context.abrupt('return', this);

                case 27:
                case 'end':
                  return _context.stop();
              }
            }
          }, _callee, this);
        }), this);
      }
    }], [{
      key: 'allSigsPresent',
      value: function allSigsPresent(m, script) {
        // The first element is a Famous MultiSig Bug OP_0, and last element is the
        // redeemScript. The rest are signatures.
        var present = 0;
        for (var i = 1; i < script.chunks.length - 1; i++) {
          if (script.chunks[i].buf) {
            present++;
          }
        }
        return present === m;
      }

      /**
       * Remove blank signatures in a p2sh multisig input script.
       */

    }, {
      key: 'removeBlankSigs',
      value: function removeBlankSigs(script) {
        // The first element is a Famous MultiSig Bug OP_0, and last element is the
        // redeemScript. The rest are signatures.
        script = new Script(script.chunks.slice()); // copy the script
        for (var i = 1; i < script.chunks.length - 1; i++) {
          if (!script.chunks[i].buf) {
            script.chunks.splice(i, 1); // remove ith element
          }
        }
        return script;
      }
    }]);

    return TxBuilder;
  }(Struct);

  return TxBuilder;
};

inject = require('injecter')(inject, dependencies);
var TxBuilder = inject();
module.exports = TxBuilder;

}).call(this,require("buffer").Buffer)

},{"./address":318,"./bn":321,"./constants":325,"./pub-key":332,"./script":334,"./sig":335,"./struct":336,"./tx":341,"./tx-in":338,"./tx-out":340,"./tx-out-map":339,"./var-int":342,"asink":346,"buffer":17,"injecter":375}],338:[function(require,module,exports){
(function (Buffer){
/*
 * Transaction Input
 * =================
 *
 * An input to a transaction. The way you probably want to use this is through
 * the convenient method of new TxIn(txHashBuf, txOutNum, script, nSequence) (i.e., you
 * can leave out the scriptVi, which is computed automatically if you leave it
 * out.)
 */
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var dependencies = {
  Bw: require('./bw'),
  VarInt: require('./var-int'),
  OpCode: require('./op-code'),
  Script: require('./script'),
  Struct: require('./struct')
};

var inject = function inject(deps) {
  var Bw = deps.Bw;
  var VarInt = deps.VarInt;
  var OpCode = deps.OpCode;
  var Script = deps.Script;
  var Struct = deps.Struct;

  var TxIn = function (_Struct) {
    _inherits(TxIn, _Struct);

    function TxIn(txHashBuf, txOutNum, scriptVi, script) {
      var nSequence = arguments.length <= 4 || arguments[4] === undefined ? 0xffffffff : arguments[4];

      _classCallCheck(this, TxIn);

      return _possibleConstructorReturn(this, Object.getPrototypeOf(TxIn).call(this, { txHashBuf: txHashBuf, txOutNum: txOutNum, scriptVi: scriptVi, script: script, nSequence: nSequence }));
    }

    _createClass(TxIn, [{
      key: 'setScript',
      value: function setScript(script) {
        this.scriptVi = VarInt.fromNumber(script.toBuffer().length);
        this.script = script;
        return this;
      }
    }, {
      key: 'fromProperties',
      value: function fromProperties(txHashBuf, txOutNum, script, nSequence) {
        this.fromObject({ txHashBuf: txHashBuf, txOutNum: txOutNum, nSequence: nSequence });
        this.setScript(script);
        return this;
      }
    }, {
      key: 'fromJSON',
      value: function fromJSON(json) {
        this.fromObject({
          txHashBuf: new Buffer(json.txHashBuf, 'hex'),
          txOutNum: json.txOutNum,
          scriptVi: VarInt.fromJSON(json.scriptVi),
          script: Script.fromJSON(json.script),
          nSequence: json.nSequence
        });
        return this;
      }
    }, {
      key: 'toJSON',
      value: function toJSON() {
        return {
          txHashBuf: this.txHashBuf.toString('hex'),
          txOutNum: this.txOutNum,
          scriptVi: this.scriptVi.toJSON(),
          script: this.script.toJSON(),
          nSequence: this.nSequence
        };
      }
    }, {
      key: 'fromBr',
      value: function fromBr(br) {
        this.txHashBuf = br.read(32);
        this.txOutNum = br.readUInt32LE();
        this.scriptVi = VarInt.fromBuffer(br.readVarIntBuf());
        this.script = Script.fromBuffer(br.read(this.scriptVi.toNumber()));
        this.nSequence = br.readUInt32LE();
        return this;
      }
    }, {
      key: 'toBw',
      value: function toBw(bw) {
        if (!bw) {
          bw = new Bw();
        }
        bw.write(this.txHashBuf);
        bw.writeUInt32LE(this.txOutNum);
        bw.write(this.scriptVi.buf);
        bw.write(this.script.toBuffer());
        bw.writeUInt32LE(this.nSequence);
        return bw;
      }

      /**
       * Generate txIn with blank signatures from a txOut and its
       * txHashBuf+txOutNum. A "blank" signature is just an OP_0.
       */

    }, {
      key: 'fromPubKeyHashTxOut',
      value: function fromPubKeyHashTxOut(txHashBuf, txOutNum, txOut, pubKey) {
        var script = new Script();
        if (txOut.script.isPubKeyHashOut()) {
          script.writeOpCode(OpCode.OP_0); // blank signature
          script.writeBuffer(pubKey.toBuffer());
        } else {
          throw new Error('txOut must be of type pubKeyHash');
        }
        this.txHashBuf = txHashBuf;
        this.txOutNum = txOutNum;
        this.setScript(script);
        return this;
      }

      /**
       * Generate txIn with blank signatures from a txOut and its
       * txHashBuf+txOutNum. A "blank" signature is just an OP_0.
       *
       * TODO: Also support other types of p2sh outputs other than multisig.
       */

    }, {
      key: 'fromScriptHashMultiSigTxOut',
      value: function fromScriptHashMultiSigTxOut(txHashBuf, txOutNum, txOut, redeemScript) {
        var script = new Script();
        if (!txOut.script.isScriptHashOut()) {
          throw new Error('txOut must be of type scriptHash');
        }
        if (!redeemScript.isMultiSigOut()) {
          throw new Error('redeemScript must be multisig');
        }
        script.writeOpCode(OpCode.OP_0); // extra OP_0; famous multisig bug in bitcoin pops one too many items from the stack
        var numpubKeys = redeemScript.chunks.length - 3; // 3 normal opCodes, the rest pubKeys
        for (var i = 0; i < numpubKeys; i++) {
          script.writeOpCode(OpCode.OP_0); // one blank per pubKey (not per sig)
        }
        script.writeBuffer(redeemScript.toBuffer());
        this.fromProperties(txHashBuf, txOutNum, script);
        return this;
      }
    }, {
      key: 'hasNullInput',
      value: function hasNullInput() {
        var hex = this.txHashBuf.toString('hex');
        if (hex === '0000000000000000000000000000000000000000000000000000000000000000' && this.txOutNum === 0xffffffff) {
          return true;
        }
        return false;
      }

      /**
       * Analagous to bitcoind's SetNull in COutPoint
       */

    }, {
      key: 'setNullInput',
      value: function setNullInput() {
        this.txHashBuf = new Buffer(32);
        this.txHashBuf.fill(0);
        this.txOutNum = 0xffffffff; // -1 cast to unsigned int
      }
    }], [{
      key: 'fromProperties',
      value: function fromProperties(txHashBuf, txOutNum, script, nSequence) {
        return new this().fromProperties(txHashBuf, txOutNum, script, nSequence);
      }
    }, {
      key: 'fromScriptHashMultiSigTxOut',
      value: function fromScriptHashMultiSigTxOut(txHashBuf, txOutNum, txOut, redeemScript) {
        return new this().fromScriptHashMultiSigTxOut(txHashBuf, txOutNum, txOut, redeemScript);
      }
    }]);

    return TxIn;
  }(Struct);

  /* Interpret sequence numbers as relative lock-time constraints. */


  TxIn.LOCKTIME_VERIFY_SEQUENCE = 1 << 0;

  /* Setting nSequence to this value for every input in a transaction disables
   * nLockTime. */
  TxIn.SEQUENCE_FINAL = 0xffffffff;

  /* Below flags apply in the context of Bip 68*/
  /* If this flag set, txIn.nSequence is NOT interpreted as a relative lock-time.
   * */
  TxIn.SEQUENCE_LOCKTIME_DISABLE_FLAG = 1 << 31;

  /* If txIn.nSequence encodes a relative lock-time and this flag is set, the
   * relative lock-time has units of 512 seconds, otherwise it specifies blocks
   * with a granularity of 1. */
  TxIn.SEQUENCE_LOCKTIME_TYPE_FLAG = 1 << 22;

  /* If txIn.nSequence encodes a relative lock-time, this mask is applied to
   * extract that lock-time from the sequence field. */
  TxIn.SEQUENCE_LOCKTIME_MASK = 0x0000ffff;

  /* In order to use the same number of bits to encode roughly the same
   * wall-clock duration, and because blocks are naturally limited to occur
   * every 600s on average, the minimum granularity for time-based relative
   * lock-time is fixed at 512 seconds.  Converting from CTxIn::nSequence to
   * seconds is performed by multiplying by 512 = 2^9, or equivalently
   * shifting up by 9 bits. */
  TxIn.SEQUENCE_LOCKTIME_GRANULARITY = 9;

  return TxIn;
};

inject = require('injecter')(inject, dependencies);
var TxIn = inject();
module.exports = TxIn;

}).call(this,require("buffer").Buffer)

},{"./bw":323,"./op-code":329,"./script":334,"./struct":336,"./var-int":342,"buffer":17,"injecter":375}],339:[function(require,module,exports){
/**
 * Transaction Output Map
 * ======================
 *
 * A map from a transaction hash and output number to that particular output.
 * Note that the map is from the transaction *hash*, which is the value that
 * occurs in the blockchain, not the id, which is the reverse of the hash.
 */
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var dependencies = {
  Struct: require('./struct'),
  TxOut: require('./tx-out')
};

var inject = function inject(deps) {
  var Struct = deps.Struct;
  var TxOut = deps.TxOut;

  var TxOutMap = function (_Struct) {
    _inherits(TxOutMap, _Struct);

    function TxOutMap() {
      var map = arguments.length <= 0 || arguments[0] === undefined ? new Map() : arguments[0];

      _classCallCheck(this, TxOutMap);

      return _possibleConstructorReturn(this, Object.getPrototypeOf(TxOutMap).call(this, { map: map }));
    }

    _createClass(TxOutMap, [{
      key: 'toJSON',
      value: function toJSON() {
        var json = {};
        this.map.forEach(function (txOut, label) {
          json[label] = txOut.toHex();
        });
        return json;
      }
    }, {
      key: 'fromJSON',
      value: function fromJSON(json) {
        var _this2 = this;

        Object.keys(json).forEach(function (label) {
          _this2.map.set(label, TxOut.fromHex(json[label]));
        });
        return this;
      }
    }, {
      key: 'add',
      value: function add(txHashBuf, txOutNum, txOut) {
        var label = txHashBuf.toString('hex') + ':' + txOutNum;
        this.map.set(label, txOut);
        return this;
      }
    }, {
      key: 'get',
      value: function get(txHashBuf, txOutNum) {
        var label = txHashBuf.toString('hex') + ':' + txOutNum;
        return this.map.get(label);
      }
    }, {
      key: 'addTx',
      value: function addTx(tx) {
        var _this3 = this;

        var txhashhex = tx.hash().toString('hex');
        tx.txOuts.forEach(function (txOut, index) {
          var label = txhashhex + ':' + index;
          _this3.map.set(label, txOut);
        });
        return this;
      }
    }]);

    return TxOutMap;
  }(Struct);

  return TxOutMap;
};

inject = require('injecter')(inject, dependencies);
var TxOutMap = inject();
module.exports = TxOutMap;

},{"./struct":336,"./tx-out":340,"injecter":375}],340:[function(require,module,exports){
/**
 * Transaction Output
 * ==================
 *
 * An output to a transaction. The way you normally want to make one is with
 * new TxOut(valueBn, script) (i.e., just as with TxIn, you can leave out the
 * scriptVi, since it can be computed automatically.
*/
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var dependencies = {
  Bn: require('./bn'),
  Bw: require('./bw'),
  Script: require('./script'),
  Struct: require('./struct'),
  VarInt: require('./var-int')
};

var inject = function inject(deps) {
  var Bn = deps.Bn;
  var Bw = deps.Bw;
  var Script = deps.Script;
  var Struct = deps.Struct;
  var VarInt = deps.VarInt;

  var TxOut = function (_Struct) {
    _inherits(TxOut, _Struct);

    function TxOut(valueBn, scriptVi, script) {
      _classCallCheck(this, TxOut);

      return _possibleConstructorReturn(this, Object.getPrototypeOf(TxOut).call(this, { valueBn: valueBn, scriptVi: scriptVi, script: script }));
    }

    _createClass(TxOut, [{
      key: 'setScript',
      value: function setScript(script) {
        this.scriptVi = VarInt.fromNumber(script.toBuffer().length);
        this.script = script;
        return this;
      }
    }, {
      key: 'fromProperties',
      value: function fromProperties(valueBn, script) {
        this.fromObject({ valueBn: valueBn });
        this.setScript(script);
        return this;
      }
    }, {
      key: 'fromJSON',
      value: function fromJSON(json) {
        this.fromObject({
          valueBn: new Bn().fromJSON(json.valueBn),
          scriptVi: new VarInt().fromJSON(json.scriptVi),
          script: new Script().fromJSON(json.script)
        });
        return this;
      }
    }, {
      key: 'toJSON',
      value: function toJSON() {
        return {
          valueBn: this.valueBn.toJSON(),
          scriptVi: this.scriptVi.toJSON(),
          script: this.script.toJSON()
        };
      }
    }, {
      key: 'fromBr',
      value: function fromBr(br) {
        this.valueBn = br.readUInt64LEBn();
        this.scriptVi = VarInt.fromNumber(br.readVarIntNum());
        this.script = new Script().fromBuffer(br.read(this.scriptVi.toNumber()));
        return this;
      }
    }, {
      key: 'toBw',
      value: function toBw(bw) {
        if (!bw) {
          bw = new Bw();
        }
        bw.writeUInt64LEBn(this.valueBn);
        bw.write(this.scriptVi.buf);
        bw.write(this.script.toBuffer());
        return bw;
      }
    }], [{
      key: 'fromProperties',
      value: function fromProperties(valueBn, script) {
        return new this().fromProperties(valueBn, script);
      }
    }]);

    return TxOut;
  }(Struct);

  return TxOut;
};

inject = require('injecter')(inject, dependencies);
var TxOut = inject();
module.exports = TxOut;

},{"./bn":321,"./bw":323,"./script":334,"./struct":336,"./var-int":342,"injecter":375}],341:[function(require,module,exports){
(function (Buffer){
/**
 * Transaction
 * ===========
 *
 * A bitcoin transaction.
 */
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var dependencies = {
  Bn: require('./bn'),
  Br: require('./br'),
  Bw: require('./bw'),
  Ecdsa: require('./ecdsa'),
  Hash: require('./hash'),
  Script: require('./script'),
  Sig: require('./sig'),
  Struct: require('./struct'),
  TxIn: require('./tx-in'),
  TxOut: require('./tx-out'),
  VarInt: require('./var-int'),
  Workers: require('./workers'),
  asink: require('asink')
};

var inject = function inject(deps) {
  var Bn = deps.Bn;
  var Br = deps.Br;
  var Bw = deps.Bw;
  var Ecdsa = deps.Ecdsa;
  var Hash = deps.Hash;
  var Script = deps.Script;
  var Sig = deps.Sig;
  var Struct = deps.Struct;
  var TxIn = deps.TxIn;
  var TxOut = deps.TxOut;
  var VarInt = deps.VarInt;
  var Workers = deps.Workers;
  var asink = deps.asink;

  var Tx = function (_Struct) {
    _inherits(Tx, _Struct);

    function Tx() {
      var versionBytesNum = arguments.length <= 0 || arguments[0] === undefined ? 1 : arguments[0];
      var txInsVi = arguments.length <= 1 || arguments[1] === undefined ? VarInt.fromNumber(0) : arguments[1];
      var txIns = arguments.length <= 2 || arguments[2] === undefined ? [] : arguments[2];
      var txOutsVi = arguments.length <= 3 || arguments[3] === undefined ? VarInt.fromNumber(0) : arguments[3];
      var txOuts = arguments.length <= 4 || arguments[4] === undefined ? [] : arguments[4];
      var nLockTime = arguments.length <= 5 || arguments[5] === undefined ? 0 : arguments[5];

      _classCallCheck(this, Tx);

      return _possibleConstructorReturn(this, Object.getPrototypeOf(Tx).call(this, { versionBytesNum: versionBytesNum, txInsVi: txInsVi, txIns: txIns, txOutsVi: txOutsVi, txOuts: txOuts, nLockTime: nLockTime }));
    }

    _createClass(Tx, [{
      key: 'fromJSON',
      value: function fromJSON(json) {
        var txIns = [];
        json.txIns.forEach(function (txIn) {
          txIns.push(new TxIn().fromJSON(txIn));
        });
        var txOuts = [];
        json.txOuts.forEach(function (txOut) {
          txOuts.push(new TxOut().fromJSON(txOut));
        });
        this.fromObject({
          versionBytesNum: json.versionBytesNum,
          txInsVi: new VarInt().fromJSON(json.txInsVi),
          txIns: txIns,
          txOutsVi: new VarInt().fromJSON(json.txOutsVi),
          txOuts: txOuts,
          nLockTime: json.nLockTime
        });
        return this;
      }
    }, {
      key: 'toJSON',
      value: function toJSON() {
        var txIns = [];
        this.txIns.forEach(function (txIn) {
          txIns.push(txIn.toJSON());
        });
        var txOuts = [];
        this.txOuts.forEach(function (txOut) {
          txOuts.push(txOut.toJSON());
        });
        return {
          versionBytesNum: this.versionBytesNum,
          txInsVi: this.txInsVi.toJSON(),
          txIns: txIns,
          txOutsVi: this.txOutsVi.toJSON(),
          txOuts: txOuts,
          nLockTime: this.nLockTime
        };
      }
    }, {
      key: 'fromBr',
      value: function fromBr(br) {
        this.versionBytesNum = br.readUInt32LE();
        this.txInsVi = new VarInt(br.readVarIntBuf());
        var txInsNum = this.txInsVi.toNumber();
        this.txIns = [];
        for (var i = 0; i < txInsNum; i++) {
          this.txIns.push(new TxIn().fromBr(br));
        }
        this.txOutsVi = new VarInt(br.readVarIntBuf());
        var txOutsNum = this.txOutsVi.toNumber();
        this.txOuts = [];
        for (var _i = 0; _i < txOutsNum; _i++) {
          this.txOuts.push(new TxOut().fromBr(br));
        }
        this.nLockTime = br.readUInt32LE();
        return this;
      }
    }, {
      key: 'toBw',
      value: function toBw(bw) {
        if (!bw) {
          bw = new Bw();
        }
        bw.writeUInt32LE(this.versionBytesNum);
        bw.write(this.txInsVi.buf);
        for (var i = 0; i < this.txIns.length; i++) {
          this.txIns[i].toBw(bw);
        }
        bw.write(this.txOutsVi.buf);
        for (var _i2 = 0; _i2 < this.txOuts.length; _i2++) {
          this.txOuts[_i2].toBw(bw);
        }
        bw.writeUInt32LE(this.nLockTime);
        return bw;
      }

      /**
       * For a normal transaction, subScript is usually the scriptPubKey. For a
       * p2sh transaction, subScript is usually the redeemScript. If you're not
       * normal because you're using OP_CODESEPARATORs, you know what to do.
       */

    }, {
      key: 'sighash',
      value: function sighash(nHashType, nIn, subScript) {
        var txcopy = this.cloneByBuffer();

        subScript = new Script().fromBuffer(subScript.toBuffer());
        subScript.removeCodeseparators();

        for (var i = 0; i < txcopy.txIns.length; i++) {
          txcopy.txIns[i] = TxIn.fromBuffer(txcopy.txIns[i].toBuffer()).setScript(new Script());
        }

        txcopy.txIns[nIn] = TxIn.fromBuffer(txcopy.txIns[nIn].toBuffer()).setScript(subScript);

        if ((nHashType & 31) === Sig.SIGHASH_NONE) {
          txcopy.txOuts.length = 0;
          txcopy.txOutsVi = VarInt.fromNumber(0);

          for (var _i3 = 0; _i3 < txcopy.txIns.length; _i3++) {
            if (_i3 !== nIn) {
              txcopy.txIns[_i3].nSequence = 0;
            }
          }
        } else if ((nHashType & 31) === Sig.SIGHASH_SINGLE) {
          // The SIGHASH_SINGLE bug.
          // https://bitcointalk.org/index.php?topic=260595.0
          if (nIn > txcopy.txOuts.length - 1) {
            return new Buffer('0000000000000000000000000000000000000000000000000000000000000001', 'hex');
          }

          txcopy.txOuts.length = nIn + 1;
          txcopy.txOutsVi = VarInt.fromNumber(nIn + 1);

          for (var _i4 = 0; _i4 < txcopy.txOuts.length; _i4++) {
            if (_i4 < nIn) {
              txcopy.txOuts[_i4] = TxOut.fromProperties(new Bn().fromBuffer(new Buffer('ffffffffffffffff', 'hex')), new Script());
            }
          }

          for (var _i5 = 0; _i5 < txcopy.txIns.length; _i5++) {
            if (_i5 !== nIn) {
              txcopy.txIns[_i5].nSequence = 0;
            }
          }
        }
        // else, SIGHASH_ALL

        if (nHashType & Sig.SIGHASH_ANYONECANPAY) {
          txcopy.txIns[0] = txcopy.txIns[nIn];
          txcopy.txIns.length = 1;
          txcopy.txInsVi = VarInt.fromNumber(1);
        }

        var buf = new Bw().write(txcopy.toBuffer()).writeInt32LE(nHashType).toBuffer();
        return new Br(Hash.sha256Sha256(buf)).readReverse();
      }
    }, {
      key: 'asyncSighash',
      value: function asyncSighash(nHashType, nIn, subScript) {
        return asink(regeneratorRuntime.mark(function _callee() {
          var workersResult;
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _context.next = 2;
                  return Workers.asyncObjectMethod(this, 'sighash', [nHashType, nIn, subScript]);

                case 2:
                  workersResult = _context.sent;
                  return _context.abrupt('return', workersResult.resbuf);

                case 4:
                case 'end':
                  return _context.stop();
              }
            }
          }, _callee, this);
        }), this);
      }

      // This function returns a signature but does not update any inputs

    }, {
      key: 'sign',
      value: function sign(keyPair, nHashType, nIn, subScript) {
        var hashBuf = this.sighash(nHashType, nIn, subScript);
        var sig = Ecdsa.sign(hashBuf, keyPair, 'little').fromObject({ nHashType: nHashType });
        return sig;
      }
    }, {
      key: 'asyncSign',
      value: function asyncSign(keyPair, nHashType, nIn, subScript) {
        return asink(regeneratorRuntime.mark(function _callee2() {
          var workersResult;
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  _context2.next = 2;
                  return Workers.asyncObjectMethod(this, 'sign', [keyPair, nHashType, nIn, subScript]);

                case 2:
                  workersResult = _context2.sent;
                  return _context2.abrupt('return', new Sig().fromFastBuffer(workersResult.resbuf));

                case 4:
                case 'end':
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }), this);
      }

      // This function takes a signature as input and does not parse any inputs

    }, {
      key: 'verify',
      value: function verify(sig, pubKey, nIn, subScript) {
        var hashBuf = this.sighash(sig.nHashType, nIn, subScript);
        return Ecdsa.verify(hashBuf, sig, pubKey, 'little');
      }
    }, {
      key: 'asyncVerify',
      value: function asyncVerify(sig, pubKey, nIn, subScript) {
        return asink(regeneratorRuntime.mark(function _callee3() {
          var workersResult;
          return regeneratorRuntime.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  _context3.next = 2;
                  return Workers.asyncObjectMethod(this, 'verify', [sig, pubKey, nIn, subScript]);

                case 2:
                  workersResult = _context3.sent;
                  return _context3.abrupt('return', JSON.parse(workersResult.resbuf.toString()));

                case 4:
                case 'end':
                  return _context3.stop();
              }
            }
          }, _callee3, this);
        }), this);
      }
    }, {
      key: 'hash',
      value: function hash() {
        return Hash.sha256Sha256(this.toBuffer());
      }
    }, {
      key: 'asyncHash',
      value: function asyncHash() {
        return asink(regeneratorRuntime.mark(function _callee4() {
          var workersResult;
          return regeneratorRuntime.wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  _context4.next = 2;
                  return Workers.asyncObjectMethod(this, 'hash', []);

                case 2:
                  workersResult = _context4.sent;
                  return _context4.abrupt('return', workersResult.resbuf);

                case 4:
                case 'end':
                  return _context4.stop();
              }
            }
          }, _callee4, this);
        }), this);
      }
    }, {
      key: 'id',
      value: function id() {
        return new Br(this.hash()).readReverse();
      }
    }, {
      key: 'asyncId',
      value: function asyncId() {
        return asink(regeneratorRuntime.mark(function _callee5() {
          var workersResult;
          return regeneratorRuntime.wrap(function _callee5$(_context5) {
            while (1) {
              switch (_context5.prev = _context5.next) {
                case 0:
                  _context5.next = 2;
                  return Workers.asyncObjectMethod(this, 'id', []);

                case 2:
                  workersResult = _context5.sent;
                  return _context5.abrupt('return', workersResult.resbuf);

                case 4:
                case 'end':
                  return _context5.stop();
              }
            }
          }, _callee5, this);
        }), this);
      }
    }, {
      key: 'addTxIn',
      value: function addTxIn(txHashBuf, txOutNum, script, nSequence) {
        var txIn = void 0;
        if (txHashBuf instanceof TxIn) {
          txIn = txHashBuf;
        } else {
          txIn = new TxIn().fromObject({ txHashBuf: txHashBuf, txOutNum: txOutNum, nSequence: nSequence }).setScript(script);
        }
        this.txIns.push(txIn);
        this.txInsVi = VarInt.fromNumber(this.txInsVi.toNumber() + 1);
        return this;
      }
    }, {
      key: 'addTxOut',
      value: function addTxOut(valueBn, script) {
        var txOut = void 0;
        if (valueBn instanceof TxOut) {
          txOut = valueBn;
        } else {
          txOut = new TxOut().fromObject({ valueBn: valueBn }).setScript(script);
        }
        this.txOuts.push(txOut);
        this.txOutsVi = VarInt.fromNumber(this.txOutsVi.toNumber() + 1);
        return this;
      }

      /**
       * Analagous to bitcoind's IsCoinBase function in transaction.h
       */

    }, {
      key: 'isCoinbase',
      value: function isCoinbase() {
        return this.txIns.length === 1 && this.txIns[0].hasNullInput();
      }
    }]);

    return Tx;
  }(Struct);

  Tx.MAX_MONEY = 21000000 * 1e8;

  return Tx;
};

inject = require('injecter')(inject, dependencies);
var Tx = inject();
module.exports = Tx;

}).call(this,require("buffer").Buffer)

},{"./bn":321,"./br":322,"./bw":323,"./ecdsa":326,"./hash":327,"./script":334,"./sig":335,"./struct":336,"./tx-in":338,"./tx-out":340,"./var-int":342,"./workers":345,"asink":346,"buffer":17,"injecter":375}],342:[function(require,module,exports){
(function (Buffer){
/**
 * VarInt (a.k.a. Compact Size)
 * ============================
 *
 * A varInt is a varible sized integer, and it is a format that is unique to
 * bitcoin, and used throughout bitcoin to represent the length of binary data
 * in a compact format that can take up as little as 1 byte or as much as 9
 * bytes.
 */
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var dependencies = {
  Br: require('./br'),
  Bw: require('./bw'),
  Struct: require('./struct')
};

var inject = function inject(deps) {
  var Br = deps.Br;
  var Bw = deps.Bw;
  var Struct = deps.Struct;

  var VarInt = function (_Struct) {
    _inherits(VarInt, _Struct);

    function VarInt(buf) {
      _classCallCheck(this, VarInt);

      return _possibleConstructorReturn(this, Object.getPrototypeOf(VarInt).call(this, { buf: buf }));
    }

    _createClass(VarInt, [{
      key: 'fromJSON',
      value: function fromJSON(json) {
        this.fromObject({
          buf: new Buffer(json, 'hex')
        });
        return this;
      }
    }, {
      key: 'toJSON',
      value: function toJSON() {
        return this.buf.toString('hex');
      }
    }, {
      key: 'fromBuffer',
      value: function fromBuffer(buf) {
        this.buf = buf;
        return this;
      }
    }, {
      key: 'fromBr',
      value: function fromBr(br) {
        this.buf = br.readVarIntBuf();
        return this;
      }
    }, {
      key: 'fromBn',
      value: function fromBn(bn) {
        this.buf = new Bw().writeVarIntBn(bn).toBuffer();
        return this;
      }
    }, {
      key: 'fromNumber',
      value: function fromNumber(num) {
        this.buf = new Bw().writeVarIntNum(num).toBuffer();
        return this;
      }
    }, {
      key: 'toBuffer',
      value: function toBuffer() {
        return this.buf;
      }
    }, {
      key: 'toBn',
      value: function toBn() {
        return new Br(this.buf).readVarIntBn();
      }
    }, {
      key: 'toNumber',
      value: function toNumber() {
        return new Br(this.buf).readVarIntNum();
      }
    }], [{
      key: 'fromBn',
      value: function fromBn(bn) {
        return new this().fromBn(bn);
      }
    }, {
      key: 'fromNumber',
      value: function fromNumber(num) {
        return new this().fromNumber(num);
      }
    }]);

    return VarInt;
  }(Struct);

  return VarInt;
};

inject = require('injecter')(inject, dependencies);
var VarInt = inject();
module.exports = VarInt;

}).call(this,require("buffer").Buffer)

},{"./br":322,"./bw":323,"./struct":336,"buffer":17,"injecter":375}],343:[function(require,module,exports){
(function (Buffer){
/**
 * WorkersCmd
 * ==========
 *
 * A command sent to a worker. The idea is that you send the worker a object,
 * and a method to perform on that object, and the arguments to that method,
 * all contained inside a WorkersCmd object. The worker will send back a
 * result, which is a WorkersResult object.
 */
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var dependencies = {
  Bw: require('./bw'),
  Struct: require('./struct')
};

var inject = function inject(deps) {
  var Bw = deps.Bw;
  var Struct = deps.Struct;

  var WorkersCmd = function (_Struct) {
    _inherits(WorkersCmd, _Struct);

    function WorkersCmd(objbuf, classname, methodname, args, id) {
      _classCallCheck(this, WorkersCmd);

      return _possibleConstructorReturn(this, Object.getPrototypeOf(WorkersCmd).call(this, { objbuf: objbuf, classname: classname, methodname: methodname, args: args, id: id }));
    }

    /**
     * The arguments to a workers command can be normal javascript objects,
     * buffers, or Yours Bitcoin objects.
     */


    _createClass(WorkersCmd, [{
      key: 'toBw',
      value: function toBw(bw) {
        if (!bw) {
          bw = new Bw();
        }
        var classNameBuf = new Buffer(this.classname);
        bw.writeUInt8(Number(this.isobj));
        bw.writeVarIntNum(classNameBuf.length);
        bw.write(classNameBuf);
        var methodNameBuf = new Buffer(this.methodname);
        bw.writeVarIntNum(methodNameBuf.length);
        bw.write(methodNameBuf);
        bw.writeVarIntNum(this.objbuf.length);
        bw.write(this.objbuf);
        WorkersCmd.argsToBw(bw, this.args);
        bw.writeVarIntNum(this.id);
        return bw;
      }
    }, {
      key: 'fromBr',
      value: function fromBr(br, classes) {
        this.isobj = Boolean(br.readUInt8());
        var classNameLEn = br.readVarIntNum();
        this.classname = br.read(classNameLEn).toString();
        var methodNameLEn = br.readVarIntNum();
        this.methodname = br.read(methodNameLEn).toString();
        var objbuflen = br.readVarIntNum();
        this.objbuf = br.read(objbuflen);
        this.args = WorkersCmd.argsFromBr(br, classes);
        this.id = br.readVarIntNum();
        return this;
      }
    }, {
      key: 'fromObjectMethod',
      value: function fromObjectMethod(obj, methodname, args, id) {
        this.isobj = true;
        this.objbuf = obj.toFastBuffer();
        this.classname = obj.constructor.name;
        this.methodname = methodname;
        this.args = args;
        this.id = id;
        return this;
      }
    }, {
      key: 'fromClassMethod',
      value: function fromClassMethod(classname, methodname, args, id) {
        this.isobj = false;
        this.objbuf = new Buffer(0);
        this.classname = classname;
        this.methodname = methodname;
        this.args = args;
        this.id = id;
        return this;
      }
    }], [{
      key: 'argsToBw',
      value: function argsToBw(bw, args) {
        bw.writeVarIntNum(args.length);
        for (var index in args) {
          var arg = args[index];
          if (Buffer.isBuffer(arg)) {
            // argument is Buffer
            bw.writeUInt8(0); // header byte
            bw.writeVarIntNum(arg.length);
            bw.write(arg);
          } else if (arg instanceof Struct) {
            // argument is Yours Bitcoin object
            bw.writeUInt8(1); // header byte
            var classname = arg.constructor.name;
            bw.writeVarIntNum(classname.length);
            bw.write(new Buffer(classname));
            var buf = arg.toFastBuffer();
            bw.writeVarIntNum(buf.length);
            bw.write(buf);
          } else if (arg === undefined) {
            bw.writeUInt8(2); // header byte
          } else {
            // assume basic javascript type
            bw.writeUInt8(3); // header byte
            var _buf = new Buffer(JSON.stringify(arg));
            bw.writeVarIntNum(_buf.length);
            bw.write(_buf);
          }
        }
        return bw;
      }

      /**
       * The arguments to a workers command can be normal javascript objects,
       * buffers, or Yours Bitcoin objects.
       */

    }, {
      key: 'argsFromBr',
      value: function argsFromBr(br, classes) {
        var argslen = br.readVarIntNum();
        var args = [];
        for (var i = 0; i < argslen; i++) {
          var header = br.readUInt8();
          if (header === 0) {
            // argument is Buffer
            var len = br.readVarIntNum();
            var buf = br.read(len);
            args.push(buf);
          } else if (header === 1) {
            // argument is Yours Bitcoin object
            var classNameLEn = br.readVarIntNum();
            var classname = br.read(classNameLEn).toString();
            var buflen = br.readVarIntNum();
            var _buf2 = br.read(buflen);
            var obj = new classes[classname]().fromFastBuffer(_buf2);
            args.push(obj);
          } else if (header === 2) {
            args.push(undefined);
          } else if (header === 3) {
            // argument is basic javascript type
            var _len = br.readVarIntNum();
            var _buf3 = br.read(_len);
            var _obj = JSON.parse(_buf3.toString());
            args.push(_obj);
          } else {
            throw new Error('invalid header byte for argument');
          }
        }
        return args;
      }
    }, {
      key: 'fromObjectMethod',
      value: function fromObjectMethod(obj, methodname, args, id) {
        return new this().fromObjectMethod(obj, methodname, args, id);
      }
    }, {
      key: 'fromClassMethod',
      value: function fromClassMethod(classname, methodname, args, id) {
        return new this().fromClassMethod(classname, methodname, args, id);
      }
    }]);

    return WorkersCmd;
  }(Struct);

  return WorkersCmd;
};

inject = require('injecter')(inject, dependencies);
var WorkersCmd = inject();
module.exports = WorkersCmd;

}).call(this,require("buffer").Buffer)

},{"./bw":323,"./struct":336,"buffer":17,"injecter":375}],344:[function(require,module,exports){
(function (Buffer){
/**
 * WorkersResult
 * =============
 *
 * A response sent back from a worker to the main thread. Contains the "result"
 * of the computation in the form of a buffer, resbuf. If the actual result is
 * an object with a .toFastBuffer method, the object is converted to a buffer
 * using that method. Otherwise it is JSON serialized into a buffer. The result
 * can also be an error, in which case the isError flag is set.
 */
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var dependencies = {
  Bw: require('./bw'),
  Struct: require('./struct')
};

var inject = function inject(deps) {
  var Bw = deps.Bw;
  var Struct = deps.Struct;

  var WorkersResult = function (_Struct) {
    _inherits(WorkersResult, _Struct);

    function WorkersResult(resbuf, isError, id) {
      _classCallCheck(this, WorkersResult);

      return _possibleConstructorReturn(this, Object.getPrototypeOf(WorkersResult).call(this, { resbuf: resbuf, isError: isError, id: id }));
    }

    _createClass(WorkersResult, [{
      key: 'fromResult',
      value: function fromResult(result, id) {
        if (result.toFastBuffer) {
          this.resbuf = result.toFastBuffer();
        } else if (Buffer.isBuffer(result)) {
          this.resbuf = result;
        } else {
          this.resbuf = new Buffer(JSON.stringify(result));
        }
        this.isError = false;
        this.id = id;
        return this;
      }
    }, {
      key: 'fromError',
      value: function fromError(error, id) {
        this.resbuf = new Buffer(JSON.stringify(error.message));
        this.isError = true;
        this.id = id;
        return this;
      }
    }, {
      key: 'toBw',
      value: function toBw(bw) {
        if (!bw) {
          bw = new Bw();
        }
        bw.writeVarIntNum(this.resbuf.length);
        bw.write(this.resbuf);
        bw.writeUInt8(Number(this.isError));
        bw.writeVarIntNum(this.id);
        return bw;
      }
    }, {
      key: 'fromBr',
      value: function fromBr(br) {
        var resbuflen = br.readVarIntNum();
        this.resbuf = br.read(resbuflen);
        this.isError = Boolean(br.readUInt8());
        this.id = br.readVarIntNum();
        return this;
      }
    }], [{
      key: 'fromResult',
      value: function fromResult(result, id) {
        return new this().fromResult(result, id);
      }
    }]);

    return WorkersResult;
  }(Struct);

  return WorkersResult;
};

inject = require('injecter')(inject, dependencies);
var WorkersResult = inject();
module.exports = WorkersResult;

}).call(this,require("buffer").Buffer)

},{"./bw":323,"./struct":336,"buffer":17,"injecter":375}],345:[function(require,module,exports){
(function (process,Buffer,__dirname){
/* global self */
/**
 * Workers
 * =======
 *
 * Workers manages either processes (in node) or threads (in a browser). The
 * workers are intended to handle CPU-heavy tasks that block IO. This class is
 * a little unusual in that it must use different interfaces whether in node or
 * in the browser. In node, we use node's build-in child_process fork to create
 * new workers we can communicate with. In the browser, we use web workers.
 * Unfortunately, node and web browsers do not have a common interface for
 * workers. There is a node module called webworker-threads for node that
 * mimics the browser's web workers, but unfortunately it does not support
 * require(), and thus isn't very useful in our case. Therefore we fall back to
 * process forks.
 *
 * You probably don't need to use this class directly. Use Work, which will
 * automatically spawn new workers if needed.
 */
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var dependencies = {
  Worker: !process.browser ? require('child_process').spawn : self.Worker,
  WorkersCmd: require('./workers-cmd'),
  WorkersResult: require('./workers-result'),
  path: !process.browser ? require('path') : undefined
};

var inject = function inject(deps) {
  var Worker = deps.Worker;
  var WorkersCmd = deps.WorkersCmd;
  var WorkersResult = deps.WorkersResult;
  var path = deps.path;

  var globalWorkers = void 0;

  var Workers = function () {
    function Workers() {
      var nativeWorkers = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];
      var lastid = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];
      var promisemap = arguments.length <= 2 || arguments[2] === undefined ? new Map() : arguments[2];

      _classCallCheck(this, Workers);

      this.nativeWorkers = nativeWorkers;
      this.lastid = lastid;
      this.promisemap = promisemap;
    }

    _createClass(Workers, [{
      key: 'spawnBrowser',
      value: function spawnBrowser() {
        // TODO: Support more than one worker
        this.nativeWorkers[0] = new Worker(process.env.YOURS_BITCOIN_JS_BASE_URL + process.env.YOURS_BITCOIN_JS_WORKER_FILE);
        this.handleBrowser();
        return this;
      }
    }, {
      key: 'handleBrowser',
      value: function handleBrowser() {
        this.nativeWorkers[0].onerror = function (event) {
          this.onError(event.message + ': ' + event.filename + ':' + event.lineno);
        }.bind(this);
        this.nativeWorkers[0].onmessage = function (event) {
          this.onStdoutData(new Buffer(event.data));
        }.bind(this);
        return this;
      }
    }, {
      key: 'spawnNode',
      value: function spawnNode() {
        // TODO: Support more than one worker
        // TODO: {maxBuffer: 1000*1024}
        this.nativeWorkers[0] = Worker('node', [path.join(__dirname, 'worker-node.js')]);
        this.handleNode();
        return this;
      }
    }, {
      key: 'handleNode',
      value: function handleNode() {
        var _this = this;

        this.nativeWorkers[0].on('error', function (error) {
          _this.onError(error);
        });
        this.nativeWorkers[0].on('exit', function () {
          _this.onError('unexpected exit');
        });
        this.nativeWorkers[0].on('close', function () {
          _this.onError('unexpected close');
        });
        this.nativeWorkers[0].on('disconnect', function () {
          _this.onError('unexpected disconnect');
        });
        this.nativeWorkers[0].stdout.on('data', function (buf) {
          _this.onStdoutData(buf);
        });
        return this;
      }
    }, {
      key: 'onStdoutData',
      value: function onStdoutData(buf) {
        var workersResult = new WorkersResult().fromFastBuffer(buf);
        return this.onResult(workersResult);
      }
    }, {
      key: 'onResult',
      value: function onResult(workersResult) {
        if (!workersResult.isError) {
          var resolve = this.promisemap.get(workersResult.id).resolve;
          resolve(workersResult);
        } else {
          // console.log(workersResult.resbuf.toString()) // throw an error in worker to see output here
          var error = new Error(JSON.parse(workersResult.resbuf.toString()));
          var reject = this.promisemap.get(workersResult.id).reject;
          reject(error);
        }
        this.promisemap.delete(workersResult.id);
        return this;
      }
    }, {
      key: 'onError',
      value: function onError(error) {
        // eslint-disable-line
        return this;
      }
    }, {
      key: 'spawn',
      value: function spawn() {
        if (globalWorkers) {
          console.log('Warning: Spooling up non-global workers.');
        }
        if (process.browser) {
          return this.spawnBrowser();
        } else {
          return this.spawnNode();
        }
      }
    }, {
      key: 'sendBuffer',
      value: function sendBuffer(buf) {
        var buflen = new Buffer(4);
        buflen.writeUInt32BE(buf.length);
        buf = Buffer.concat([buflen, buf]);
        if (process.browser) {
          this.nativeWorkers[0].postMessage(buf);
        } else {
          this.nativeWorkers[0].stdin.write(buf);
        }
        return this;
      }
    }, {
      key: 'asyncObjectMethod',
      value: function asyncObjectMethod(obj, methodname, args, id) {
        var _this2 = this;

        if (!args) {
          throw new Error('must specify args');
        }
        id = id !== undefined ? id : ++this.lastid;
        var workersCmd = new WorkersCmd().fromObjectMethod(obj, methodname, args, id);
        var buf = workersCmd.toFastBuffer();
        return new Promise(function (resolve, reject) {
          _this2.sendBuffer(buf);
          _this2.promisemap.set(id, {
            resolve: resolve,
            reject: reject
          });
        });
      }
    }, {
      key: 'asyncClassMethod',
      value: function asyncClassMethod(classname, methodname, args, id) {
        if (!args) {
          throw new Error('must specify args');
        }
        id = id !== undefined ? id : ++this.lastid;
        var workersCmd = new WorkersCmd().fromClassMethod(classname, methodname, args, id);
        var buf = workersCmd.toFastBuffer();
        return new Promise(function (resolve, reject) {
          this.sendBuffer(buf);
          this.promisemap.set(id, {
            resolve: resolve,
            reject: reject
          });
        }.bind(this));
      }
    }], [{
      key: 'asyncObjectMethod',
      value: function asyncObjectMethod(obj, methodname, args, id) {
        if (!globalWorkers) {
          globalWorkers = new Workers().spawn();
        }
        return globalWorkers.asyncObjectMethod(obj, methodname, args, id);
      }
    }, {
      key: 'asyncClassMethod',
      value: function asyncClassMethod(obj, methodname, args, id) {
        if (!globalWorkers) {
          globalWorkers = new Workers().spawn();
        }
        return globalWorkers.asyncClassMethod(obj, methodname, args, id);
      }
    }, {
      key: 'endGlobalWorkers',
      value: function endGlobalWorkers() {
        if (globalWorkers && !process.browser) {
          // TODO: Support multiple workers.
          globalWorkers.nativeWorkers[0].kill('SIGINT');
          globalWorkers = undefined;
        }
      }
    }]);

    return Workers;
  }();

  return Workers;
};

inject = require('injecter')(inject, dependencies);
var Workers = inject();
module.exports = Workers;

}).call(this,require('_process'),require("buffer").Buffer,"/node_modules/yours-bitcoin/lib")

},{"./workers-cmd":343,"./workers-result":344,"_process":316,"buffer":17,"child_process":16,"injecter":375,"path":315}],346:[function(require,module,exports){
/**
 * asink
 * =====
 *
 * asink is the same thing as, or a rename of, spawn. spawn in turn is a tool
 * for repeatedly calling the .thens of promises yielded by a generator.
 * Basically, this makes it possible to write asynchronous, promisified code
 * with normal try/catches that look just like synchronous code. It creates
 * shorter and easier to understand code. Hypothetically, there will be a
 * feature in the next version of javascript, ES7, called "async functions",
 * which do exactly what asink does. When/if that happens and we can access it
 * in node, we can simply remove all calls to asink and our code should behave
 * in the same way.
 *
 * See:
 * http://tc39.github.io/ecmascript-asyncawait/
 * https://github.com/tc39/ecmascript-asyncawait
 * https://gist.github.com/jakearchibald/31b89cba627924972ad6
 * http://www.html5rocks.com/en/tutorials/es6/promises/
 * https://blogs.windows.com/msedgedev/2015/09/30/asynchronous-code-gets-easier-with-es2016-async-function-support-in-chakra-and-microsoft-edge/
 */
'use strict';

function spawn(genF, self) {
  return new Promise(function (resolve, reject) {
    var gen = genF.call(self);
    function step(nextF) {
      var next;
      try {
        next = nextF();
      } catch (e) {
        // finished with failure, reject the promise
        reject(e);
        return;
      }
      if (next.done) {
        // finished with success, resolve the promise
        resolve(next.value);
        return;
      }
      // not finished, chain off the yielded promise and `step` again
      Promise.resolve(next.value).then(function (v) {
        step(function () {
          return gen.next(v);
        });
      }, function (e) {
        step(function () {
          return gen.throw(e);
        });
      });
    }
    step(function () {
      return gen.next(undefined);
    });
  });
}
module.exports = spawn;

},{}],347:[function(require,module,exports){
// base-x encoding
// Forked from https://github.com/cryptocoinjs/bs58
// Originally written by Mike Hearn for BitcoinJ
// Copyright (c) 2011 Google Inc
// Ported to JavaScript by Stefan Thomas
// Merged Buffer refactorings from base58-native by Stephen Pair
// Copyright (c) 2013 BitPay Inc

module.exports = function base (ALPHABET) {
  var ALPHABET_MAP = {}
  var BASE = ALPHABET.length
  var LEADER = ALPHABET.charAt(0)

  // pre-compute lookup table
  for (var i = 0; i < ALPHABET.length; i++) {
    ALPHABET_MAP[ALPHABET.charAt(i)] = i
  }

  function encode (source) {
    if (source.length === 0) return ''

    var digits = [0]
    for (var i = 0; i < source.length; ++i) {
      for (var j = 0, carry = source[i]; j < digits.length; ++j) {
        carry += digits[j] << 8
        digits[j] = carry % BASE
        carry = (carry / BASE) | 0
      }

      while (carry > 0) {
        digits.push(carry % BASE)
        carry = (carry / BASE) | 0
      }
    }

    // deal with leading zeros
    for (var k = 0; source[k] === 0 && k < source.length - 1; ++k) {
      digits.push(0)
    }

    // convert digits to a string
    for (var ii = 0, jj = digits.length - 1; ii <= jj; ++ii, --jj) {
      var tmp = ALPHABET[digits[ii]]
      digits[ii] = ALPHABET[digits[jj]]
      digits[jj] = tmp
    }

    return digits.join('')
  }

  function decode (string) {
    if (string.length === 0) return []

    var bytes = [0]
    for (var i = 0; i < string.length; i++) {
      var value = ALPHABET_MAP[string[i]]
      if (value === undefined) throw new Error('Non-base' + BASE + ' character')

      for (var j = 0, carry = value; j < bytes.length; ++j) {
        carry += bytes[j] * BASE
        bytes[j] = carry & 0xff
        carry >>= 8
      }

      while (carry > 0) {
        bytes.push(carry & 0xff)
        carry >>= 8
      }
    }

    // deal with leading zeros
    for (var k = 0; string[k] === LEADER && k < string.length - 1; ++k) {
      bytes.push(0)
    }

    return bytes.reverse()
  }

  return {
    encode: encode,
    decode: decode
  }
}

},{}],348:[function(require,module,exports){
(function (module, exports) {
  'use strict';

  // Utils
  function assert (val, msg) {
    if (!val) throw new Error(msg || 'Assertion failed');
  }

  // Could use `inherits` module, but don't want to move from single file
  // architecture yet.
  function inherits (ctor, superCtor) {
    ctor.super_ = superCtor;
    var TempCtor = function () {};
    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  }

  // BN

  function BN (number, base, endian) {
    if (BN.isBN(number)) {
      return number;
    }

    this.negative = 0;
    this.words = null;
    this.length = 0;

    // Reduction context
    this.red = null;

    if (number !== null) {
      if (base === 'le' || base === 'be') {
        endian = base;
        base = 10;
      }

      this._init(number || 0, base || 10, endian || 'be');
    }
  }
  if (typeof module === 'object') {
    module.exports = BN;
  } else {
    exports.BN = BN;
  }

  BN.BN = BN;
  BN.wordSize = 26;

  var Buffer;
  try {
    Buffer = require('buf' + 'fer').Buffer;
  } catch (e) {
  }

  BN.isBN = function isBN (num) {
    return num !== null && typeof num === 'object' &&
      num.constructor.name === 'BN' && Array.isArray(num.words);
  };

  BN.max = function max (left, right) {
    if (left.cmp(right) > 0) return left;
    return right;
  };

  BN.min = function min (left, right) {
    if (left.cmp(right) < 0) return left;
    return right;
  };

  BN.prototype._init = function init (number, base, endian) {
    if (typeof number === 'number') {
      return this._initNumber(number, base, endian);
    }

    if (typeof number === 'object') {
      return this._initArray(number, base, endian);
    }

    if (base === 'hex') {
      base = 16;
    }
    assert(base === (base | 0) && base >= 2 && base <= 36);

    number = number.toString().replace(/\s+/g, '');
    var start = 0;
    if (number[0] === '-') {
      start++;
    }

    if (base === 16) {
      this._parseHex(number, start);
    } else {
      this._parseBase(number, base, start);
    }

    if (number[0] === '-') {
      this.negative = 1;
    }

    this.strip();

    if (endian !== 'le') return;

    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initNumber = function _initNumber (number, base, endian) {
    if (number < 0) {
      this.negative = 1;
      number = -number;
    }
    if (number < 0x4000000) {
      this.words = [ number & 0x3ffffff ];
      this.length = 1;
    } else if (number < 0x10000000000000) {
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff
      ];
      this.length = 2;
    } else {
      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff,
        1
      ];
      this.length = 3;
    }

    if (endian !== 'le') return;

    // Reverse the bytes
    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initArray = function _initArray (number, base, endian) {
    // Perhaps a Uint8Array
    assert(typeof number.length === 'number');
    if (number.length <= 0) {
      this.words = [ 0 ];
      this.length = 1;
      return this;
    }

    this.length = Math.ceil(number.length / 3);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    var off = 0;
    if (endian === 'be') {
      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    } else if (endian === 'le') {
      for (i = 0, j = 0; i < number.length; i += 3) {
        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    }
    return this.strip();
  };

  function parseHex (str, start, end) {
    var r = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r <<= 4;

      // 'a' - 'f'
      if (c >= 49 && c <= 54) {
        r |= c - 49 + 0xa;

      // 'A' - 'F'
      } else if (c >= 17 && c <= 22) {
        r |= c - 17 + 0xa;

      // '0' - '9'
      } else {
        r |= c & 0xf;
      }
    }
    return r;
  }

  BN.prototype._parseHex = function _parseHex (number, start) {
    // Create possibly bigger array to ensure that it fits the number
    this.length = Math.ceil((number.length - start) / 6);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    // Scan 24-bit chunks and add them to the number
    var off = 0;
    for (i = number.length - 6, j = 0; i >= start; i -= 6) {
      w = parseHex(number, i, i + 6);
      this.words[j] |= (w << off) & 0x3ffffff;
      // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb
      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
      off += 24;
      if (off >= 26) {
        off -= 26;
        j++;
      }
    }
    if (i + 6 !== start) {
      w = parseHex(number, start, i + 6);
      this.words[j] |= (w << off) & 0x3ffffff;
      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
    }
    this.strip();
  };

  function parseBase (str, start, end, mul) {
    var r = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r *= mul;

      // 'a'
      if (c >= 49) {
        r += c - 49 + 0xa;

      // 'A'
      } else if (c >= 17) {
        r += c - 17 + 0xa;

      // '0' - '9'
      } else {
        r += c;
      }
    }
    return r;
  }

  BN.prototype._parseBase = function _parseBase (number, base, start) {
    // Initialize as zero
    this.words = [ 0 ];
    this.length = 1;

    // Find length of limb in base
    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
      limbLen++;
    }
    limbLen--;
    limbPow = (limbPow / base) | 0;

    var total = number.length - start;
    var mod = total % limbLen;
    var end = Math.min(total, total - mod) + start;

    var word = 0;
    for (var i = start; i < end; i += limbLen) {
      word = parseBase(number, i, i + limbLen, base);

      this.imuln(limbPow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    if (mod !== 0) {
      var pow = 1;
      word = parseBase(number, i, number.length, base);

      for (i = 0; i < mod; i++) {
        pow *= base;
      }

      this.imuln(pow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }
  };

  BN.prototype.copy = function copy (dest) {
    dest.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      dest.words[i] = this.words[i];
    }
    dest.length = this.length;
    dest.negative = this.negative;
    dest.red = this.red;
  };

  BN.prototype.clone = function clone () {
    var r = new BN(null);
    this.copy(r);
    return r;
  };

  BN.prototype._expand = function _expand (size) {
    while (this.length < size) {
      this.words[this.length++] = 0;
    }
    return this;
  };

  // Remove leading `0` from `this`
  BN.prototype.strip = function strip () {
    while (this.length > 1 && this.words[this.length - 1] === 0) {
      this.length--;
    }
    return this._normSign();
  };

  BN.prototype._normSign = function _normSign () {
    // -0 = 0
    if (this.length === 1 && this.words[0] === 0) {
      this.negative = 0;
    }
    return this;
  };

  BN.prototype.inspect = function inspect () {
    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
  };

  /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */

  var zeros = [
    '',
    '0',
    '00',
    '000',
    '0000',
    '00000',
    '000000',
    '0000000',
    '00000000',
    '000000000',
    '0000000000',
    '00000000000',
    '000000000000',
    '0000000000000',
    '00000000000000',
    '000000000000000',
    '0000000000000000',
    '00000000000000000',
    '000000000000000000',
    '0000000000000000000',
    '00000000000000000000',
    '000000000000000000000',
    '0000000000000000000000',
    '00000000000000000000000',
    '000000000000000000000000',
    '0000000000000000000000000'
  ];

  var groupSizes = [
    0, 0,
    25, 16, 12, 11, 10, 9, 8,
    8, 7, 7, 7, 7, 6, 6,
    6, 6, 6, 6, 6, 5, 5,
    5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5
  ];

  var groupBases = [
    0, 0,
    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
  ];

  BN.prototype.toString = function toString (base, padding) {
    base = base || 10;
    padding = padding | 0 || 1;

    var out;
    if (base === 16 || base === 'hex') {
      out = '';
      var off = 0;
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var w = this.words[i];
        var word = (((w << off) | carry) & 0xffffff).toString(16);
        carry = (w >>> (24 - off)) & 0xffffff;
        if (carry !== 0 || i !== this.length - 1) {
          out = zeros[6 - word.length] + word + out;
        } else {
          out = word + out;
        }
        off += 2;
        if (off >= 26) {
          off -= 26;
          i--;
        }
      }
      if (carry !== 0) {
        out = carry.toString(16) + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    if (base === (base | 0) && base >= 2 && base <= 36) {
      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
      var groupSize = groupSizes[base];
      // var groupBase = Math.pow(base, groupSize);
      var groupBase = groupBases[base];
      out = '';
      var c = this.clone();
      c.negative = 0;
      while (!c.isZero()) {
        var r = c.modn(groupBase).toString(base);
        c = c.idivn(groupBase);

        if (!c.isZero()) {
          out = zeros[groupSize - r.length] + r + out;
        } else {
          out = r + out;
        }
      }
      if (this.isZero()) {
        out = '0' + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    assert(false, 'Base should be between 2 and 36');
  };

  BN.prototype.toNumber = function toNumber () {
    var ret = this.words[0];
    if (this.length === 2) {
      ret += this.words[1] * 0x4000000;
    } else if (this.length === 3 && this.words[2] === 0x01) {
      // NOTE: at this stage it is known that the top bit is set
      ret += 0x10000000000000 + (this.words[1] * 0x4000000);
    } else if (this.length > 2) {
      assert(false, 'Number can only safely store up to 53 bits');
    }
    return (this.negative !== 0) ? -ret : ret;
  };

  BN.prototype.toJSON = function toJSON () {
    return this.toString(16);
  };

  BN.prototype.toBuffer = function toBuffer (endian, length) {
    assert(typeof Buffer !== 'undefined');
    return this.toArrayLike(Buffer, endian, length);
  };

  BN.prototype.toArray = function toArray (endian, length) {
    return this.toArrayLike(Array, endian, length);
  };

  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
    var byteLength = this.byteLength();
    var reqLength = length || Math.max(1, byteLength);
    assert(byteLength <= reqLength, 'byte array longer than desired length');
    assert(reqLength > 0, 'Requested array length <= 0');

    this.strip();
    var littleEndian = endian === 'le';
    var res = new ArrayType(reqLength);

    var b, i;
    var q = this.clone();
    if (!littleEndian) {
      // Assume big-endian
      for (i = 0; i < reqLength - byteLength; i++) {
        res[i] = 0;
      }

      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[reqLength - i - 1] = b;
      }
    } else {
      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[i] = b;
      }

      for (; i < reqLength; i++) {
        res[i] = 0;
      }
    }

    return res;
  };

  if (Math.clz32) {
    BN.prototype._countBits = function _countBits (w) {
      return 32 - Math.clz32(w);
    };
  } else {
    BN.prototype._countBits = function _countBits (w) {
      var t = w;
      var r = 0;
      if (t >= 0x1000) {
        r += 13;
        t >>>= 13;
      }
      if (t >= 0x40) {
        r += 7;
        t >>>= 7;
      }
      if (t >= 0x8) {
        r += 4;
        t >>>= 4;
      }
      if (t >= 0x02) {
        r += 2;
        t >>>= 2;
      }
      return r + t;
    };
  }

  BN.prototype._zeroBits = function _zeroBits (w) {
    // Short-cut
    if (w === 0) return 26;

    var t = w;
    var r = 0;
    if ((t & 0x1fff) === 0) {
      r += 13;
      t >>>= 13;
    }
    if ((t & 0x7f) === 0) {
      r += 7;
      t >>>= 7;
    }
    if ((t & 0xf) === 0) {
      r += 4;
      t >>>= 4;
    }
    if ((t & 0x3) === 0) {
      r += 2;
      t >>>= 2;
    }
    if ((t & 0x1) === 0) {
      r++;
    }
    return r;
  };

  // Return number of used bits in a BN
  BN.prototype.bitLength = function bitLength () {
    var w = this.words[this.length - 1];
    var hi = this._countBits(w);
    return (this.length - 1) * 26 + hi;
  };

  function toBitArray (num) {
    var w = new Array(num.bitLength());

    for (var bit = 0; bit < w.length; bit++) {
      var off = (bit / 26) | 0;
      var wbit = bit % 26;

      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
    }

    return w;
  }

  // Number of trailing zero bits
  BN.prototype.zeroBits = function zeroBits () {
    if (this.isZero()) return 0;

    var r = 0;
    for (var i = 0; i < this.length; i++) {
      var b = this._zeroBits(this.words[i]);
      r += b;
      if (b !== 26) break;
    }
    return r;
  };

  BN.prototype.byteLength = function byteLength () {
    return Math.ceil(this.bitLength() / 8);
  };

  BN.prototype.toTwos = function toTwos (width) {
    if (this.negative !== 0) {
      return this.abs().inotn(width).iaddn(1);
    }
    return this.clone();
  };

  BN.prototype.fromTwos = function fromTwos (width) {
    if (this.testn(width - 1)) {
      return this.notn(width).iaddn(1).ineg();
    }
    return this.clone();
  };

  BN.prototype.isNeg = function isNeg () {
    return this.negative !== 0;
  };

  // Return negative clone of `this`
  BN.prototype.neg = function neg () {
    return this.clone().ineg();
  };

  BN.prototype.ineg = function ineg () {
    if (!this.isZero()) {
      this.negative ^= 1;
    }

    return this;
  };

  // Or `num` with `this` in-place
  BN.prototype.iuor = function iuor (num) {
    while (this.length < num.length) {
      this.words[this.length++] = 0;
    }

    for (var i = 0; i < num.length; i++) {
      this.words[i] = this.words[i] | num.words[i];
    }

    return this.strip();
  };

  BN.prototype.ior = function ior (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuor(num);
  };

  // Or `num` with `this`
  BN.prototype.or = function or (num) {
    if (this.length > num.length) return this.clone().ior(num);
    return num.clone().ior(this);
  };

  BN.prototype.uor = function uor (num) {
    if (this.length > num.length) return this.clone().iuor(num);
    return num.clone().iuor(this);
  };

  // And `num` with `this` in-place
  BN.prototype.iuand = function iuand (num) {
    // b = min-length(num, this)
    var b;
    if (this.length > num.length) {
      b = num;
    } else {
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = this.words[i] & num.words[i];
    }

    this.length = b.length;

    return this.strip();
  };

  BN.prototype.iand = function iand (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuand(num);
  };

  // And `num` with `this`
  BN.prototype.and = function and (num) {
    if (this.length > num.length) return this.clone().iand(num);
    return num.clone().iand(this);
  };

  BN.prototype.uand = function uand (num) {
    if (this.length > num.length) return this.clone().iuand(num);
    return num.clone().iuand(this);
  };

  // Xor `num` with `this` in-place
  BN.prototype.iuxor = function iuxor (num) {
    // a.length > b.length
    var a;
    var b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = a.words[i] ^ b.words[i];
    }

    if (this !== a) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = a.length;

    return this.strip();
  };

  BN.prototype.ixor = function ixor (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuxor(num);
  };

  // Xor `num` with `this`
  BN.prototype.xor = function xor (num) {
    if (this.length > num.length) return this.clone().ixor(num);
    return num.clone().ixor(this);
  };

  BN.prototype.uxor = function uxor (num) {
    if (this.length > num.length) return this.clone().iuxor(num);
    return num.clone().iuxor(this);
  };

  // Not ``this`` with ``width`` bitwidth
  BN.prototype.inotn = function inotn (width) {
    assert(typeof width === 'number' && width >= 0);

    var bytesNeeded = Math.ceil(width / 26) | 0;
    var bitsLeft = width % 26;

    // Extend the buffer with leading zeroes
    this._expand(bytesNeeded);

    if (bitsLeft > 0) {
      bytesNeeded--;
    }

    // Handle complete words
    for (var i = 0; i < bytesNeeded; i++) {
      this.words[i] = ~this.words[i] & 0x3ffffff;
    }

    // Handle the residue
    if (bitsLeft > 0) {
      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
    }

    // And remove leading zeroes
    return this.strip();
  };

  BN.prototype.notn = function notn (width) {
    return this.clone().inotn(width);
  };

  // Set `bit` of `this`
  BN.prototype.setn = function setn (bit, val) {
    assert(typeof bit === 'number' && bit >= 0);

    var off = (bit / 26) | 0;
    var wbit = bit % 26;

    this._expand(off + 1);

    if (val) {
      this.words[off] = this.words[off] | (1 << wbit);
    } else {
      this.words[off] = this.words[off] & ~(1 << wbit);
    }

    return this.strip();
  };

  // Add `num` to `this` in-place
  BN.prototype.iadd = function iadd (num) {
    var r;

    // negative + positive
    if (this.negative !== 0 && num.negative === 0) {
      this.negative = 0;
      r = this.isub(num);
      this.negative ^= 1;
      return this._normSign();

    // positive + negative
    } else if (this.negative === 0 && num.negative !== 0) {
      num.negative = 0;
      r = this.isub(num);
      num.negative = 1;
      return r._normSign();
    }

    // a.length > b.length
    var a, b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }

    this.length = a.length;
    if (carry !== 0) {
      this.words[this.length] = carry;
      this.length++;
    // Copy the rest of the words
    } else if (a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    return this;
  };

  // Add `num` to `this`
  BN.prototype.add = function add (num) {
    var res;
    if (num.negative !== 0 && this.negative === 0) {
      num.negative = 0;
      res = this.sub(num);
      num.negative ^= 1;
      return res;
    } else if (num.negative === 0 && this.negative !== 0) {
      this.negative = 0;
      res = num.sub(this);
      this.negative = 1;
      return res;
    }

    if (this.length > num.length) return this.clone().iadd(num);

    return num.clone().iadd(this);
  };

  // Subtract `num` from `this` in-place
  BN.prototype.isub = function isub (num) {
    // this - (-num) = this + num
    if (num.negative !== 0) {
      num.negative = 0;
      var r = this.iadd(num);
      num.negative = 1;
      return r._normSign();

    // -this - num = -(this + num)
    } else if (this.negative !== 0) {
      this.negative = 0;
      this.iadd(num);
      this.negative = 1;
      return this._normSign();
    }

    // At this point both numbers are positive
    var cmp = this.cmp(num);

    // Optimization - zeroify
    if (cmp === 0) {
      this.negative = 0;
      this.length = 1;
      this.words[0] = 0;
      return this;
    }

    // a > b
    var a, b;
    if (cmp > 0) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }

    // Copy rest of the words
    if (carry === 0 && i < a.length && a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = Math.max(this.length, i);

    if (a !== this) {
      this.negative = 1;
    }

    return this.strip();
  };

  // Subtract `num` from `this`
  BN.prototype.sub = function sub (num) {
    return this.clone().isub(num);
  };

  function smallMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    var len = (self.length + num.length) | 0;
    out.length = len;
    len = (len - 1) | 0;

    // Peel one iteration (compiler can't do it, because of code complexity)
    var a = self.words[0] | 0;
    var b = num.words[0] | 0;
    var r = a * b;

    var lo = r & 0x3ffffff;
    var carry = (r / 0x4000000) | 0;
    out.words[0] = lo;

    for (var k = 1; k < len; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = carry >>> 26;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = (k - j) | 0;
        a = self.words[i] | 0;
        b = num.words[j] | 0;
        r = a * b + rword;
        ncarry += (r / 0x4000000) | 0;
        rword = r & 0x3ffffff;
      }
      out.words[k] = rword | 0;
      carry = ncarry | 0;
    }
    if (carry !== 0) {
      out.words[k] = carry | 0;
    } else {
      out.length--;
    }

    return out.strip();
  }

  // TODO(indutny): it may be reasonable to omit it for users who don't need
  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
  // multiplication (like elliptic secp256k1).
  var comb10MulTo = function comb10MulTo (self, num, out) {
    var a = self.words;
    var b = num.words;
    var o = out.words;
    var c = 0;
    var lo;
    var mid;
    var hi;
    var a0 = a[0] | 0;
    var al0 = a0 & 0x1fff;
    var ah0 = a0 >>> 13;
    var a1 = a[1] | 0;
    var al1 = a1 & 0x1fff;
    var ah1 = a1 >>> 13;
    var a2 = a[2] | 0;
    var al2 = a2 & 0x1fff;
    var ah2 = a2 >>> 13;
    var a3 = a[3] | 0;
    var al3 = a3 & 0x1fff;
    var ah3 = a3 >>> 13;
    var a4 = a[4] | 0;
    var al4 = a4 & 0x1fff;
    var ah4 = a4 >>> 13;
    var a5 = a[5] | 0;
    var al5 = a5 & 0x1fff;
    var ah5 = a5 >>> 13;
    var a6 = a[6] | 0;
    var al6 = a6 & 0x1fff;
    var ah6 = a6 >>> 13;
    var a7 = a[7] | 0;
    var al7 = a7 & 0x1fff;
    var ah7 = a7 >>> 13;
    var a8 = a[8] | 0;
    var al8 = a8 & 0x1fff;
    var ah8 = a8 >>> 13;
    var a9 = a[9] | 0;
    var al9 = a9 & 0x1fff;
    var ah9 = a9 >>> 13;
    var b0 = b[0] | 0;
    var bl0 = b0 & 0x1fff;
    var bh0 = b0 >>> 13;
    var b1 = b[1] | 0;
    var bl1 = b1 & 0x1fff;
    var bh1 = b1 >>> 13;
    var b2 = b[2] | 0;
    var bl2 = b2 & 0x1fff;
    var bh2 = b2 >>> 13;
    var b3 = b[3] | 0;
    var bl3 = b3 & 0x1fff;
    var bh3 = b3 >>> 13;
    var b4 = b[4] | 0;
    var bl4 = b4 & 0x1fff;
    var bh4 = b4 >>> 13;
    var b5 = b[5] | 0;
    var bl5 = b5 & 0x1fff;
    var bh5 = b5 >>> 13;
    var b6 = b[6] | 0;
    var bl6 = b6 & 0x1fff;
    var bh6 = b6 >>> 13;
    var b7 = b[7] | 0;
    var bl7 = b7 & 0x1fff;
    var bh7 = b7 >>> 13;
    var b8 = b[8] | 0;
    var bl8 = b8 & 0x1fff;
    var bh8 = b8 >>> 13;
    var b9 = b[9] | 0;
    var bl9 = b9 & 0x1fff;
    var bh9 = b9 >>> 13;

    out.negative = self.negative ^ num.negative;
    out.length = 19;
    /* k = 0 */
    lo = Math.imul(al0, bl0);
    mid = Math.imul(al0, bh0);
    mid = (mid + Math.imul(ah0, bl0)) | 0;
    hi = Math.imul(ah0, bh0);
    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
    w0 &= 0x3ffffff;
    /* k = 1 */
    lo = Math.imul(al1, bl0);
    mid = Math.imul(al1, bh0);
    mid = (mid + Math.imul(ah1, bl0)) | 0;
    hi = Math.imul(ah1, bh0);
    lo = (lo + Math.imul(al0, bl1)) | 0;
    mid = (mid + Math.imul(al0, bh1)) | 0;
    mid = (mid + Math.imul(ah0, bl1)) | 0;
    hi = (hi + Math.imul(ah0, bh1)) | 0;
    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
    w1 &= 0x3ffffff;
    /* k = 2 */
    lo = Math.imul(al2, bl0);
    mid = Math.imul(al2, bh0);
    mid = (mid + Math.imul(ah2, bl0)) | 0;
    hi = Math.imul(ah2, bh0);
    lo = (lo + Math.imul(al1, bl1)) | 0;
    mid = (mid + Math.imul(al1, bh1)) | 0;
    mid = (mid + Math.imul(ah1, bl1)) | 0;
    hi = (hi + Math.imul(ah1, bh1)) | 0;
    lo = (lo + Math.imul(al0, bl2)) | 0;
    mid = (mid + Math.imul(al0, bh2)) | 0;
    mid = (mid + Math.imul(ah0, bl2)) | 0;
    hi = (hi + Math.imul(ah0, bh2)) | 0;
    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
    w2 &= 0x3ffffff;
    /* k = 3 */
    lo = Math.imul(al3, bl0);
    mid = Math.imul(al3, bh0);
    mid = (mid + Math.imul(ah3, bl0)) | 0;
    hi = Math.imul(ah3, bh0);
    lo = (lo + Math.imul(al2, bl1)) | 0;
    mid = (mid + Math.imul(al2, bh1)) | 0;
    mid = (mid + Math.imul(ah2, bl1)) | 0;
    hi = (hi + Math.imul(ah2, bh1)) | 0;
    lo = (lo + Math.imul(al1, bl2)) | 0;
    mid = (mid + Math.imul(al1, bh2)) | 0;
    mid = (mid + Math.imul(ah1, bl2)) | 0;
    hi = (hi + Math.imul(ah1, bh2)) | 0;
    lo = (lo + Math.imul(al0, bl3)) | 0;
    mid = (mid + Math.imul(al0, bh3)) | 0;
    mid = (mid + Math.imul(ah0, bl3)) | 0;
    hi = (hi + Math.imul(ah0, bh3)) | 0;
    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
    w3 &= 0x3ffffff;
    /* k = 4 */
    lo = Math.imul(al4, bl0);
    mid = Math.imul(al4, bh0);
    mid = (mid + Math.imul(ah4, bl0)) | 0;
    hi = Math.imul(ah4, bh0);
    lo = (lo + Math.imul(al3, bl1)) | 0;
    mid = (mid + Math.imul(al3, bh1)) | 0;
    mid = (mid + Math.imul(ah3, bl1)) | 0;
    hi = (hi + Math.imul(ah3, bh1)) | 0;
    lo = (lo + Math.imul(al2, bl2)) | 0;
    mid = (mid + Math.imul(al2, bh2)) | 0;
    mid = (mid + Math.imul(ah2, bl2)) | 0;
    hi = (hi + Math.imul(ah2, bh2)) | 0;
    lo = (lo + Math.imul(al1, bl3)) | 0;
    mid = (mid + Math.imul(al1, bh3)) | 0;
    mid = (mid + Math.imul(ah1, bl3)) | 0;
    hi = (hi + Math.imul(ah1, bh3)) | 0;
    lo = (lo + Math.imul(al0, bl4)) | 0;
    mid = (mid + Math.imul(al0, bh4)) | 0;
    mid = (mid + Math.imul(ah0, bl4)) | 0;
    hi = (hi + Math.imul(ah0, bh4)) | 0;
    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
    w4 &= 0x3ffffff;
    /* k = 5 */
    lo = Math.imul(al5, bl0);
    mid = Math.imul(al5, bh0);
    mid = (mid + Math.imul(ah5, bl0)) | 0;
    hi = Math.imul(ah5, bh0);
    lo = (lo + Math.imul(al4, bl1)) | 0;
    mid = (mid + Math.imul(al4, bh1)) | 0;
    mid = (mid + Math.imul(ah4, bl1)) | 0;
    hi = (hi + Math.imul(ah4, bh1)) | 0;
    lo = (lo + Math.imul(al3, bl2)) | 0;
    mid = (mid + Math.imul(al3, bh2)) | 0;
    mid = (mid + Math.imul(ah3, bl2)) | 0;
    hi = (hi + Math.imul(ah3, bh2)) | 0;
    lo = (lo + Math.imul(al2, bl3)) | 0;
    mid = (mid + Math.imul(al2, bh3)) | 0;
    mid = (mid + Math.imul(ah2, bl3)) | 0;
    hi = (hi + Math.imul(ah2, bh3)) | 0;
    lo = (lo + Math.imul(al1, bl4)) | 0;
    mid = (mid + Math.imul(al1, bh4)) | 0;
    mid = (mid + Math.imul(ah1, bl4)) | 0;
    hi = (hi + Math.imul(ah1, bh4)) | 0;
    lo = (lo + Math.imul(al0, bl5)) | 0;
    mid = (mid + Math.imul(al0, bh5)) | 0;
    mid = (mid + Math.imul(ah0, bl5)) | 0;
    hi = (hi + Math.imul(ah0, bh5)) | 0;
    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
    w5 &= 0x3ffffff;
    /* k = 6 */
    lo = Math.imul(al6, bl0);
    mid = Math.imul(al6, bh0);
    mid = (mid + Math.imul(ah6, bl0)) | 0;
    hi = Math.imul(ah6, bh0);
    lo = (lo + Math.imul(al5, bl1)) | 0;
    mid = (mid + Math.imul(al5, bh1)) | 0;
    mid = (mid + Math.imul(ah5, bl1)) | 0;
    hi = (hi + Math.imul(ah5, bh1)) | 0;
    lo = (lo + Math.imul(al4, bl2)) | 0;
    mid = (mid + Math.imul(al4, bh2)) | 0;
    mid = (mid + Math.imul(ah4, bl2)) | 0;
    hi = (hi + Math.imul(ah4, bh2)) | 0;
    lo = (lo + Math.imul(al3, bl3)) | 0;
    mid = (mid + Math.imul(al3, bh3)) | 0;
    mid = (mid + Math.imul(ah3, bl3)) | 0;
    hi = (hi + Math.imul(ah3, bh3)) | 0;
    lo = (lo + Math.imul(al2, bl4)) | 0;
    mid = (mid + Math.imul(al2, bh4)) | 0;
    mid = (mid + Math.imul(ah2, bl4)) | 0;
    hi = (hi + Math.imul(ah2, bh4)) | 0;
    lo = (lo + Math.imul(al1, bl5)) | 0;
    mid = (mid + Math.imul(al1, bh5)) | 0;
    mid = (mid + Math.imul(ah1, bl5)) | 0;
    hi = (hi + Math.imul(ah1, bh5)) | 0;
    lo = (lo + Math.imul(al0, bl6)) | 0;
    mid = (mid + Math.imul(al0, bh6)) | 0;
    mid = (mid + Math.imul(ah0, bl6)) | 0;
    hi = (hi + Math.imul(ah0, bh6)) | 0;
    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
    w6 &= 0x3ffffff;
    /* k = 7 */
    lo = Math.imul(al7, bl0);
    mid = Math.imul(al7, bh0);
    mid = (mid + Math.imul(ah7, bl0)) | 0;
    hi = Math.imul(ah7, bh0);
    lo = (lo + Math.imul(al6, bl1)) | 0;
    mid = (mid + Math.imul(al6, bh1)) | 0;
    mid = (mid + Math.imul(ah6, bl1)) | 0;
    hi = (hi + Math.imul(ah6, bh1)) | 0;
    lo = (lo + Math.imul(al5, bl2)) | 0;
    mid = (mid + Math.imul(al5, bh2)) | 0;
    mid = (mid + Math.imul(ah5, bl2)) | 0;
    hi = (hi + Math.imul(ah5, bh2)) | 0;
    lo = (lo + Math.imul(al4, bl3)) | 0;
    mid = (mid + Math.imul(al4, bh3)) | 0;
    mid = (mid + Math.imul(ah4, bl3)) | 0;
    hi = (hi + Math.imul(ah4, bh3)) | 0;
    lo = (lo + Math.imul(al3, bl4)) | 0;
    mid = (mid + Math.imul(al3, bh4)) | 0;
    mid = (mid + Math.imul(ah3, bl4)) | 0;
    hi = (hi + Math.imul(ah3, bh4)) | 0;
    lo = (lo + Math.imul(al2, bl5)) | 0;
    mid = (mid + Math.imul(al2, bh5)) | 0;
    mid = (mid + Math.imul(ah2, bl5)) | 0;
    hi = (hi + Math.imul(ah2, bh5)) | 0;
    lo = (lo + Math.imul(al1, bl6)) | 0;
    mid = (mid + Math.imul(al1, bh6)) | 0;
    mid = (mid + Math.imul(ah1, bl6)) | 0;
    hi = (hi + Math.imul(ah1, bh6)) | 0;
    lo = (lo + Math.imul(al0, bl7)) | 0;
    mid = (mid + Math.imul(al0, bh7)) | 0;
    mid = (mid + Math.imul(ah0, bl7)) | 0;
    hi = (hi + Math.imul(ah0, bh7)) | 0;
    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
    w7 &= 0x3ffffff;
    /* k = 8 */
    lo = Math.imul(al8, bl0);
    mid = Math.imul(al8, bh0);
    mid = (mid + Math.imul(ah8, bl0)) | 0;
    hi = Math.imul(ah8, bh0);
    lo = (lo + Math.imul(al7, bl1)) | 0;
    mid = (mid + Math.imul(al7, bh1)) | 0;
    mid = (mid + Math.imul(ah7, bl1)) | 0;
    hi = (hi + Math.imul(ah7, bh1)) | 0;
    lo = (lo + Math.imul(al6, bl2)) | 0;
    mid = (mid + Math.imul(al6, bh2)) | 0;
    mid = (mid + Math.imul(ah6, bl2)) | 0;
    hi = (hi + Math.imul(ah6, bh2)) | 0;
    lo = (lo + Math.imul(al5, bl3)) | 0;
    mid = (mid + Math.imul(al5, bh3)) | 0;
    mid = (mid + Math.imul(ah5, bl3)) | 0;
    hi = (hi + Math.imul(ah5, bh3)) | 0;
    lo = (lo + Math.imul(al4, bl4)) | 0;
    mid = (mid + Math.imul(al4, bh4)) | 0;
    mid = (mid + Math.imul(ah4, bl4)) | 0;
    hi = (hi + Math.imul(ah4, bh4)) | 0;
    lo = (lo + Math.imul(al3, bl5)) | 0;
    mid = (mid + Math.imul(al3, bh5)) | 0;
    mid = (mid + Math.imul(ah3, bl5)) | 0;
    hi = (hi + Math.imul(ah3, bh5)) | 0;
    lo = (lo + Math.imul(al2, bl6)) | 0;
    mid = (mid + Math.imul(al2, bh6)) | 0;
    mid = (mid + Math.imul(ah2, bl6)) | 0;
    hi = (hi + Math.imul(ah2, bh6)) | 0;
    lo = (lo + Math.imul(al1, bl7)) | 0;
    mid = (mid + Math.imul(al1, bh7)) | 0;
    mid = (mid + Math.imul(ah1, bl7)) | 0;
    hi = (hi + Math.imul(ah1, bh7)) | 0;
    lo = (lo + Math.imul(al0, bl8)) | 0;
    mid = (mid + Math.imul(al0, bh8)) | 0;
    mid = (mid + Math.imul(ah0, bl8)) | 0;
    hi = (hi + Math.imul(ah0, bh8)) | 0;
    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
    w8 &= 0x3ffffff;
    /* k = 9 */
    lo = Math.imul(al9, bl0);
    mid = Math.imul(al9, bh0);
    mid = (mid + Math.imul(ah9, bl0)) | 0;
    hi = Math.imul(ah9, bh0);
    lo = (lo + Math.imul(al8, bl1)) | 0;
    mid = (mid + Math.imul(al8, bh1)) | 0;
    mid = (mid + Math.imul(ah8, bl1)) | 0;
    hi = (hi + Math.imul(ah8, bh1)) | 0;
    lo = (lo + Math.imul(al7, bl2)) | 0;
    mid = (mid + Math.imul(al7, bh2)) | 0;
    mid = (mid + Math.imul(ah7, bl2)) | 0;
    hi = (hi + Math.imul(ah7, bh2)) | 0;
    lo = (lo + Math.imul(al6, bl3)) | 0;
    mid = (mid + Math.imul(al6, bh3)) | 0;
    mid = (mid + Math.imul(ah6, bl3)) | 0;
    hi = (hi + Math.imul(ah6, bh3)) | 0;
    lo = (lo + Math.imul(al5, bl4)) | 0;
    mid = (mid + Math.imul(al5, bh4)) | 0;
    mid = (mid + Math.imul(ah5, bl4)) | 0;
    hi = (hi + Math.imul(ah5, bh4)) | 0;
    lo = (lo + Math.imul(al4, bl5)) | 0;
    mid = (mid + Math.imul(al4, bh5)) | 0;
    mid = (mid + Math.imul(ah4, bl5)) | 0;
    hi = (hi + Math.imul(ah4, bh5)) | 0;
    lo = (lo + Math.imul(al3, bl6)) | 0;
    mid = (mid + Math.imul(al3, bh6)) | 0;
    mid = (mid + Math.imul(ah3, bl6)) | 0;
    hi = (hi + Math.imul(ah3, bh6)) | 0;
    lo = (lo + Math.imul(al2, bl7)) | 0;
    mid = (mid + Math.imul(al2, bh7)) | 0;
    mid = (mid + Math.imul(ah2, bl7)) | 0;
    hi = (hi + Math.imul(ah2, bh7)) | 0;
    lo = (lo + Math.imul(al1, bl8)) | 0;
    mid = (mid + Math.imul(al1, bh8)) | 0;
    mid = (mid + Math.imul(ah1, bl8)) | 0;
    hi = (hi + Math.imul(ah1, bh8)) | 0;
    lo = (lo + Math.imul(al0, bl9)) | 0;
    mid = (mid + Math.imul(al0, bh9)) | 0;
    mid = (mid + Math.imul(ah0, bl9)) | 0;
    hi = (hi + Math.imul(ah0, bh9)) | 0;
    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
    w9 &= 0x3ffffff;
    /* k = 10 */
    lo = Math.imul(al9, bl1);
    mid = Math.imul(al9, bh1);
    mid = (mid + Math.imul(ah9, bl1)) | 0;
    hi = Math.imul(ah9, bh1);
    lo = (lo + Math.imul(al8, bl2)) | 0;
    mid = (mid + Math.imul(al8, bh2)) | 0;
    mid = (mid + Math.imul(ah8, bl2)) | 0;
    hi = (hi + Math.imul(ah8, bh2)) | 0;
    lo = (lo + Math.imul(al7, bl3)) | 0;
    mid = (mid + Math.imul(al7, bh3)) | 0;
    mid = (mid + Math.imul(ah7, bl3)) | 0;
    hi = (hi + Math.imul(ah7, bh3)) | 0;
    lo = (lo + Math.imul(al6, bl4)) | 0;
    mid = (mid + Math.imul(al6, bh4)) | 0;
    mid = (mid + Math.imul(ah6, bl4)) | 0;
    hi = (hi + Math.imul(ah6, bh4)) | 0;
    lo = (lo + Math.imul(al5, bl5)) | 0;
    mid = (mid + Math.imul(al5, bh5)) | 0;
    mid = (mid + Math.imul(ah5, bl5)) | 0;
    hi = (hi + Math.imul(ah5, bh5)) | 0;
    lo = (lo + Math.imul(al4, bl6)) | 0;
    mid = (mid + Math.imul(al4, bh6)) | 0;
    mid = (mid + Math.imul(ah4, bl6)) | 0;
    hi = (hi + Math.imul(ah4, bh6)) | 0;
    lo = (lo + Math.imul(al3, bl7)) | 0;
    mid = (mid + Math.imul(al3, bh7)) | 0;
    mid = (mid + Math.imul(ah3, bl7)) | 0;
    hi = (hi + Math.imul(ah3, bh7)) | 0;
    lo = (lo + Math.imul(al2, bl8)) | 0;
    mid = (mid + Math.imul(al2, bh8)) | 0;
    mid = (mid + Math.imul(ah2, bl8)) | 0;
    hi = (hi + Math.imul(ah2, bh8)) | 0;
    lo = (lo + Math.imul(al1, bl9)) | 0;
    mid = (mid + Math.imul(al1, bh9)) | 0;
    mid = (mid + Math.imul(ah1, bl9)) | 0;
    hi = (hi + Math.imul(ah1, bh9)) | 0;
    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
    w10 &= 0x3ffffff;
    /* k = 11 */
    lo = Math.imul(al9, bl2);
    mid = Math.imul(al9, bh2);
    mid = (mid + Math.imul(ah9, bl2)) | 0;
    hi = Math.imul(ah9, bh2);
    lo = (lo + Math.imul(al8, bl3)) | 0;
    mid = (mid + Math.imul(al8, bh3)) | 0;
    mid = (mid + Math.imul(ah8, bl3)) | 0;
    hi = (hi + Math.imul(ah8, bh3)) | 0;
    lo = (lo + Math.imul(al7, bl4)) | 0;
    mid = (mid + Math.imul(al7, bh4)) | 0;
    mid = (mid + Math.imul(ah7, bl4)) | 0;
    hi = (hi + Math.imul(ah7, bh4)) | 0;
    lo = (lo + Math.imul(al6, bl5)) | 0;
    mid = (mid + Math.imul(al6, bh5)) | 0;
    mid = (mid + Math.imul(ah6, bl5)) | 0;
    hi = (hi + Math.imul(ah6, bh5)) | 0;
    lo = (lo + Math.imul(al5, bl6)) | 0;
    mid = (mid + Math.imul(al5, bh6)) | 0;
    mid = (mid + Math.imul(ah5, bl6)) | 0;
    hi = (hi + Math.imul(ah5, bh6)) | 0;
    lo = (lo + Math.imul(al4, bl7)) | 0;
    mid = (mid + Math.imul(al4, bh7)) | 0;
    mid = (mid + Math.imul(ah4, bl7)) | 0;
    hi = (hi + Math.imul(ah4, bh7)) | 0;
    lo = (lo + Math.imul(al3, bl8)) | 0;
    mid = (mid + Math.imul(al3, bh8)) | 0;
    mid = (mid + Math.imul(ah3, bl8)) | 0;
    hi = (hi + Math.imul(ah3, bh8)) | 0;
    lo = (lo + Math.imul(al2, bl9)) | 0;
    mid = (mid + Math.imul(al2, bh9)) | 0;
    mid = (mid + Math.imul(ah2, bl9)) | 0;
    hi = (hi + Math.imul(ah2, bh9)) | 0;
    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
    w11 &= 0x3ffffff;
    /* k = 12 */
    lo = Math.imul(al9, bl3);
    mid = Math.imul(al9, bh3);
    mid = (mid + Math.imul(ah9, bl3)) | 0;
    hi = Math.imul(ah9, bh3);
    lo = (lo + Math.imul(al8, bl4)) | 0;
    mid = (mid + Math.imul(al8, bh4)) | 0;
    mid = (mid + Math.imul(ah8, bl4)) | 0;
    hi = (hi + Math.imul(ah8, bh4)) | 0;
    lo = (lo + Math.imul(al7, bl5)) | 0;
    mid = (mid + Math.imul(al7, bh5)) | 0;
    mid = (mid + Math.imul(ah7, bl5)) | 0;
    hi = (hi + Math.imul(ah7, bh5)) | 0;
    lo = (lo + Math.imul(al6, bl6)) | 0;
    mid = (mid + Math.imul(al6, bh6)) | 0;
    mid = (mid + Math.imul(ah6, bl6)) | 0;
    hi = (hi + Math.imul(ah6, bh6)) | 0;
    lo = (lo + Math.imul(al5, bl7)) | 0;
    mid = (mid + Math.imul(al5, bh7)) | 0;
    mid = (mid + Math.imul(ah5, bl7)) | 0;
    hi = (hi + Math.imul(ah5, bh7)) | 0;
    lo = (lo + Math.imul(al4, bl8)) | 0;
    mid = (mid + Math.imul(al4, bh8)) | 0;
    mid = (mid + Math.imul(ah4, bl8)) | 0;
    hi = (hi + Math.imul(ah4, bh8)) | 0;
    lo = (lo + Math.imul(al3, bl9)) | 0;
    mid = (mid + Math.imul(al3, bh9)) | 0;
    mid = (mid + Math.imul(ah3, bl9)) | 0;
    hi = (hi + Math.imul(ah3, bh9)) | 0;
    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
    w12 &= 0x3ffffff;
    /* k = 13 */
    lo = Math.imul(al9, bl4);
    mid = Math.imul(al9, bh4);
    mid = (mid + Math.imul(ah9, bl4)) | 0;
    hi = Math.imul(ah9, bh4);
    lo = (lo + Math.imul(al8, bl5)) | 0;
    mid = (mid + Math.imul(al8, bh5)) | 0;
    mid = (mid + Math.imul(ah8, bl5)) | 0;
    hi = (hi + Math.imul(ah8, bh5)) | 0;
    lo = (lo + Math.imul(al7, bl6)) | 0;
    mid = (mid + Math.imul(al7, bh6)) | 0;
    mid = (mid + Math.imul(ah7, bl6)) | 0;
    hi = (hi + Math.imul(ah7, bh6)) | 0;
    lo = (lo + Math.imul(al6, bl7)) | 0;
    mid = (mid + Math.imul(al6, bh7)) | 0;
    mid = (mid + Math.imul(ah6, bl7)) | 0;
    hi = (hi + Math.imul(ah6, bh7)) | 0;
    lo = (lo + Math.imul(al5, bl8)) | 0;
    mid = (mid + Math.imul(al5, bh8)) | 0;
    mid = (mid + Math.imul(ah5, bl8)) | 0;
    hi = (hi + Math.imul(ah5, bh8)) | 0;
    lo = (lo + Math.imul(al4, bl9)) | 0;
    mid = (mid + Math.imul(al4, bh9)) | 0;
    mid = (mid + Math.imul(ah4, bl9)) | 0;
    hi = (hi + Math.imul(ah4, bh9)) | 0;
    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
    w13 &= 0x3ffffff;
    /* k = 14 */
    lo = Math.imul(al9, bl5);
    mid = Math.imul(al9, bh5);
    mid = (mid + Math.imul(ah9, bl5)) | 0;
    hi = Math.imul(ah9, bh5);
    lo = (lo + Math.imul(al8, bl6)) | 0;
    mid = (mid + Math.imul(al8, bh6)) | 0;
    mid = (mid + Math.imul(ah8, bl6)) | 0;
    hi = (hi + Math.imul(ah8, bh6)) | 0;
    lo = (lo + Math.imul(al7, bl7)) | 0;
    mid = (mid + Math.imul(al7, bh7)) | 0;
    mid = (mid + Math.imul(ah7, bl7)) | 0;
    hi = (hi + Math.imul(ah7, bh7)) | 0;
    lo = (lo + Math.imul(al6, bl8)) | 0;
    mid = (mid + Math.imul(al6, bh8)) | 0;
    mid = (mid + Math.imul(ah6, bl8)) | 0;
    hi = (hi + Math.imul(ah6, bh8)) | 0;
    lo = (lo + Math.imul(al5, bl9)) | 0;
    mid = (mid + Math.imul(al5, bh9)) | 0;
    mid = (mid + Math.imul(ah5, bl9)) | 0;
    hi = (hi + Math.imul(ah5, bh9)) | 0;
    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
    w14 &= 0x3ffffff;
    /* k = 15 */
    lo = Math.imul(al9, bl6);
    mid = Math.imul(al9, bh6);
    mid = (mid + Math.imul(ah9, bl6)) | 0;
    hi = Math.imul(ah9, bh6);
    lo = (lo + Math.imul(al8, bl7)) | 0;
    mid = (mid + Math.imul(al8, bh7)) | 0;
    mid = (mid + Math.imul(ah8, bl7)) | 0;
    hi = (hi + Math.imul(ah8, bh7)) | 0;
    lo = (lo + Math.imul(al7, bl8)) | 0;
    mid = (mid + Math.imul(al7, bh8)) | 0;
    mid = (mid + Math.imul(ah7, bl8)) | 0;
    hi = (hi + Math.imul(ah7, bh8)) | 0;
    lo = (lo + Math.imul(al6, bl9)) | 0;
    mid = (mid + Math.imul(al6, bh9)) | 0;
    mid = (mid + Math.imul(ah6, bl9)) | 0;
    hi = (hi + Math.imul(ah6, bh9)) | 0;
    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
    w15 &= 0x3ffffff;
    /* k = 16 */
    lo = Math.imul(al9, bl7);
    mid = Math.imul(al9, bh7);
    mid = (mid + Math.imul(ah9, bl7)) | 0;
    hi = Math.imul(ah9, bh7);
    lo = (lo + Math.imul(al8, bl8)) | 0;
    mid = (mid + Math.imul(al8, bh8)) | 0;
    mid = (mid + Math.imul(ah8, bl8)) | 0;
    hi = (hi + Math.imul(ah8, bh8)) | 0;
    lo = (lo + Math.imul(al7, bl9)) | 0;
    mid = (mid + Math.imul(al7, bh9)) | 0;
    mid = (mid + Math.imul(ah7, bl9)) | 0;
    hi = (hi + Math.imul(ah7, bh9)) | 0;
    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
    w16 &= 0x3ffffff;
    /* k = 17 */
    lo = Math.imul(al9, bl8);
    mid = Math.imul(al9, bh8);
    mid = (mid + Math.imul(ah9, bl8)) | 0;
    hi = Math.imul(ah9, bh8);
    lo = (lo + Math.imul(al8, bl9)) | 0;
    mid = (mid + Math.imul(al8, bh9)) | 0;
    mid = (mid + Math.imul(ah8, bl9)) | 0;
    hi = (hi + Math.imul(ah8, bh9)) | 0;
    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
    w17 &= 0x3ffffff;
    /* k = 18 */
    lo = Math.imul(al9, bl9);
    mid = Math.imul(al9, bh9);
    mid = (mid + Math.imul(ah9, bl9)) | 0;
    hi = Math.imul(ah9, bh9);
    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
    w18 &= 0x3ffffff;
    o[0] = w0;
    o[1] = w1;
    o[2] = w2;
    o[3] = w3;
    o[4] = w4;
    o[5] = w5;
    o[6] = w6;
    o[7] = w7;
    o[8] = w8;
    o[9] = w9;
    o[10] = w10;
    o[11] = w11;
    o[12] = w12;
    o[13] = w13;
    o[14] = w14;
    o[15] = w15;
    o[16] = w16;
    o[17] = w17;
    o[18] = w18;
    if (c !== 0) {
      o[19] = c;
      out.length++;
    }
    return out;
  };

  // Polyfill comb
  if (!Math.imul) {
    comb10MulTo = smallMulTo;
  }

  function bigMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    out.length = self.length + num.length;

    var carry = 0;
    var hncarry = 0;
    for (var k = 0; k < out.length - 1; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = hncarry;
      hncarry = 0;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = k - j;
        var a = self.words[i] | 0;
        var b = num.words[j] | 0;
        var r = a * b;

        var lo = r & 0x3ffffff;
        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
        lo = (lo + rword) | 0;
        rword = lo & 0x3ffffff;
        ncarry = (ncarry + (lo >>> 26)) | 0;

        hncarry += ncarry >>> 26;
        ncarry &= 0x3ffffff;
      }
      out.words[k] = rword;
      carry = ncarry;
      ncarry = hncarry;
    }
    if (carry !== 0) {
      out.words[k] = carry;
    } else {
      out.length--;
    }

    return out.strip();
  }

  function jumboMulTo (self, num, out) {
    var fftm = new FFTM();
    return fftm.mulp(self, num, out);
  }

  BN.prototype.mulTo = function mulTo (num, out) {
    var res;
    var len = this.length + num.length;
    if (this.length === 10 && num.length === 10) {
      res = comb10MulTo(this, num, out);
    } else if (len < 63) {
      res = smallMulTo(this, num, out);
    } else if (len < 1024) {
      res = bigMulTo(this, num, out);
    } else {
      res = jumboMulTo(this, num, out);
    }

    return res;
  };

  // Cooley-Tukey algorithm for FFT
  // slightly revisited to rely on looping instead of recursion

  function FFTM (x, y) {
    this.x = x;
    this.y = y;
  }

  FFTM.prototype.makeRBT = function makeRBT (N) {
    var t = new Array(N);
    var l = BN.prototype._countBits(N) - 1;
    for (var i = 0; i < N; i++) {
      t[i] = this.revBin(i, l, N);
    }

    return t;
  };

  // Returns binary-reversed representation of `x`
  FFTM.prototype.revBin = function revBin (x, l, N) {
    if (x === 0 || x === N - 1) return x;

    var rb = 0;
    for (var i = 0; i < l; i++) {
      rb |= (x & 1) << (l - i - 1);
      x >>= 1;
    }

    return rb;
  };

  // Performs "tweedling" phase, therefore 'emulating'
  // behaviour of the recursive algorithm
  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
    for (var i = 0; i < N; i++) {
      rtws[i] = rws[rbt[i]];
      itws[i] = iws[rbt[i]];
    }
  };

  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
    this.permute(rbt, rws, iws, rtws, itws, N);

    for (var s = 1; s < N; s <<= 1) {
      var l = s << 1;

      var rtwdf = Math.cos(2 * Math.PI / l);
      var itwdf = Math.sin(2 * Math.PI / l);

      for (var p = 0; p < N; p += l) {
        var rtwdf_ = rtwdf;
        var itwdf_ = itwdf;

        for (var j = 0; j < s; j++) {
          var re = rtws[p + j];
          var ie = itws[p + j];

          var ro = rtws[p + j + s];
          var io = itws[p + j + s];

          var rx = rtwdf_ * ro - itwdf_ * io;

          io = rtwdf_ * io + itwdf_ * ro;
          ro = rx;

          rtws[p + j] = re + ro;
          itws[p + j] = ie + io;

          rtws[p + j + s] = re - ro;
          itws[p + j + s] = ie - io;

          /* jshint maxdepth : false */
          if (j !== l) {
            rx = rtwdf * rtwdf_ - itwdf * itwdf_;

            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
            rtwdf_ = rx;
          }
        }
      }
    }
  };

  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
    var N = Math.max(m, n) | 1;
    var odd = N & 1;
    var i = 0;
    for (N = N / 2 | 0; N; N = N >>> 1) {
      i++;
    }

    return 1 << i + 1 + odd;
  };

  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
    if (N <= 1) return;

    for (var i = 0; i < N / 2; i++) {
      var t = rws[i];

      rws[i] = rws[N - i - 1];
      rws[N - i - 1] = t;

      t = iws[i];

      iws[i] = -iws[N - i - 1];
      iws[N - i - 1] = -t;
    }
  };

  FFTM.prototype.normalize13b = function normalize13b (ws, N) {
    var carry = 0;
    for (var i = 0; i < N / 2; i++) {
      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
        Math.round(ws[2 * i] / N) +
        carry;

      ws[i] = w & 0x3ffffff;

      if (w < 0x4000000) {
        carry = 0;
      } else {
        carry = w / 0x4000000 | 0;
      }
    }

    return ws;
  };

  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
    var carry = 0;
    for (var i = 0; i < len; i++) {
      carry = carry + (ws[i] | 0);

      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
    }

    // Pad with zeroes
    for (i = 2 * len; i < N; ++i) {
      rws[i] = 0;
    }

    assert(carry === 0);
    assert((carry & ~0x1fff) === 0);
  };

  FFTM.prototype.stub = function stub (N) {
    var ph = new Array(N);
    for (var i = 0; i < N; i++) {
      ph[i] = 0;
    }

    return ph;
  };

  FFTM.prototype.mulp = function mulp (x, y, out) {
    var N = 2 * this.guessLen13b(x.length, y.length);

    var rbt = this.makeRBT(N);

    var _ = this.stub(N);

    var rws = new Array(N);
    var rwst = new Array(N);
    var iwst = new Array(N);

    var nrws = new Array(N);
    var nrwst = new Array(N);
    var niwst = new Array(N);

    var rmws = out.words;
    rmws.length = N;

    this.convert13b(x.words, x.length, rws, N);
    this.convert13b(y.words, y.length, nrws, N);

    this.transform(rws, _, rwst, iwst, N, rbt);
    this.transform(nrws, _, nrwst, niwst, N, rbt);

    for (var i = 0; i < N; i++) {
      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
      rwst[i] = rx;
    }

    this.conjugate(rwst, iwst, N);
    this.transform(rwst, iwst, rmws, _, N, rbt);
    this.conjugate(rmws, _, N);
    this.normalize13b(rmws, N);

    out.negative = x.negative ^ y.negative;
    out.length = x.length + y.length;
    return out.strip();
  };

  // Multiply `this` by `num`
  BN.prototype.mul = function mul (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return this.mulTo(num, out);
  };

  // Multiply employing FFT
  BN.prototype.mulf = function mulf (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return jumboMulTo(this, num, out);
  };

  // In-place Multiplication
  BN.prototype.imul = function imul (num) {
    return this.clone().mulTo(num, this);
  };

  BN.prototype.imuln = function imuln (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);

    // Carry
    var carry = 0;
    for (var i = 0; i < this.length; i++) {
      var w = (this.words[i] | 0) * num;
      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
      carry >>= 26;
      carry += (w / 0x4000000) | 0;
      // NOTE: lo is 27bit maximum
      carry += lo >>> 26;
      this.words[i] = lo & 0x3ffffff;
    }

    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }

    return this;
  };

  BN.prototype.muln = function muln (num) {
    return this.clone().imuln(num);
  };

  // `this` * `this`
  BN.prototype.sqr = function sqr () {
    return this.mul(this);
  };

  // `this` * `this` in-place
  BN.prototype.isqr = function isqr () {
    return this.imul(this.clone());
  };

  // Math.pow(`this`, `num`)
  BN.prototype.pow = function pow (num) {
    var w = toBitArray(num);
    if (w.length === 0) return new BN(1);

    // Skip leading zeroes
    var res = this;
    for (var i = 0; i < w.length; i++, res = res.sqr()) {
      if (w[i] !== 0) break;
    }

    if (++i < w.length) {
      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
        if (w[i] === 0) continue;

        res = res.mul(q);
      }
    }

    return res;
  };

  // Shift-left in-place
  BN.prototype.iushln = function iushln (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;
    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
    var i;

    if (r !== 0) {
      var carry = 0;

      for (i = 0; i < this.length; i++) {
        var newCarry = this.words[i] & carryMask;
        var c = ((this.words[i] | 0) - newCarry) << r;
        this.words[i] = c | carry;
        carry = newCarry >>> (26 - r);
      }

      if (carry) {
        this.words[i] = carry;
        this.length++;
      }
    }

    if (s !== 0) {
      for (i = this.length - 1; i >= 0; i--) {
        this.words[i + s] = this.words[i];
      }

      for (i = 0; i < s; i++) {
        this.words[i] = 0;
      }

      this.length += s;
    }

    return this.strip();
  };

  BN.prototype.ishln = function ishln (bits) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushln(bits);
  };

  // Shift-right in-place
  // NOTE: `hint` is a lowest bit before trailing zeroes
  // NOTE: if `extended` is present - it will be filled with destroyed bits
  BN.prototype.iushrn = function iushrn (bits, hint, extended) {
    assert(typeof bits === 'number' && bits >= 0);
    var h;
    if (hint) {
      h = (hint - (hint % 26)) / 26;
    } else {
      h = 0;
    }

    var r = bits % 26;
    var s = Math.min((bits - r) / 26, this.length);
    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
    var maskedWords = extended;

    h -= s;
    h = Math.max(0, h);

    // Extended mode, copy masked part
    if (maskedWords) {
      for (var i = 0; i < s; i++) {
        maskedWords.words[i] = this.words[i];
      }
      maskedWords.length = s;
    }

    if (s === 0) {
      // No-op, we should not move anything at all
    } else if (this.length > s) {
      this.length -= s;
      for (i = 0; i < this.length; i++) {
        this.words[i] = this.words[i + s];
      }
    } else {
      this.words[0] = 0;
      this.length = 1;
    }

    var carry = 0;
    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
      var word = this.words[i] | 0;
      this.words[i] = (carry << (26 - r)) | (word >>> r);
      carry = word & mask;
    }

    // Push carried bits as a mask
    if (maskedWords && carry !== 0) {
      maskedWords.words[maskedWords.length++] = carry;
    }

    if (this.length === 0) {
      this.words[0] = 0;
      this.length = 1;
    }

    return this.strip();
  };

  BN.prototype.ishrn = function ishrn (bits, hint, extended) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushrn(bits, hint, extended);
  };

  // Shift-left
  BN.prototype.shln = function shln (bits) {
    return this.clone().ishln(bits);
  };

  BN.prototype.ushln = function ushln (bits) {
    return this.clone().iushln(bits);
  };

  // Shift-right
  BN.prototype.shrn = function shrn (bits) {
    return this.clone().ishrn(bits);
  };

  BN.prototype.ushrn = function ushrn (bits) {
    return this.clone().iushrn(bits);
  };

  // Test if n bit is set
  BN.prototype.testn = function testn (bit) {
    assert(typeof bit === 'number' && bit >= 0);
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) return false;

    // Check bit and return
    var w = this.words[s];

    return !!(w & q);
  };

  // Return only lowers bits of number (in-place)
  BN.prototype.imaskn = function imaskn (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;

    assert(this.negative === 0, 'imaskn works only with positive numbers');

    if (r !== 0) {
      s++;
    }
    this.length = Math.min(s, this.length);

    if (r !== 0) {
      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
      this.words[this.length - 1] &= mask;
    }

    return this.strip();
  };

  // Return only lowers bits of number
  BN.prototype.maskn = function maskn (bits) {
    return this.clone().imaskn(bits);
  };

  // Add plain number `num` to `this`
  BN.prototype.iaddn = function iaddn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.isubn(-num);

    // Possible sign change
    if (this.negative !== 0) {
      if (this.length === 1 && (this.words[0] | 0) < num) {
        this.words[0] = num - (this.words[0] | 0);
        this.negative = 0;
        return this;
      }

      this.negative = 0;
      this.isubn(num);
      this.negative = 1;
      return this;
    }

    // Add without checks
    return this._iaddn(num);
  };

  BN.prototype._iaddn = function _iaddn (num) {
    this.words[0] += num;

    // Carry
    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
      this.words[i] -= 0x4000000;
      if (i === this.length - 1) {
        this.words[i + 1] = 1;
      } else {
        this.words[i + 1]++;
      }
    }
    this.length = Math.max(this.length, i + 1);

    return this;
  };

  // Subtract plain number `num` from `this`
  BN.prototype.isubn = function isubn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.iaddn(-num);

    if (this.negative !== 0) {
      this.negative = 0;
      this.iaddn(num);
      this.negative = 1;
      return this;
    }

    this.words[0] -= num;

    if (this.length === 1 && this.words[0] < 0) {
      this.words[0] = -this.words[0];
      this.negative = 1;
    } else {
      // Carry
      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
        this.words[i] += 0x4000000;
        this.words[i + 1] -= 1;
      }
    }

    return this.strip();
  };

  BN.prototype.addn = function addn (num) {
    return this.clone().iaddn(num);
  };

  BN.prototype.subn = function subn (num) {
    return this.clone().isubn(num);
  };

  BN.prototype.iabs = function iabs () {
    this.negative = 0;

    return this;
  };

  BN.prototype.abs = function abs () {
    return this.clone().iabs();
  };

  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
    var len = num.length + shift;
    var i;

    this._expand(len);

    var w;
    var carry = 0;
    for (i = 0; i < num.length; i++) {
      w = (this.words[i + shift] | 0) + carry;
      var right = (num.words[i] | 0) * mul;
      w -= right & 0x3ffffff;
      carry = (w >> 26) - ((right / 0x4000000) | 0);
      this.words[i + shift] = w & 0x3ffffff;
    }
    for (; i < this.length - shift; i++) {
      w = (this.words[i + shift] | 0) + carry;
      carry = w >> 26;
      this.words[i + shift] = w & 0x3ffffff;
    }

    if (carry === 0) return this.strip();

    // Subtraction overflow
    assert(carry === -1);
    carry = 0;
    for (i = 0; i < this.length; i++) {
      w = -(this.words[i] | 0) + carry;
      carry = w >> 26;
      this.words[i] = w & 0x3ffffff;
    }
    this.negative = 1;

    return this.strip();
  };

  BN.prototype._wordDiv = function _wordDiv (num, mode) {
    var shift = this.length - num.length;

    var a = this.clone();
    var b = num;

    // Normalize
    var bhi = b.words[b.length - 1] | 0;
    var bhiBits = this._countBits(bhi);
    shift = 26 - bhiBits;
    if (shift !== 0) {
      b = b.ushln(shift);
      a.iushln(shift);
      bhi = b.words[b.length - 1] | 0;
    }

    // Initialize quotient
    var m = a.length - b.length;
    var q;

    if (mode !== 'mod') {
      q = new BN(null);
      q.length = m + 1;
      q.words = new Array(q.length);
      for (var i = 0; i < q.length; i++) {
        q.words[i] = 0;
      }
    }

    var diff = a.clone()._ishlnsubmul(b, 1, m);
    if (diff.negative === 0) {
      a = diff;
      if (q) {
        q.words[m] = 1;
      }
    }

    for (var j = m - 1; j >= 0; j--) {
      var qj = (a.words[b.length + j] | 0) * 0x4000000 +
        (a.words[b.length + j - 1] | 0);

      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
      // (0x7ffffff)
      qj = Math.min((qj / bhi) | 0, 0x3ffffff);

      a._ishlnsubmul(b, qj, j);
      while (a.negative !== 0) {
        qj--;
        a.negative = 0;
        a._ishlnsubmul(b, 1, j);
        if (!a.isZero()) {
          a.negative ^= 1;
        }
      }
      if (q) {
        q.words[j] = qj;
      }
    }
    if (q) {
      q.strip();
    }
    a.strip();

    // Denormalize
    if (mode !== 'div' && shift !== 0) {
      a.iushrn(shift);
    }

    return {
      div: q || null,
      mod: a
    };
  };

  // NOTE: 1) `mode` can be set to `mod` to request mod only,
  //       to `div` to request div only, or be absent to
  //       request both div & mod
  //       2) `positive` is true if unsigned mod is requested
  BN.prototype.divmod = function divmod (num, mode, positive) {
    assert(!num.isZero());

    if (this.isZero()) {
      return {
        div: new BN(0),
        mod: new BN(0)
      };
    }

    var div, mod, res;
    if (this.negative !== 0 && num.negative === 0) {
      res = this.neg().divmod(num, mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.iadd(num);
        }
      }

      return {
        div: div,
        mod: mod
      };
    }

    if (this.negative === 0 && num.negative !== 0) {
      res = this.divmod(num.neg(), mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      return {
        div: div,
        mod: res.mod
      };
    }

    if ((this.negative & num.negative) !== 0) {
      res = this.neg().divmod(num.neg(), mode);

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.isub(num);
        }
      }

      return {
        div: res.div,
        mod: mod
      };
    }

    // Both numbers are positive at this point

    // Strip both numbers to approximate shift value
    if (num.length > this.length || this.cmp(num) < 0) {
      return {
        div: new BN(0),
        mod: this
      };
    }

    // Very short reduction
    if (num.length === 1) {
      if (mode === 'div') {
        return {
          div: this.divn(num.words[0]),
          mod: null
        };
      }

      if (mode === 'mod') {
        return {
          div: null,
          mod: new BN(this.modn(num.words[0]))
        };
      }

      return {
        div: this.divn(num.words[0]),
        mod: new BN(this.modn(num.words[0]))
      };
    }

    return this._wordDiv(num, mode);
  };

  // Find `this` / `num`
  BN.prototype.div = function div (num) {
    return this.divmod(num, 'div', false).div;
  };

  // Find `this` % `num`
  BN.prototype.mod = function mod (num) {
    return this.divmod(num, 'mod', false).mod;
  };

  BN.prototype.umod = function umod (num) {
    return this.divmod(num, 'mod', true).mod;
  };

  // Find Round(`this` / `num`)
  BN.prototype.divRound = function divRound (num) {
    var dm = this.divmod(num);

    // Fast case - exact division
    if (dm.mod.isZero()) return dm.div;

    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

    var half = num.ushrn(1);
    var r2 = num.andln(1);
    var cmp = mod.cmp(half);

    // Round down
    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

    // Round up
    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
  };

  BN.prototype.modn = function modn (num) {
    assert(num <= 0x3ffffff);
    var p = (1 << 26) % num;

    var acc = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      acc = (p * acc + (this.words[i] | 0)) % num;
    }

    return acc;
  };

  // In-place division by number
  BN.prototype.idivn = function idivn (num) {
    assert(num <= 0x3ffffff);

    var carry = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var w = (this.words[i] | 0) + carry * 0x4000000;
      this.words[i] = (w / num) | 0;
      carry = w % num;
    }

    return this.strip();
  };

  BN.prototype.divn = function divn (num) {
    return this.clone().idivn(num);
  };

  BN.prototype.egcd = function egcd (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var x = this;
    var y = p.clone();

    if (x.negative !== 0) {
      x = x.umod(p);
    } else {
      x = x.clone();
    }

    // A * x + B * y = x
    var A = new BN(1);
    var B = new BN(0);

    // C * x + D * y = y
    var C = new BN(0);
    var D = new BN(1);

    var g = 0;

    while (x.isEven() && y.isEven()) {
      x.iushrn(1);
      y.iushrn(1);
      ++g;
    }

    var yp = y.clone();
    var xp = x.clone();

    while (!x.isZero()) {
      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        x.iushrn(i);
        while (i-- > 0) {
          if (A.isOdd() || B.isOdd()) {
            A.iadd(yp);
            B.isub(xp);
          }

          A.iushrn(1);
          B.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        y.iushrn(j);
        while (j-- > 0) {
          if (C.isOdd() || D.isOdd()) {
            C.iadd(yp);
            D.isub(xp);
          }

          C.iushrn(1);
          D.iushrn(1);
        }
      }

      if (x.cmp(y) >= 0) {
        x.isub(y);
        A.isub(C);
        B.isub(D);
      } else {
        y.isub(x);
        C.isub(A);
        D.isub(B);
      }
    }

    return {
      a: C,
      b: D,
      gcd: y.iushln(g)
    };
  };

  // This is reduced incarnation of the binary EEA
  // above, designated to invert members of the
  // _prime_ fields F(p) at a maximal speed
  BN.prototype._invmp = function _invmp (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var a = this;
    var b = p.clone();

    if (a.negative !== 0) {
      a = a.umod(p);
    } else {
      a = a.clone();
    }

    var x1 = new BN(1);
    var x2 = new BN(0);

    var delta = b.clone();

    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        a.iushrn(i);
        while (i-- > 0) {
          if (x1.isOdd()) {
            x1.iadd(delta);
          }

          x1.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        b.iushrn(j);
        while (j-- > 0) {
          if (x2.isOdd()) {
            x2.iadd(delta);
          }

          x2.iushrn(1);
        }
      }

      if (a.cmp(b) >= 0) {
        a.isub(b);
        x1.isub(x2);
      } else {
        b.isub(a);
        x2.isub(x1);
      }
    }

    var res;
    if (a.cmpn(1) === 0) {
      res = x1;
    } else {
      res = x2;
    }

    if (res.cmpn(0) < 0) {
      res.iadd(p);
    }

    return res;
  };

  BN.prototype.gcd = function gcd (num) {
    if (this.isZero()) return num.abs();
    if (num.isZero()) return this.abs();

    var a = this.clone();
    var b = num.clone();
    a.negative = 0;
    b.negative = 0;

    // Remove common factor of two
    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
      a.iushrn(1);
      b.iushrn(1);
    }

    do {
      while (a.isEven()) {
        a.iushrn(1);
      }
      while (b.isEven()) {
        b.iushrn(1);
      }

      var r = a.cmp(b);
      if (r < 0) {
        // Swap `a` and `b` to make `a` always bigger than `b`
        var t = a;
        a = b;
        b = t;
      } else if (r === 0 || b.cmpn(1) === 0) {
        break;
      }

      a.isub(b);
    } while (true);

    return b.iushln(shift);
  };

  // Invert number in the field F(num)
  BN.prototype.invm = function invm (num) {
    return this.egcd(num).a.umod(num);
  };

  BN.prototype.isEven = function isEven () {
    return (this.words[0] & 1) === 0;
  };

  BN.prototype.isOdd = function isOdd () {
    return (this.words[0] & 1) === 1;
  };

  // And first word and num
  BN.prototype.andln = function andln (num) {
    return this.words[0] & num;
  };

  // Increment at the bit position in-line
  BN.prototype.bincn = function bincn (bit) {
    assert(typeof bit === 'number');
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) {
      this._expand(s + 1);
      this.words[s] |= q;
      return this;
    }

    // Add bit and propagate, if needed
    var carry = q;
    for (var i = s; carry !== 0 && i < this.length; i++) {
      var w = this.words[i] | 0;
      w += carry;
      carry = w >>> 26;
      w &= 0x3ffffff;
      this.words[i] = w;
    }
    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }
    return this;
  };

  BN.prototype.isZero = function isZero () {
    return this.length === 1 && this.words[0] === 0;
  };

  BN.prototype.cmpn = function cmpn (num) {
    var negative = num < 0;

    if (this.negative !== 0 && !negative) return -1;
    if (this.negative === 0 && negative) return 1;

    this.strip();

    var res;
    if (this.length > 1) {
      res = 1;
    } else {
      if (negative) {
        num = -num;
      }

      assert(num <= 0x3ffffff, 'Number is too big');

      var w = this.words[0] | 0;
      res = w === num ? 0 : w < num ? -1 : 1;
    }
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Compare two numbers and return:
  // 1 - if `this` > `num`
  // 0 - if `this` == `num`
  // -1 - if `this` < `num`
  BN.prototype.cmp = function cmp (num) {
    if (this.negative !== 0 && num.negative === 0) return -1;
    if (this.negative === 0 && num.negative !== 0) return 1;

    var res = this.ucmp(num);
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Unsigned comparison
  BN.prototype.ucmp = function ucmp (num) {
    // At this point both numbers have the same sign
    if (this.length > num.length) return 1;
    if (this.length < num.length) return -1;

    var res = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var a = this.words[i] | 0;
      var b = num.words[i] | 0;

      if (a === b) continue;
      if (a < b) {
        res = -1;
      } else if (a > b) {
        res = 1;
      }
      break;
    }
    return res;
  };

  BN.prototype.gtn = function gtn (num) {
    return this.cmpn(num) === 1;
  };

  BN.prototype.gt = function gt (num) {
    return this.cmp(num) === 1;
  };

  BN.prototype.gten = function gten (num) {
    return this.cmpn(num) >= 0;
  };

  BN.prototype.gte = function gte (num) {
    return this.cmp(num) >= 0;
  };

  BN.prototype.ltn = function ltn (num) {
    return this.cmpn(num) === -1;
  };

  BN.prototype.lt = function lt (num) {
    return this.cmp(num) === -1;
  };

  BN.prototype.lten = function lten (num) {
    return this.cmpn(num) <= 0;
  };

  BN.prototype.lte = function lte (num) {
    return this.cmp(num) <= 0;
  };

  BN.prototype.eqn = function eqn (num) {
    return this.cmpn(num) === 0;
  };

  BN.prototype.eq = function eq (num) {
    return this.cmp(num) === 0;
  };

  //
  // A reduce context, could be using montgomery or something better, depending
  // on the `m` itself.
  //
  BN.red = function red (num) {
    return new Red(num);
  };

  BN.prototype.toRed = function toRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    assert(this.negative === 0, 'red works only with positives');
    return ctx.convertTo(this)._forceRed(ctx);
  };

  BN.prototype.fromRed = function fromRed () {
    assert(this.red, 'fromRed works only with numbers in reduction context');
    return this.red.convertFrom(this);
  };

  BN.prototype._forceRed = function _forceRed (ctx) {
    this.red = ctx;
    return this;
  };

  BN.prototype.forceRed = function forceRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    return this._forceRed(ctx);
  };

  BN.prototype.redAdd = function redAdd (num) {
    assert(this.red, 'redAdd works only with red numbers');
    return this.red.add(this, num);
  };

  BN.prototype.redIAdd = function redIAdd (num) {
    assert(this.red, 'redIAdd works only with red numbers');
    return this.red.iadd(this, num);
  };

  BN.prototype.redSub = function redSub (num) {
    assert(this.red, 'redSub works only with red numbers');
    return this.red.sub(this, num);
  };

  BN.prototype.redISub = function redISub (num) {
    assert(this.red, 'redISub works only with red numbers');
    return this.red.isub(this, num);
  };

  BN.prototype.redShl = function redShl (num) {
    assert(this.red, 'redShl works only with red numbers');
    return this.red.shl(this, num);
  };

  BN.prototype.redMul = function redMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.mul(this, num);
  };

  BN.prototype.redIMul = function redIMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.imul(this, num);
  };

  BN.prototype.redSqr = function redSqr () {
    assert(this.red, 'redSqr works only with red numbers');
    this.red._verify1(this);
    return this.red.sqr(this);
  };

  BN.prototype.redISqr = function redISqr () {
    assert(this.red, 'redISqr works only with red numbers');
    this.red._verify1(this);
    return this.red.isqr(this);
  };

  // Square root over p
  BN.prototype.redSqrt = function redSqrt () {
    assert(this.red, 'redSqrt works only with red numbers');
    this.red._verify1(this);
    return this.red.sqrt(this);
  };

  BN.prototype.redInvm = function redInvm () {
    assert(this.red, 'redInvm works only with red numbers');
    this.red._verify1(this);
    return this.red.invm(this);
  };

  // Return negative clone of `this` % `red modulo`
  BN.prototype.redNeg = function redNeg () {
    assert(this.red, 'redNeg works only with red numbers');
    this.red._verify1(this);
    return this.red.neg(this);
  };

  BN.prototype.redPow = function redPow (num) {
    assert(this.red && !num.red, 'redPow(normalNum)');
    this.red._verify1(this);
    return this.red.pow(this, num);
  };

  // Prime numbers with efficient reduction
  var primes = {
    k256: null,
    p224: null,
    p192: null,
    p25519: null
  };

  // Pseudo-Mersenne prime
  function MPrime (name, p) {
    // P = 2 ^ N - K
    this.name = name;
    this.p = new BN(p, 16);
    this.n = this.p.bitLength();
    this.k = new BN(1).iushln(this.n).isub(this.p);

    this.tmp = this._tmp();
  }

  MPrime.prototype._tmp = function _tmp () {
    var tmp = new BN(null);
    tmp.words = new Array(Math.ceil(this.n / 13));
    return tmp;
  };

  MPrime.prototype.ireduce = function ireduce (num) {
    // Assumes that `num` is less than `P^2`
    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
    var r = num;
    var rlen;

    do {
      this.split(r, this.tmp);
      r = this.imulK(r);
      r = r.iadd(this.tmp);
      rlen = r.bitLength();
    } while (rlen > this.n);

    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
    if (cmp === 0) {
      r.words[0] = 0;
      r.length = 1;
    } else if (cmp > 0) {
      r.isub(this.p);
    } else {
      r.strip();
    }

    return r;
  };

  MPrime.prototype.split = function split (input, out) {
    input.iushrn(this.n, 0, out);
  };

  MPrime.prototype.imulK = function imulK (num) {
    return num.imul(this.k);
  };

  function K256 () {
    MPrime.call(
      this,
      'k256',
      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
  }
  inherits(K256, MPrime);

  K256.prototype.split = function split (input, output) {
    // 256 = 9 * 26 + 22
    var mask = 0x3fffff;

    var outLen = Math.min(input.length, 9);
    for (var i = 0; i < outLen; i++) {
      output.words[i] = input.words[i];
    }
    output.length = outLen;

    if (input.length <= 9) {
      input.words[0] = 0;
      input.length = 1;
      return;
    }

    // Shift by 9 limbs
    var prev = input.words[9];
    output.words[output.length++] = prev & mask;

    for (i = 10; i < input.length; i++) {
      var next = input.words[i] | 0;
      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
      prev = next;
    }
    prev >>>= 22;
    input.words[i - 10] = prev;
    if (prev === 0 && input.length > 10) {
      input.length -= 10;
    } else {
      input.length -= 9;
    }
  };

  K256.prototype.imulK = function imulK (num) {
    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
    num.words[num.length] = 0;
    num.words[num.length + 1] = 0;
    num.length += 2;

    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
    var lo = 0;
    for (var i = 0; i < num.length; i++) {
      var w = num.words[i] | 0;
      lo += w * 0x3d1;
      num.words[i] = lo & 0x3ffffff;
      lo = w * 0x40 + ((lo / 0x4000000) | 0);
    }

    // Fast length reduction
    if (num.words[num.length - 1] === 0) {
      num.length--;
      if (num.words[num.length - 1] === 0) {
        num.length--;
      }
    }
    return num;
  };

  function P224 () {
    MPrime.call(
      this,
      'p224',
      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
  }
  inherits(P224, MPrime);

  function P192 () {
    MPrime.call(
      this,
      'p192',
      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
  }
  inherits(P192, MPrime);

  function P25519 () {
    // 2 ^ 255 - 19
    MPrime.call(
      this,
      '25519',
      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
  }
  inherits(P25519, MPrime);

  P25519.prototype.imulK = function imulK (num) {
    // K = 0x13
    var carry = 0;
    for (var i = 0; i < num.length; i++) {
      var hi = (num.words[i] | 0) * 0x13 + carry;
      var lo = hi & 0x3ffffff;
      hi >>>= 26;

      num.words[i] = lo;
      carry = hi;
    }
    if (carry !== 0) {
      num.words[num.length++] = carry;
    }
    return num;
  };

  // Exported mostly for testing purposes, use plain name instead
  BN._prime = function prime (name) {
    // Cached version of prime
    if (primes[name]) return primes[name];

    var prime;
    if (name === 'k256') {
      prime = new K256();
    } else if (name === 'p224') {
      prime = new P224();
    } else if (name === 'p192') {
      prime = new P192();
    } else if (name === 'p25519') {
      prime = new P25519();
    } else {
      throw new Error('Unknown prime ' + name);
    }
    primes[name] = prime;

    return prime;
  };

  //
  // Base reduction engine
  //
  function Red (m) {
    if (typeof m === 'string') {
      var prime = BN._prime(m);
      this.m = prime.p;
      this.prime = prime;
    } else {
      assert(m.gtn(1), 'modulus must be greater than 1');
      this.m = m;
      this.prime = null;
    }
  }

  Red.prototype._verify1 = function _verify1 (a) {
    assert(a.negative === 0, 'red works only with positives');
    assert(a.red, 'red works only with red numbers');
  };

  Red.prototype._verify2 = function _verify2 (a, b) {
    assert((a.negative | b.negative) === 0, 'red works only with positives');
    assert(a.red && a.red === b.red,
      'red works only with red numbers');
  };

  Red.prototype.imod = function imod (a) {
    if (this.prime) return this.prime.ireduce(a)._forceRed(this);
    return a.umod(this.m)._forceRed(this);
  };

  Red.prototype.neg = function neg (a) {
    if (a.isZero()) {
      return a.clone();
    }

    return this.m.sub(a)._forceRed(this);
  };

  Red.prototype.add = function add (a, b) {
    this._verify2(a, b);

    var res = a.add(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.iadd = function iadd (a, b) {
    this._verify2(a, b);

    var res = a.iadd(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res;
  };

  Red.prototype.sub = function sub (a, b) {
    this._verify2(a, b);

    var res = a.sub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.isub = function isub (a, b) {
    this._verify2(a, b);

    var res = a.isub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res;
  };

  Red.prototype.shl = function shl (a, num) {
    this._verify1(a);
    return this.imod(a.ushln(num));
  };

  Red.prototype.imul = function imul (a, b) {
    this._verify2(a, b);
    return this.imod(a.imul(b));
  };

  Red.prototype.mul = function mul (a, b) {
    this._verify2(a, b);
    return this.imod(a.mul(b));
  };

  Red.prototype.isqr = function isqr (a) {
    return this.imul(a, a.clone());
  };

  Red.prototype.sqr = function sqr (a) {
    return this.mul(a, a);
  };

  Red.prototype.sqrt = function sqrt (a) {
    if (a.isZero()) return a.clone();

    var mod3 = this.m.andln(3);
    assert(mod3 % 2 === 1);

    // Fast case
    if (mod3 === 3) {
      var pow = this.m.add(new BN(1)).iushrn(2);
      return this.pow(a, pow);
    }

    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
    //
    // Find Q and S, that Q * 2 ^ S = (P - 1)
    var q = this.m.subn(1);
    var s = 0;
    while (!q.isZero() && q.andln(1) === 0) {
      s++;
      q.iushrn(1);
    }
    assert(!q.isZero());

    var one = new BN(1).toRed(this);
    var nOne = one.redNeg();

    // Find quadratic non-residue
    // NOTE: Max is such because of generalized Riemann hypothesis.
    var lpow = this.m.subn(1).iushrn(1);
    var z = this.m.bitLength();
    z = new BN(2 * z * z).toRed(this);

    while (this.pow(z, lpow).cmp(nOne) !== 0) {
      z.redIAdd(nOne);
    }

    var c = this.pow(z, q);
    var r = this.pow(a, q.addn(1).iushrn(1));
    var t = this.pow(a, q);
    var m = s;
    while (t.cmp(one) !== 0) {
      var tmp = t;
      for (var i = 0; tmp.cmp(one) !== 0; i++) {
        tmp = tmp.redSqr();
      }
      assert(i < m);
      var b = this.pow(c, new BN(1).iushln(m - i - 1));

      r = r.redMul(b);
      c = b.redSqr();
      t = t.redMul(c);
      m = i;
    }

    return r;
  };

  Red.prototype.invm = function invm (a) {
    var inv = a._invmp(this.m);
    if (inv.negative !== 0) {
      inv.negative = 0;
      return this.imod(inv).redNeg();
    } else {
      return this.imod(inv);
    }
  };

  Red.prototype.pow = function pow (a, num) {
    if (num.isZero()) return new BN(1);
    if (num.cmpn(1) === 0) return a.clone();

    var windowSize = 4;
    var wnd = new Array(1 << windowSize);
    wnd[0] = new BN(1).toRed(this);
    wnd[1] = a;
    for (var i = 2; i < wnd.length; i++) {
      wnd[i] = this.mul(wnd[i - 1], a);
    }

    var res = wnd[0];
    var current = 0;
    var currentLen = 0;
    var start = num.bitLength() % 26;
    if (start === 0) {
      start = 26;
    }

    for (i = num.length - 1; i >= 0; i--) {
      var word = num.words[i];
      for (var j = start - 1; j >= 0; j--) {
        var bit = (word >> j) & 1;
        if (res !== wnd[0]) {
          res = this.sqr(res);
        }

        if (bit === 0 && current === 0) {
          currentLen = 0;
          continue;
        }

        current <<= 1;
        current |= bit;
        currentLen++;
        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

        res = this.mul(res, wnd[current]);
        currentLen = 0;
        current = 0;
      }
      start = 26;
    }

    return res;
  };

  Red.prototype.convertTo = function convertTo (num) {
    var r = num.umod(this.m);

    return r === num ? r.clone() : r;
  };

  Red.prototype.convertFrom = function convertFrom (num) {
    var res = num.clone();
    res.red = null;
    return res;
  };

  //
  // Montgomery method engine
  //

  BN.mont = function mont (num) {
    return new Mont(num);
  };

  function Mont (m) {
    Red.call(this, m);

    this.shift = this.m.bitLength();
    if (this.shift % 26 !== 0) {
      this.shift += 26 - (this.shift % 26);
    }

    this.r = new BN(1).iushln(this.shift);
    this.r2 = this.imod(this.r.sqr());
    this.rinv = this.r._invmp(this.m);

    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
    this.minv = this.minv.umod(this.r);
    this.minv = this.r.sub(this.minv);
  }
  inherits(Mont, Red);

  Mont.prototype.convertTo = function convertTo (num) {
    return this.imod(num.ushln(this.shift));
  };

  Mont.prototype.convertFrom = function convertFrom (num) {
    var r = this.imod(num.mul(this.rinv));
    r.red = null;
    return r;
  };

  Mont.prototype.imul = function imul (a, b) {
    if (a.isZero() || b.isZero()) {
      a.words[0] = 0;
      a.length = 1;
      return a;
    }

    var t = a.imul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;

    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.mul = function mul (a, b) {
    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

    var t = a.mul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;
    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.invm = function invm (a) {
    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
    var res = this.imod(a._invmp(this.m).mul(this.r2));
    return res._forceRed(this);
  };
})(typeof module === 'undefined' || module, this);

},{}],349:[function(require,module,exports){
var r;

module.exports = function rand(len) {
  if (!r)
    r = new Rand(null);

  return r.generate(len);
};

function Rand(rand) {
  this.rand = rand;
}
module.exports.Rand = Rand;

Rand.prototype.generate = function generate(len) {
  return this._rand(len);
};

if (typeof window === 'object') {
  if (window.crypto && window.crypto.getRandomValues) {
    // Modern browsers
    Rand.prototype._rand = function _rand(n) {
      var arr = new Uint8Array(n);
      window.crypto.getRandomValues(arr);
      return arr;
    };
  } else if (window.msCrypto && window.msCrypto.getRandomValues) {
    // IE
    Rand.prototype._rand = function _rand(n) {
      var arr = new Uint8Array(n);
      window.msCrypto.getRandomValues(arr);
      return arr;
    };
  } else {
    // Old junk
    Rand.prototype._rand = function() {
      throw new Error('Not implemented yet');
    };
  }
} else {
  // Node.js or Web worker
  try {
    var crypto = require('cry' + 'pto');

    Rand.prototype._rand = function _rand(n) {
      return crypto.randomBytes(n);
    };
  } catch (e) {
    // Emulate crypto API using randy
    Rand.prototype._rand = function _rand(n) {
      var res = new Uint8Array(n);
      for (var i = 0; i < res.length; i++)
        res[i] = this.rand.getByte();
      return res;
    };
  }
}

},{}],350:[function(require,module,exports){
var basex = require('base-x')
var ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'
var base58 = basex(ALPHABET)

module.exports = {
  encode: base58.encode,
  decode: base58.decode
}

},{"base-x":347}],351:[function(require,module,exports){
'use strict';

var elliptic = exports;

elliptic.version = require('../package.json').version;
elliptic.utils = require('./elliptic/utils');
elliptic.rand = require('brorand');
elliptic.hmacDRBG = require('./elliptic/hmac-drbg');
elliptic.curve = require('./elliptic/curve');
elliptic.curves = require('./elliptic/curves');

// Protocols
elliptic.ec = require('./elliptic/ec');
elliptic.eddsa = require('./elliptic/eddsa');

},{"../package.json":367,"./elliptic/curve":354,"./elliptic/curves":357,"./elliptic/ec":358,"./elliptic/eddsa":361,"./elliptic/hmac-drbg":364,"./elliptic/utils":366,"brorand":349}],352:[function(require,module,exports){
'use strict';

var BN = require('bn.js');
var elliptic = require('../../elliptic');
var utils = elliptic.utils;
var getNAF = utils.getNAF;
var getJSF = utils.getJSF;
var assert = utils.assert;

function BaseCurve(type, conf) {
  this.type = type;
  this.p = new BN(conf.p, 16);

  // Use Montgomery, when there is no fast reduction for the prime
  this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);

  // Useful for many curves
  this.zero = new BN(0).toRed(this.red);
  this.one = new BN(1).toRed(this.red);
  this.two = new BN(2).toRed(this.red);

  // Curve configuration, optional
  this.n = conf.n && new BN(conf.n, 16);
  this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);

  // Temporary arrays
  this._wnafT1 = new Array(4);
  this._wnafT2 = new Array(4);
  this._wnafT3 = new Array(4);
  this._wnafT4 = new Array(4);

  // Generalized Greg Maxwell's trick
  var adjustCount = this.n && this.p.div(this.n);
  if (!adjustCount || adjustCount.cmpn(100) > 0) {
    this.redN = null;
  } else {
    this._maxwellTrick = true;
    this.redN = this.n.toRed(this.red);
  }
}
module.exports = BaseCurve;

BaseCurve.prototype.point = function point() {
  throw new Error('Not implemented');
};

BaseCurve.prototype.validate = function validate() {
  throw new Error('Not implemented');
};

BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
  assert(p.precomputed);
  var doubles = p._getDoubles();

  var naf = getNAF(k, 1);
  var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);
  I /= 3;

  // Translate into more windowed form
  var repr = [];
  for (var j = 0; j < naf.length; j += doubles.step) {
    var nafW = 0;
    for (var k = j + doubles.step - 1; k >= j; k--)
      nafW = (nafW << 1) + naf[k];
    repr.push(nafW);
  }

  var a = this.jpoint(null, null, null);
  var b = this.jpoint(null, null, null);
  for (var i = I; i > 0; i--) {
    for (var j = 0; j < repr.length; j++) {
      var nafW = repr[j];
      if (nafW === i)
        b = b.mixedAdd(doubles.points[j]);
      else if (nafW === -i)
        b = b.mixedAdd(doubles.points[j].neg());
    }
    a = a.add(b);
  }
  return a.toP();
};

BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
  var w = 4;

  // Precompute window
  var nafPoints = p._getNAFPoints(w);
  w = nafPoints.wnd;
  var wnd = nafPoints.points;

  // Get NAF form
  var naf = getNAF(k, w);

  // Add `this`*(N+1) for every w-NAF index
  var acc = this.jpoint(null, null, null);
  for (var i = naf.length - 1; i >= 0; i--) {
    // Count zeroes
    for (var k = 0; i >= 0 && naf[i] === 0; i--)
      k++;
    if (i >= 0)
      k++;
    acc = acc.dblp(k);

    if (i < 0)
      break;
    var z = naf[i];
    assert(z !== 0);
    if (p.type === 'affine') {
      // J +- P
      if (z > 0)
        acc = acc.mixedAdd(wnd[(z - 1) >> 1]);
      else
        acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());
    } else {
      // J +- J
      if (z > 0)
        acc = acc.add(wnd[(z - 1) >> 1]);
      else
        acc = acc.add(wnd[(-z - 1) >> 1].neg());
    }
  }
  return p.type === 'affine' ? acc.toP() : acc;
};

BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW,
                                                       points,
                                                       coeffs,
                                                       len,
                                                       jacobianResult) {
  var wndWidth = this._wnafT1;
  var wnd = this._wnafT2;
  var naf = this._wnafT3;

  // Fill all arrays
  var max = 0;
  for (var i = 0; i < len; i++) {
    var p = points[i];
    var nafPoints = p._getNAFPoints(defW);
    wndWidth[i] = nafPoints.wnd;
    wnd[i] = nafPoints.points;
  }

  // Comb small window NAFs
  for (var i = len - 1; i >= 1; i -= 2) {
    var a = i - 1;
    var b = i;
    if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
      naf[a] = getNAF(coeffs[a], wndWidth[a]);
      naf[b] = getNAF(coeffs[b], wndWidth[b]);
      max = Math.max(naf[a].length, max);
      max = Math.max(naf[b].length, max);
      continue;
    }

    var comb = [
      points[a], /* 1 */
      null, /* 3 */
      null, /* 5 */
      points[b] /* 7 */
    ];

    // Try to avoid Projective points, if possible
    if (points[a].y.cmp(points[b].y) === 0) {
      comb[1] = points[a].add(points[b]);
      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
    } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
      comb[1] = points[a].toJ().mixedAdd(points[b]);
      comb[2] = points[a].add(points[b].neg());
    } else {
      comb[1] = points[a].toJ().mixedAdd(points[b]);
      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
    }

    var index = [
      -3, /* -1 -1 */
      -1, /* -1 0 */
      -5, /* -1 1 */
      -7, /* 0 -1 */
      0, /* 0 0 */
      7, /* 0 1 */
      5, /* 1 -1 */
      1, /* 1 0 */
      3  /* 1 1 */
    ];

    var jsf = getJSF(coeffs[a], coeffs[b]);
    max = Math.max(jsf[0].length, max);
    naf[a] = new Array(max);
    naf[b] = new Array(max);
    for (var j = 0; j < max; j++) {
      var ja = jsf[0][j] | 0;
      var jb = jsf[1][j] | 0;

      naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
      naf[b][j] = 0;
      wnd[a] = comb;
    }
  }

  var acc = this.jpoint(null, null, null);
  var tmp = this._wnafT4;
  for (var i = max; i >= 0; i--) {
    var k = 0;

    while (i >= 0) {
      var zero = true;
      for (var j = 0; j < len; j++) {
        tmp[j] = naf[j][i] | 0;
        if (tmp[j] !== 0)
          zero = false;
      }
      if (!zero)
        break;
      k++;
      i--;
    }
    if (i >= 0)
      k++;
    acc = acc.dblp(k);
    if (i < 0)
      break;

    for (var j = 0; j < len; j++) {
      var z = tmp[j];
      var p;
      if (z === 0)
        continue;
      else if (z > 0)
        p = wnd[j][(z - 1) >> 1];
      else if (z < 0)
        p = wnd[j][(-z - 1) >> 1].neg();

      if (p.type === 'affine')
        acc = acc.mixedAdd(p);
      else
        acc = acc.add(p);
    }
  }
  // Zeroify references
  for (var i = 0; i < len; i++)
    wnd[i] = null;

  if (jacobianResult)
    return acc;
  else
    return acc.toP();
};

function BasePoint(curve, type) {
  this.curve = curve;
  this.type = type;
  this.precomputed = null;
}
BaseCurve.BasePoint = BasePoint;

BasePoint.prototype.eq = function eq(/*other*/) {
  throw new Error('Not implemented');
};

BasePoint.prototype.validate = function validate() {
  return this.curve.validate(this);
};

BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
  bytes = utils.toArray(bytes, enc);

  var len = this.p.byteLength();

  // uncompressed, hybrid-odd, hybrid-even
  if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) &&
      bytes.length - 1 === 2 * len) {
    if (bytes[0] === 0x06)
      assert(bytes[bytes.length - 1] % 2 === 0);
    else if (bytes[0] === 0x07)
      assert(bytes[bytes.length - 1] % 2 === 1);

    var res =  this.point(bytes.slice(1, 1 + len),
                          bytes.slice(1 + len, 1 + 2 * len));

    return res;
  } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) &&
              bytes.length - 1 === len) {
    return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
  }
  throw new Error('Unknown point format');
};

BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
  return this.encode(enc, true);
};

BasePoint.prototype._encode = function _encode(compact) {
  var len = this.curve.p.byteLength();
  var x = this.getX().toArray('be', len);

  if (compact)
    return [ this.getY().isEven() ? 0x02 : 0x03 ].concat(x);

  return [ 0x04 ].concat(x, this.getY().toArray('be', len)) ;
};

BasePoint.prototype.encode = function encode(enc, compact) {
  return utils.encode(this._encode(compact), enc);
};

BasePoint.prototype.precompute = function precompute(power) {
  if (this.precomputed)
    return this;

  var precomputed = {
    doubles: null,
    naf: null,
    beta: null
  };
  precomputed.naf = this._getNAFPoints(8);
  precomputed.doubles = this._getDoubles(4, power);
  precomputed.beta = this._getBeta();
  this.precomputed = precomputed;

  return this;
};

BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
  if (!this.precomputed)
    return false;

  var doubles = this.precomputed.doubles;
  if (!doubles)
    return false;

  return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
};

BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
  if (this.precomputed && this.precomputed.doubles)
    return this.precomputed.doubles;

  var doubles = [ this ];
  var acc = this;
  for (var i = 0; i < power; i += step) {
    for (var j = 0; j < step; j++)
      acc = acc.dbl();
    doubles.push(acc);
  }
  return {
    step: step,
    points: doubles
  };
};

BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
  if (this.precomputed && this.precomputed.naf)
    return this.precomputed.naf;

  var res = [ this ];
  var max = (1 << wnd) - 1;
  var dbl = max === 1 ? null : this.dbl();
  for (var i = 1; i < max; i++)
    res[i] = res[i - 1].add(dbl);
  return {
    wnd: wnd,
    points: res
  };
};

BasePoint.prototype._getBeta = function _getBeta() {
  return null;
};

BasePoint.prototype.dblp = function dblp(k) {
  var r = this;
  for (var i = 0; i < k; i++)
    r = r.dbl();
  return r;
};

},{"../../elliptic":351,"bn.js":348}],353:[function(require,module,exports){
'use strict';

var curve = require('../curve');
var elliptic = require('../../elliptic');
var BN = require('bn.js');
var inherits = require('inherits');
var Base = curve.base;

var assert = elliptic.utils.assert;

function EdwardsCurve(conf) {
  // NOTE: Important as we are creating point in Base.call()
  this.twisted = (conf.a | 0) !== 1;
  this.mOneA = this.twisted && (conf.a | 0) === -1;
  this.extended = this.mOneA;

  Base.call(this, 'edwards', conf);

  this.a = new BN(conf.a, 16).umod(this.red.m);
  this.a = this.a.toRed(this.red);
  this.c = new BN(conf.c, 16).toRed(this.red);
  this.c2 = this.c.redSqr();
  this.d = new BN(conf.d, 16).toRed(this.red);
  this.dd = this.d.redAdd(this.d);

  assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);
  this.oneC = (conf.c | 0) === 1;
}
inherits(EdwardsCurve, Base);
module.exports = EdwardsCurve;

EdwardsCurve.prototype._mulA = function _mulA(num) {
  if (this.mOneA)
    return num.redNeg();
  else
    return this.a.redMul(num);
};

EdwardsCurve.prototype._mulC = function _mulC(num) {
  if (this.oneC)
    return num;
  else
    return this.c.redMul(num);
};

// Just for compatibility with Short curve
EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
  return this.point(x, y, z, t);
};

EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
  x = new BN(x, 16);
  if (!x.red)
    x = x.toRed(this.red);

  var x2 = x.redSqr();
  var rhs = this.c2.redSub(this.a.redMul(x2));
  var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));

  var y2 = rhs.redMul(lhs.redInvm());
  var y = y2.redSqrt();
  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  var isOdd = y.fromRed().isOdd();
  if (odd && !isOdd || !odd && isOdd)
    y = y.redNeg();

  return this.point(x, y);
};

EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
  y = new BN(y, 16);
  if (!y.red)
    y = y.toRed(this.red);

  // x^2 = (y^2 - 1) / (d y^2 + 1)
  var y2 = y.redSqr();
  var lhs = y2.redSub(this.one);
  var rhs = y2.redMul(this.d).redAdd(this.one);
  var x2 = lhs.redMul(rhs.redInvm());

  if (x2.cmp(this.zero) === 0) {
    if (odd)
      throw new Error('invalid point');
    else
      return this.point(this.zero, y);
  }

  var x = x2.redSqrt();
  if (x.redSqr().redSub(x2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  if (x.isOdd() !== odd)
    x = x.redNeg();

  return this.point(x, y);
};

EdwardsCurve.prototype.validate = function validate(point) {
  if (point.isInfinity())
    return true;

  // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)
  point.normalize();

  var x2 = point.x.redSqr();
  var y2 = point.y.redSqr();
  var lhs = x2.redMul(this.a).redAdd(y2);
  var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));

  return lhs.cmp(rhs) === 0;
};

function Point(curve, x, y, z, t) {
  Base.BasePoint.call(this, curve, 'projective');
  if (x === null && y === null && z === null) {
    this.x = this.curve.zero;
    this.y = this.curve.one;
    this.z = this.curve.one;
    this.t = this.curve.zero;
    this.zOne = true;
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    this.z = z ? new BN(z, 16) : this.curve.one;
    this.t = t && new BN(t, 16);
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);
    if (this.t && !this.t.red)
      this.t = this.t.toRed(this.curve.red);
    this.zOne = this.z === this.curve.one;

    // Use extended coordinates
    if (this.curve.extended && !this.t) {
      this.t = this.x.redMul(this.y);
      if (!this.zOne)
        this.t = this.t.redMul(this.z.redInvm());
    }
  }
}
inherits(Point, Base.BasePoint);

EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
  return Point.fromJSON(this, obj);
};

EdwardsCurve.prototype.point = function point(x, y, z, t) {
  return new Point(this, x, y, z, t);
};

Point.fromJSON = function fromJSON(curve, obj) {
  return new Point(curve, obj[0], obj[1], obj[2]);
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' y: ' + this.y.fromRed().toString(16, 2) +
      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.x.cmpn(0) === 0 &&
         this.y.cmp(this.z) === 0;
};

Point.prototype._extDbl = function _extDbl() {
  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
  //     #doubling-dbl-2008-hwcd
  // 4M + 4S

  // A = X1^2
  var a = this.x.redSqr();
  // B = Y1^2
  var b = this.y.redSqr();
  // C = 2 * Z1^2
  var c = this.z.redSqr();
  c = c.redIAdd(c);
  // D = a * A
  var d = this.curve._mulA(a);
  // E = (X1 + Y1)^2 - A - B
  var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
  // G = D + B
  var g = d.redAdd(b);
  // F = G - C
  var f = g.redSub(c);
  // H = D - B
  var h = d.redSub(b);
  // X3 = E * F
  var nx = e.redMul(f);
  // Y3 = G * H
  var ny = g.redMul(h);
  // T3 = E * H
  var nt = e.redMul(h);
  // Z3 = F * G
  var nz = f.redMul(g);
  return this.curve.point(nx, ny, nz, nt);
};

Point.prototype._projDbl = function _projDbl() {
  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
  //     #doubling-dbl-2008-bbjlp
  //     #doubling-dbl-2007-bl
  // and others
  // Generally 3M + 4S or 2M + 4S

  // B = (X1 + Y1)^2
  var b = this.x.redAdd(this.y).redSqr();
  // C = X1^2
  var c = this.x.redSqr();
  // D = Y1^2
  var d = this.y.redSqr();

  var nx;
  var ny;
  var nz;
  if (this.curve.twisted) {
    // E = a * C
    var e = this.curve._mulA(c);
    // F = E + D
    var f = e.redAdd(d);
    if (this.zOne) {
      // X3 = (B - C - D) * (F - 2)
      nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
      // Y3 = F * (E - D)
      ny = f.redMul(e.redSub(d));
      // Z3 = F^2 - 2 * F
      nz = f.redSqr().redSub(f).redSub(f);
    } else {
      // H = Z1^2
      var h = this.z.redSqr();
      // J = F - 2 * H
      var j = f.redSub(h).redISub(h);
      // X3 = (B-C-D)*J
      nx = b.redSub(c).redISub(d).redMul(j);
      // Y3 = F * (E - D)
      ny = f.redMul(e.redSub(d));
      // Z3 = F * J
      nz = f.redMul(j);
    }
  } else {
    // E = C + D
    var e = c.redAdd(d);
    // H = (c * Z1)^2
    var h = this.curve._mulC(this.c.redMul(this.z)).redSqr();
    // J = E - 2 * H
    var j = e.redSub(h).redSub(h);
    // X3 = c * (B - E) * J
    nx = this.curve._mulC(b.redISub(e)).redMul(j);
    // Y3 = c * E * (C - D)
    ny = this.curve._mulC(e).redMul(c.redISub(d));
    // Z3 = E * J
    nz = e.redMul(j);
  }
  return this.curve.point(nx, ny, nz);
};

Point.prototype.dbl = function dbl() {
  if (this.isInfinity())
    return this;

  // Double in extended coordinates
  if (this.curve.extended)
    return this._extDbl();
  else
    return this._projDbl();
};

Point.prototype._extAdd = function _extAdd(p) {
  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
  //     #addition-add-2008-hwcd-3
  // 8M

  // A = (Y1 - X1) * (Y2 - X2)
  var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
  // B = (Y1 + X1) * (Y2 + X2)
  var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
  // C = T1 * k * T2
  var c = this.t.redMul(this.curve.dd).redMul(p.t);
  // D = Z1 * 2 * Z2
  var d = this.z.redMul(p.z.redAdd(p.z));
  // E = B - A
  var e = b.redSub(a);
  // F = D - C
  var f = d.redSub(c);
  // G = D + C
  var g = d.redAdd(c);
  // H = B + A
  var h = b.redAdd(a);
  // X3 = E * F
  var nx = e.redMul(f);
  // Y3 = G * H
  var ny = g.redMul(h);
  // T3 = E * H
  var nt = e.redMul(h);
  // Z3 = F * G
  var nz = f.redMul(g);
  return this.curve.point(nx, ny, nz, nt);
};

Point.prototype._projAdd = function _projAdd(p) {
  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
  //     #addition-add-2008-bbjlp
  //     #addition-add-2007-bl
  // 10M + 1S

  // A = Z1 * Z2
  var a = this.z.redMul(p.z);
  // B = A^2
  var b = a.redSqr();
  // C = X1 * X2
  var c = this.x.redMul(p.x);
  // D = Y1 * Y2
  var d = this.y.redMul(p.y);
  // E = d * C * D
  var e = this.curve.d.redMul(c).redMul(d);
  // F = B - E
  var f = b.redSub(e);
  // G = B + E
  var g = b.redAdd(e);
  // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)
  var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
  var nx = a.redMul(f).redMul(tmp);
  var ny;
  var nz;
  if (this.curve.twisted) {
    // Y3 = A * G * (D - a * C)
    ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
    // Z3 = F * G
    nz = f.redMul(g);
  } else {
    // Y3 = A * G * (D - C)
    ny = a.redMul(g).redMul(d.redSub(c));
    // Z3 = c * F * G
    nz = this.curve._mulC(f).redMul(g);
  }
  return this.curve.point(nx, ny, nz);
};

Point.prototype.add = function add(p) {
  if (this.isInfinity())
    return p;
  if (p.isInfinity())
    return this;

  if (this.curve.extended)
    return this._extAdd(p);
  else
    return this._projAdd(p);
};

Point.prototype.mul = function mul(k) {
  if (this._hasDoubles(k))
    return this.curve._fixedNafMul(this, k);
  else
    return this.curve._wnafMul(this, k);
};

Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, false);
};

Point.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, true);
};

Point.prototype.normalize = function normalize() {
  if (this.zOne)
    return this;

  // Normalize coordinates
  var zi = this.z.redInvm();
  this.x = this.x.redMul(zi);
  this.y = this.y.redMul(zi);
  if (this.t)
    this.t = this.t.redMul(zi);
  this.z = this.curve.one;
  this.zOne = true;
  return this;
};

Point.prototype.neg = function neg() {
  return this.curve.point(this.x.redNeg(),
                          this.y,
                          this.z,
                          this.t && this.t.redNeg());
};

Point.prototype.getX = function getX() {
  this.normalize();
  return this.x.fromRed();
};

Point.prototype.getY = function getY() {
  this.normalize();
  return this.y.fromRed();
};

Point.prototype.eq = function eq(other) {
  return this === other ||
         this.getX().cmp(other.getX()) === 0 &&
         this.getY().cmp(other.getY()) === 0;
};

Point.prototype.eqXToP = function eqXToP(x) {
  var rx = x.toRed(this.curve.red).redMul(this.z);
  if (this.x.cmp(rx) === 0)
    return true;

  var xc = x.clone();
  var t = this.curve.redN.redMul(this.z);
  for (;;) {
    xc.iadd(this.curve.n);
    if (xc.cmp(this.curve.p) >= 0)
      return false;

    rx.redIAdd(t);
    if (this.x.cmp(rx) === 0)
      return true;
  }
  return false;
};

// Compatibility with BaseCurve
Point.prototype.toP = Point.prototype.normalize;
Point.prototype.mixedAdd = Point.prototype.add;

},{"../../elliptic":351,"../curve":354,"bn.js":348,"inherits":374}],354:[function(require,module,exports){
'use strict';

var curve = exports;

curve.base = require('./base');
curve.short = require('./short');
curve.mont = require('./mont');
curve.edwards = require('./edwards');

},{"./base":352,"./edwards":353,"./mont":355,"./short":356}],355:[function(require,module,exports){
'use strict';

var curve = require('../curve');
var BN = require('bn.js');
var inherits = require('inherits');
var Base = curve.base;

var elliptic = require('../../elliptic');
var utils = elliptic.utils;

function MontCurve(conf) {
  Base.call(this, 'mont', conf);

  this.a = new BN(conf.a, 16).toRed(this.red);
  this.b = new BN(conf.b, 16).toRed(this.red);
  this.i4 = new BN(4).toRed(this.red).redInvm();
  this.two = new BN(2).toRed(this.red);
  this.a24 = this.i4.redMul(this.a.redAdd(this.two));
}
inherits(MontCurve, Base);
module.exports = MontCurve;

MontCurve.prototype.validate = function validate(point) {
  var x = point.normalize().x;
  var x2 = x.redSqr();
  var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
  var y = rhs.redSqrt();

  return y.redSqr().cmp(rhs) === 0;
};

function Point(curve, x, z) {
  Base.BasePoint.call(this, curve, 'projective');
  if (x === null && z === null) {
    this.x = this.curve.one;
    this.z = this.curve.zero;
  } else {
    this.x = new BN(x, 16);
    this.z = new BN(z, 16);
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);
  }
}
inherits(Point, Base.BasePoint);

MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
  return this.point(utils.toArray(bytes, enc), 1);
};

MontCurve.prototype.point = function point(x, z) {
  return new Point(this, x, z);
};

MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
  return Point.fromJSON(this, obj);
};

Point.prototype.precompute = function precompute() {
  // No-op
};

Point.prototype._encode = function _encode() {
  return this.getX().toArray('be', this.curve.p.byteLength());
};

Point.fromJSON = function fromJSON(curve, obj) {
  return new Point(curve, obj[0], obj[1] || curve.one);
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.z.cmpn(0) === 0;
};

Point.prototype.dbl = function dbl() {
  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
  // 2M + 2S + 4A

  // A = X1 + Z1
  var a = this.x.redAdd(this.z);
  // AA = A^2
  var aa = a.redSqr();
  // B = X1 - Z1
  var b = this.x.redSub(this.z);
  // BB = B^2
  var bb = b.redSqr();
  // C = AA - BB
  var c = aa.redSub(bb);
  // X3 = AA * BB
  var nx = aa.redMul(bb);
  // Z3 = C * (BB + A24 * C)
  var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
  return this.curve.point(nx, nz);
};

Point.prototype.add = function add() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.diffAdd = function diffAdd(p, diff) {
  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
  // 4M + 2S + 6A

  // A = X2 + Z2
  var a = this.x.redAdd(this.z);
  // B = X2 - Z2
  var b = this.x.redSub(this.z);
  // C = X3 + Z3
  var c = p.x.redAdd(p.z);
  // D = X3 - Z3
  var d = p.x.redSub(p.z);
  // DA = D * A
  var da = d.redMul(a);
  // CB = C * B
  var cb = c.redMul(b);
  // X5 = Z1 * (DA + CB)^2
  var nx = diff.z.redMul(da.redAdd(cb).redSqr());
  // Z5 = X1 * (DA - CB)^2
  var nz = diff.x.redMul(da.redISub(cb).redSqr());
  return this.curve.point(nx, nz);
};

Point.prototype.mul = function mul(k) {
  var t = k.clone();
  var a = this; // (N / 2) * Q + Q
  var b = this.curve.point(null, null); // (N / 2) * Q
  var c = this; // Q

  for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1))
    bits.push(t.andln(1));

  for (var i = bits.length - 1; i >= 0; i--) {
    if (bits[i] === 0) {
      // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
      a = a.diffAdd(b, c);
      // N * Q = 2 * ((N / 2) * Q + Q))
      b = b.dbl();
    } else {
      // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
      b = a.diffAdd(b, c);
      // N * Q + Q = 2 * ((N / 2) * Q + Q)
      a = a.dbl();
    }
  }
  return b;
};

Point.prototype.mulAdd = function mulAdd() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.jumlAdd = function jumlAdd() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.eq = function eq(other) {
  return this.getX().cmp(other.getX()) === 0;
};

Point.prototype.normalize = function normalize() {
  this.x = this.x.redMul(this.z.redInvm());
  this.z = this.curve.one;
  return this;
};

Point.prototype.getX = function getX() {
  // Normalize coordinates
  this.normalize();

  return this.x.fromRed();
};

},{"../../elliptic":351,"../curve":354,"bn.js":348,"inherits":374}],356:[function(require,module,exports){
'use strict';

var curve = require('../curve');
var elliptic = require('../../elliptic');
var BN = require('bn.js');
var inherits = require('inherits');
var Base = curve.base;

var assert = elliptic.utils.assert;

function ShortCurve(conf) {
  Base.call(this, 'short', conf);

  this.a = new BN(conf.a, 16).toRed(this.red);
  this.b = new BN(conf.b, 16).toRed(this.red);
  this.tinv = this.two.redInvm();

  this.zeroA = this.a.fromRed().cmpn(0) === 0;
  this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;

  // If the curve is endomorphic, precalculate beta and lambda
  this.endo = this._getEndomorphism(conf);
  this._endoWnafT1 = new Array(4);
  this._endoWnafT2 = new Array(4);
}
inherits(ShortCurve, Base);
module.exports = ShortCurve;

ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
  // No efficient endomorphism
  if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
    return;

  // Compute beta and lambda, that lambda * P = (beta * Px; Py)
  var beta;
  var lambda;
  if (conf.beta) {
    beta = new BN(conf.beta, 16).toRed(this.red);
  } else {
    var betas = this._getEndoRoots(this.p);
    // Choose the smallest beta
    beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
    beta = beta.toRed(this.red);
  }
  if (conf.lambda) {
    lambda = new BN(conf.lambda, 16);
  } else {
    // Choose the lambda that is matching selected beta
    var lambdas = this._getEndoRoots(this.n);
    if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
      lambda = lambdas[0];
    } else {
      lambda = lambdas[1];
      assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
    }
  }

  // Get basis vectors, used for balanced length-two representation
  var basis;
  if (conf.basis) {
    basis = conf.basis.map(function(vec) {
      return {
        a: new BN(vec.a, 16),
        b: new BN(vec.b, 16)
      };
    });
  } else {
    basis = this._getEndoBasis(lambda);
  }

  return {
    beta: beta,
    lambda: lambda,
    basis: basis
  };
};

ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
  // Find roots of for x^2 + x + 1 in F
  // Root = (-1 +- Sqrt(-3)) / 2
  //
  var red = num === this.p ? this.red : BN.mont(num);
  var tinv = new BN(2).toRed(red).redInvm();
  var ntinv = tinv.redNeg();

  var s = new BN(3).toRed(red).redNeg().redSqrt().redMul(tinv);

  var l1 = ntinv.redAdd(s).fromRed();
  var l2 = ntinv.redSub(s).fromRed();
  return [ l1, l2 ];
};

ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
  // aprxSqrt >= sqrt(this.n)
  var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));

  // 3.74
  // Run EGCD, until r(L + 1) < aprxSqrt
  var u = lambda;
  var v = this.n.clone();
  var x1 = new BN(1);
  var y1 = new BN(0);
  var x2 = new BN(0);
  var y2 = new BN(1);

  // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
  var a0;
  var b0;
  // First vector
  var a1;
  var b1;
  // Second vector
  var a2;
  var b2;

  var prevR;
  var i = 0;
  var r;
  var x;
  while (u.cmpn(0) !== 0) {
    var q = v.div(u);
    r = v.sub(q.mul(u));
    x = x2.sub(q.mul(x1));
    var y = y2.sub(q.mul(y1));

    if (!a1 && r.cmp(aprxSqrt) < 0) {
      a0 = prevR.neg();
      b0 = x1;
      a1 = r.neg();
      b1 = x;
    } else if (a1 && ++i === 2) {
      break;
    }
    prevR = r;

    v = u;
    u = r;
    x2 = x1;
    x1 = x;
    y2 = y1;
    y1 = y;
  }
  a2 = r.neg();
  b2 = x;

  var len1 = a1.sqr().add(b1.sqr());
  var len2 = a2.sqr().add(b2.sqr());
  if (len2.cmp(len1) >= 0) {
    a2 = a0;
    b2 = b0;
  }

  // Normalize signs
  if (a1.negative) {
    a1 = a1.neg();
    b1 = b1.neg();
  }
  if (a2.negative) {
    a2 = a2.neg();
    b2 = b2.neg();
  }

  return [
    { a: a1, b: b1 },
    { a: a2, b: b2 }
  ];
};

ShortCurve.prototype._endoSplit = function _endoSplit(k) {
  var basis = this.endo.basis;
  var v1 = basis[0];
  var v2 = basis[1];

  var c1 = v2.b.mul(k).divRound(this.n);
  var c2 = v1.b.neg().mul(k).divRound(this.n);

  var p1 = c1.mul(v1.a);
  var p2 = c2.mul(v2.a);
  var q1 = c1.mul(v1.b);
  var q2 = c2.mul(v2.b);

  // Calculate answer
  var k1 = k.sub(p1).sub(p2);
  var k2 = q1.add(q2).neg();
  return { k1: k1, k2: k2 };
};

ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
  x = new BN(x, 16);
  if (!x.red)
    x = x.toRed(this.red);

  var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
  var y = y2.redSqrt();
  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  // XXX Is there any way to tell if the number is odd without converting it
  // to non-red form?
  var isOdd = y.fromRed().isOdd();
  if (odd && !isOdd || !odd && isOdd)
    y = y.redNeg();

  return this.point(x, y);
};

ShortCurve.prototype.validate = function validate(point) {
  if (point.inf)
    return true;

  var x = point.x;
  var y = point.y;

  var ax = this.a.redMul(x);
  var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
  return y.redSqr().redISub(rhs).cmpn(0) === 0;
};

ShortCurve.prototype._endoWnafMulAdd =
    function _endoWnafMulAdd(points, coeffs, jacobianResult) {
  var npoints = this._endoWnafT1;
  var ncoeffs = this._endoWnafT2;
  for (var i = 0; i < points.length; i++) {
    var split = this._endoSplit(coeffs[i]);
    var p = points[i];
    var beta = p._getBeta();

    if (split.k1.negative) {
      split.k1.ineg();
      p = p.neg(true);
    }
    if (split.k2.negative) {
      split.k2.ineg();
      beta = beta.neg(true);
    }

    npoints[i * 2] = p;
    npoints[i * 2 + 1] = beta;
    ncoeffs[i * 2] = split.k1;
    ncoeffs[i * 2 + 1] = split.k2;
  }
  var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);

  // Clean-up references to points and coefficients
  for (var j = 0; j < i * 2; j++) {
    npoints[j] = null;
    ncoeffs[j] = null;
  }
  return res;
};

function Point(curve, x, y, isRed) {
  Base.BasePoint.call(this, curve, 'affine');
  if (x === null && y === null) {
    this.x = null;
    this.y = null;
    this.inf = true;
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    // Force redgomery representation when loading from JSON
    if (isRed) {
      this.x.forceRed(this.curve.red);
      this.y.forceRed(this.curve.red);
    }
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    this.inf = false;
  }
}
inherits(Point, Base.BasePoint);

ShortCurve.prototype.point = function point(x, y, isRed) {
  return new Point(this, x, y, isRed);
};

ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
  return Point.fromJSON(this, obj, red);
};

Point.prototype._getBeta = function _getBeta() {
  if (!this.curve.endo)
    return;

  var pre = this.precomputed;
  if (pre && pre.beta)
    return pre.beta;

  var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
  if (pre) {
    var curve = this.curve;
    var endoMul = function(p) {
      return curve.point(p.x.redMul(curve.endo.beta), p.y);
    };
    pre.beta = beta;
    beta.precomputed = {
      beta: null,
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(endoMul)
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(endoMul)
      }
    };
  }
  return beta;
};

Point.prototype.toJSON = function toJSON() {
  if (!this.precomputed)
    return [ this.x, this.y ];

  return [ this.x, this.y, this.precomputed && {
    doubles: this.precomputed.doubles && {
      step: this.precomputed.doubles.step,
      points: this.precomputed.doubles.points.slice(1)
    },
    naf: this.precomputed.naf && {
      wnd: this.precomputed.naf.wnd,
      points: this.precomputed.naf.points.slice(1)
    }
  } ];
};

Point.fromJSON = function fromJSON(curve, obj, red) {
  if (typeof obj === 'string')
    obj = JSON.parse(obj);
  var res = curve.point(obj[0], obj[1], red);
  if (!obj[2])
    return res;

  function obj2point(obj) {
    return curve.point(obj[0], obj[1], red);
  }

  var pre = obj[2];
  res.precomputed = {
    beta: null,
    doubles: pre.doubles && {
      step: pre.doubles.step,
      points: [ res ].concat(pre.doubles.points.map(obj2point))
    },
    naf: pre.naf && {
      wnd: pre.naf.wnd,
      points: [ res ].concat(pre.naf.points.map(obj2point))
    }
  };
  return res;
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' y: ' + this.y.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  return this.inf;
};

Point.prototype.add = function add(p) {
  // O + P = P
  if (this.inf)
    return p;

  // P + O = P
  if (p.inf)
    return this;

  // P + P = 2P
  if (this.eq(p))
    return this.dbl();

  // P + (-P) = O
  if (this.neg().eq(p))
    return this.curve.point(null, null);

  // P + Q = O
  if (this.x.cmp(p.x) === 0)
    return this.curve.point(null, null);

  var c = this.y.redSub(p.y);
  if (c.cmpn(0) !== 0)
    c = c.redMul(this.x.redSub(p.x).redInvm());
  var nx = c.redSqr().redISub(this.x).redISub(p.x);
  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};

Point.prototype.dbl = function dbl() {
  if (this.inf)
    return this;

  // 2P = O
  var ys1 = this.y.redAdd(this.y);
  if (ys1.cmpn(0) === 0)
    return this.curve.point(null, null);

  var a = this.curve.a;

  var x2 = this.x.redSqr();
  var dyinv = ys1.redInvm();
  var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);

  var nx = c.redSqr().redISub(this.x.redAdd(this.x));
  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};

Point.prototype.getX = function getX() {
  return this.x.fromRed();
};

Point.prototype.getY = function getY() {
  return this.y.fromRed();
};

Point.prototype.mul = function mul(k) {
  k = new BN(k, 16);

  if (this._hasDoubles(k))
    return this.curve._fixedNafMul(this, k);
  else if (this.curve.endo)
    return this.curve._endoWnafMulAdd([ this ], [ k ]);
  else
    return this.curve._wnafMul(this, k);
};

Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
  var points = [ this, p2 ];
  var coeffs = [ k1, k2 ];
  if (this.curve.endo)
    return this.curve._endoWnafMulAdd(points, coeffs);
  else
    return this.curve._wnafMulAdd(1, points, coeffs, 2);
};

Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
  var points = [ this, p2 ];
  var coeffs = [ k1, k2 ];
  if (this.curve.endo)
    return this.curve._endoWnafMulAdd(points, coeffs, true);
  else
    return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
};

Point.prototype.eq = function eq(p) {
  return this === p ||
         this.inf === p.inf &&
             (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
};

Point.prototype.neg = function neg(_precompute) {
  if (this.inf)
    return this;

  var res = this.curve.point(this.x, this.y.redNeg());
  if (_precompute && this.precomputed) {
    var pre = this.precomputed;
    var negate = function(p) {
      return p.neg();
    };
    res.precomputed = {
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(negate)
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(negate)
      }
    };
  }
  return res;
};

Point.prototype.toJ = function toJ() {
  if (this.inf)
    return this.curve.jpoint(null, null, null);

  var res = this.curve.jpoint(this.x, this.y, this.curve.one);
  return res;
};

function JPoint(curve, x, y, z) {
  Base.BasePoint.call(this, curve, 'jacobian');
  if (x === null && y === null && z === null) {
    this.x = this.curve.one;
    this.y = this.curve.one;
    this.z = new BN(0);
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    this.z = new BN(z, 16);
  }
  if (!this.x.red)
    this.x = this.x.toRed(this.curve.red);
  if (!this.y.red)
    this.y = this.y.toRed(this.curve.red);
  if (!this.z.red)
    this.z = this.z.toRed(this.curve.red);

  this.zOne = this.z === this.curve.one;
}
inherits(JPoint, Base.BasePoint);

ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
  return new JPoint(this, x, y, z);
};

JPoint.prototype.toP = function toP() {
  if (this.isInfinity())
    return this.curve.point(null, null);

  var zinv = this.z.redInvm();
  var zinv2 = zinv.redSqr();
  var ax = this.x.redMul(zinv2);
  var ay = this.y.redMul(zinv2).redMul(zinv);

  return this.curve.point(ax, ay);
};

JPoint.prototype.neg = function neg() {
  return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
};

JPoint.prototype.add = function add(p) {
  // O + P = P
  if (this.isInfinity())
    return p;

  // P + O = P
  if (p.isInfinity())
    return this;

  // 12M + 4S + 7A
  var pz2 = p.z.redSqr();
  var z2 = this.z.redSqr();
  var u1 = this.x.redMul(pz2);
  var u2 = p.x.redMul(z2);
  var s1 = this.y.redMul(pz2.redMul(p.z));
  var s2 = p.y.redMul(z2.redMul(this.z));

  var h = u1.redSub(u2);
  var r = s1.redSub(s2);
  if (h.cmpn(0) === 0) {
    if (r.cmpn(0) !== 0)
      return this.curve.jpoint(null, null, null);
    else
      return this.dbl();
  }

  var h2 = h.redSqr();
  var h3 = h2.redMul(h);
  var v = u1.redMul(h2);

  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  var nz = this.z.redMul(p.z).redMul(h);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.mixedAdd = function mixedAdd(p) {
  // O + P = P
  if (this.isInfinity())
    return p.toJ();

  // P + O = P
  if (p.isInfinity())
    return this;

  // 8M + 3S + 7A
  var z2 = this.z.redSqr();
  var u1 = this.x;
  var u2 = p.x.redMul(z2);
  var s1 = this.y;
  var s2 = p.y.redMul(z2).redMul(this.z);

  var h = u1.redSub(u2);
  var r = s1.redSub(s2);
  if (h.cmpn(0) === 0) {
    if (r.cmpn(0) !== 0)
      return this.curve.jpoint(null, null, null);
    else
      return this.dbl();
  }

  var h2 = h.redSqr();
  var h3 = h2.redMul(h);
  var v = u1.redMul(h2);

  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  var nz = this.z.redMul(h);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.dblp = function dblp(pow) {
  if (pow === 0)
    return this;
  if (this.isInfinity())
    return this;
  if (!pow)
    return this.dbl();

  if (this.curve.zeroA || this.curve.threeA) {
    var r = this;
    for (var i = 0; i < pow; i++)
      r = r.dbl();
    return r;
  }

  // 1M + 2S + 1A + N * (4S + 5M + 8A)
  // N = 1 => 6M + 6S + 9A
  var a = this.curve.a;
  var tinv = this.curve.tinv;

  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr();

  // Reuse results
  var jyd = jy.redAdd(jy);
  for (var i = 0; i < pow; i++) {
    var jx2 = jx.redSqr();
    var jyd2 = jyd.redSqr();
    var jyd4 = jyd2.redSqr();
    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

    var t1 = jx.redMul(jyd2);
    var nx = c.redSqr().redISub(t1.redAdd(t1));
    var t2 = t1.redISub(nx);
    var dny = c.redMul(t2);
    dny = dny.redIAdd(dny).redISub(jyd4);
    var nz = jyd.redMul(jz);
    if (i + 1 < pow)
      jz4 = jz4.redMul(jyd4);

    jx = nx;
    jz = nz;
    jyd = dny;
  }

  return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
};

JPoint.prototype.dbl = function dbl() {
  if (this.isInfinity())
    return this;

  if (this.curve.zeroA)
    return this._zeroDbl();
  else if (this.curve.threeA)
    return this._threeDbl();
  else
    return this._dbl();
};

JPoint.prototype._zeroDbl = function _zeroDbl() {
  var nx;
  var ny;
  var nz;
  // Z = 1
  if (this.zOne) {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
    //     #doubling-mdbl-2007-bl
    // 1M + 5S + 14A

    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s = s.redIAdd(s);
    // M = 3 * XX + a; a = 0
    var m = xx.redAdd(xx).redIAdd(xx);
    // T = M ^ 2 - 2*S
    var t = m.redSqr().redISub(s).redISub(s);

    // 8 * YYYY
    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8);

    // X3 = T
    nx = t;
    // Y3 = M * (S - T) - 8 * YYYY
    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
    // Z3 = 2*Y1
    nz = this.y.redAdd(this.y);
  } else {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
    //     #doubling-dbl-2009-l
    // 2M + 5S + 13A

    // A = X1^2
    var a = this.x.redSqr();
    // B = Y1^2
    var b = this.y.redSqr();
    // C = B^2
    var c = b.redSqr();
    // D = 2 * ((X1 + B)^2 - A - C)
    var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
    d = d.redIAdd(d);
    // E = 3 * A
    var e = a.redAdd(a).redIAdd(a);
    // F = E^2
    var f = e.redSqr();

    // 8 * C
    var c8 = c.redIAdd(c);
    c8 = c8.redIAdd(c8);
    c8 = c8.redIAdd(c8);

    // X3 = F - 2 * D
    nx = f.redISub(d).redISub(d);
    // Y3 = E * (D - X3) - 8 * C
    ny = e.redMul(d.redISub(nx)).redISub(c8);
    // Z3 = 2 * Y1 * Z1
    nz = this.y.redMul(this.z);
    nz = nz.redIAdd(nz);
  }

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype._threeDbl = function _threeDbl() {
  var nx;
  var ny;
  var nz;
  // Z = 1
  if (this.zOne) {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
    //     #doubling-mdbl-2007-bl
    // 1M + 5S + 15A

    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s = s.redIAdd(s);
    // M = 3 * XX + a
    var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
    // T = M^2 - 2 * S
    var t = m.redSqr().redISub(s).redISub(s);
    // X3 = T
    nx = t;
    // Y3 = M * (S - T) - 8 * YYYY
    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
    // Z3 = 2 * Y1
    nz = this.y.redAdd(this.y);
  } else {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
    // 3M + 5S

    // delta = Z1^2
    var delta = this.z.redSqr();
    // gamma = Y1^2
    var gamma = this.y.redSqr();
    // beta = X1 * gamma
    var beta = this.x.redMul(gamma);
    // alpha = 3 * (X1 - delta) * (X1 + delta)
    var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
    alpha = alpha.redAdd(alpha).redIAdd(alpha);
    // X3 = alpha^2 - 8 * beta
    var beta4 = beta.redIAdd(beta);
    beta4 = beta4.redIAdd(beta4);
    var beta8 = beta4.redAdd(beta4);
    nx = alpha.redSqr().redISub(beta8);
    // Z3 = (Y1 + Z1)^2 - gamma - delta
    nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
    // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
    var ggamma8 = gamma.redSqr();
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
  }

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype._dbl = function _dbl() {
  var a = this.curve.a;

  // 4M + 6S + 10A
  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr();

  var jx2 = jx.redSqr();
  var jy2 = jy.redSqr();

  var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

  var jxd4 = jx.redAdd(jx);
  jxd4 = jxd4.redIAdd(jxd4);
  var t1 = jxd4.redMul(jy2);
  var nx = c.redSqr().redISub(t1.redAdd(t1));
  var t2 = t1.redISub(nx);

  var jyd8 = jy2.redSqr();
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  var ny = c.redMul(t2).redISub(jyd8);
  var nz = jy.redAdd(jy).redMul(jz);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.trpl = function trpl() {
  if (!this.curve.zeroA)
    return this.dbl().add(this);

  // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
  // 5M + 10S + ...

  // XX = X1^2
  var xx = this.x.redSqr();
  // YY = Y1^2
  var yy = this.y.redSqr();
  // ZZ = Z1^2
  var zz = this.z.redSqr();
  // YYYY = YY^2
  var yyyy = yy.redSqr();
  // M = 3 * XX + a * ZZ2; a = 0
  var m = xx.redAdd(xx).redIAdd(xx);
  // MM = M^2
  var mm = m.redSqr();
  // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
  var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
  e = e.redIAdd(e);
  e = e.redAdd(e).redIAdd(e);
  e = e.redISub(mm);
  // EE = E^2
  var ee = e.redSqr();
  // T = 16*YYYY
  var t = yyyy.redIAdd(yyyy);
  t = t.redIAdd(t);
  t = t.redIAdd(t);
  t = t.redIAdd(t);
  // U = (M + E)^2 - MM - EE - T
  var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
  // X3 = 4 * (X1 * EE - 4 * YY * U)
  var yyu4 = yy.redMul(u);
  yyu4 = yyu4.redIAdd(yyu4);
  yyu4 = yyu4.redIAdd(yyu4);
  var nx = this.x.redMul(ee).redISub(yyu4);
  nx = nx.redIAdd(nx);
  nx = nx.redIAdd(nx);
  // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
  var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny);
  // Z3 = (Z1 + E)^2 - ZZ - EE
  var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.mul = function mul(k, kbase) {
  k = new BN(k, kbase);

  return this.curve._wnafMul(this, k);
};

JPoint.prototype.eq = function eq(p) {
  if (p.type === 'affine')
    return this.eq(p.toJ());

  if (this === p)
    return true;

  // x1 * z2^2 == x2 * z1^2
  var z2 = this.z.redSqr();
  var pz2 = p.z.redSqr();
  if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
    return false;

  // y1 * z2^3 == y2 * z1^3
  var z3 = z2.redMul(this.z);
  var pz3 = pz2.redMul(p.z);
  return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
};

JPoint.prototype.eqXToP = function eqXToP(x) {
  var zs = this.z.redSqr();
  var rx = x.toRed(this.curve.red).redMul(zs);
  if (this.x.cmp(rx) === 0)
    return true;

  var xc = x.clone();
  var t = this.curve.redN.redMul(zs);
  for (;;) {
    xc.iadd(this.curve.n);
    if (xc.cmp(this.curve.p) >= 0)
      return false;

    rx.redIAdd(t);
    if (this.x.cmp(rx) === 0)
      return true;
  }
  return false;
};

JPoint.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC JPoint Infinity>';
  return '<EC JPoint x: ' + this.x.toString(16, 2) +
      ' y: ' + this.y.toString(16, 2) +
      ' z: ' + this.z.toString(16, 2) + '>';
};

JPoint.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.z.cmpn(0) === 0;
};

},{"../../elliptic":351,"../curve":354,"bn.js":348,"inherits":374}],357:[function(require,module,exports){
'use strict';

var curves = exports;

var hash = require('hash.js');
var elliptic = require('../elliptic');

var assert = elliptic.utils.assert;

function PresetCurve(options) {
  if (options.type === 'short')
    this.curve = new elliptic.curve.short(options);
  else if (options.type === 'edwards')
    this.curve = new elliptic.curve.edwards(options);
  else
    this.curve = new elliptic.curve.mont(options);
  this.g = this.curve.g;
  this.n = this.curve.n;
  this.hash = options.hash;

  assert(this.g.validate(), 'Invalid curve');
  assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
}
curves.PresetCurve = PresetCurve;

function defineCurve(name, options) {
  Object.defineProperty(curves, name, {
    configurable: true,
    enumerable: true,
    get: function() {
      var curve = new PresetCurve(options);
      Object.defineProperty(curves, name, {
        configurable: true,
        enumerable: true,
        value: curve
      });
      return curve;
    }
  });
}

defineCurve('p192', {
  type: 'short',
  prime: 'p192',
  p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
  b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
  n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
  hash: hash.sha256,
  gRed: false,
  g: [
    '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',
    '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811'
  ]
});

defineCurve('p224', {
  type: 'short',
  prime: 'p224',
  p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
  b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
  n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
  hash: hash.sha256,
  gRed: false,
  g: [
    'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',
    'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34'
  ]
});

defineCurve('p256', {
  type: 'short',
  prime: null,
  p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
  a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
  b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
  n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
  hash: hash.sha256,
  gRed: false,
  g: [
    '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',
    '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5'
  ]
});

defineCurve('p384', {
  type: 'short',
  prime: null,
  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'fffffffe ffffffff 00000000 00000000 ffffffff',
  a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'fffffffe ffffffff 00000000 00000000 fffffffc',
  b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' +
     '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',
  n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' +
     'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',
  hash: hash.sha384,
  gRed: false,
  g: [
    'aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' +
    '5502f25d bf55296c 3a545e38 72760ab7',
    '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' +
    '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f'
  ]
});

defineCurve('p521', {
  type: 'short',
  prime: null,
  p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff',
  a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff fffffffc',
  b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' +
     '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' +
     '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',
  n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' +
     'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',
  hash: hash.sha512,
  gRed: false,
  g: [
    '000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' +
    '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' +
    'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66',
    '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' +
    '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' +
    '3fad0761 353c7086 a272c240 88be9476 9fd16650'
  ]
});

defineCurve('curve25519', {
  type: 'mont',
  prime: 'p25519',
  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
  a: '76d06',
  b: '0',
  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
  hash: hash.sha256,
  gRed: false,
  g: [
    '9'
  ]
});

defineCurve('ed25519', {
  type: 'edwards',
  prime: 'p25519',
  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
  a: '-1',
  c: '1',
  // -121665 * (121666^(-1)) (mod P)
  d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
  hash: hash.sha256,
  gRed: false,
  g: [
    '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',

    // 4/5
    '6666666666666666666666666666666666666666666666666666666666666658'
  ]
});

var pre;
try {
  pre = require('./precomputed/secp256k1');
} catch (e) {
  pre = undefined;
}

defineCurve('secp256k1', {
  type: 'short',
  prime: 'k256',
  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
  a: '0',
  b: '7',
  n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
  h: '1',
  hash: hash.sha256,

  // Precomputed endomorphism
  beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
  lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
  basis: [
    {
      a: '3086d221a7d46bcde86c90e49284eb15',
      b: '-e4437ed6010e88286f547fa90abfe4c3'
    },
    {
      a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
      b: '3086d221a7d46bcde86c90e49284eb15'
    }
  ],

  gRed: false,
  g: [
    '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',
    '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',
    pre
  ]
});

},{"../elliptic":351,"./precomputed/secp256k1":365,"hash.js":368}],358:[function(require,module,exports){
'use strict';

var BN = require('bn.js');
var elliptic = require('../../elliptic');
var utils = elliptic.utils;
var assert = utils.assert;

var KeyPair = require('./key');
var Signature = require('./signature');

function EC(options) {
  if (!(this instanceof EC))
    return new EC(options);

  // Shortcut `elliptic.ec(curve-name)`
  if (typeof options === 'string') {
    assert(elliptic.curves.hasOwnProperty(options), 'Unknown curve ' + options);

    options = elliptic.curves[options];
  }

  // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
  if (options instanceof elliptic.curves.PresetCurve)
    options = { curve: options };

  this.curve = options.curve.curve;
  this.n = this.curve.n;
  this.nh = this.n.ushrn(1);
  this.g = this.curve.g;

  // Point on curve
  this.g = options.curve.g;
  this.g.precompute(options.curve.n.bitLength() + 1);

  // Hash for function for DRBG
  this.hash = options.hash || options.curve.hash;
}
module.exports = EC;

EC.prototype.keyPair = function keyPair(options) {
  return new KeyPair(this, options);
};

EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
  return KeyPair.fromPrivate(this, priv, enc);
};

EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
  return KeyPair.fromPublic(this, pub, enc);
};

EC.prototype.genKeyPair = function genKeyPair(options) {
  if (!options)
    options = {};

  // Instantiate Hmac_DRBG
  var drbg = new elliptic.hmacDRBG({
    hash: this.hash,
    pers: options.pers,
    entropy: options.entropy || elliptic.rand(this.hash.hmacStrength),
    nonce: this.n.toArray()
  });

  var bytes = this.n.byteLength();
  var ns2 = this.n.sub(new BN(2));
  do {
    var priv = new BN(drbg.generate(bytes));
    if (priv.cmp(ns2) > 0)
      continue;

    priv.iaddn(1);
    return this.keyFromPrivate(priv);
  } while (true);
};

EC.prototype._truncateToN = function truncateToN(msg, truncOnly) {
  var delta = msg.byteLength() * 8 - this.n.bitLength();
  if (delta > 0)
    msg = msg.ushrn(delta);
  if (!truncOnly && msg.cmp(this.n) >= 0)
    return msg.sub(this.n);
  else
    return msg;
};

EC.prototype.sign = function sign(msg, key, enc, options) {
  if (typeof enc === 'object') {
    options = enc;
    enc = null;
  }
  if (!options)
    options = {};

  key = this.keyFromPrivate(key, enc);
  msg = this._truncateToN(new BN(msg, 16));

  // Zero-extend key to provide enough entropy
  var bytes = this.n.byteLength();
  var bkey = key.getPrivate().toArray('be', bytes);

  // Zero-extend nonce to have the same byte size as N
  var nonce = msg.toArray('be', bytes);

  // Instantiate Hmac_DRBG
  var drbg = new elliptic.hmacDRBG({
    hash: this.hash,
    entropy: bkey,
    nonce: nonce,
    pers: options.pers,
    persEnc: options.persEnc
  });

  // Number of bytes to generate
  var ns1 = this.n.sub(new BN(1));

  for (var iter = 0; true; iter++) {
    var k = options.k ?
        options.k(iter) :
        new BN(drbg.generate(this.n.byteLength()));
    k = this._truncateToN(k, true);
    if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
      continue;

    var kp = this.g.mul(k);
    if (kp.isInfinity())
      continue;

    var kpX = kp.getX();
    var r = kpX.umod(this.n);
    if (r.cmpn(0) === 0)
      continue;

    var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
    s = s.umod(this.n);
    if (s.cmpn(0) === 0)
      continue;

    var recoveryParam = (kp.getY().isOdd() ? 1 : 0) |
                        (kpX.cmp(r) !== 0 ? 2 : 0);

    // Use complement of `s`, if it is > `n / 2`
    if (options.canonical && s.cmp(this.nh) > 0) {
      s = this.n.sub(s);
      recoveryParam ^= 1;
    }

    return new Signature({ r: r, s: s, recoveryParam: recoveryParam });
  }
};

EC.prototype.verify = function verify(msg, signature, key, enc) {
  msg = this._truncateToN(new BN(msg, 16));
  key = this.keyFromPublic(key, enc);
  signature = new Signature(signature, 'hex');

  // Perform primitive values validation
  var r = signature.r;
  var s = signature.s;
  if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)
    return false;
  if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)
    return false;

  // Validate signature
  var sinv = s.invm(this.n);
  var u1 = sinv.mul(msg).umod(this.n);
  var u2 = sinv.mul(r).umod(this.n);

  if (!this.curve._maxwellTrick) {
    var p = this.g.mulAdd(u1, key.getPublic(), u2);
    if (p.isInfinity())
      return false;

    return p.getX().umod(this.n).cmp(r) === 0;
  }

  // NOTE: Greg Maxwell's trick, inspired by:
  // https://git.io/vad3K

  var p = this.g.jmulAdd(u1, key.getPublic(), u2);
  if (p.isInfinity())
    return false;

  // Compare `p.x` of Jacobian point with `r`,
  // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
  // inverse of `p.z^2`
  return p.eqXToP(r);
};

EC.prototype.recoverPubKey = function(msg, signature, j, enc) {
  assert((3 & j) === j, 'The recovery param is more than two bits');
  signature = new Signature(signature, enc);

  var n = this.n;
  var e = new BN(msg);
  var r = signature.r;
  var s = signature.s;

  // A set LSB signifies that the y-coordinate is odd
  var isYOdd = j & 1;
  var isSecondKey = j >> 1;
  if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
    throw new Error('Unable to find sencond key candinate');

  // 1.1. Let x = r + jn.
  if (isSecondKey)
    r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
  else
    r = this.curve.pointFromX(r, isYOdd);

  var eNeg = n.sub(e);

  // 1.6.1 Compute Q = r^-1 (sR -  eG)
  //               Q = r^-1 (sR + -eG)
  var rInv = signature.r.invm(n);
  return this.g.mulAdd(eNeg, r, s).mul(rInv);
};

EC.prototype.getKeyRecoveryParam = function(e, signature, Q, enc) {
  signature = new Signature(signature, enc);
  if (signature.recoveryParam !== null)
    return signature.recoveryParam;

  for (var i = 0; i < 4; i++) {
    var Qprime;
    try {
      Qprime = this.recoverPubKey(e, signature, i);
    } catch (e) {
      continue;
    }

    if (Qprime.eq(Q))
      return i;
  }
  throw new Error('Unable to find valid recovery factor');
};

},{"../../elliptic":351,"./key":359,"./signature":360,"bn.js":348}],359:[function(require,module,exports){
'use strict';

var BN = require('bn.js');

function KeyPair(ec, options) {
  this.ec = ec;
  this.priv = null;
  this.pub = null;

  // KeyPair(ec, { priv: ..., pub: ... })
  if (options.priv)
    this._importPrivate(options.priv, options.privEnc);
  if (options.pub)
    this._importPublic(options.pub, options.pubEnc);
}
module.exports = KeyPair;

KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
  if (pub instanceof KeyPair)
    return pub;

  return new KeyPair(ec, {
    pub: pub,
    pubEnc: enc
  });
};

KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
  if (priv instanceof KeyPair)
    return priv;

  return new KeyPair(ec, {
    priv: priv,
    privEnc: enc
  });
};

KeyPair.prototype.validate = function validate() {
  var pub = this.getPublic();

  if (pub.isInfinity())
    return { result: false, reason: 'Invalid public key' };
  if (!pub.validate())
    return { result: false, reason: 'Public key is not a point' };
  if (!pub.mul(this.ec.curve.n).isInfinity())
    return { result: false, reason: 'Public key * N != O' };

  return { result: true, reason: null };
};

KeyPair.prototype.getPublic = function getPublic(compact, enc) {
  // compact is optional argument
  if (typeof compact === 'string') {
    enc = compact;
    compact = null;
  }

  if (!this.pub)
    this.pub = this.ec.g.mul(this.priv);

  if (!enc)
    return this.pub;

  return this.pub.encode(enc, compact);
};

KeyPair.prototype.getPrivate = function getPrivate(enc) {
  if (enc === 'hex')
    return this.priv.toString(16, 2);
  else
    return this.priv;
};

KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
  this.priv = new BN(key, enc || 16);

  // Ensure that the priv won't be bigger than n, otherwise we may fail
  // in fixed multiplication method
  this.priv = this.priv.umod(this.ec.curve.n);
};

KeyPair.prototype._importPublic = function _importPublic(key, enc) {
  if (key.x || key.y) {
    this.pub = this.ec.curve.point(key.x, key.y);
    return;
  }
  this.pub = this.ec.curve.decodePoint(key, enc);
};

// ECDH
KeyPair.prototype.derive = function derive(pub) {
  return pub.mul(this.priv).getX();
};

// ECDSA
KeyPair.prototype.sign = function sign(msg, enc, options) {
  return this.ec.sign(msg, this, enc, options);
};

KeyPair.prototype.verify = function verify(msg, signature) {
  return this.ec.verify(msg, signature, this);
};

KeyPair.prototype.inspect = function inspect() {
  return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) +
         ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
};

},{"bn.js":348}],360:[function(require,module,exports){
'use strict';

var BN = require('bn.js');

var elliptic = require('../../elliptic');
var utils = elliptic.utils;
var assert = utils.assert;

function Signature(options, enc) {
  if (options instanceof Signature)
    return options;

  if (this._importDER(options, enc))
    return;

  assert(options.r && options.s, 'Signature without r or s');
  this.r = new BN(options.r, 16);
  this.s = new BN(options.s, 16);
  if (options.recoveryParam === undefined)
    this.recoveryParam = null;
  else
    this.recoveryParam = options.recoveryParam;
}
module.exports = Signature;

function Position() {
  this.place = 0;
}

function getLength(buf, p) {
  var initial = buf[p.place++];
  if (!(initial & 0x80)) {
    return initial;
  }
  var octetLen = initial & 0xf;
  var val = 0;
  for (var i = 0, off = p.place; i < octetLen; i++, off++) {
    val <<= 8;
    val |= buf[off];
  }
  p.place = off;
  return val;
}

function rmPadding(buf) {
  var i = 0;
  var len = buf.length - 1;
  while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {
    i++;
  }
  if (i === 0) {
    return buf;
  }
  return buf.slice(i);
}

Signature.prototype._importDER = function _importDER(data, enc) {
  data = utils.toArray(data, enc);
  var p = new Position();
  if (data[p.place++] !== 0x30) {
    return false;
  }
  var len = getLength(data, p);
  if ((len + p.place) !== data.length) {
    return false;
  }
  if (data[p.place++] !== 0x02) {
    return false;
  }
  var rlen = getLength(data, p);
  var r = data.slice(p.place, rlen + p.place);
  p.place += rlen;
  if (data[p.place++] !== 0x02) {
    return false;
  }
  var slen = getLength(data, p);
  if (data.length !== slen + p.place) {
    return false;
  }
  var s = data.slice(p.place, slen + p.place);
  if (r[0] === 0 && (r[1] & 0x80)) {
    r = r.slice(1);
  }
  if (s[0] === 0 && (s[1] & 0x80)) {
    s = s.slice(1);
  }

  this.r = new BN(r);
  this.s = new BN(s);
  this.recoveryParam = null;

  return true;
};

function constructLength(arr, len) {
  if (len < 0x80) {
    arr.push(len);
    return;
  }
  var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
  arr.push(octets | 0x80);
  while (--octets) {
    arr.push((len >>> (octets << 3)) & 0xff);
  }
  arr.push(len);
}

Signature.prototype.toDER = function toDER(enc) {
  var r = this.r.toArray();
  var s = this.s.toArray();

  // Pad values
  if (r[0] & 0x80)
    r = [ 0 ].concat(r);
  // Pad values
  if (s[0] & 0x80)
    s = [ 0 ].concat(s);

  r = rmPadding(r);
  s = rmPadding(s);

  while (!s[0] && !(s[1] & 0x80)) {
    s = s.slice(1);
  }
  var arr = [ 0x02 ];
  constructLength(arr, r.length);
  arr = arr.concat(r);
  arr.push(0x02);
  constructLength(arr, s.length);
  var backHalf = arr.concat(s);
  var res = [ 0x30 ];
  constructLength(res, backHalf.length);
  res = res.concat(backHalf);
  return utils.encode(res, enc);
};

},{"../../elliptic":351,"bn.js":348}],361:[function(require,module,exports){
'use strict';

var hash = require('hash.js');
var elliptic = require('../../elliptic');
var utils = elliptic.utils;
var assert = utils.assert;
var parseBytes = utils.parseBytes;
var KeyPair = require('./key');
var Signature = require('./signature');

function EDDSA(curve) {
  assert(curve === 'ed25519', 'only tested with ed25519 so far');

  if (!(this instanceof EDDSA))
    return new EDDSA(curve);

  var curve = elliptic.curves[curve].curve;
  this.curve = curve;
  this.g = curve.g;
  this.g.precompute(curve.n.bitLength() + 1);

  this.pointClass = curve.point().constructor;
  this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
  this.hash = hash.sha512;
}

module.exports = EDDSA;

/**
* @param {Array|String} message - message bytes
* @param {Array|String|KeyPair} secret - secret bytes or a keypair
* @returns {Signature} - signature
*/
EDDSA.prototype.sign = function sign(message, secret) {
  message = parseBytes(message);
  var key = this.keyFromSecret(secret);
  var r = this.hashInt(key.messagePrefix(), message);
  var R = this.g.mul(r);
  var Rencoded = this.encodePoint(R);
  var s_ = this.hashInt(Rencoded, key.pubBytes(), message)
               .mul(key.priv());
  var S = r.add(s_).umod(this.curve.n);
  return this.makeSignature({ R: R, S: S, Rencoded: Rencoded });
};

/**
* @param {Array} message - message bytes
* @param {Array|String|Signature} sig - sig bytes
* @param {Array|String|Point|KeyPair} pub - public key
* @returns {Boolean} - true if public key matches sig of message
*/
EDDSA.prototype.verify = function verify(message, sig, pub) {
  message = parseBytes(message);
  sig = this.makeSignature(sig);
  var key = this.keyFromPublic(pub);
  var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
  var SG = this.g.mul(sig.S());
  var RplusAh = sig.R().add(key.pub().mul(h));
  return RplusAh.eq(SG);
};

EDDSA.prototype.hashInt = function hashInt() {
  var hash = this.hash();
  for (var i = 0; i < arguments.length; i++)
    hash.update(arguments[i]);
  return utils.intFromLE(hash.digest()).umod(this.curve.n);
};

EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
  return KeyPair.fromPublic(this, pub);
};

EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
  return KeyPair.fromSecret(this, secret);
};

EDDSA.prototype.makeSignature = function makeSignature(sig) {
  if (sig instanceof Signature)
    return sig;
  return new Signature(this, sig);
};

/**
* * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2
*
* EDDSA defines methods for encoding and decoding points and integers. These are
* helper convenience methods, that pass along to utility functions implied
* parameters.
*
*/
EDDSA.prototype.encodePoint = function encodePoint(point) {
  var enc = point.getY().toArray('le', this.encodingLength);
  enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;
  return enc;
};

EDDSA.prototype.decodePoint = function decodePoint(bytes) {
  bytes = utils.parseBytes(bytes);

  var lastIx = bytes.length - 1;
  var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);
  var xIsOdd = (bytes[lastIx] & 0x80) !== 0;

  var y = utils.intFromLE(normed);
  return this.curve.pointFromY(y, xIsOdd);
};

EDDSA.prototype.encodeInt = function encodeInt(num) {
  return num.toArray('le', this.encodingLength);
};

EDDSA.prototype.decodeInt = function decodeInt(bytes) {
  return utils.intFromLE(bytes);
};

EDDSA.prototype.isPoint = function isPoint(val) {
  return val instanceof this.pointClass;
};

},{"../../elliptic":351,"./key":362,"./signature":363,"hash.js":368}],362:[function(require,module,exports){
'use strict';

var elliptic = require('../../elliptic');
var utils = elliptic.utils;
var assert = utils.assert;
var parseBytes = utils.parseBytes;
var cachedProperty = utils.cachedProperty;

/**
* @param {EDDSA} eddsa - instance
* @param {Object} params - public/private key parameters
*
* @param {Array<Byte>} [params.secret] - secret seed bytes
* @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)
* @param {Array<Byte>} [params.pub] - public key point encoded as bytes
*
*/
function KeyPair(eddsa, params) {
  this.eddsa = eddsa;
  this._secret = parseBytes(params.secret);
  if (eddsa.isPoint(params.pub))
    this._pub = params.pub;
  else
    this._pubBytes = parseBytes(params.pub);
}

KeyPair.fromPublic = function fromPublic(eddsa, pub) {
  if (pub instanceof KeyPair)
    return pub;
  return new KeyPair(eddsa, { pub: pub });
};

KeyPair.fromSecret = function fromSecret(eddsa, secret) {
  if (secret instanceof KeyPair)
    return secret;
  return new KeyPair(eddsa, { secret: secret });
};

KeyPair.prototype.secret = function secret() {
  return this._secret;
};

cachedProperty(KeyPair, 'pubBytes', function pubBytes() {
  return this.eddsa.encodePoint(this.pub());
});

cachedProperty(KeyPair, 'pub', function pub() {
  if (this._pubBytes)
    return this.eddsa.decodePoint(this._pubBytes);
  return this.eddsa.g.mul(this.priv());
});

cachedProperty(KeyPair, 'privBytes', function privBytes() {
  var eddsa = this.eddsa;
  var hash = this.hash();
  var lastIx = eddsa.encodingLength - 1;

  var a = hash.slice(0, eddsa.encodingLength);
  a[0] &= 248;
  a[lastIx] &= 127;
  a[lastIx] |= 64;

  return a;
});

cachedProperty(KeyPair, 'priv', function priv() {
  return this.eddsa.decodeInt(this.privBytes());
});

cachedProperty(KeyPair, 'hash', function hash() {
  return this.eddsa.hash().update(this.secret()).digest();
});

cachedProperty(KeyPair, 'messagePrefix', function messagePrefix() {
  return this.hash().slice(this.eddsa.encodingLength);
});

KeyPair.prototype.sign = function sign(message) {
  assert(this._secret, 'KeyPair can only verify');
  return this.eddsa.sign(message, this);
};

KeyPair.prototype.verify = function verify(message, sig) {
  return this.eddsa.verify(message, sig, this);
};

KeyPair.prototype.getSecret = function getSecret(enc) {
  assert(this._secret, 'KeyPair is public only');
  return utils.encode(this.secret(), enc);
};

KeyPair.prototype.getPublic = function getPublic(enc) {
  return utils.encode(this.pubBytes(), enc);
};

module.exports = KeyPair;

},{"../../elliptic":351}],363:[function(require,module,exports){
'use strict';

var BN = require('bn.js');
var elliptic = require('../../elliptic');
var utils = elliptic.utils;
var assert = utils.assert;
var cachedProperty = utils.cachedProperty;
var parseBytes = utils.parseBytes;

/**
* @param {EDDSA} eddsa - eddsa instance
* @param {Array<Bytes>|Object} sig -
* @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes
* @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes
* @param {Array<Bytes>} [sig.Rencoded] - R point encoded
* @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded
*/
function Signature(eddsa, sig) {
  this.eddsa = eddsa;

  if (typeof sig !== 'object')
    sig = parseBytes(sig);

  if (Array.isArray(sig)) {
    sig = {
      R: sig.slice(0, eddsa.encodingLength),
      S: sig.slice(eddsa.encodingLength)
    };
  }

  assert(sig.R && sig.S, 'Signature without R or S');

  if (eddsa.isPoint(sig.R))
    this._R = sig.R;
  if (sig.S instanceof BN)
    this._S = sig.S;

  this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
  this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
}

cachedProperty(Signature, 'S', function S() {
  return this.eddsa.decodeInt(this.Sencoded());
});

cachedProperty(Signature, 'R', function R() {
  return this.eddsa.decodePoint(this.Rencoded());
});

cachedProperty(Signature, 'Rencoded', function Rencoded() {
  return this.eddsa.encodePoint(this.R());
});

cachedProperty(Signature, 'Sencoded', function Sencoded() {
  return this.eddsa.encodeInt(this.S());
});

Signature.prototype.toBytes = function toBytes() {
  return this.Rencoded().concat(this.Sencoded());
};

Signature.prototype.toHex = function toHex() {
  return utils.encode(this.toBytes(), 'hex').toUpperCase();
};

module.exports = Signature;

},{"../../elliptic":351,"bn.js":348}],364:[function(require,module,exports){
'use strict';

var hash = require('hash.js');
var elliptic = require('../elliptic');
var utils = elliptic.utils;
var assert = utils.assert;

function HmacDRBG(options) {
  if (!(this instanceof HmacDRBG))
    return new HmacDRBG(options);
  this.hash = options.hash;
  this.predResist = !!options.predResist;

  this.outLen = this.hash.outSize;
  this.minEntropy = options.minEntropy || this.hash.hmacStrength;

  this.reseed = null;
  this.reseedInterval = null;
  this.K = null;
  this.V = null;

  var entropy = utils.toArray(options.entropy, options.entropyEnc);
  var nonce = utils.toArray(options.nonce, options.nonceEnc);
  var pers = utils.toArray(options.pers, options.persEnc);
  assert(entropy.length >= (this.minEntropy / 8),
         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
  this._init(entropy, nonce, pers);
}
module.exports = HmacDRBG;

HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
  var seed = entropy.concat(nonce).concat(pers);

  this.K = new Array(this.outLen / 8);
  this.V = new Array(this.outLen / 8);
  for (var i = 0; i < this.V.length; i++) {
    this.K[i] = 0x00;
    this.V[i] = 0x01;
  }

  this._update(seed);
  this.reseed = 1;
  this.reseedInterval = 0x1000000000000;  // 2^48
};

HmacDRBG.prototype._hmac = function hmac() {
  return new hash.hmac(this.hash, this.K);
};

HmacDRBG.prototype._update = function update(seed) {
  var kmac = this._hmac()
                 .update(this.V)
                 .update([ 0x00 ]);
  if (seed)
    kmac = kmac.update(seed);
  this.K = kmac.digest();
  this.V = this._hmac().update(this.V).digest();
  if (!seed)
    return;

  this.K = this._hmac()
               .update(this.V)
               .update([ 0x01 ])
               .update(seed)
               .digest();
  this.V = this._hmac().update(this.V).digest();
};

HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
  // Optional entropy enc
  if (typeof entropyEnc !== 'string') {
    addEnc = add;
    add = entropyEnc;
    entropyEnc = null;
  }

  entropy = utils.toBuffer(entropy, entropyEnc);
  add = utils.toBuffer(add, addEnc);

  assert(entropy.length >= (this.minEntropy / 8),
         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');

  this._update(entropy.concat(add || []));
  this.reseed = 1;
};

HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
  if (this.reseed > this.reseedInterval)
    throw new Error('Reseed is required');

  // Optional encoding
  if (typeof enc !== 'string') {
    addEnc = add;
    add = enc;
    enc = null;
  }

  // Optional additional data
  if (add) {
    add = utils.toArray(add, addEnc);
    this._update(add);
  }

  var temp = [];
  while (temp.length < len) {
    this.V = this._hmac().update(this.V).digest();
    temp = temp.concat(this.V);
  }

  var res = temp.slice(0, len);
  this._update(add);
  this.reseed++;
  return utils.encode(res, enc);
};

},{"../elliptic":351,"hash.js":368}],365:[function(require,module,exports){
module.exports = {
  doubles: {
    step: 4,
    points: [
      [
        'e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a',
        'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821'
      ],
      [
        '8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508',
        '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf'
      ],
      [
        '175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739',
        'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695'
      ],
      [
        '363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640',
        '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9'
      ],
      [
        '8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c',
        '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36'
      ],
      [
        '723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda',
        '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f'
      ],
      [
        'eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa',
        '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999'
      ],
      [
        '100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0',
        'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09'
      ],
      [
        'e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d',
        '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d'
      ],
      [
        'feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d',
        'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088'
      ],
      [
        'da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1',
        '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d'
      ],
      [
        '53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0',
        '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8'
      ],
      [
        '8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047',
        '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a'
      ],
      [
        '385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862',
        '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453'
      ],
      [
        '6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7',
        '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160'
      ],
      [
        '3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd',
        '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0'
      ],
      [
        '85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83',
        '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6'
      ],
      [
        '948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a',
        '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589'
      ],
      [
        '6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8',
        'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17'
      ],
      [
        'e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d',
        '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda'
      ],
      [
        'e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725',
        '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd'
      ],
      [
        '213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754',
        '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2'
      ],
      [
        '4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c',
        '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6'
      ],
      [
        'fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6',
        '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f'
      ],
      [
        '76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39',
        'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01'
      ],
      [
        'c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891',
        '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3'
      ],
      [
        'd895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b',
        'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f'
      ],
      [
        'b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03',
        '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7'
      ],
      [
        'e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d',
        'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78'
      ],
      [
        'a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070',
        '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1'
      ],
      [
        '90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4',
        'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150'
      ],
      [
        '8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da',
        '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82'
      ],
      [
        'e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11',
        '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc'
      ],
      [
        '8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e',
        'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b'
      ],
      [
        'e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41',
        '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51'
      ],
      [
        'b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef',
        '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45'
      ],
      [
        'd68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8',
        'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120'
      ],
      [
        '324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d',
        '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84'
      ],
      [
        '4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96',
        '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d'
      ],
      [
        '9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd',
        'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d'
      ],
      [
        '6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5',
        '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8'
      ],
      [
        'a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266',
        '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8'
      ],
      [
        '7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71',
        '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac'
      ],
      [
        '928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac',
        'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f'
      ],
      [
        '85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751',
        '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962'
      ],
      [
        'ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e',
        '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907'
      ],
      [
        '827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241',
        'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec'
      ],
      [
        'eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3',
        'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d'
      ],
      [
        'e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f',
        '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414'
      ],
      [
        '1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19',
        'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd'
      ],
      [
        '146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be',
        'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0'
      ],
      [
        'fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9',
        '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811'
      ],
      [
        'da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2',
        '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1'
      ],
      [
        'a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13',
        '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c'
      ],
      [
        '174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c',
        'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73'
      ],
      [
        '959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba',
        '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd'
      ],
      [
        'd2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151',
        'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405'
      ],
      [
        '64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073',
        'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589'
      ],
      [
        '8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458',
        '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e'
      ],
      [
        '13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b',
        '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27'
      ],
      [
        'bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366',
        'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1'
      ],
      [
        '8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa',
        '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482'
      ],
      [
        '8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0',
        '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945'
      ],
      [
        'dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787',
        '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573'
      ],
      [
        'f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e',
        'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82'
      ]
    ]
  },
  naf: {
    wnd: 7,
    points: [
      [
        'f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9',
        '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672'
      ],
      [
        '2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4',
        'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6'
      ],
      [
        '5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc',
        '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da'
      ],
      [
        'acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe',
        'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37'
      ],
      [
        '774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb',
        'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b'
      ],
      [
        'f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8',
        'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81'
      ],
      [
        'd7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e',
        '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58'
      ],
      [
        'defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34',
        '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77'
      ],
      [
        '2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c',
        '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a'
      ],
      [
        '352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5',
        '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c'
      ],
      [
        '2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f',
        '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67'
      ],
      [
        '9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714',
        '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402'
      ],
      [
        'daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729',
        'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55'
      ],
      [
        'c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db',
        '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482'
      ],
      [
        '6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4',
        'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82'
      ],
      [
        '1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5',
        'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396'
      ],
      [
        '605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479',
        '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49'
      ],
      [
        '62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d',
        '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf'
      ],
      [
        '80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f',
        '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a'
      ],
      [
        '7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb',
        'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7'
      ],
      [
        'd528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9',
        'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933'
      ],
      [
        '49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963',
        '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a'
      ],
      [
        '77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74',
        '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6'
      ],
      [
        'f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530',
        'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37'
      ],
      [
        '463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b',
        '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e'
      ],
      [
        'f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247',
        'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6'
      ],
      [
        'caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1',
        'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476'
      ],
      [
        '2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120',
        '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40'
      ],
      [
        '7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435',
        '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61'
      ],
      [
        '754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18',
        '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683'
      ],
      [
        'e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8',
        '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5'
      ],
      [
        '186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb',
        '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b'
      ],
      [
        'df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f',
        '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417'
      ],
      [
        '5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143',
        'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868'
      ],
      [
        '290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba',
        'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a'
      ],
      [
        'af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45',
        'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6'
      ],
      [
        '766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a',
        '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996'
      ],
      [
        '59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e',
        'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e'
      ],
      [
        'f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8',
        'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d'
      ],
      [
        '7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c',
        '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2'
      ],
      [
        '948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519',
        'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e'
      ],
      [
        '7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab',
        '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437'
      ],
      [
        '3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca',
        'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311'
      ],
      [
        'd3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf',
        '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4'
      ],
      [
        '1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610',
        '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575'
      ],
      [
        '733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4',
        'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d'
      ],
      [
        '15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c',
        'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d'
      ],
      [
        'a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940',
        'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629'
      ],
      [
        'e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980',
        'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06'
      ],
      [
        '311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3',
        '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374'
      ],
      [
        '34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf',
        '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee'
      ],
      [
        'f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63',
        '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1'
      ],
      [
        'd7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448',
        'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b'
      ],
      [
        '32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf',
        '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661'
      ],
      [
        '7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5',
        '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6'
      ],
      [
        'ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6',
        '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e'
      ],
      [
        '16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5',
        '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d'
      ],
      [
        'eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99',
        'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc'
      ],
      [
        '78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51',
        'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4'
      ],
      [
        '494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5',
        '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c'
      ],
      [
        'a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5',
        '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b'
      ],
      [
        'c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997',
        '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913'
      ],
      [
        '841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881',
        '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154'
      ],
      [
        '5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5',
        '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865'
      ],
      [
        '36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66',
        'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc'
      ],
      [
        '336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726',
        'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224'
      ],
      [
        '8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede',
        '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e'
      ],
      [
        '1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94',
        '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6'
      ],
      [
        '85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31',
        '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511'
      ],
      [
        '29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51',
        'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b'
      ],
      [
        'a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252',
        'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2'
      ],
      [
        '4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5',
        'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c'
      ],
      [
        'd24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b',
        '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3'
      ],
      [
        'ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4',
        '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d'
      ],
      [
        'af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f',
        '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700'
      ],
      [
        'e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889',
        '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4'
      ],
      [
        '591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246',
        'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196'
      ],
      [
        '11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984',
        '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4'
      ],
      [
        '3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a',
        'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257'
      ],
      [
        'cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030',
        'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13'
      ],
      [
        'c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197',
        '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096'
      ],
      [
        'c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593',
        'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38'
      ],
      [
        'a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef',
        '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f'
      ],
      [
        '347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38',
        '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448'
      ],
      [
        'da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a',
        '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a'
      ],
      [
        'c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111',
        '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4'
      ],
      [
        '4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502',
        '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437'
      ],
      [
        '3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea',
        'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7'
      ],
      [
        'cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26',
        '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d'
      ],
      [
        'b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986',
        '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a'
      ],
      [
        'd4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e',
        '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54'
      ],
      [
        '48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4',
        '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77'
      ],
      [
        'dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda',
        'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517'
      ],
      [
        '6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859',
        'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10'
      ],
      [
        'e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f',
        'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125'
      ],
      [
        'eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c',
        '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e'
      ],
      [
        '13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942',
        'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1'
      ],
      [
        'ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a',
        '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2'
      ],
      [
        'b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80',
        '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423'
      ],
      [
        'ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d',
        '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8'
      ],
      [
        '8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1',
        'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758'
      ],
      [
        '52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63',
        'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375'
      ],
      [
        'e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352',
        '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d'
      ],
      [
        '7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193',
        'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec'
      ],
      [
        '5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00',
        '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0'
      ],
      [
        '32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58',
        'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c'
      ],
      [
        'e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7',
        'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4'
      ],
      [
        '8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8',
        'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f'
      ],
      [
        '4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e',
        '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649'
      ],
      [
        '3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d',
        'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826'
      ],
      [
        '674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b',
        '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5'
      ],
      [
        'd32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f',
        'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87'
      ],
      [
        '30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6',
        '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b'
      ],
      [
        'be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297',
        '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc'
      ],
      [
        '93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a',
        '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c'
      ],
      [
        'b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c',
        'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f'
      ],
      [
        'd5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52',
        '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a'
      ],
      [
        'd3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb',
        'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46'
      ],
      [
        '463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065',
        'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f'
      ],
      [
        '7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917',
        '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03'
      ],
      [
        '74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9',
        'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08'
      ],
      [
        '30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3',
        '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8'
      ],
      [
        '9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57',
        '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373'
      ],
      [
        '176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66',
        'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3'
      ],
      [
        '75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8',
        '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8'
      ],
      [
        '809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721',
        '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1'
      ],
      [
        '1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180',
        '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9'
      ]
    ]
  }
};

},{}],366:[function(require,module,exports){
'use strict';

var utils = exports;
var BN = require('bn.js');

utils.assert = function assert(val, msg) {
  if (!val)
    throw new Error(msg || 'Assertion failed');
};

function toArray(msg, enc) {
  if (Array.isArray(msg))
    return msg.slice();
  if (!msg)
    return [];
  var res = [];
  if (typeof msg !== 'string') {
    for (var i = 0; i < msg.length; i++)
      res[i] = msg[i] | 0;
    return res;
  }
  if (!enc) {
    for (var i = 0; i < msg.length; i++) {
      var c = msg.charCodeAt(i);
      var hi = c >> 8;
      var lo = c & 0xff;
      if (hi)
        res.push(hi, lo);
      else
        res.push(lo);
    }
  } else if (enc === 'hex') {
    msg = msg.replace(/[^a-z0-9]+/ig, '');
    if (msg.length % 2 !== 0)
      msg = '0' + msg;
    for (var i = 0; i < msg.length; i += 2)
      res.push(parseInt(msg[i] + msg[i + 1], 16));
  }
  return res;
}
utils.toArray = toArray;

function zero2(word) {
  if (word.length === 1)
    return '0' + word;
  else
    return word;
}
utils.zero2 = zero2;

function toHex(msg) {
  var res = '';
  for (var i = 0; i < msg.length; i++)
    res += zero2(msg[i].toString(16));
  return res;
}
utils.toHex = toHex;

utils.encode = function encode(arr, enc) {
  if (enc === 'hex')
    return toHex(arr);
  else
    return arr;
};

// Represent num in a w-NAF form
function getNAF(num, w) {
  var naf = [];
  var ws = 1 << (w + 1);
  var k = num.clone();
  while (k.cmpn(1) >= 0) {
    var z;
    if (k.isOdd()) {
      var mod = k.andln(ws - 1);
      if (mod > (ws >> 1) - 1)
        z = (ws >> 1) - mod;
      else
        z = mod;
      k.isubn(z);
    } else {
      z = 0;
    }
    naf.push(z);

    // Optimization, shift by word if possible
    var shift = (k.cmpn(0) !== 0 && k.andln(ws - 1) === 0) ? (w + 1) : 1;
    for (var i = 1; i < shift; i++)
      naf.push(0);
    k.iushrn(shift);
  }

  return naf;
}
utils.getNAF = getNAF;

// Represent k1, k2 in a Joint Sparse Form
function getJSF(k1, k2) {
  var jsf = [
    [],
    []
  ];

  k1 = k1.clone();
  k2 = k2.clone();
  var d1 = 0;
  var d2 = 0;
  while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {

    // First phase
    var m14 = (k1.andln(3) + d1) & 3;
    var m24 = (k2.andln(3) + d2) & 3;
    if (m14 === 3)
      m14 = -1;
    if (m24 === 3)
      m24 = -1;
    var u1;
    if ((m14 & 1) === 0) {
      u1 = 0;
    } else {
      var m8 = (k1.andln(7) + d1) & 7;
      if ((m8 === 3 || m8 === 5) && m24 === 2)
        u1 = -m14;
      else
        u1 = m14;
    }
    jsf[0].push(u1);

    var u2;
    if ((m24 & 1) === 0) {
      u2 = 0;
    } else {
      var m8 = (k2.andln(7) + d2) & 7;
      if ((m8 === 3 || m8 === 5) && m14 === 2)
        u2 = -m24;
      else
        u2 = m24;
    }
    jsf[1].push(u2);

    // Second phase
    if (2 * d1 === u1 + 1)
      d1 = 1 - d1;
    if (2 * d2 === u2 + 1)
      d2 = 1 - d2;
    k1.iushrn(1);
    k2.iushrn(1);
  }

  return jsf;
}
utils.getJSF = getJSF;

function cachedProperty(obj, name, computer) {
  var key = '_' + name;
  obj.prototype[name] = function cachedProperty() {
    return this[key] !== undefined ? this[key] :
           this[key] = computer.call(this);
  };
}
utils.cachedProperty = cachedProperty;

function parseBytes(bytes) {
  return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') :
                                     bytes;
}
utils.parseBytes = parseBytes;

function intFromLE(bytes) {
  return new BN(bytes, 'hex', 'le');
}
utils.intFromLE = intFromLE;


},{"bn.js":348}],367:[function(require,module,exports){
module.exports={
  "_args": [
    [
      {
        "raw": "elliptic@https://registry.npmjs.org/elliptic/-/elliptic-6.3.1.tgz",
        "scope": null,
        "escapedName": "elliptic",
        "name": "elliptic",
        "rawSpec": "https://registry.npmjs.org/elliptic/-/elliptic-6.3.1.tgz",
        "spec": "https://registry.npmjs.org/elliptic/-/elliptic-6.3.1.tgz",
        "type": "remote"
      },
      "/home/iluvpool19/Desktop/xbt/yours-channels/node_modules/yours-bitcoin"
    ]
  ],
  "_from": "elliptic@6.3.1",
  "_id": "elliptic@6.3.1",
  "_inCache": true,
  "_location": "/yours-bitcoin/elliptic",
  "_phantomChildren": {},
  "_requested": {
    "raw": "elliptic@https://registry.npmjs.org/elliptic/-/elliptic-6.3.1.tgz",
    "scope": null,
    "escapedName": "elliptic",
    "name": "elliptic",
    "rawSpec": "https://registry.npmjs.org/elliptic/-/elliptic-6.3.1.tgz",
    "spec": "https://registry.npmjs.org/elliptic/-/elliptic-6.3.1.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/yours-bitcoin",
    "/yours-bitcoin/browserify-sign",
    "/yours-bitcoin/create-ecdh"
  ],
  "_resolved": "https://registry.npmjs.org/elliptic/-/elliptic-6.3.1.tgz",
  "_shasum": "17781f2109ab0ec686b146bdcff5d2e8c6aeceda",
  "_shrinkwrap": null,
  "_spec": "elliptic@https://registry.npmjs.org/elliptic/-/elliptic-6.3.1.tgz",
  "_where": "/home/iluvpool19/Desktop/xbt/yours-channels/node_modules/yours-bitcoin",
  "author": {
    "name": "Fedor Indutny",
    "email": "fedor@indutny.com"
  },
  "bugs": {
    "url": "https://github.com/indutny/elliptic/issues"
  },
  "dependencies": {
    "bn.js": "^4.4.0",
    "brorand": "^1.0.1",
    "hash.js": "^1.0.0",
    "inherits": "^2.0.1"
  },
  "description": "EC cryptography",
  "devDependencies": {
    "brfs": "^1.4.3",
    "coveralls": "^2.11.3",
    "grunt": "^0.4.5",
    "grunt-browserify": "^5.0.0",
    "grunt-contrib-connect": "^1.0.0",
    "grunt-contrib-copy": "^1.0.0",
    "grunt-contrib-uglify": "^1.0.1",
    "grunt-mocha-istanbul": "^3.0.1",
    "grunt-saucelabs": "^8.6.2",
    "istanbul": "^0.4.2",
    "jscs": "^2.9.0",
    "jshint": "^2.6.0",
    "mocha": "^2.1.0"
  },
  "files": [
    "lib"
  ],
  "homepage": "https://github.com/indutny/elliptic",
  "keywords": [
    "EC",
    "Elliptic",
    "curve",
    "Cryptography"
  ],
  "license": "MIT",
  "main": "lib/elliptic.js",
  "name": "elliptic",
  "optionalDependencies": {},
  "readme": "# Elliptic [![Build Status](https://secure.travis-ci.org/indutny/elliptic.png)](http://travis-ci.org/indutny/elliptic) [![Coverage Status](https://coveralls.io/repos/indutny/elliptic/badge.svg?branch=master&service=github)](https://coveralls.io/github/indutny/elliptic?branch=master) [![Code Climate](https://codeclimate.com/github/indutny/elliptic/badges/gpa.svg)](https://codeclimate.com/github/indutny/elliptic)\n\n[![Saucelabs Test Status](https://saucelabs.com/browser-matrix/gh-indutny-elliptic.svg)](https://saucelabs.com/u/gh-indutny-elliptic)\n\nFast elliptic-curve cryptography in a plain javascript implementation.\n\nNOTE: Please take a look at http://safecurves.cr.yp.to/ before choosing a curve\nfor your cryptography operations.\n\n## Incentive\n\nECC is much slower than regular RSA cryptography, the JS implementations are\neven more slower.\n\n## Benchmarks\n\n```bash\n$ node benchmarks/index.js\nBenchmarking: sign\nelliptic#sign x 262 ops/sec ±0.51% (177 runs sampled)\neccjs#sign x 55.91 ops/sec ±0.90% (144 runs sampled)\n------------------------\nFastest is elliptic#sign\n========================\nBenchmarking: verify\nelliptic#verify x 113 ops/sec ±0.50% (166 runs sampled)\neccjs#verify x 48.56 ops/sec ±0.36% (125 runs sampled)\n------------------------\nFastest is elliptic#verify\n========================\nBenchmarking: gen\nelliptic#gen x 294 ops/sec ±0.43% (176 runs sampled)\neccjs#gen x 62.25 ops/sec ±0.63% (129 runs sampled)\n------------------------\nFastest is elliptic#gen\n========================\nBenchmarking: ecdh\nelliptic#ecdh x 136 ops/sec ±0.85% (156 runs sampled)\n------------------------\nFastest is elliptic#ecdh\n========================\n```\n\n## API\n\n### ECDSA\n\n```javascript\nvar EC = require('elliptic').ec;\n\n// Create and initialize EC context\n// (better do it once and reuse it)\nvar ec = new EC('secp256k1');\n\n// Generate keys\nvar key = ec.genKeyPair();\n\n// Sign message (must be an array, or it'll be treated as a hex sequence)\nvar msg = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ];\nvar signature = key.sign(msg);\n\n// Export DER encoded signature in Array\nvar derSign = signature.toDER();\n\n// Verify signature\nconsole.log(key.verify(msg, derSign));\n\n// CHECK WITH NO PRIVATE KEY\n\n// Public key as '04 + x + y'\nvar pub = '04bb1fa3...';\n\n// Signature MUST be either:\n// 1) hex-string of DER-encoded signature; or\n// 2) DER-encoded signature as buffer; or\n// 3) object with two hex-string properties (r and s)\n\nvar signature = 'b102ac...'; // case 1\nvar signature = new Buffer('...'); // case 2\nvar signature = { r: 'b1fc...', s: '9c42...' }; // case 3\n\n// Import public key\nvar key = ec.keyFromPublic(pub, 'hex');\n\n// Verify signature\nconsole.log(key.verify(msg, signature));\n```\n\n### EdDSA\n\n```javascript\nvar EdDSA = require('elliptic').eddsa;\n\n// Create and initialize EdDSA context\n// (better do it once and reuse it)\nvar ec = new EdDSA('ed25519');\n\n// Create key pair from secret\nvar key = ec.keyFromSecret('693e3c...'); // hex string, array or Buffer\n\n// Sign message (must be an array, or it'll be treated as a hex sequence)\nvar msg = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ];\nvar signature = key.sign(msg).toHex();\n\n// Verify signature\nconsole.log(key.verify(msg, signature));\n\n// CHECK WITH NO PRIVATE KEY\n\n// Import public key\nvar pub = '0a1af638...';\nvar key = ec.keyFromPublic(pub, 'hex');\n\n// Verify signature\nvar signature = '70bed1...';\nconsole.log(key.verify(msg, signature));\n```\n\n### ECDH\n\n```javascript\n// Generate keys\nvar key1 = ec.genKeyPair();\nvar key2 = ec.genKeyPair();\n\nvar shared1 = key1.derive(key2.getPublic());\nvar shared2 = key2.derive(key1.getPublic());\n\nconsole.log('Both shared secrets are BN instances');\nconsole.log(shared1.toString(16));\nconsole.log(shared2.toString(16));\n```\n\nNOTE: `.derive()` returns a [BN][1] instance.\n\n## Supported curves\n\nElliptic.js support following curve types:\n\n* Short Weierstrass\n* Montgomery\n* Edwards\n* Twisted Edwards\n\nFollowing curve 'presets' are embedded into the library:\n\n* `secp256k1`\n* `p192`\n* `p224`\n* `p256`\n* `p384`\n* `p521`\n* `curve25519`\n* `ed25519`\n\nNOTE: That `curve25519` could not be used for ECDSA, use `ed25519` instead.\n\n### Implementation details\n\nECDSA is using deterministic `k` value generation as per [RFC6979][0]. Most of\nthe curve operations are performed on non-affine coordinates (either projective\nor extended), various windowing techniques are used for different cases.\n\nAll operations are performed in reduction context using [bn.js][1], hashing is\nprovided by [hash.js][2]\n\n### Related projects\n\n* [eccrypto][3]: isomorphic implementation of ECDSA, ECDH and ECIES for both\n  browserify and node (uses `elliptic` for browser and [secp256k1-node][4] for\n  node)\n\n#### LICENSE\n\nThis software is licensed under the MIT License.\n\nCopyright Fedor Indutny, 2014.\n\nPermission is hereby granted, free of charge, to any person obtaining a\ncopy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to permit\npersons to whom the Software is furnished to do so, subject to the\nfollowing conditions:\n\nThe above copyright notice and this permission notice shall be included\nin all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\nNO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\nDAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\nOTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\nUSE OR OTHER DEALINGS IN THE SOFTWARE.\n\n[0]: http://tools.ietf.org/html/rfc6979\n[1]: https://github.com/indutny/bn.js\n[2]: https://github.com/indutny/hash.js\n[3]: https://github.com/bitchan/eccrypto\n[4]: https://github.com/wanderer/secp256k1-node\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/indutny/elliptic.git"
  },
  "scripts": {
    "jscs": "jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js",
    "jshint": "jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js",
    "lint": "npm run jscs && npm run jshint",
    "test": "npm run lint && npm run unit",
    "unit": "istanbul test _mocha --reporter=spec test/index.js",
    "version": "grunt dist && git add dist/"
  },
  "version": "6.3.1"
}

},{}],368:[function(require,module,exports){
var hash = exports;

hash.utils = require('./hash/utils');
hash.common = require('./hash/common');
hash.sha = require('./hash/sha');
hash.ripemd = require('./hash/ripemd');
hash.hmac = require('./hash/hmac');

// Proxy hash functions to the main object
hash.sha1 = hash.sha.sha1;
hash.sha256 = hash.sha.sha256;
hash.sha224 = hash.sha.sha224;
hash.sha384 = hash.sha.sha384;
hash.sha512 = hash.sha.sha512;
hash.ripemd160 = hash.ripemd.ripemd160;

},{"./hash/common":369,"./hash/hmac":370,"./hash/ripemd":371,"./hash/sha":372,"./hash/utils":373}],369:[function(require,module,exports){
var hash = require('../hash');
var utils = hash.utils;
var assert = utils.assert;

function BlockHash() {
  this.pending = null;
  this.pendingTotal = 0;
  this.blockSize = this.constructor.blockSize;
  this.outSize = this.constructor.outSize;
  this.hmacStrength = this.constructor.hmacStrength;
  this.padLength = this.constructor.padLength / 8;
  this.endian = 'big';

  this._delta8 = this.blockSize / 8;
  this._delta32 = this.blockSize / 32;
}
exports.BlockHash = BlockHash;

BlockHash.prototype.update = function update(msg, enc) {
  // Convert message to array, pad it, and join into 32bit blocks
  msg = utils.toArray(msg, enc);
  if (!this.pending)
    this.pending = msg;
  else
    this.pending = this.pending.concat(msg);
  this.pendingTotal += msg.length;

  // Enough data, try updating
  if (this.pending.length >= this._delta8) {
    msg = this.pending;

    // Process pending data in blocks
    var r = msg.length % this._delta8;
    this.pending = msg.slice(msg.length - r, msg.length);
    if (this.pending.length === 0)
      this.pending = null;

    msg = utils.join32(msg, 0, msg.length - r, this.endian);
    for (var i = 0; i < msg.length; i += this._delta32)
      this._update(msg, i, i + this._delta32);
  }

  return this;
};

BlockHash.prototype.digest = function digest(enc) {
  this.update(this._pad());
  assert(this.pending === null);

  return this._digest(enc);
};

BlockHash.prototype._pad = function pad() {
  var len = this.pendingTotal;
  var bytes = this._delta8;
  var k = bytes - ((len + this.padLength) % bytes);
  var res = new Array(k + this.padLength);
  res[0] = 0x80;
  for (var i = 1; i < k; i++)
    res[i] = 0;

  // Append length
  len <<= 3;
  if (this.endian === 'big') {
    for (var t = 8; t < this.padLength; t++)
      res[i++] = 0;

    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = (len >>> 24) & 0xff;
    res[i++] = (len >>> 16) & 0xff;
    res[i++] = (len >>> 8) & 0xff;
    res[i++] = len & 0xff;
  } else {
    res[i++] = len & 0xff;
    res[i++] = (len >>> 8) & 0xff;
    res[i++] = (len >>> 16) & 0xff;
    res[i++] = (len >>> 24) & 0xff;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;

    for (var t = 8; t < this.padLength; t++)
      res[i++] = 0;
  }

  return res;
};

},{"../hash":368}],370:[function(require,module,exports){
var hmac = exports;

var hash = require('../hash');
var utils = hash.utils;
var assert = utils.assert;

function Hmac(hash, key, enc) {
  if (!(this instanceof Hmac))
    return new Hmac(hash, key, enc);
  this.Hash = hash;
  this.blockSize = hash.blockSize / 8;
  this.outSize = hash.outSize / 8;
  this.inner = null;
  this.outer = null;

  this._init(utils.toArray(key, enc));
}
module.exports = Hmac;

Hmac.prototype._init = function init(key) {
  // Shorten key, if needed
  if (key.length > this.blockSize)
    key = new this.Hash().update(key).digest();
  assert(key.length <= this.blockSize);

  // Add padding to key
  for (var i = key.length; i < this.blockSize; i++)
    key.push(0);

  for (var i = 0; i < key.length; i++)
    key[i] ^= 0x36;
  this.inner = new this.Hash().update(key);

  // 0x36 ^ 0x5c = 0x6a
  for (var i = 0; i < key.length; i++)
    key[i] ^= 0x6a;
  this.outer = new this.Hash().update(key);
};

Hmac.prototype.update = function update(msg, enc) {
  this.inner.update(msg, enc);
  return this;
};

Hmac.prototype.digest = function digest(enc) {
  this.outer.update(this.inner.digest());
  return this.outer.digest(enc);
};

},{"../hash":368}],371:[function(require,module,exports){
var hash = require('../hash');
var utils = hash.utils;

var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_3 = utils.sum32_3;
var sum32_4 = utils.sum32_4;
var BlockHash = hash.common.BlockHash;

function RIPEMD160() {
  if (!(this instanceof RIPEMD160))
    return new RIPEMD160();

  BlockHash.call(this);

  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];
  this.endian = 'little';
}
utils.inherits(RIPEMD160, BlockHash);
exports.ripemd160 = RIPEMD160;

RIPEMD160.blockSize = 512;
RIPEMD160.outSize = 160;
RIPEMD160.hmacStrength = 192;
RIPEMD160.padLength = 64;

RIPEMD160.prototype._update = function update(msg, start) {
  var A = this.h[0];
  var B = this.h[1];
  var C = this.h[2];
  var D = this.h[3];
  var E = this.h[4];
  var Ah = A;
  var Bh = B;
  var Ch = C;
  var Dh = D;
  var Eh = E;
  for (var j = 0; j < 80; j++) {
    var T = sum32(
      rotl32(
        sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),
        s[j]),
      E);
    A = E;
    E = D;
    D = rotl32(C, 10);
    C = B;
    B = T;
    T = sum32(
      rotl32(
        sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),
        sh[j]),
      Eh);
    Ah = Eh;
    Eh = Dh;
    Dh = rotl32(Ch, 10);
    Ch = Bh;
    Bh = T;
  }
  T = sum32_3(this.h[1], C, Dh);
  this.h[1] = sum32_3(this.h[2], D, Eh);
  this.h[2] = sum32_3(this.h[3], E, Ah);
  this.h[3] = sum32_3(this.h[4], A, Bh);
  this.h[4] = sum32_3(this.h[0], B, Ch);
  this.h[0] = T;
};

RIPEMD160.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'little');
  else
    return utils.split32(this.h, 'little');
};

function f(j, x, y, z) {
  if (j <= 15)
    return x ^ y ^ z;
  else if (j <= 31)
    return (x & y) | ((~x) & z);
  else if (j <= 47)
    return (x | (~y)) ^ z;
  else if (j <= 63)
    return (x & z) | (y & (~z));
  else
    return x ^ (y | (~z));
}

function K(j) {
  if (j <= 15)
    return 0x00000000;
  else if (j <= 31)
    return 0x5a827999;
  else if (j <= 47)
    return 0x6ed9eba1;
  else if (j <= 63)
    return 0x8f1bbcdc;
  else
    return 0xa953fd4e;
}

function Kh(j) {
  if (j <= 15)
    return 0x50a28be6;
  else if (j <= 31)
    return 0x5c4dd124;
  else if (j <= 47)
    return 0x6d703ef3;
  else if (j <= 63)
    return 0x7a6d76e9;
  else
    return 0x00000000;
}

var r = [
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
];

var rh = [
  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
];

var s = [
  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
];

var sh = [
  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
];

},{"../hash":368}],372:[function(require,module,exports){
var hash = require('../hash');
var utils = hash.utils;
var assert = utils.assert;

var rotr32 = utils.rotr32;
var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_4 = utils.sum32_4;
var sum32_5 = utils.sum32_5;
var rotr64_hi = utils.rotr64_hi;
var rotr64_lo = utils.rotr64_lo;
var shr64_hi = utils.shr64_hi;
var shr64_lo = utils.shr64_lo;
var sum64 = utils.sum64;
var sum64_hi = utils.sum64_hi;
var sum64_lo = utils.sum64_lo;
var sum64_4_hi = utils.sum64_4_hi;
var sum64_4_lo = utils.sum64_4_lo;
var sum64_5_hi = utils.sum64_5_hi;
var sum64_5_lo = utils.sum64_5_lo;
var BlockHash = hash.common.BlockHash;

var sha256_K = [
  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
];

var sha512_K = [
  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
];

var sha1_K = [
  0x5A827999, 0x6ED9EBA1,
  0x8F1BBCDC, 0xCA62C1D6
];

function SHA256() {
  if (!(this instanceof SHA256))
    return new SHA256();

  BlockHash.call(this);
  this.h = [ 0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
             0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19 ];
  this.k = sha256_K;
  this.W = new Array(64);
}
utils.inherits(SHA256, BlockHash);
exports.sha256 = SHA256;

SHA256.blockSize = 512;
SHA256.outSize = 256;
SHA256.hmacStrength = 192;
SHA256.padLength = 64;

SHA256.prototype._update = function _update(msg, start) {
  var W = this.W;

  for (var i = 0; i < 16; i++)
    W[i] = msg[start + i];
  for (; i < W.length; i++)
    W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);

  var a = this.h[0];
  var b = this.h[1];
  var c = this.h[2];
  var d = this.h[3];
  var e = this.h[4];
  var f = this.h[5];
  var g = this.h[6];
  var h = this.h[7];

  assert(this.k.length === W.length);
  for (var i = 0; i < W.length; i++) {
    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
    var T2 = sum32(s0_256(a), maj32(a, b, c));
    h = g;
    g = f;
    f = e;
    e = sum32(d, T1);
    d = c;
    c = b;
    b = a;
    a = sum32(T1, T2);
  }

  this.h[0] = sum32(this.h[0], a);
  this.h[1] = sum32(this.h[1], b);
  this.h[2] = sum32(this.h[2], c);
  this.h[3] = sum32(this.h[3], d);
  this.h[4] = sum32(this.h[4], e);
  this.h[5] = sum32(this.h[5], f);
  this.h[6] = sum32(this.h[6], g);
  this.h[7] = sum32(this.h[7], h);
};

SHA256.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};

function SHA224() {
  if (!(this instanceof SHA224))
    return new SHA224();

  SHA256.call(this);
  this.h = [ 0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
             0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];
}
utils.inherits(SHA224, SHA256);
exports.sha224 = SHA224;

SHA224.blockSize = 512;
SHA224.outSize = 224;
SHA224.hmacStrength = 192;
SHA224.padLength = 64;

SHA224.prototype._digest = function digest(enc) {
  // Just truncate output
  if (enc === 'hex')
    return utils.toHex32(this.h.slice(0, 7), 'big');
  else
    return utils.split32(this.h.slice(0, 7), 'big');
};

function SHA512() {
  if (!(this instanceof SHA512))
    return new SHA512();

  BlockHash.call(this);
  this.h = [ 0x6a09e667, 0xf3bcc908,
             0xbb67ae85, 0x84caa73b,
             0x3c6ef372, 0xfe94f82b,
             0xa54ff53a, 0x5f1d36f1,
             0x510e527f, 0xade682d1,
             0x9b05688c, 0x2b3e6c1f,
             0x1f83d9ab, 0xfb41bd6b,
             0x5be0cd19, 0x137e2179 ];
  this.k = sha512_K;
  this.W = new Array(160);
}
utils.inherits(SHA512, BlockHash);
exports.sha512 = SHA512;

SHA512.blockSize = 1024;
SHA512.outSize = 512;
SHA512.hmacStrength = 192;
SHA512.padLength = 128;

SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
  var W = this.W;

  // 32 x 32bit words
  for (var i = 0; i < 32; i++)
    W[i] = msg[start + i];
  for (; i < W.length; i += 2) {
    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2
    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
    var c1_hi = W[i - 14];  // i - 7
    var c1_lo = W[i - 13];
    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15
    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
    var c3_hi = W[i - 32];  // i - 16
    var c3_lo = W[i - 31];

    W[i] = sum64_4_hi(c0_hi, c0_lo,
                      c1_hi, c1_lo,
                      c2_hi, c2_lo,
                      c3_hi, c3_lo);
    W[i + 1] = sum64_4_lo(c0_hi, c0_lo,
                          c1_hi, c1_lo,
                          c2_hi, c2_lo,
                          c3_hi, c3_lo);
  }
};

SHA512.prototype._update = function _update(msg, start) {
  this._prepareBlock(msg, start);

  var W = this.W;

  var ah = this.h[0];
  var al = this.h[1];
  var bh = this.h[2];
  var bl = this.h[3];
  var ch = this.h[4];
  var cl = this.h[5];
  var dh = this.h[6];
  var dl = this.h[7];
  var eh = this.h[8];
  var el = this.h[9];
  var fh = this.h[10];
  var fl = this.h[11];
  var gh = this.h[12];
  var gl = this.h[13];
  var hh = this.h[14];
  var hl = this.h[15];

  assert(this.k.length === W.length);
  for (var i = 0; i < W.length; i += 2) {
    var c0_hi = hh;
    var c0_lo = hl;
    var c1_hi = s1_512_hi(eh, el);
    var c1_lo = s1_512_lo(eh, el);
    var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
    var c3_hi = this.k[i];
    var c3_lo = this.k[i + 1];
    var c4_hi = W[i];
    var c4_lo = W[i + 1];

    var T1_hi = sum64_5_hi(c0_hi, c0_lo,
                           c1_hi, c1_lo,
                           c2_hi, c2_lo,
                           c3_hi, c3_lo,
                           c4_hi, c4_lo);
    var T1_lo = sum64_5_lo(c0_hi, c0_lo,
                           c1_hi, c1_lo,
                           c2_hi, c2_lo,
                           c3_hi, c3_lo,
                           c4_hi, c4_lo);

    var c0_hi = s0_512_hi(ah, al);
    var c0_lo = s0_512_lo(ah, al);
    var c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
    var c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);

    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);

    hh = gh;
    hl = gl;

    gh = fh;
    gl = fl;

    fh = eh;
    fl = el;

    eh = sum64_hi(dh, dl, T1_hi, T1_lo);
    el = sum64_lo(dl, dl, T1_hi, T1_lo);

    dh = ch;
    dl = cl;

    ch = bh;
    cl = bl;

    bh = ah;
    bl = al;

    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
  }

  sum64(this.h, 0, ah, al);
  sum64(this.h, 2, bh, bl);
  sum64(this.h, 4, ch, cl);
  sum64(this.h, 6, dh, dl);
  sum64(this.h, 8, eh, el);
  sum64(this.h, 10, fh, fl);
  sum64(this.h, 12, gh, gl);
  sum64(this.h, 14, hh, hl);
};

SHA512.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};

function SHA384() {
  if (!(this instanceof SHA384))
    return new SHA384();

  SHA512.call(this);
  this.h = [ 0xcbbb9d5d, 0xc1059ed8,
             0x629a292a, 0x367cd507,
             0x9159015a, 0x3070dd17,
             0x152fecd8, 0xf70e5939,
             0x67332667, 0xffc00b31,
             0x8eb44a87, 0x68581511,
             0xdb0c2e0d, 0x64f98fa7,
             0x47b5481d, 0xbefa4fa4 ];
}
utils.inherits(SHA384, SHA512);
exports.sha384 = SHA384;

SHA384.blockSize = 1024;
SHA384.outSize = 384;
SHA384.hmacStrength = 192;
SHA384.padLength = 128;

SHA384.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h.slice(0, 12), 'big');
  else
    return utils.split32(this.h.slice(0, 12), 'big');
};

function SHA1() {
  if (!(this instanceof SHA1))
    return new SHA1();

  BlockHash.call(this);
  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe,
             0x10325476, 0xc3d2e1f0 ];
  this.W = new Array(80);
}

utils.inherits(SHA1, BlockHash);
exports.sha1 = SHA1;

SHA1.blockSize = 512;
SHA1.outSize = 160;
SHA1.hmacStrength = 80;
SHA1.padLength = 64;

SHA1.prototype._update = function _update(msg, start) {
  var W = this.W;

  for (var i = 0; i < 16; i++)
    W[i] = msg[start + i];

  for(; i < W.length; i++)
    W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);

  var a = this.h[0];
  var b = this.h[1];
  var c = this.h[2];
  var d = this.h[3];
  var e = this.h[4];

  for (var i = 0; i < W.length; i++) {
    var s = ~~(i / 20);
    var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
    e = d;
    d = c;
    c = rotl32(b, 30);
    b = a;
    a = t;
  }

  this.h[0] = sum32(this.h[0], a);
  this.h[1] = sum32(this.h[1], b);
  this.h[2] = sum32(this.h[2], c);
  this.h[3] = sum32(this.h[3], d);
  this.h[4] = sum32(this.h[4], e);
};

SHA1.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};

function ch32(x, y, z) {
  return (x & y) ^ ((~x) & z);
}

function maj32(x, y, z) {
  return (x & y) ^ (x & z) ^ (y & z);
}

function p32(x, y, z) {
  return x ^ y ^ z;
}

function s0_256(x) {
  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
}

function s1_256(x) {
  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
}

function g0_256(x) {
  return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);
}

function g1_256(x) {
  return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);
}

function ft_1(s, x, y, z) {
  if (s === 0)
    return ch32(x, y, z);
  if (s === 1 || s === 3)
    return p32(x, y, z);
  if (s === 2)
    return maj32(x, y, z);
}

function ch64_hi(xh, xl, yh, yl, zh, zl) {
  var r = (xh & yh) ^ ((~xh) & zh);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function ch64_lo(xh, xl, yh, yl, zh, zl) {
  var r = (xl & yl) ^ ((~xl) & zl);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function maj64_hi(xh, xl, yh, yl, zh, zl) {
  var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function maj64_lo(xh, xl, yh, yl, zh, zl) {
  var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s0_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 28);
  var c1_hi = rotr64_hi(xl, xh, 2);  // 34
  var c2_hi = rotr64_hi(xl, xh, 7);  // 39

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s0_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 28);
  var c1_lo = rotr64_lo(xl, xh, 2);  // 34
  var c2_lo = rotr64_lo(xl, xh, 7);  // 39

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s1_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 14);
  var c1_hi = rotr64_hi(xh, xl, 18);
  var c2_hi = rotr64_hi(xl, xh, 9);  // 41

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s1_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 14);
  var c1_lo = rotr64_lo(xh, xl, 18);
  var c2_lo = rotr64_lo(xl, xh, 9);  // 41

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g0_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 1);
  var c1_hi = rotr64_hi(xh, xl, 8);
  var c2_hi = shr64_hi(xh, xl, 7);

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g0_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 1);
  var c1_lo = rotr64_lo(xh, xl, 8);
  var c2_lo = shr64_lo(xh, xl, 7);

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g1_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 19);
  var c1_hi = rotr64_hi(xl, xh, 29);  // 61
  var c2_hi = shr64_hi(xh, xl, 6);

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g1_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 19);
  var c1_lo = rotr64_lo(xl, xh, 29);  // 61
  var c2_lo = shr64_lo(xh, xl, 6);

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

},{"../hash":368}],373:[function(require,module,exports){
var utils = exports;
var inherits = require('inherits');

function toArray(msg, enc) {
  if (Array.isArray(msg))
    return msg.slice();
  if (!msg)
    return [];
  var res = [];
  if (typeof msg === 'string') {
    if (!enc) {
      for (var i = 0; i < msg.length; i++) {
        var c = msg.charCodeAt(i);
        var hi = c >> 8;
        var lo = c & 0xff;
        if (hi)
          res.push(hi, lo);
        else
          res.push(lo);
      }
    } else if (enc === 'hex') {
      msg = msg.replace(/[^a-z0-9]+/ig, '');
      if (msg.length % 2 !== 0)
        msg = '0' + msg;
      for (var i = 0; i < msg.length; i += 2)
        res.push(parseInt(msg[i] + msg[i + 1], 16));
    }
  } else {
    for (var i = 0; i < msg.length; i++)
      res[i] = msg[i] | 0;
  }
  return res;
}
utils.toArray = toArray;

function toHex(msg) {
  var res = '';
  for (var i = 0; i < msg.length; i++)
    res += zero2(msg[i].toString(16));
  return res;
}
utils.toHex = toHex;

function htonl(w) {
  var res = (w >>> 24) |
            ((w >>> 8) & 0xff00) |
            ((w << 8) & 0xff0000) |
            ((w & 0xff) << 24);
  return res >>> 0;
}
utils.htonl = htonl;

function toHex32(msg, endian) {
  var res = '';
  for (var i = 0; i < msg.length; i++) {
    var w = msg[i];
    if (endian === 'little')
      w = htonl(w);
    res += zero8(w.toString(16));
  }
  return res;
}
utils.toHex32 = toHex32;

function zero2(word) {
  if (word.length === 1)
    return '0' + word;
  else
    return word;
}
utils.zero2 = zero2;

function zero8(word) {
  if (word.length === 7)
    return '0' + word;
  else if (word.length === 6)
    return '00' + word;
  else if (word.length === 5)
    return '000' + word;
  else if (word.length === 4)
    return '0000' + word;
  else if (word.length === 3)
    return '00000' + word;
  else if (word.length === 2)
    return '000000' + word;
  else if (word.length === 1)
    return '0000000' + word;
  else
    return word;
}
utils.zero8 = zero8;

function join32(msg, start, end, endian) {
  var len = end - start;
  assert(len % 4 === 0);
  var res = new Array(len / 4);
  for (var i = 0, k = start; i < res.length; i++, k += 4) {
    var w;
    if (endian === 'big')
      w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];
    else
      w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];
    res[i] = w >>> 0;
  }
  return res;
}
utils.join32 = join32;

function split32(msg, endian) {
  var res = new Array(msg.length * 4);
  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
    var m = msg[i];
    if (endian === 'big') {
      res[k] = m >>> 24;
      res[k + 1] = (m >>> 16) & 0xff;
      res[k + 2] = (m >>> 8) & 0xff;
      res[k + 3] = m & 0xff;
    } else {
      res[k + 3] = m >>> 24;
      res[k + 2] = (m >>> 16) & 0xff;
      res[k + 1] = (m >>> 8) & 0xff;
      res[k] = m & 0xff;
    }
  }
  return res;
}
utils.split32 = split32;

function rotr32(w, b) {
  return (w >>> b) | (w << (32 - b));
}
utils.rotr32 = rotr32;

function rotl32(w, b) {
  return (w << b) | (w >>> (32 - b));
}
utils.rotl32 = rotl32;

function sum32(a, b) {
  return (a + b) >>> 0;
}
utils.sum32 = sum32;

function sum32_3(a, b, c) {
  return (a + b + c) >>> 0;
}
utils.sum32_3 = sum32_3;

function sum32_4(a, b, c, d) {
  return (a + b + c + d) >>> 0;
}
utils.sum32_4 = sum32_4;

function sum32_5(a, b, c, d, e) {
  return (a + b + c + d + e) >>> 0;
}
utils.sum32_5 = sum32_5;

function assert(cond, msg) {
  if (!cond)
    throw new Error(msg || 'Assertion failed');
}
utils.assert = assert;

utils.inherits = inherits;

function sum64(buf, pos, ah, al) {
  var bh = buf[pos];
  var bl = buf[pos + 1];

  var lo = (al + bl) >>> 0;
  var hi = (lo < al ? 1 : 0) + ah + bh;
  buf[pos] = hi >>> 0;
  buf[pos + 1] = lo;
}
exports.sum64 = sum64;

function sum64_hi(ah, al, bh, bl) {
  var lo = (al + bl) >>> 0;
  var hi = (lo < al ? 1 : 0) + ah + bh;
  return hi >>> 0;
};
exports.sum64_hi = sum64_hi;

function sum64_lo(ah, al, bh, bl) {
  var lo = al + bl;
  return lo >>> 0;
};
exports.sum64_lo = sum64_lo;

function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
  var carry = 0;
  var lo = al;
  lo = (lo + bl) >>> 0;
  carry += lo < al ? 1 : 0;
  lo = (lo + cl) >>> 0;
  carry += lo < cl ? 1 : 0;
  lo = (lo + dl) >>> 0;
  carry += lo < dl ? 1 : 0;

  var hi = ah + bh + ch + dh + carry;
  return hi >>> 0;
};
exports.sum64_4_hi = sum64_4_hi;

function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
  var lo = al + bl + cl + dl;
  return lo >>> 0;
};
exports.sum64_4_lo = sum64_4_lo;

function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
  var carry = 0;
  var lo = al;
  lo = (lo + bl) >>> 0;
  carry += lo < al ? 1 : 0;
  lo = (lo + cl) >>> 0;
  carry += lo < cl ? 1 : 0;
  lo = (lo + dl) >>> 0;
  carry += lo < dl ? 1 : 0;
  lo = (lo + el) >>> 0;
  carry += lo < el ? 1 : 0;

  var hi = ah + bh + ch + dh + eh + carry;
  return hi >>> 0;
};
exports.sum64_5_hi = sum64_5_hi;

function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
  var lo = al + bl + cl + dl + el;

  return lo >>> 0;
};
exports.sum64_5_lo = sum64_5_lo;

function rotr64_hi(ah, al, num) {
  var r = (al << (32 - num)) | (ah >>> num);
  return r >>> 0;
};
exports.rotr64_hi = rotr64_hi;

function rotr64_lo(ah, al, num) {
  var r = (ah << (32 - num)) | (al >>> num);
  return r >>> 0;
};
exports.rotr64_lo = rotr64_lo;

function shr64_hi(ah, al, num) {
  return ah >>> num;
};
exports.shr64_hi = shr64_hi;

function shr64_lo(ah, al, num) {
  var r = (ah << (32 - num)) | (al >>> num);
  return r >>> 0;
};
exports.shr64_lo = shr64_lo;

},{"inherits":374}],374:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}],375:[function(require,module,exports){
/**
 * Injecter
 * ========
 *
 * This is a dependency injector specifically designed for use with Yours
 * Bitcoin. In order to allow injecting dependencies, Yours Bitcoin classes
 * provide an "inject" method that makes a new class with injected
 * dependencies. However, that method by itself presents a problem, because it
 * creates a new class every time it is used, leaving the burden of caching the
 * classes to the user. Thus the injector allows us to easily wrap an inject
 * method that keeps a cache of the created classes, lowing memory burden, and
 * allowing the instanceof operator to work correctly.
 */
'use strict'
let classmaps = new Map()

module.exports = function injector (inject, dependencies) {
  if (classmaps.get(inject) === undefined) {
    classmaps.set(inject, new Map())
  }

  let classmap = classmaps.get(inject)
  let meminject = function (deps) {
    let Class = classmap.get(deps)
    if (Class !== undefined) {
      return Class
    }

    Class = inject(Object.assign({}, dependencies, deps))
    classmap.set(deps, Class)

    // The "inject" and "injected" properties are non-enumerable so they don't
    // ruin any code that may enumerate properties of your classes.
    Object.defineProperty(Class, 'inject', {
      value: meminject,
      enumerable: false
    })
    Object.defineProperty(Class, 'injected', {
      value: deps,
      enumerable: false
    })
    return Class
  }

  return meminject
}

},{}],376:[function(require,module,exports){
(function (process,global,Buffer){
'use strict'

function oldBrowser () {
  throw new Error('secure random number generation not supported by this browser\nuse chrome, FireFox or Internet Explorer 11')
}

var crypto = global.crypto || global.msCrypto

if (crypto && crypto.getRandomValues) {
  module.exports = randomBytes
} else {
  module.exports = oldBrowser
}

function randomBytes (size, cb) {
  // phantomjs needs to throw
  if (size > 65536) throw new Error('requested too many random bytes')
  // in case browserify  isn't using the Uint8Array version
  var rawBytes = new global.Uint8Array(size)

  // This will not work in older browsers.
  // See https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
  if (size > 0) {  // getRandomValues fails on IE if size == 0
    crypto.getRandomValues(rawBytes)
  }
  // phantomjs doesn't like a buffer being passed here
  var bytes = new Buffer(rawBytes.buffer)

  if (typeof cb === 'function') {
    return process.nextTick(function () {
      cb(null, bytes)
    })
  }

  return bytes
}

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer)

},{"_process":316,"buffer":17}]},{},[3])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJsaWIvYWRkcnMva2V5LXBhaXItYWRkcmVzcy5qcyIsImxpYi9hZGRycy9tdWx0aXNpZy5qcyIsImxpYi9hZ2VudC5qcyIsImxpYi9jb25zdHMuanMiLCJsaWIvb3V0cHV0LmpzIiwibGliL3NjcnRzL2h0bGMtc2VjcmV0LmpzIiwibGliL3NjcnRzL3Jldi1zZWNyZXQuanMiLCJsaWIvc2NydHMvc2VjcmV0LmpzIiwibGliL3R4cy9jb21taXRtZW50LmpzIiwibGliL3R4cy9mdW5kaW5nLmpzIiwibGliL3R4cy90eC5qcyIsImxpYi93YWxsZXQuanMiLCJub2RlX21vZHVsZXMvYXNpbmsvaW5kZXguanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbGliL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2Jhc2U2NC1qcy9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L2xpYi9fZW1wdHkuanMiLCJub2RlX21vZHVsZXMvYnVmZmVyL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvZm4vcmVnZXhwL2VzY2FwZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2EtZnVuY3Rpb24uanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hLW51bWJlci12YWx1ZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FkZC10by11bnNjb3BhYmxlcy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FuLWluc3RhbmNlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYW4tb2JqZWN0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktY29weS13aXRoaW4uanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1maWxsLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktZnJvbS1pdGVyYWJsZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LWluY2x1ZGVzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktbWV0aG9kcy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LXJlZHVjZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LXNwZWNpZXMtY29uc3RydWN0b3IuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1zcGVjaWVzLWNyZWF0ZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2JpbmQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jbGFzc29mLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29mLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29sbGVjdGlvbi1zdHJvbmcuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb2xsZWN0aW9uLXRvLWpzb24uanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb2xsZWN0aW9uLXdlYWsuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb2xsZWN0aW9uLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29yZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NyZWF0ZS1wcm9wZXJ0eS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2N0eC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2RhdGUtdG8tcHJpbWl0aXZlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZGVmaW5lZC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2Rlc2NyaXB0b3JzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZG9tLWNyZWF0ZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2VudW0tYnVnLWtleXMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19lbnVtLWtleXMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19leHBvcnQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mYWlscy1pcy1yZWdleHAuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mYWlscy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ZpeC1yZS13a3MuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mbGFncy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2Zvci1vZi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2dsb2JhbC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2hhcy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2hpZGUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19odG1sLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faWU4LWRvbS1kZWZpbmUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pbmhlcml0LWlmLXJlcXVpcmVkLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faW52b2tlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faW9iamVjdC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lzLWFycmF5LWl0ZXIuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pcy1hcnJheS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lzLWludGVnZXIuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pcy1vYmplY3QuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pcy1yZWdleHAuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLWNhbGwuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLWNyZWF0ZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXItZGVmaW5lLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1kZXRlY3QuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLXN0ZXAuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyYXRvcnMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19rZXlvZi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2xpYnJhcnkuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tYXRoLWV4cG0xLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWF0aC1sb2cxcC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21hdGgtc2lnbi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21ldGEuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tZXRhZGF0YS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21pY3JvdGFzay5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1hc3NpZ24uanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtY3JlYXRlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWRwLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWRwcy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1mb3JjZWQtcGFtLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdvcGQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wbi1leHQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wbi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1nb3BzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdwby5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1rZXlzLWludGVybmFsLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWtleXMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtcGllLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LXNhcC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC10by1hcnJheS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX293bi1rZXlzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcGFyc2UtZmxvYXQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wYXJzZS1pbnQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wYXJ0aWFsLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcGF0aC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3Byb3BlcnR5LWRlc2MuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19yZWRlZmluZS1hbGwuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19yZWRlZmluZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3JlcGxhY2VyLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2FtZS12YWx1ZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NldC1wcm90by5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NldC1zcGVjaWVzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2V0LXRvLXN0cmluZy10YWcuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zaGFyZWQta2V5LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2hhcmVkLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3BlY2llcy1jb25zdHJ1Y3Rvci5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmljdC1tZXRob2QuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctYXQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctY29udGV4dC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy1odG1sLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLXBhZC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy1yZXBlYXQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctdHJpbS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy13cy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3Rhc2suanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWludGVnZXIuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1pb2JqZWN0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8tbGVuZ3RoLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8tb2JqZWN0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8tcHJpbWl0aXZlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdHlwZWQtYXJyYXkuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190eXBlZC1idWZmZXIuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190eXBlZC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3VpZC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3drcy1kZWZpbmUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL193a3MtZXh0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fd2tzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2NvcmUucmVnZXhwLmVzY2FwZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmNvcHktd2l0aGluLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZXZlcnkuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5maWxsLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZmlsdGVyLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZmluZC1pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZpbmQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5mb3ItZWFjaC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZyb20uanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5pbmRleC1vZi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmlzLWFycmF5LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuaXRlcmF0b3IuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5qb2luLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkubGFzdC1pbmRleC1vZi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5Lm1hcC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5Lm9mLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkucmVkdWNlLXJpZ2h0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkucmVkdWNlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuc2xpY2UuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5zb21lLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuc29ydC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnNwZWNpZXMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5kYXRlLm5vdy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmRhdGUudG8taXNvLXN0cmluZy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmRhdGUudG8tanNvbi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmRhdGUudG8tcHJpbWl0aXZlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZGF0ZS50by1zdHJpbmcuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5mdW5jdGlvbi5iaW5kLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZnVuY3Rpb24uaGFzLWluc3RhbmNlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZnVuY3Rpb24ubmFtZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hcC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguYWNvc2guanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmFzaW5oLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5hdGFuaC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguY2JydC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguY2x6MzIuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmNvc2guanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmV4cG0xLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5mcm91bmQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmh5cG90LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5pbXVsLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5sb2cxMC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGgubG9nMXAuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmxvZzIuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLnNpZ24uanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLnNpbmguanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLnRhbmguanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLnRydW5jLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmNvbnN0cnVjdG9yLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmVwc2lsb24uanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuaXMtZmluaXRlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmlzLWludGVnZXIuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuaXMtbmFuLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmlzLXNhZmUtaW50ZWdlci5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5tYXgtc2FmZS1pbnRlZ2VyLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLm1pbi1zYWZlLWludGVnZXIuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIucGFyc2UtZmxvYXQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIucGFyc2UtaW50LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLnRvLWZpeGVkLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLnRvLXByZWNpc2lvbi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5hc3NpZ24uanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuY3JlYXRlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0aWVzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0eS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5mcmVlemUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmdldC1vd24tcHJvcGVydHktbmFtZXMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LXByb3RvdHlwZS1vZi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1leHRlbnNpYmxlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmlzLWZyb3plbi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1zZWFsZWQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuaXMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3Qua2V5cy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5wcmV2ZW50LWV4dGVuc2lvbnMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3Quc2VhbC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5zZXQtcHJvdG90eXBlLW9mLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LnRvLXN0cmluZy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnBhcnNlLWZsb2F0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucGFyc2UtaW50LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucHJvbWlzZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuYXBwbHkuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmNvbnN0cnVjdC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZGVmaW5lLXByb3BlcnR5LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5kZWxldGUtcHJvcGVydHkuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmVudW1lcmF0ZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5nZXQtcHJvdG90eXBlLW9mLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5nZXQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0Lmhhcy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuaXMtZXh0ZW5zaWJsZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3Qub3duLWtleXMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LnByZXZlbnQtZXh0ZW5zaW9ucy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3Quc2V0LXByb3RvdHlwZS1vZi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3Quc2V0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLmNvbnN0cnVjdG9yLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLmZsYWdzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLm1hdGNoLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLnJlcGxhY2UuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuc2VhcmNoLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLnNwbGl0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLnRvLXN0cmluZy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnNldC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5hbmNob3IuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuYmlnLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmJsaW5rLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmJvbGQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuY29kZS1wb2ludC1hdC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5lbmRzLXdpdGguanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuZml4ZWQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuZm9udGNvbG9yLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmZvbnRzaXplLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmZyb20tY29kZS1wb2ludC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5pbmNsdWRlcy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5pdGFsaWNzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmxpbmsuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcucmF3LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnJlcGVhdC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zbWFsbC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zdGFydHMtd2l0aC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zdHJpa2UuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuc3ViLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnN1cC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy50cmltLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3ltYm9sLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuYXJyYXktYnVmZmVyLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuZGF0YS12aWV3LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuZmxvYXQzMi1hcnJheS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmZsb2F0NjQtYXJyYXkuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5pbnQxNi1hcnJheS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmludDMyLWFycmF5LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuaW50OC1hcnJheS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQxNi1hcnJheS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQzMi1hcnJheS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQ4LWFycmF5LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQudWludDgtY2xhbXBlZC1hcnJheS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LndlYWstbWFwLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYud2Vhay1zZXQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5hcnJheS5pbmNsdWRlcy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LmFzYXAuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5lcnJvci5pcy1lcnJvci5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hcC50by1qc29uLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC5pYWRkaC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguaW11bGguanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLmlzdWJoLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC51bXVsaC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC5kZWZpbmUtZ2V0dGVyLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0LmRlZmluZS1zZXR0ZXIuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QuZW50cmllcy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3JzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0Lmxvb2t1cC1nZXR0ZXIuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QubG9va3VwLXNldHRlci5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC52YWx1ZXMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYnNlcnZhYmxlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5kZWZpbmUtbWV0YWRhdGEuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0LmRlbGV0ZS1tZXRhZGF0YS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW1ldGFkYXRhLWtleXMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0LmdldC1tZXRhZGF0YS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW93bi1tZXRhZGF0YS1rZXlzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5nZXQtb3duLW1ldGFkYXRhLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5oYXMtbWV0YWRhdGEuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0Lmhhcy1vd24tbWV0YWRhdGEuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0Lm1ldGFkYXRhLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc2V0LnRvLWpzb24uanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcuYXQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcubWF0Y2gtYWxsLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3RyaW5nLnBhZC1lbmQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcucGFkLXN0YXJ0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3RyaW5nLnRyaW0tbGVmdC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN0cmluZy50cmltLXJpZ2h0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3ltYm9sLmFzeW5jLWl0ZXJhdG9yLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3ltYm9sLm9ic2VydmFibGUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zeXN0ZW0uZ2xvYmFsLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuaW1tZWRpYXRlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIudGltZXJzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvc2hpbS5qcyIsIm5vZGVfbW9kdWxlcy9pZWVlNzU0L2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2lzLWJ1ZmZlci9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9pc2FycmF5L2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL3BhdGgtYnJvd3NlcmlmeS9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanMiLCJub2RlX21vZHVsZXMvcmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIiwibm9kZV9tb2R1bGVzL3lvdXJzLWJpdGNvaW4vbGliL2FkZHJlc3MuanMiLCJub2RlX21vZHVsZXMveW91cnMtYml0Y29pbi9saWIvYmFzZS01OC1jaGVjay5qcyIsIm5vZGVfbW9kdWxlcy95b3Vycy1iaXRjb2luL2xpYi9iYXNlLTU4LmpzIiwibm9kZV9tb2R1bGVzL3lvdXJzLWJpdGNvaW4vbGliL2JuLmpzIiwibm9kZV9tb2R1bGVzL3lvdXJzLWJpdGNvaW4vbGliL2JyLmpzIiwibm9kZV9tb2R1bGVzL3lvdXJzLWJpdGNvaW4vbGliL2J3LmpzIiwibm9kZV9tb2R1bGVzL3lvdXJzLWJpdGNvaW4vbGliL2NtcC5qcyIsIm5vZGVfbW9kdWxlcy95b3Vycy1iaXRjb2luL2xpYi9jb25zdGFudHMuanMiLCJub2RlX21vZHVsZXMveW91cnMtYml0Y29pbi9saWIvZWNkc2EuanMiLCJub2RlX21vZHVsZXMveW91cnMtYml0Y29pbi9saWIvaGFzaC5qcyIsIm5vZGVfbW9kdWxlcy95b3Vycy1iaXRjb2luL2xpYi9rZXktcGFpci5qcyIsIm5vZGVfbW9kdWxlcy95b3Vycy1iaXRjb2luL2xpYi9vcC1jb2RlLmpzIiwibm9kZV9tb2R1bGVzL3lvdXJzLWJpdGNvaW4vbGliL3BvaW50LmpzIiwibm9kZV9tb2R1bGVzL3lvdXJzLWJpdGNvaW4vbGliL3ByaXYta2V5LmpzIiwibm9kZV9tb2R1bGVzL3lvdXJzLWJpdGNvaW4vbGliL3B1Yi1rZXkuanMiLCJub2RlX21vZHVsZXMveW91cnMtYml0Y29pbi9saWIvcmFuZG9tLmpzIiwibm9kZV9tb2R1bGVzL3lvdXJzLWJpdGNvaW4vbGliL3NjcmlwdC5qcyIsIm5vZGVfbW9kdWxlcy95b3Vycy1iaXRjb2luL2xpYi9zaWcuanMiLCJub2RlX21vZHVsZXMveW91cnMtYml0Y29pbi9saWIvc3RydWN0LmpzIiwibm9kZV9tb2R1bGVzL3lvdXJzLWJpdGNvaW4vbGliL3R4LWJ1aWxkZXIuanMiLCJub2RlX21vZHVsZXMveW91cnMtYml0Y29pbi9saWIvdHgtaW4uanMiLCJub2RlX21vZHVsZXMveW91cnMtYml0Y29pbi9saWIvdHgtb3V0LW1hcC5qcyIsIm5vZGVfbW9kdWxlcy95b3Vycy1iaXRjb2luL2xpYi90eC1vdXQuanMiLCJub2RlX21vZHVsZXMveW91cnMtYml0Y29pbi9saWIvdHguanMiLCJub2RlX21vZHVsZXMveW91cnMtYml0Y29pbi9saWIvdmFyLWludC5qcyIsIm5vZGVfbW9kdWxlcy95b3Vycy1iaXRjb2luL2xpYi93b3JrZXJzLWNtZC5qcyIsIm5vZGVfbW9kdWxlcy95b3Vycy1iaXRjb2luL2xpYi93b3JrZXJzLXJlc3VsdC5qcyIsIm5vZGVfbW9kdWxlcy95b3Vycy1iaXRjb2luL2xpYi93b3JrZXJzLmpzIiwibm9kZV9tb2R1bGVzL3lvdXJzLWJpdGNvaW4vbm9kZV9tb2R1bGVzL2FzaW5rL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL3lvdXJzLWJpdGNvaW4vbm9kZV9tb2R1bGVzL2Jhc2UteC9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy95b3Vycy1iaXRjb2luL25vZGVfbW9kdWxlcy9ibi5qcy9saWIvYm4uanMiLCJub2RlX21vZHVsZXMveW91cnMtYml0Y29pbi9ub2RlX21vZHVsZXMvYnJvcmFuZC9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy95b3Vycy1iaXRjb2luL25vZGVfbW9kdWxlcy9iczU4L2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL3lvdXJzLWJpdGNvaW4vbm9kZV9tb2R1bGVzL2VsbGlwdGljL2xpYi9lbGxpcHRpYy5qcyIsIm5vZGVfbW9kdWxlcy95b3Vycy1iaXRjb2luL25vZGVfbW9kdWxlcy9lbGxpcHRpYy9saWIvZWxsaXB0aWMvY3VydmUvYmFzZS5qcyIsIm5vZGVfbW9kdWxlcy95b3Vycy1iaXRjb2luL25vZGVfbW9kdWxlcy9lbGxpcHRpYy9saWIvZWxsaXB0aWMvY3VydmUvZWR3YXJkcy5qcyIsIm5vZGVfbW9kdWxlcy95b3Vycy1iaXRjb2luL25vZGVfbW9kdWxlcy9lbGxpcHRpYy9saWIvZWxsaXB0aWMvY3VydmUvaW5kZXguanMiLCJub2RlX21vZHVsZXMveW91cnMtYml0Y29pbi9ub2RlX21vZHVsZXMvZWxsaXB0aWMvbGliL2VsbGlwdGljL2N1cnZlL21vbnQuanMiLCJub2RlX21vZHVsZXMveW91cnMtYml0Y29pbi9ub2RlX21vZHVsZXMvZWxsaXB0aWMvbGliL2VsbGlwdGljL2N1cnZlL3Nob3J0LmpzIiwibm9kZV9tb2R1bGVzL3lvdXJzLWJpdGNvaW4vbm9kZV9tb2R1bGVzL2VsbGlwdGljL2xpYi9lbGxpcHRpYy9jdXJ2ZXMuanMiLCJub2RlX21vZHVsZXMveW91cnMtYml0Y29pbi9ub2RlX21vZHVsZXMvZWxsaXB0aWMvbGliL2VsbGlwdGljL2VjL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL3lvdXJzLWJpdGNvaW4vbm9kZV9tb2R1bGVzL2VsbGlwdGljL2xpYi9lbGxpcHRpYy9lYy9rZXkuanMiLCJub2RlX21vZHVsZXMveW91cnMtYml0Y29pbi9ub2RlX21vZHVsZXMvZWxsaXB0aWMvbGliL2VsbGlwdGljL2VjL3NpZ25hdHVyZS5qcyIsIm5vZGVfbW9kdWxlcy95b3Vycy1iaXRjb2luL25vZGVfbW9kdWxlcy9lbGxpcHRpYy9saWIvZWxsaXB0aWMvZWRkc2EvaW5kZXguanMiLCJub2RlX21vZHVsZXMveW91cnMtYml0Y29pbi9ub2RlX21vZHVsZXMvZWxsaXB0aWMvbGliL2VsbGlwdGljL2VkZHNhL2tleS5qcyIsIm5vZGVfbW9kdWxlcy95b3Vycy1iaXRjb2luL25vZGVfbW9kdWxlcy9lbGxpcHRpYy9saWIvZWxsaXB0aWMvZWRkc2Evc2lnbmF0dXJlLmpzIiwibm9kZV9tb2R1bGVzL3lvdXJzLWJpdGNvaW4vbm9kZV9tb2R1bGVzL2VsbGlwdGljL2xpYi9lbGxpcHRpYy9obWFjLWRyYmcuanMiLCJub2RlX21vZHVsZXMveW91cnMtYml0Y29pbi9ub2RlX21vZHVsZXMvZWxsaXB0aWMvbGliL2VsbGlwdGljL3ByZWNvbXB1dGVkL3NlY3AyNTZrMS5qcyIsIm5vZGVfbW9kdWxlcy95b3Vycy1iaXRjb2luL25vZGVfbW9kdWxlcy9lbGxpcHRpYy9saWIvZWxsaXB0aWMvdXRpbHMuanMiLCJub2RlX21vZHVsZXMveW91cnMtYml0Y29pbi9ub2RlX21vZHVsZXMvZWxsaXB0aWMvcGFja2FnZS5qc29uIiwibm9kZV9tb2R1bGVzL3lvdXJzLWJpdGNvaW4vbm9kZV9tb2R1bGVzL2hhc2guanMvbGliL2hhc2guanMiLCJub2RlX21vZHVsZXMveW91cnMtYml0Y29pbi9ub2RlX21vZHVsZXMvaGFzaC5qcy9saWIvaGFzaC9jb21tb24uanMiLCJub2RlX21vZHVsZXMveW91cnMtYml0Y29pbi9ub2RlX21vZHVsZXMvaGFzaC5qcy9saWIvaGFzaC9obWFjLmpzIiwibm9kZV9tb2R1bGVzL3lvdXJzLWJpdGNvaW4vbm9kZV9tb2R1bGVzL2hhc2guanMvbGliL2hhc2gvcmlwZW1kLmpzIiwibm9kZV9tb2R1bGVzL3lvdXJzLWJpdGNvaW4vbm9kZV9tb2R1bGVzL2hhc2guanMvbGliL2hhc2gvc2hhLmpzIiwibm9kZV9tb2R1bGVzL3lvdXJzLWJpdGNvaW4vbm9kZV9tb2R1bGVzL2hhc2guanMvbGliL2hhc2gvdXRpbHMuanMiLCJub2RlX21vZHVsZXMveW91cnMtYml0Y29pbi9ub2RlX21vZHVsZXMvaW5oZXJpdHMvaW5oZXJpdHNfYnJvd3Nlci5qcyIsIm5vZGVfbW9kdWxlcy95b3Vycy1iaXRjb2luL25vZGVfbW9kdWxlcy9pbmplY3Rlci9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy95b3Vycy1iaXRjb2luL25vZGVfbW9kdWxlcy9yYW5kb21ieXRlcy9icm93c2VyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FDQUE7Ozs7Ozs7Ozs7QUFDQSxJQUFJLFNBQVMsUUFBUSwwQkFBUixDQUFiO0FBQ0EsSUFBSSxRQUFRLFFBQVEsT0FBUixDQUFaOztBQUVBLElBQUksVUFBVSxRQUFRLDJCQUFSLENBQWQ7QUFDQSxJQUFJLFVBQVUsUUFBUSw0QkFBUixDQUFkOztJQUVNLGM7OztBQUNKLDBCQUFhLE9BQWIsRUFBc0IsT0FBdEIsRUFBK0IsT0FBL0IsRUFBd0M7QUFBQTs7QUFBQTs7QUFFdEMsVUFBSyxVQUFMLENBQWdCLEVBQUMsZ0JBQUQsRUFBVSxnQkFBVixFQUFtQixnQkFBbkIsRUFBaEI7QUFGc0M7QUFHdkM7Ozs7b0NBRWdCLE8sRUFBUztBQUN4QixhQUFPLDhCQUFNO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxzQkFDUCxDQUFDLE9BQUQsSUFBWSxRQUFRLFdBQVIsQ0FBb0IsSUFBcEIsS0FBNkIsU0FEbEM7QUFBQTtBQUFBO0FBQUE7O0FBQUEsc0JBRUgsSUFBSSxLQUFKLENBQVUsb0VBQVYsQ0FGRzs7QUFBQTtBQUFBO0FBQUEsdUJBSVUsUUFBUSxnQkFBUixDQUF5QixPQUF6QixDQUpWOztBQUFBO0FBSVgscUJBQUssT0FKTTtBQUFBO0FBQUEsdUJBS1UsUUFBUSxlQUFSLENBQXdCLEtBQUssT0FBTCxDQUFhLE1BQXJDLENBTFY7O0FBQUE7QUFLWCxxQkFBSyxPQUxNOzs7QUFPWCxxQkFBSyxXQUFMLEdBQW1CLElBQW5COztBQVBXO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLE9BQU4sR0FRSixJQVJJLENBQVA7QUFTRDs7OzZC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R0F4Qk0sQ0FBUDtBQXlCRDtBQUNELE9BQU8sT0FBUCxHQUFpQixLQUFqQjs7OztBQ2pEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQzNCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsSEE7OztBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUM3dkRBO0FBQ0E7O0FDREE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN6QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzNDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMzQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDZkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN2QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN0QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3SUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbEZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BGQTtBQUNBOztBQ0RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTkE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDWEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDM0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hCQTtBQUNBO0FBQ0E7QUFDQTs7QUNIQTtBQUNBO0FBQ0E7QUFDQTs7QUNIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1BBOztBQ0FBO0FBQ0E7QUFDQTs7QUNGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1BBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNMQTtBQUNBO0FBQ0E7O0FDRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDWEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDWkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDckVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwQkE7QUFDQTtBQUNBOztBQ0ZBOztBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1RBOztBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1RBO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcERBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDekNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ05BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ05BOztBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ05BOztBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdEJBOztBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQy9CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1BBO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNaQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1BBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ05BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNYQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDN0JBO0FBQ0E7O0FDREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNYQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzlkQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaFJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDekJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1JBOztBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDVkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDYkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNWQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDZEE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDakNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNYQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDVEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzNCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3RCQTs7QUNBQTtBQUNBO0FBQ0E7QUFDQTs7QUNIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMzQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNiQTtBQUNBO0FBQ0E7QUFDQTs7QUNIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1ZBO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDakJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNSQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1BBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNSQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDekJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1BBO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUEE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNYQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1BBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwRUE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1JBO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDVEE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pCQTtBQUNBO0FBQ0E7QUFDQTs7QUNIQTtBQUNBO0FBQ0E7O0FDRkE7QUFDQTtBQUNBOztBQ0ZBO0FBQ0E7QUFDQTs7QUNGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1JBO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNSQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1BBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNQQTtBQUNBO0FBQ0E7O0FDRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNSQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUkE7QUFDQTtBQUNBOztBQ0ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1RBO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDMVNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDOUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDekJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1ZBO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNkQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM5QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDMUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDVEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN4QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ05BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ05BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ05BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ05BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNSQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3RCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDWEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMxT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDN0NBO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdkRBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNYQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDWEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNSQTtBQUNBO0FBQ0E7QUFDQTs7QUNIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDVkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDZkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNYQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdE1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1BBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNSQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNmQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2RBO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDVEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDVEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTkE7O0FDQUE7O0FDQUE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDckJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtB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O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQ2hPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FDcExBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FB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Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzMxR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDekRBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNSQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDZEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdlhBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDamJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNSQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzE2QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3TUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzVPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDM0dBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3RIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbEVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM1d0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDNUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDZkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMzRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaERBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwakJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqUUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUM5Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwiJ3VzZSBzdHJpY3QnXG5sZXQgU3RydWN0ID0gcmVxdWlyZSgneW91cnMtYml0Y29pbi9saWIvc3RydWN0JylcbmxldCBhc2luayA9IHJlcXVpcmUoJ2FzaW5rJylcblxubGV0IEFkZHJlc3MgPSByZXF1aXJlKCd5b3Vycy1iaXRjb2luL2xpYi9hZGRyZXNzJylcbmxldCBLZXlQYWlyID0gcmVxdWlyZSgneW91cnMtYml0Y29pbi9saWIva2V5LXBhaXInKVxuXG5jbGFzcyBLZXlQYWlyQWRkcmVzcyBleHRlbmRzIFN0cnVjdCB7XG4gIGNvbnN0cnVjdG9yIChwcml2S2V5LCBrZXlQYWlyLCBhZGRyZXNzKSB7XG4gICAgc3VwZXIoKVxuICAgIHRoaXMuZnJvbU9iamVjdCh7cHJpdktleSwga2V5UGFpciwgYWRkcmVzc30pXG4gIH1cblxuICBhc3luY0luaXRpYWxpemUgKHByaXZLZXkpIHtcbiAgICByZXR1cm4gYXNpbmsoZnVuY3Rpb24gKiAoKSB7XG4gICAgICBpZiAoIXByaXZLZXkgfHwgcHJpdktleS5jb25zdHJ1Y3Rvci5uYW1lICE9PSAnUHJpdktleScpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd0aGlzLnByaXZLZXkgbXVzdCBiZSBzZXQgYmVmb3JlIG11bHRpc2lnQWRkcmVzcyBjYW4gYmUgaW5pdGlhbGl6ZWQnKVxuICAgICAgfVxuICAgICAgdGhpcy5rZXlQYWlyID0geWllbGQgS2V5UGFpci5hc3luY0Zyb21Qcml2S2V5KHByaXZLZXkpXG4gICAgICB0aGlzLmFkZHJlc3MgPSB5aWVsZCBBZGRyZXNzLmFzeW5jRnJvbVB1YktleSh0aGlzLmtleVBhaXIucHViS2V5KVxuXG4gICAgICB0aGlzLmluaXRpYWxpemVkID0gdHJ1ZVxuICAgIH0sIHRoaXMpXG4gIH1cblxuICBmcm9tSlNPTiAoanNvbikge1xuICAgIHRoaXMua2V5UGFpciA9IGpzb24ua2V5UGFpciA/IEtleVBhaXIuZnJvbUpTT04oanNvbi5rZXlQYWlyKSA6IHVuZGVmaW5lZFxuICAgIHRoaXMuYWRkcmVzcyA9IGpzb24uYWRkcmVzcyA/IEFkZHJlc3MuZnJvbUpTT04oanNvbi5hZGRyZXNzKSA6IHVuZGVmaW5lZFxuICAgIHRoaXMuaW5pdGlhbGl6ZWQgPSBqc29uLmluaXRpYWxpemVkXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIHRvUHVibGljICgpIHtcbiAgICBsZXQga2V5UGFpckFkZHJlc3MgPSBuZXcgS2V5UGFpckFkZHJlc3MoKVxuICAgIGtleVBhaXJBZGRyZXNzLmtleVBhaXIgPSB0aGlzLmtleVBhaXIgPyB0aGlzLmtleVBhaXIudG9QdWJsaWMoKSA6IHVuZGVmaW5lZFxuICAgIGtleVBhaXJBZGRyZXNzLmFkZHJlc3MgPSB0aGlzLmFkZHJlc3NcbiAgICBrZXlQYWlyQWRkcmVzcy5pbml0aWFsaXplZCA9IHRoaXMuaW5pdGlhbGl6ZWRcbiAgICByZXR1cm4ga2V5UGFpckFkZHJlc3NcbiAgfVxuXG59XG5cbm1vZHVsZS5leHBvcnRzID0gS2V5UGFpckFkZHJlc3NcbiIsIid1c2Ugc3RyaWN0J1xubGV0IFN0cnVjdCA9IHJlcXVpcmUoJ3lvdXJzLWJpdGNvaW4vbGliL3N0cnVjdCcpXG5sZXQgYXNpbmsgPSByZXF1aXJlKCdhc2luaycpXG5sZXQgU2NyaXB0ID0gcmVxdWlyZSgneW91cnMtYml0Y29pbi9saWIvc2NyaXB0JylcbmxldCBQcml2S2V5ID0gcmVxdWlyZSgneW91cnMtYml0Y29pbi9saWIvcHJpdi1rZXknKVxubGV0IFB1YktleSA9IHJlcXVpcmUoJ3lvdXJzLWJpdGNvaW4vbGliL3B1Yi1rZXknKVxubGV0IEFkZHJlc3MgPSByZXF1aXJlKCd5b3Vycy1iaXRjb2luL2xpYi9hZGRyZXNzJylcbmxldCBLZXlQYWlyID0gcmVxdWlyZSgneW91cnMtYml0Y29pbi9saWIva2V5LXBhaXInKVxuXG5jbGFzcyBNdWx0aXNpZyBleHRlbmRzIFN0cnVjdCB7XG4gIGNvbnN0cnVjdG9yIChwcml2S2V5LFxuICAgIHB1YktleSxcbiAgICBvdGhlclB1YktleSxcbiAgICBwdWJLZXlzLFxuICAgIHNjcmlwdCxcbiAgICBhZGRyZXNzLFxuICAgIGtleVBhaXIsXG4gICAgaW5pdGlhbGl6ZWRcbiAgKSB7XG4gICAgc3VwZXIoKVxuICAgIHRoaXMuZnJvbU9iamVjdCh7cHJpdktleSxcbiAgICAgIHB1YktleSxcbiAgICAgIG90aGVyUHViS2V5LFxuICAgICAgcHViS2V5cyxcbiAgICAgIHNjcmlwdCxcbiAgICAgIGFkZHJlc3MsXG4gICAgICBrZXlQYWlyLFxuICAgICAgaW5pdGlhbGl6ZWRcbiAgICB9KVxuICB9XG5cbiAgaW5pdGlhbGl6ZVByaXZLZXkgKHByaXZLZXkpIHtcbiAgICByZXR1cm4gYXNpbmsoZnVuY3Rpb24gKiAoKSB7XG4gICAgICB0aGlzLnByaXZLZXkgPSBwcml2S2V5XG4gICAgICB0aGlzLnB1YktleSA9IHlpZWxkIFB1YktleS5hc3luY0Zyb21Qcml2S2V5KHByaXZLZXkpXG4gICAgfSwgdGhpcylcbiAgfVxuXG4gIGFzeW5jSW5pdGlhbGl6ZSAob3RoZXJQdWJLZXkpIHtcbiAgICByZXR1cm4gYXNpbmsoZnVuY3Rpb24gKiAoKSB7XG4gICAgICBpZiAoIXRoaXMucHJpdktleSB8fCB0aGlzLnByaXZLZXkuY29uc3RydWN0b3IubmFtZSAhPT0gJ1ByaXZLZXknKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcigndGhpcy5wcml2S2V5IG11c3QgYmUgc2V0IGJlZm9yZSBtdWx0aXNpZ0FkZHJlc3MgY2FuIGJlIGluaXRpYWxpemVkJylcbiAgICAgIH1cbiAgICAgIGlmICghb3RoZXJQdWJLZXkgfHwgb3RoZXJQdWJLZXkuY29uc3RydWN0b3IubmFtZSAhPT0gJ1B1YktleScpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdvdGhlclB1YktleSByZXF1aXJlZCB0byBidWlsZCBhIG11bHRpc2lnQWRkcmVzcycpXG4gICAgICB9XG4gICAgICB0aGlzLm90aGVyUHViS2V5ID0gb3RoZXJQdWJLZXlcbiAgICAgIHRoaXMucHViS2V5ID0geWllbGQgUHViS2V5LmFzeW5jRnJvbVByaXZLZXkodGhpcy5wcml2S2V5KVxuXG4gICAgICB0aGlzLnB1YktleXMgPSBbdGhpcy5wdWJLZXksIHRoaXMub3RoZXJQdWJLZXldXG4gICAgICB0aGlzLnNjcmlwdCA9IFNjcmlwdC5mcm9tUHViS2V5cygyLCB0aGlzLnB1YktleXMpXG4gICAgICB0aGlzLmFkZHJlc3MgPSB5aWVsZCBBZGRyZXNzLmFzeW5jRnJvbVJlZGVlbVNjcmlwdCh0aGlzLnNjcmlwdClcbiAgICAgIHRoaXMua2V5UGFpciA9IHlpZWxkIEtleVBhaXIuYXN5bmNGcm9tUHJpdktleSh0aGlzLnByaXZLZXkpXG5cbiAgICAgIHRoaXMuaW5pdGlhbGl6ZWQgPSB0cnVlXG4gICAgfSwgdGhpcylcbiAgfVxuXG4gIGZyb21KU09OIChqc29uKSB7XG4gICAgdGhpcy5wcml2S2V5ID0ganNvbi5wcml2S2V5ID8gUHJpdktleS5mcm9tSGV4KGpzb24ucHJpdktleSkgOiB1bmRlZmluZWRcbiAgICB0aGlzLnB1YktleSA9IGpzb24ucHViS2V5ID8gUHViS2V5LmZyb21GYXN0SGV4KGpzb24ucHViS2V5KSA6IHVuZGVmaW5lZFxuICAgIHRoaXMub3RoZXJQdWJLZXkgPSBqc29uLm90aGVyUHViS2V5ID8gUHViS2V5LmZyb21GYXN0SGV4KGpzb24ub3RoZXJQdWJLZXkpIDogdW5kZWZpbmVkXG4gICAgdGhpcy5zY3JpcHQgPSBqc29uLnNjcmlwdCA/IFNjcmlwdC5mcm9tSGV4KGpzb24uc2NyaXB0KSA6IHVuZGVmaW5lZFxuICAgIHRoaXMuYWRkcmVzcyA9IGpzb24uYWRkcmVzcyA/IEFkZHJlc3MuZnJvbUpTT04oanNvbi5hZGRyZXNzKSA6IHVuZGVmaW5lZFxuICAgIHRoaXMua2V5UGFpciA9IGpzb24ua2V5UGFpciA/IEtleVBhaXIuZnJvbUpTT04oanNvbi5rZXlQYWlyKSA6IHVuZGVmaW5lZFxuICAgIHRoaXMuaW5pdGlhbGl6ZWQgPSBqc29uLmluaXRpYWxpemVkXG4gICAgaWYgKGpzb24ucHViS2V5cykge1xuICAgICAgbGV0IHB1YktleXMgPSBbXVxuICAgICAganNvbi5wdWJLZXlzLmZvckVhY2goZnVuY3Rpb24gKHB1YktleSkge1xuICAgICAgICBwdWJLZXlzLnB1c2goUHViS2V5LmZyb21GYXN0SGV4KHB1YktleSkpXG4gICAgICB9KVxuICAgICAgdGhpcy5wdWJLZXlzID0gcHViS2V5c1xuICAgIH1cbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgdG9QdWJsaWMgKCkge1xuICAgIGxldCBtdWx0aXNpZ0FkZHJlc3MgPSBuZXcgTXVsdGlzaWcoKS5mcm9tT2JqZWN0KHRoaXMpXG4gICAgbXVsdGlzaWdBZGRyZXNzLnByaXZLZXkgPSB1bmRlZmluZWRcbiAgICBtdWx0aXNpZ0FkZHJlc3Mua2V5UGFpciA9IHRoaXMua2V5UGFpciA/IHRoaXMua2V5UGFpci50b1B1YmxpYygpIDogdW5kZWZpbmVkXG4gICAgcmV0dXJuIG11bHRpc2lnQWRkcmVzc1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gTXVsdGlzaWdcbiIsIid1c2Ugc3RyaWN0J1xubGV0IGJhYmVsID0gcmVxdWlyZSgnYmFiZWwtcG9seWZpbGwnKVxubGV0IFN0cnVjdCA9IHJlcXVpcmUoJ3lvdXJzLWJpdGNvaW4vbGliL3N0cnVjdCcpXG5sZXQgYXNpbmsgPSByZXF1aXJlKCdhc2luaycpXG5sZXQgQm4gPSByZXF1aXJlKCd5b3Vycy1iaXRjb2luL2xpYi9ibicpXG5sZXQgTXVsdGlzaWcgPSByZXF1aXJlKCcuL2FkZHJzL211bHRpc2lnJylcbmxldCBLZXlQYWlyQWRkcmVzcyA9IHJlcXVpcmUoJy4vYWRkcnMva2V5LXBhaXItYWRkcmVzcycpXG5sZXQgSHRsY1NlY3JldCA9IHJlcXVpcmUoJy4vc2NydHMvaHRsYy1zZWNyZXQnKVxubGV0IFJldlNlY3JldCA9IHJlcXVpcmUoJy4vc2NydHMvcmV2LXNlY3JldCcpXG5sZXQgRnVuZGluZyA9IHJlcXVpcmUoJy4vdHhzL2Z1bmRpbmcnKVxubGV0IENvbW1pdG1lbnQgPSByZXF1aXJlKCcuL3R4cy9jb21taXRtZW50JylcbmxldCBXYWxsZXQgPSByZXF1aXJlKCcuL3dhbGxldCcpXG5cbmNsYXNzIEFnZW50IGV4dGVuZHMgU3RydWN0IHtcbiAgY29uc3RydWN0b3IgKGlkLFxuICAgIHNvdXJjZUFkZHJlc3MsIC8vIHRoZSBhZGRyZXNzIHRoYXQgdGhlIGZ1bmRpbmcgdHJhbnNhY3Rpb24gaXMgZnVuZGVkIGZyb21cbiAgICBtdWx0aXNpZ0FkZHJlc3MsIC8vIHRoZSBzaGFyZWQgbXVsdGlzaWdBZGRyZXNzIGFkZHJlc3NcbiAgICBkZXN0aW5hdGlvbkFkZHJlc3MsIC8vIHRoZSBhZGRyZXNzIHRoYXQgdGhlIHNwZW5kaW5nIHRyYW5zYWN0aW9ucyBzcGVuZCB0b1xuICAgIGZ1bmRpbmcsIC8vIGFuIG9iamVjdCBzdG9yaW5nIGluZm9ybWF0aW9uIGFib3V0IHRoZSBmdW5kaW5nIHR4XG4gICAgY29tbWl0bWVudHMsIC8vIGEgbGlzdCBvZiBvYmplY3RzIHN0b3JpbmcgaW5mb3JtYXRpb24gYWJvdXQgcHJldmlvdXMgY29tbWl0bWVudCB0eHNcbiAgICB3YWxsZXQsIC8vIHRoZSB3YWxsZXQgKGR1bW15IGZvciBub3cpXG4gICAgaW5pdGlhbGl6ZWQsIC8vIGJvb2xlYW4sIHNldCB0byB0cnVlIG9uY2UgbG9jYWwgaW5pdGlhbGl6YXRpb24gaXMgY29tcGxldGVcbiAgICBmdW5kZXIsIC8vIGJvb2xlYW4sIHNldCB0byB0cnVlIGlmIGFnZW50IGZ1bmRzIHRoZSBjaGFubmVsXG4gICAgc2VuZGVyLCAvLyBib29sZWFuLCBzZXQgdG8gdHJ1ZSBpZiBhZ2VudCBoYXMgc2VudCB0aGUgbGFzdCBwYXltZW50XG4gICAgb3RoZXIsIC8vIHB1YmxpYyBpbmZvcm1hdGlvbiBhYm91dCB0aGUgb3RoZXIgYWdlbnQgYW5kIGFsbCBjb21taXRtZW50IHR4cyB0aGF0IGhlIHN0b3Jlc1xuICAgIHJlbW90ZUFnZW50IC8vIHVzZWQgdGVtcG9yYXJpbHkgdG8gY29tbXVuaWNhdGUgd2l0aCB0aGUgb3RoZXIgYWdlbnQgKHdpbGwgZ28gYXdheSBvbmNlIHdlIGludGVncmF0ZSBtc2dzKVxuICApIHtcbiAgICBzdXBlcigpXG4gICAgdGhpcy5mcm9tT2JqZWN0KHtpZCxcbiAgICAgIHNvdXJjZUFkZHJlc3MsXG4gICAgICBtdWx0aXNpZ0FkZHJlc3MsXG4gICAgICBkZXN0aW5hdGlvbkFkZHJlc3MsXG4gICAgICBmdW5kaW5nLFxuICAgICAgY29tbWl0bWVudHMsXG4gICAgICB3YWxsZXQsXG4gICAgICBpbml0aWFsaXplZCxcbiAgICAgIGZ1bmRlcixcbiAgICAgIHNlbmRlcixcbiAgICAgIG90aGVyLFxuICAgICAgcmVtb3RlQWdlbnRcbiAgICB9KVxuICB9XG5cbiAgLyogLS0tLSBJTklUSUFMSVpBVElPTiAtLS0tICovXG5cbiAgLypcbiAgICogSW5pdGlhbGl6ZXMgYW4gYWdlbnQgbG9jYWxseS4gSW4gcGFydGljdWxhciwgdGhlIHNvdXJjZUFkZHJlc3MgYWRkcmVzcywgdGhlIG11bHRpc2lnQWRkcmVzc1xuICAgKiBhZGRyZXNzLCB0aGUgZGVzdGluYXRpb25BZGRyZXNzIGFkZHJlc3MgYXJlIGluaXRpYWxpemVkLiBUaGUgbGlzdCBvZiBjb21taXRtZW50IHR4b3V0c1xuICAgKiBpcyBpbml0aWFsaXplZCB3aXRoIHNlY3JldHMgZm9yIHRoZSBuZXh0IHBheW1lbnQuXG4gICAqL1xuICBhc3luY0luaXRpYWxpemUgKHNvdXJjZVByaXZLZXksIG11bHRpc2lnUHJpdktleSwgZGVzdGluYXRpb25Qcml2S2V5KSB7XG4gICAgcmV0dXJuIGFzaW5rKGZ1bmN0aW9uICogKCkge1xuICAgICAgaWYgKCFzb3VyY2VQcml2S2V5IHx8ICFtdWx0aXNpZ1ByaXZLZXkgfHwgIWRlc3RpbmF0aW9uUHJpdktleSB8fCBzb3VyY2VQcml2S2V5LmNvbnN0cnVjdG9yLm5hbWUgIT09ICdQcml2S2V5JyB8fCBtdWx0aXNpZ1ByaXZLZXkuY29uc3RydWN0b3IubmFtZSAhPT0gJ1ByaXZLZXknIHx8IGRlc3RpbmF0aW9uUHJpdktleS5jb25zdHJ1Y3Rvci5uYW1lICE9PSAnUHJpdktleScpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdzb3VyY2VQcml2S2V5LCBtdWx0aXNpZ1ByaXZLZXksIGRlc3RpbmF0aW9uUHJpdktleSBtdXN0IGJlIFByaXZLZXlzIGFuZCBhcmUgcmVxdWlyZWQgaW4gYXN5bmNJbml0aWFsaXplJylcbiAgICAgIH1cblxuICAgICAgLy8gdGhlIGFkZHJlc3MgdGhhdCdzIHRoZSBpbnB1dCB0byB0aGUgc291cmNlQWRkcmVzcyB0cmFzbmFjdGlvblxuICAgICAgdGhpcy5zb3VyY2VBZGRyZXNzID0gbmV3IEtleVBhaXJBZGRyZXNzKClcbiAgICAgIHlpZWxkIHRoaXMuc291cmNlQWRkcmVzcy5hc3luY0luaXRpYWxpemUoc291cmNlUHJpdktleSlcblxuICAgICAgLy8gdGhlIHNoYXJlZCBtdWx0aXNpZ0FkZHJlc3MgYWRkcmVzc1xuICAgICAgdGhpcy5tdWx0aXNpZ0FkZHJlc3MgPSBuZXcgTXVsdGlzaWcoKVxuICAgICAgeWllbGQgdGhpcy5tdWx0aXNpZ0FkZHJlc3MuaW5pdGlhbGl6ZVByaXZLZXkobXVsdGlzaWdQcml2S2V5KVxuXG4gICAgICAvLyB0aGUgYWRkcmVzcyB0aGF0J3MgdGhlIG91dHB1dCB0byBhIGNvbW1pdG1lbnQgdHJhc25hY3Rpb25cbiAgICAgIHRoaXMuZGVzdGluYXRpb25BZGRyZXNzID0gbmV3IEtleVBhaXJBZGRyZXNzKClcbiAgICAgIHlpZWxkIHRoaXMuZGVzdGluYXRpb25BZGRyZXNzLmFzeW5jSW5pdGlhbGl6ZShkZXN0aW5hdGlvblByaXZLZXkpXG5cbiAgICAgIC8vIGluaXRpYWxpemUgZmlyc3QgY29tbWl0bWVudFxuICAgICAgdGhpcy5jb21taXRtZW50cyA9IFtdXG4gICAgICAvLyB5aWVsZCB0aGlzLmFzeW5jSW5pdGlhbGl6ZUNvbW1pdG1lbnQoKVxuXG4gICAgICAvLyB0aGUgd2FsbGV0XG4gICAgICB0aGlzLndhbGxldCA9IG5ldyBXYWxsZXQoKVxuXG4gICAgICB0aGlzLmluaXRpYWxpemVkID0gdHJ1ZVxuICAgIH0sIHRoaXMpXG4gIH1cblxuICAvKiAtLS0tIFBST1RPQ09MIC0tLS0gKi9cblxuICAvKlxuICAgKiBUaGlzIGlzIHRoZSBmaXJzdCBwb2ludCBvZiBjb21tdW5pY2F0aW9uIGJldHdlZW4gdGhlIHR3byBhZ2VudHMuIEFyZ3VtZW50cyBhcmVcbiAgICogdGhlIGFtb3VudCB0byBmdW5kIHRoZSBjaGFubmVsIHdpdGggYW5kIHRoZSBwdWJsaWMgcHJvamVjdGlvbiBvZiB0aGUgb3RoZXIgYWdlbnQuXG4gICAqIFN0b3JlcyB0aGUgcHVibGljIGluZm9ybWF0aW9uIGFib3V0IHRoZSBvdGhlciBhZ2VudCBhbmQgaW5pdGlhbGl6ZXMgdGhlIG11bHRpc2lnQWRkcmVzc1xuICAgKiBhZGRyZXNzLiBUaGUgZnVuZGVyIG9mIHRoZSBjaGFubmVsIHdpbGwgYnVpbGQgdGhlIGZ1bmRpbmcgdHJhbnNhY3Rpb24gYW5kIHNlbmRcbiAgICogaXQncyBoYXNoIHRvIHRoZSBvdGhlciBwYXJ0eS5cbiAgICovXG4gIGFzeW5jT3BlbkNoYW5uZWwgKGFtb3VudCwgcHVibGljT3RoZXIpIHtcbiAgICByZXR1cm4gYXNpbmsoZnVuY3Rpb24gKiAoKSB7XG4gICAgICAvLyBpbml0aWFsaXplIGluZm9ybWF0aW9uIGFib3V0IG90aGVyIGFnZW50XG4gICAgICB0aGlzLm90aGVyID0gcHVibGljT3RoZXJcblxuICAgICAgLy8gaW5pdGlhbGl6ZSBtdWx0aXNpZ0FkZHJlc3NcbiAgICAgIHlpZWxkIHRoaXMubXVsdGlzaWdBZGRyZXNzLmFzeW5jSW5pdGlhbGl6ZSh0aGlzLm90aGVyLm11bHRpc2lnQWRkcmVzcy5wdWJLZXkpXG5cbiAgICAgIGlmICghdGhpcy5mdW5kZXIpIHtcbiAgICAgICAgLy8gc2VuZCB5b3VyIGluZm9ybWF0aW9uIHRvIHRoZSBvdGhlciBhZ2VudFxuICAgICAgICAvLyBUT0RPIHNpZ24gZnVuZGluZ1R4IGFuZCBzZW5kIGJhY2sgdG8gZnVuZGVyXG4gICAgICAgIHlpZWxkIHRoaXMucmVtb3RlQWdlbnQuYXN5bmNPcGVuQ2hhbm5lbChhbW91bnQsIHlpZWxkIHRoaXMuYXN5bmNUb1B1YmxpYygpKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gdGhlIGZ1bmRlciB3aWxsIGJ1aWxkIHRoZSBzb3VyY2VBZGRyZXNzIHRyYW5zYWN0aW9uIGFuZCBjYWNoZSBpdCdzIGhhc2hidWYgYW5kIHR4b3V0XG4gICAgICAgIGxldCBmZWUgPSBCbigyMDAwMClcbiAgICAgICAgbGV0IG91dHB1dCA9IHRoaXMud2FsbGV0LmdldFVuc3BlbnRPdXRwdXQoYW1vdW50LmFkZChmZWUpLCB0aGlzLnNvdXJjZUFkZHJlc3Mua2V5UGFpci5wdWJLZXkpXG5cbiAgICAgICAgdGhpcy5mdW5kaW5nID0gbmV3IEZ1bmRpbmcoKVxuICAgICAgICB0aGlzLmZ1bmRpbmcuYXN5bmNJbml0aWFsaXplKGFtb3VudCwgdGhpcy5zb3VyY2VBZGRyZXNzLCB0aGlzLm11bHRpc2lnQWRkcmVzcyxcbiAgICAgICAgICBvdXRwdXQudHhoYXNoYnVmLCBvdXRwdXQudHhvdXRudW0sIG91dHB1dC50eG91dCwgb3V0cHV0LnB1YktleSlcblxuICAgICAgICAvLyBzZW5kIHRoZSBzb3VyY2VBZGRyZXNzIHR4IGhhc2ggdG8gdGhlIG90aGVyIGFnZW50XG4gICAgICAgIHRoaXMucmVtb3RlQWdlbnQuc2V0RnVuZGluZyh5aWVsZCB0aGlzLmZ1bmRpbmcuYXN5bmNUb1B1YmxpYygpKVxuICAgICAgfVxuICAgIH0sIHRoaXMpXG4gIH1cblxuICBhc3luY1NlbmRPdXRwdXRzIChvdXRwdXRzLCBjaGFuZ2VPdXRwdXQpIHtcbiAgICByZXR1cm4gYXNpbmsoZnVuY3Rpb24gKiAoKSB7XG4gICAgICBpZiAoIXRoaXMubXVsdGlzaWdBZGRyZXNzIHx8ICF0aGlzLmZ1bmRpbmcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdBZ2VudCBub3Qgc3VmZmljaWVudGx5IGluaXRpYWxpemVkIGluIGFzeW5jU2VuZE91dHB1dHMnKVxuICAgICAgfVxuXG4gICAgICAvLyBjcmVhdGUgbmV3IGNvbW1pdG1lbnQgYW5kIGFkZCBhbGwgaW5mbyB0aGF0IGlzIG5vdCByZWFsdGVkIHRvIGJ1aWxkZXIgdnMgb3duZXJcbiAgICAgIGxldCBjb21taXRtZW50ID0gbmV3IENvbW1pdG1lbnQoKVxuICAgICAgY29tbWl0bWVudC5yZXZTZWNyZXQgPSBuZXcgUmV2U2VjcmV0KClcbiAgICAgIHlpZWxkIGNvbW1pdG1lbnQucmV2U2VjcmV0LmFzeW5jSW5pdGlhbGl6ZSgpXG4gICAgICBjb21taXRtZW50Lm11bHRpc2lnQWRkcmVzcyA9IHRoaXMubXVsdGlzaWdBZGRyZXNzXG4gICAgICBjb21taXRtZW50LmZ1bmRpbmcgPSB0aGlzLmZ1bmRpbmdcbiAgICAgIGNvbW1pdG1lbnQub3V0cHV0cyA9IG91dHB1dHMubWFwKChvdXRwdXQpID0+IHRoaXMuY29tcGxldGVPdXRwdXQob3V0cHV0LCBjb21taXRtZW50LnJldlNlY3JldCkpXG4gICAgICBjb21taXRtZW50LmNoYW5nZU91dHB1dCA9IHRoaXMuY29tcGxldGVPdXRwdXQoY2hhbmdlT3V0cHV0LCBjb21taXRtZW50LnJldlNlY3JldClcbiAgICAgIHRoaXMuY29tbWl0bWVudHMucHVzaChjb21taXRtZW50KVxuICAgICAgdGhpcy5vdGhlci5jb21taXRtZW50cy5wdXNoKGNvbW1pdG1lbnQpXG5cbiAgICAgIGlmICghdGhpcy5zZW5kZXIpIHtcbiAgICAgICAgeWllbGQgdGhpcy5yZW1vdGVBZ2VudC5hc3luY1NlbmRPdXRwdXRzKG91dHB1dHMsIGNoYW5nZU91dHB1dClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHlpZWxkIHRoaXMucmVtb3RlQWdlbnQuYXN5bmNCdWlsZENvbW1pdG1lbnQoKVxuICAgICAgfVxuICAgIH0sIHRoaXMpXG4gIH1cblxuICBhc3luY0J1aWxkQ29tbWl0bWVudCAoKSB7XG4gICAgcmV0dXJuIGFzaW5rKGZ1bmN0aW9uICogKCkge1xuICAgICAgbGV0IG90aGVyQ29tbWl0bWVudCA9IHRoaXMub3RoZXIuY29tbWl0bWVudHMucG9wKClcbiAgICAgIG90aGVyQ29tbWl0bWVudC5idWlsZGVySWQgPSB0aGlzLmlkXG4gICAgICBvdGhlckNvbW1pdG1lbnQuYnVpbGRlckRlc3RpbmF0aW9uQWRkcmVzcyA9IHRoaXMuZGVzdGluYXRpb25BZGRyZXNzXG4gICAgICBvdGhlckNvbW1pdG1lbnQub3duZXJJZCA9IHRoaXMub3RoZXIuaWRcbiAgICAgIG90aGVyQ29tbWl0bWVudC5vd25lckRlc3RpbmF0aW9uQWRkcmVzcyA9IHRoaXMub3RoZXIuZGVzdGluYXRpb25BZGRyZXNzXG4gICAgICB5aWVsZCBvdGhlckNvbW1pdG1lbnQuYXN5bmNCdWlsZCgpXG4gICAgICB0aGlzLm90aGVyLmNvbW1pdG1lbnRzLnB1c2gob3RoZXJDb21taXRtZW50KVxuXG4gICAgICBpZiAoIXRoaXMuc2VuZGVyKSB7XG4gICAgICAgIHlpZWxkIHRoaXMucmVtb3RlQWdlbnQuYXN5bmNCdWlsZENvbW1pdG1lbnQoKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgeWllbGQgdGhpcy5yZW1vdGVBZ2VudC5zZW5kQ29tbWl0bWVudChvdGhlckNvbW1pdG1lbnQpXG4gICAgICB9XG4gICAgfSwgdGhpcylcbiAgfVxuXG4gIHNlbmRDb21taXRtZW50IChuZXdDb21taXRtZW50KSB7XG4gICAgcmV0dXJuIGFzaW5rKGZ1bmN0aW9uICogKCkge1xuICAgICAgbGV0IHN0b3JlZENvbW1pdG1lbnQgPSB0aGlzLmNvbW1pdG1lbnRzW3RoaXMuY29tbWl0bWVudHMubGVuZ3RoIC0gMV1cbiAgICAgIGlmICh0aGlzLmNoZWNrQ29tbWl0bWVudChzdG9yZWRDb21taXRtZW50LCBuZXdDb21taXRtZW50KSkge1xuICAgICAgICB5aWVsZCBuZXdDb21taXRtZW50LnR4Yi5hc3luY1NpZ24oMCwgdGhpcy5tdWx0aXNpZ0FkZHJlc3Mua2V5UGFpciwgdGhpcy5mdW5kaW5nLnR4Yi50eC50eE91dHNbMF0pXG5cbiAgICAgICAgdGhpcy5jb21taXRtZW50cy5wb3AoKVxuICAgICAgICB0aGlzLmNvbW1pdG1lbnRzLnB1c2gobmV3Q29tbWl0bWVudClcbiAgICAgIH1cblxuICAgICAgaWYgKCF0aGlzLnNlbmRlcikge1xuICAgICAgICBsZXQgb3RoZXJDb21taXRtZW50ID0gdGhpcy5vdGhlci5jb21taXRtZW50c1t0aGlzLm90aGVyLmNvbW1pdG1lbnRzLmxlbmd0aCAtIDFdXG4gICAgICAgIHlpZWxkIHRoaXMucmVtb3RlQWdlbnQuc2VuZENvbW1pdG1lbnQob3RoZXJDb21taXRtZW50KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGV0IHJldlNlY3JldCA9IHRoaXMuZ2V0UmV2U2VjcmV0KClcbiAgICAgICAgaWYgKHJldlNlY3JldCkge1xuICAgICAgICAgIHlpZWxkIHRoaXMucmVtb3RlQWdlbnQuc2VuZFJldlNlY3JldChyZXZTZWNyZXQpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB0aGlzKVxuICB9XG5cbiAgc2VuZFJldlNlY3JldCAocmV2U2VjcmV0KSB7XG4gICAgcmV0dXJuIGFzaW5rKGZ1bmN0aW9uICogKCkge1xuICAgICAgLy8gVE9ET1xuICAgIH0sIHRoaXMpXG4gIH1cblxuICAvKiAtLS0tIFNFVFRFUlMgLS0tLSAqL1xuXG4gIHNldEZ1bmRpbmcgKHR4bykge1xuICAgIHRoaXMuZnVuZGluZyA9IHR4b1xuICB9XG5cbiAgc2V0Q29tbWl0bWVudCAodHhvKSB7XG4gICAgdGhpcy5jb21taXRtZW50c1t0aGlzLmNvbW1pdG1lbnRzLmxlbmd0aCAtIDFdID0gdHhvXG4gIH1cblxuICBzZXRPdGhlckNvbW1pdG1lbnQgKHR4bykge1xuICAgIHRoaXMub3RoZXIuY29tbWl0bWVudHNbdGhpcy5vdGhlci5jb21taXRtZW50cy5sZW5ndGggLSAxXSA9IHR4b1xuICB9XG5cbiAgLyogLS0tLSBHRVRURVJTIC0tLS0gKi9cblxuICBnZXRSZXZTZWNyZXQgKCkge1xuICAgIC8vIGlmIHRoZXJlIGlzIGEgdHJhbnNhY3Rpb24gdG8gcmV2b2tlLCByZXR1cm4gaXQncyByZXYgc2VjcmV0XG4gICAgaWYgKHRoaXMuY29tbWl0bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgcmV0dXJuIHRoaXMuY29tbWl0bWVudHNbdGhpcy5jb21taXRtZW50cy5sZW5ndGggLSAyXS5yZXZTZWNyZXRcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICB9XG5cbiAgLyogLS0tLSBIRUxQRVJTIC0tLS0gKi9cblxuICBjb21wbGV0ZU91dHB1dCAob3V0cHV0LCByZXZTZWNyZXQpIHtcbiAgICBpZiAob3V0cHV0LmludGVybWVkaWF0ZURlc3RJZCA9PT0gdGhpcy5pZCkge1xuICAgICAgb3V0cHV0LnJldlNlY3JldCA9IHJldlNlY3JldFxuICAgIH1cbiAgICByZXR1cm4gb3V0cHV0XG4gIH1cblxuICBjaGVja0NvbW1pdG1lbnQgKHN0b3JlZENvbW1pdG1lbnQsIG5ld0NvbW1pdG1lbnQpIHtcbiAgICAvLyBUT0RPXG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIC8vIFdlIGhhdmUgdG8gZGVsZXRlIG90aGVyIGFuZCByZW1vdGVBZ2VudCBhbmQgcmVzdG9yZSBhZnRlciBjb25zdHJ1Y3RpbmcganNvbi5cbiAgLy8gSWRlYWxsdCB3ZSdkIGNhbGwgc3VwZXIudG9KU09OIGFmdGVyIHRoYXQsIGJ1dCB0aGF0J3Mgbm90IHBvc3NpYmxlIGR1ZSB0b1xuICAvLyBzb21lIHN0dXBpZCBlcnJvciAoVE9ETylcbiAgdG9KU09OICgpIHtcbiAgICBsZXQgb3RoZXIgPSB0aGlzLm90aGVyXG4gICAgbGV0IHJlbW90ZUFnZW50ID0gdGhpcy5yZW1vdGVBZ2VudFxuICAgIGxldCB0aGF0ID0gdGhpc1xuICAgIHRoYXQub3RoZXIgPSB1bmRlZmluZWRcbiAgICB0aGF0LnJlbW90ZUFnZW50ID0gdW5kZWZpbmVkXG4gICAgdmFyIGpzb24gPSB7fVxuICAgIGZvciAodmFyIHZhbCBpbiB0aGlzKSB7XG4gICAgICBpZiAodGhpc1t2YWxdIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgbGV0IGFyciA9IFtdXG4gICAgICAgIGZvciAodmFyIGkgaW4gdGhpc1t2YWxdKSB7XG4gICAgICAgICAgYXJyLnB1c2godGhpc1t2YWxdW2ldLnRvSlNPTigpKVxuICAgICAgICB9XG4gICAgICAgIGpzb25bdmFsXSA9IGFyclxuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdGhpc1t2YWxdID09PSAnb2JqZWN0Jykge1xuICAgICAgICBqc29uW3ZhbF0gPSB0aGlzW3ZhbF0udG9KU09OKClcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHRoaXNbdmFsXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAganNvblt2YWxdID0gdGhpc1t2YWxdXG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMub3RoZXIgPSBvdGhlclxuICAgIHRoaXMucmVtb3RlQWdlbnQgPSByZW1vdGVBZ2VudFxuICAgIHJldHVybiBqc29uXG4gIH1cblxuICBmcm9tSlNPTiAoanNvbikge1xuICAgIHRoaXMubmFtZSA9IGpzb24ubmFtZVxuICAgIHRoaXMuc291cmNlQWRkcmVzcyA9IGpzb24uc291cmNlQWRkcmVzcyA/IG5ldyBLZXlQYWlyQWRkcmVzcygpLmZyb21KU09OKGpzb24uc291cmNlQWRkcmVzcykgOiB1bmRlZmluZWRcbiAgICB0aGlzLm11bHRpc2lnQWRkcmVzcyA9IGpzb24ubXVsdGlzaWdBZGRyZXNzID8gbmV3IE11bHRpc2lnKCkuZnJvbUpTT04oanNvbi5tdWx0aXNpZ0FkZHJlc3MpIDogdW5kZWZpbmVkXG4gICAgdGhpcy5kZXN0aW5hdGlvbkFkZHJlc3MgPSBqc29uLmRlc3RpbmF0aW9uQWRkcmVzcyA/IG5ldyBLZXlQYWlyQWRkcmVzcygpLmZyb21KU09OKGpzb24uZGVzdGluYXRpb25BZGRyZXNzKSA6IHVuZGVmaW5lZFxuICAgIHRoaXMuaHRsY1NlY3JldCA9IGpzb24uaHRsY1NlY3JldCA/IG5ldyBIdGxjU2VjcmV0KCkuZnJvbUpTT04oanNvbi5odGxjU2VjcmV0KSA6IHVuZGVmaW5lZFxuICAgIHRoaXMubmV4dFJldlNlY3JldCA9IGpzb24ubmV4dFJldlNlY3JldCA/IG5ldyBSZXZTZWNyZXQoKS5mcm9tSlNPTihqc29uLm5leHRSZXZTZWNyZXQpIDogdW5kZWZpbmVkXG4gICAgdGhpcy5mdW5kZXIgPSBqc29uLmZ1bmRlclxuICAgIHRoaXMud2FsbGV0ID0ganNvbi53YWxsZXQgPyBuZXcgV2FsbGV0KCkuZnJvbUpTT04oanNvbi53YWxsZXQpIDogdW5kZWZpbmVkXG4gICAgdGhpcy5pbml0aWFsaXplZCA9IGpzb24uaW5pdGlhbGl6ZWRcbiAgICB0aGlzLnNlbmRlciA9IGpzb24uc2VuZGVyXG4gICAgdGhpcy5mdW5kaW5nID0ganNvbi5mdW5kaW5nID8gbmV3IEZ1bmRpbmcoKS5mcm9tSlNPTihqc29uLmZ1bmRpbmcpIDogdW5kZWZpbmVkXG4gICAgaWYgKGpzb24uY29tbWl0bWVudHMpIHtcbiAgICAgIGxldCBjb21taXRtZW50cyA9IFtdXG4gICAgICBqc29uLmNvbW1pdG1lbnRzLmZvckVhY2goZnVuY3Rpb24gKHR4KSB7XG4gICAgICAgIGNvbW1pdG1lbnRzLnB1c2gobmV3IENvbW1pdG1lbnQoKS5mcm9tSlNPTih0eCkpXG4gICAgICB9KVxuICAgICAgdGhpcy5jb21taXRtZW50cyA9IGNvbW1pdG1lbnRzXG4gICAgfVxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICBhc3luY1RvUHVibGljICgpIHtcbiAgICByZXR1cm4gYXNpbmsoZnVuY3Rpb24gKiAoKSB7XG4gICAgICBsZXQgYWdlbnQgPSBuZXcgQWdlbnQoKVxuICAgICAgYWdlbnQuaWQgPSB0aGlzLmlkXG4gICAgICBhZ2VudC5zb3VyY2VBZGRyZXNzID0gdGhpcy5zb3VyY2VBZGRyZXNzID8gdGhpcy5zb3VyY2VBZGRyZXNzLnRvUHVibGljKCkgOiB1bmRlZmluZWRcbiAgICAgIGFnZW50Lm11bHRpc2lnQWRkcmVzcyA9IHRoaXMubXVsdGlzaWdBZGRyZXNzID8gdGhpcy5tdWx0aXNpZ0FkZHJlc3MudG9QdWJsaWMoKSA6IHVuZGVmaW5lZFxuICAgICAgYWdlbnQuZGVzdGluYXRpb25BZGRyZXNzID0gdGhpcy5kZXN0aW5hdGlvbkFkZHJlc3MgPyB0aGlzLmRlc3RpbmF0aW9uQWRkcmVzcy50b1B1YmxpYygpIDogdW5kZWZpbmVkXG4gICAgICBhZ2VudC5mdW5kaW5nID0gdGhpcy5mdW5kaW5nID8geWllbGQgdGhpcy5mdW5kaW5nLmFzeW5jVG9QdWJsaWMoKSA6IHVuZGVmaW5lZFxuICAgICAgaWYgKHRoaXMuY29tbWl0bWVudHMpIHtcbiAgICAgICAgbGV0IGNvbW1pdG1lbnRzID0gW11cbiAgICAgICAgdGhpcy5jb21taXRtZW50cy5mb3JFYWNoKGZ1bmN0aW9uICh0eG8pIHtcbiAgICAgICAgICBjb21taXRtZW50cy5wdXNoKHR4by50b1B1YmxpYygpKVxuICAgICAgICB9KVxuICAgICAgICBhZ2VudC5jb21taXRtZW50cyA9IGNvbW1pdG1lbnRzXG4gICAgICB9XG4gICAgICBhZ2VudC53YWxsZXQgPSB0aGlzLndhbGxldCA/IHRoaXMud2FsbGV0LnRvUHVibGljKCkgOiB1bmRlZmluZWRcbiAgICAgIGFnZW50LmluaXRpYWxpemVkID0gdGhpcy5pbml0aWFsaXplZFxuICAgICAgYWdlbnQuZnVuZGVyID0gdGhpcy5mdW5kZXJcbiAgICAgIGFnZW50LnNlbmRlciA9IHRoaXMuc2VuZGVyXG4gICAgICByZXR1cm4gYWdlbnRcbiAgICB9LCB0aGlzKVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQWdlbnRcbi8qKlxuXG5Qcm90b2NvbHNcbi0tLS0tLS0tLVxuXG5XZSBub3cgZGVzY3JpYmUgdGhlIHByb3RvY29sIHRoYXQgdGhlIHBhcnRpZXMgdXNlIHRvIGNvbnN0cnVjdCB0aGUgdHJhbnNhY3Rpb25zXG5zaG93biBhYm92ZS5cblxuIyMjIExvY2FsIGluaXRpYWxpemF0aW9uIChhc3luY0luaXRpYWxpemUpXG5cbioqMS4gTG9jYWwgaW5pdGlhbGl6YXRpb24gLioqIEJvdGggYWdlbnRzIGluaXRpYWxpemUgdGhlIGZvbGxvd2luZ1xuLSB0aGVpciBsb2NhbCBhZGRyZXNzZXMgKHNvdXJjZSwgZGVzdGluYXRpb24pXG4tIGEgaHRsYyBhbmQgcmV2b2NhdGlvbiBzZWNyZXQgdG8gYmUgdXNlZCBpbiB0aGUgZmlyc3QgcGF5bWVudFxuLSB0aGUgc2hhcmVkIG11bHRpc2lnIG9iamVjdCBpcyBpbml0aWFsaXplZCwgYnV0IHRoZSBhZGRyZXNzIGhhcyBub3QgYmVlblxuICBnZW5lcmF0ZWQgeWV0LlxuXG4jIyMgT3BlbmluZyB0aGUgY2hhbm5lbCAoYXN5bmNPcGVuQ2hhbm5lbClcblxuQXMgdGhlcmUgYXJlIGluaGVyZW50IG1hbGxlYWJpbGl0eSBwcm9ibGVtcyBpZiB0d28gcGFydGllcyBmdW5kIGEgcGF5bWVudFxuY2hhbm5lbC4gVG8gYXZvaWQgdGhpcyBwcm9ibGVtIHdlIHVzZSBhIHZlcnNpb24gd2hlcmUgb25seSBBbGljZSBmdW5kcyB0aGVcbmNoYW5uZWwuXG5cbioqMS4gQWxpY2UgYW5kIEJvYiBleGNoYW5nZSB0aGVpciBwdWJsaWMgcHJvamVjdGlvbnMgKGluaXRpYWxpemVPdGhlcikuKiogVGhpc1xuYWxsb3dzIHRoZW0gdG8gYnVpbGQgYSBzaGFyZWQgbXVsdGlzaWcgYWRkcmVzcyBhbmQgdG8ga25vdyB0aGUgcHVibGljIHZlcnNpb25zXG5vZiB0aGUgb3RoZXIgYWdlbnRzIGh0bGMgYW5kIHJldm9jYXRpb24gc2VjcmV0LiBBZnRlciB0aGlzIHN0ZXAgdGhlIGZvbGxvd2luZ1xuaXMgaW5pdGlhbGl6ZWRcblxuKioyLiBBbGljZSBhbmQgQm9iIGJ1aWxkIHRoZSBzaGFyZWQgbXVsdGlzaWcgKGFzeW5jSW5pdGlhbGl6ZU11bHRpc2lnKS4qKiBOb3dcbnRoYXQgdGhleSBoYXZlIGV4Y2hhbmdlZCBwdWJsaWMga2V5cyBmb3IgdGhlIG11bHRpc2lnIGFkZHJlc3MsIHRoZXkgY2FuIGJvdGhcbmJ1aWxkIGl0LlxuXG4qKjMuIFRoZSBmdW5kZXIgKEFsaWNlKSBidWlsZHMgYSBmdW5kaW5nIHRyYW5zYWN0aW9uLioqIFRoZSBhZ2VudCB0aGF0IGZ1bmRzXG50aGUgY2hhbm5lbCBjcmVhdGVzIHRoZSBmdW5kaW5nIHRyYW5zYWN0aW9uIHRoYXQgc3BlbmRzIHRvIHRoZSBzaGFyZWQgbXVsdGlzaWdcbmFkZHJlc3MuIFNoZSBkb2VzIG5vdCBicm9hZGNhc3QgaXQgeWV0LiBTaGUgdGhlbiBzZW5kcyB0aGUgZnVuZGluZyBhbW91bnQgYW5kXG5mdW5kaW5nIHRyYW5zYWN0aW9uIGhhc2ggdG8gQm9iLlxuXG4qKjQuIEJvYiBidWlsZHMgYW5kIHNpZ25zIGEgcmVmdW5kIHRyYW5zYWN0aW9uLCBzZW5kcyBpdCB0byBBbGljZS4qKiBBbGljZSBhbmRcbkJvYiBnbyB0aHJvdWdoIHRoZSBwcm90b2NvbCBkZXNjcmliZWQgYmVsb3cgZm9yIGNyZWF0aW5nIGEgcGF5bWVudCwgaW4gdGhlIGNhc2VcbndoZXJlIEJvYiBzZW5kcyBhIHBheW1lbnQgdG8gQWxpY2UuIFRoZSBwYXltZW50IHNwZW5kcyBhbGwgZnVuZHMgZnJvbSB0aGVcbmZ1bmRpbmcgdHJhbnNhY3Rpb24gdG8gQWxpY2UuXG5cbioqNS4gQWxpY2UgYnJvYWRjYXN0cyB0aGUgZnVuZGluZyB0cmFuc2FjdGlvbi4qKiBXaGVuIHRoZSByZWZ1bmQgdHJhbnNhY3Rpb24gaXNcbmNyZWF0ZWQgYW5kIGRpc3RyaWJ1dGVkIGJldHdlZW4gdGhlIHR3byBwYXJ0aWVzLCBBbGljZSBicm9hZGNhc3RzIHRoZSBmdW5kaW5nXG50cmFuc2FjdGlvbi4gVGhlIGNoYW5uZWwgaXMgb3BlbiB3aGVuIHRoZSBmdW5kaW5nIHRyYW5zYWN0aW9uIGlzIGNvbmZpcm1lZCBpbnRvXG50aGUgYmxvY2tjaGFpbi5cblxuQXQgdGhlIGVuZCBvZiB0aGUgY2hhbm5lbCBvcGVuaW5nIHByb2Nlc3MsIGJvdGggYWdlbnRzIHN0b3JlIHRoZSBmb2xsb3dpbmdcbmluZm9ybWF0aW9uOlxuXG4tIHRocmVlIGFkZHJlc3NlcyAoc291cmNlLCBkZXN0aW5hdGlvbiwgbXVsdGlzaWcpXG4tIGEgbGlzdCBvZiBjb21taXRtZW50IHRyYW5zYWN0aW9ucyBvYmplY3RzLiBUaGUgbGlzdCBoYXMgb25lIGVudHJ5IHRoYXRcbiAgY29udGFpbnMgdGhlIHNlY3JldHMgdXNlZCBmb3IgdGhlIGZpcnN0IHBheW1lbnRcbi0gdGhlIHB1YmxpYyBpbmZvcm1hdGlvbiBhYm91dCB0aGUgb3RoZXIgY2xpZW50OyB0aGlzIGFsc28gY29udGFpbnMgYSBsaXN0IG9mXG4gIGNvbW1pdG1lbnQgdHJhbnNhY3Rpb24gb2JqZWN0cyB3aXRoIG9uZSBlbnRyeSBjb250YWluaW5nIHRoZSBwdWJsaWNcbiAgcHJvamVjdGlvbnMgKGhhaGVzKSBvZiB0d28gc2VjcmV0cy5cblxuIyMjIENyZWF0aW5nIHRoZSBwYXltZW50IChhc3luY1NlbmQpXG5cbldlIGRlc2NyaWJlIGEgcGF5bWVudCBmcm9tIEFsaWNlIHRvIEJvYi4gTm90ZSB0aGF0IGlmIHRoaXMgaXMgbm90IHRoZSBmaXJzdFxucGF5bWVudCwgQWxpY2UgaGFzIHRoZSBoYXNoIG9mIEJvYidzIGxhc3QgcmV2b2NhdGlvbiBzZWNyZXQsIGFuZCB0aGUgaGFzaCBvZlxuQm9iJ3MgbGFzdCBIVExDIHNlY3JldC4gSWYgdGhpcyBpcyB0aGUgZmlyc3QgcGF5bWVudCwgcmV2b2tpbmcgaXNuJ3QgbmVjZXNzYXJ5XG5hbmQgdGhlc2Ugc2VjcmV0cyBhcmUgbm90IG5lZWRlZC5cblxuKioxLiBBbGljZSBidWlsZHMgYSBjb21taXRtZW50IHRyYW5zYWN0aW9uIGZvciBCb2IsIHN0b3JlcyBpdCwgYW5kIGFza3MgaGltIHRvXG5kbyB0aGUgc2FtZSAoYXN5bmNTZW5kKS4qKiBBbGljZSBidWlsZHMgdGhlIHRyYW5zYWN0aW9uIGxhYmVsZWQgXCJrbm93biBvbmx5IHRvXG5Cb2JcIiBhYm92ZS4gU2hlIHRoZW4gYXNrcyBCb2IgdG8gYnVpbGQgb25lIGZvciBoZXIuPCEtLVNoZSB1c2VzIHRoZSBwdWJsaWNcbnZlcnNpb25zIG9mIHRoZSBzZWNyZXRzIG9idGFpbmVkIGZyb20gQm9iIGluIHN0ZXAgMiBhbmQgaGVyIG93biBzZWNyZXRzXG5nZW5lcmF0ZWQgaW4gU3RlcCAxLiBTaGUgc2lnbnMgdGhlIHRyYW5zYWN0aW9uIGFuZCBzZW5kcyBpdCB0byBCb2IuLS0+XG5cbioqMi4gQm9iIGJ1aWxkcyBhIGNvbW1pdG1lbnQgdHJhbnNhY3Rpb24gZm9yIEFsaWNlLCBzdG9yZXMgaXQsIGFuZCBzZW5kcyBpdCB0b1xuQWxpY2UgKGFzeW5jU2VuZCkuKipcblxuKiozLiBBbGljZSBjaGVja3MgdGhlIG5ldyBjb21taXRtZW50IHRyYW5zYWN0aW9uLCBzdG9yZXMgaXQsIGFuZCBzZW5kcyB0aGVcbnRyYW5zYWN0aW9uIGJ1aWx0IGluIHN0ZXAgMSB0byBCb2IgKGFzeW5jU2VuZFR4YikuKipcblxuKio0LiBCb2IgY2hlY2tzIHRoZSBuZXcgY29tbWl0bWVudCB0cmFuc2FjdGlvbiwgc3RvcmVzIGl0LCBhbmQgcmV2b2tlcyB0aGUgb2xkXG5jb21taXRtZW50IHRyYW5zYWN0aW9uIChhc3luY1NlbmRUeGIpLioqXG5cbioqNS4gQWxpY2UgY2hlY2tzIHRoZSByZXZvY2F0aW9uIHNlY3JldCwgc3RvcmVzIGl0LCBnZW5lcmF0ZXMgbmV3IHNlY3JldHMsIGFuZFxucmV2b2tlcyB0aGUgb2xkIGNvbW1pdG1lbnQgdHJhbnNhY3Rpb24gKGFzeW5jUHJlcGFyZU5leHRQYXltZW50KS4qKlxuXG4qKjYuIEJvYiBjaGVja3MgdGhlIHJldm9jYXRpb24gc2VjcmV0LCBzdG9yZXMgaXQsIGdlbmVyYXRlcyBuZXcgc2VjcmV0cyBmb3IgdGhlXG5uZXh0IHBheW1lbnQuKipcblxuPCEtLVxuKio0LiBBbGljZSBjaGVja3MgdGhlIHRyYW5zYWN0aW9uLCBidWlsZHMgb25lIGZvciBBbGljZSBhbmQgc2VuZHMgaXQgdG8gaGVyLioqXG5Cb2IgY2hlY2tzIHRoYXQgdGhlIHRyYW5zYWN0aW9uIHNwZW5kcyBmcm9tIHRoZSBzaGFyZWQgbXVsdGlzaWcgYWRkcmVzcywgc3BlbmRzXG50byBoaXMgZGVzdGluYXRpb24gYWRkcmVzcywgdGhhdCB0aGUgc2VjcmV0cyB1c2VkIGFyZSB0aGUgb25lcyBoZSBnZW5lcmF0ZWQgaW5cblN0ZXAgMiwgYW5kIHRoYXQgdGhlIHNwZW5kaW5nIGFtb3VudHMgYXJlIGFzIGV4cGVjdGVkLiBJZiB0aGUgdGVzdCBwYXNzZXMsIGhlXG5idWlsZHMgdGhlIHRyYW5zYWN0aW9uIGxhYmVsbGVkIFwia25vd24gb25seSB0byBBbGljZVwiIGFuZCBzZW5kcyBpdCB0byBoZXIgKHRoaXNcbmlzIHN5bW1ldHJpYyB0byBjYXNlIDMuKS5cblxuKio1LiBBbGljZSBjaGVja3MgdGhlIHRyYW5zYWN0aW9uIG9idGFpbmVkIGZyb20gQm9iLCBhbmQgcmV2b2tlcyBoZXIgbGFzdFxucGF5bWVudCBpZiB0aGUgY2hlY2sgcGFzc2VzLioqIFRvIHJldm9rZSB0aGUgcHJldmlvdXMgcGF5bWVudCwgQWxpY2Ugc2VuZHMgaGVyXG5yZXZvY2F0aW9uIHNlY3JldCBmcm9tIHRoZSBsYXN0IGNvbW1pdG1lbnQgdHJhbnNhY3Rpb24gdG8gQm9iLlxuXG4qKjYuIEJvYiByZXZva2VzLioqIFN5bW1ldHJpY2FsbHksIEJvYiBzZW5kcyBBbGljZSBoaXMgcmV2b2NhdGlvbiBzZWNyZXQgZnJvbVxudGhlIGxhc3QgY29tbWl0bWVudCB0cmFuc2FjdGlvbi5cblxuKioxLiBBbGljZSBnZW5lcmF0ZXMgbmV3IHNlY3JldHMgYW5kIHNlbmRzIHRoZW0gdG8gQm9iLioqIFNoZSBsb2NhbGx5IGNyZWF0ZXMgYVxucmV2b2NhdGlvbiBzZWNyZXQgYW5kIGEgaHRsYyBzZWNyZXQgZm9yIHVzZSBvbiB0aGUgbmV4dCB0cmFuc2FjdGlvbi4gU2hlIHRoZW5cbnNlbmRzIHRoZSBwdWJsaWMgdmVyc2lvbnMgKGhhc2hlcykgb2YgdGhlc2Ugc2VjcmV0cyB0byBCb2IuXG5cbioqMi4gQm9iIGdlbmVyYXRlcyBhIG5ldyBzZWNyZXRzIGFuZCBzZW5kcyB0aGVtIHRvIEFsaWNlLioqIFRoaXMgaXMgc3ltbWV0cmljXG50byB0aGUgY2FzZSBhYm92ZVxuLS0+XG4jIyMgQ2xvc2luZyB0aGUgY2hhbm5lbFxuXG5FaXRoZXIgcGFydHkgY2FuIGJyb2FkY2FzdCB0aGVpciBtb3N0IHJlY2VudCBjb21taXRtZW50IHRyYW5zYWN0aW9uIHRvIHRoZVxuYmxvY2tjaGFpbi4gSW4gdGhpcyBjYXNlIGJvdGggcGFydGllcyBnbyB0aHJvdWdoIHRoZSBmb2xsb3dpbmcgcHJvdG9jb2xcblxuKioxLiBGaW5kIHRoZSBtb3N0IHJlY2VudCBIVExDIHNlY3JldC4qKlxuXG4qKjIuIEJ1aWxkIGEgc3BlbmRpbmcgdHJhbnNhY3Rpb24uKipcblxuKiozLiBCcm9hZGNhc3Qgc3BlbmRpbmcgdHJhbnNhY3Rpb24gYW5kIHRoZSBtb3N0IHJlY2VudCBjb21taXRtZW50XG50cmFuc2FjdGlvbi4qKlxuXG5UaGUgcGFydHkgdGhhdCBicm9hZGNhc3RzIHRoZSBjb21taXRtZW50IHRyYW5zYWN0aW9uIG11c3Qgd2FpdCBmb3IgYSBkYXkgdG8gZG9cbnRoYXQsIHRoZSBvdGhlciBwYXJ0eSBjYW4gZG8gc28gYXMgc29vbiBhcyBwb3NzaWJsZS5cblxuIyMjIEVuZm9yY2luZyB0aGUgSFRMQ1xuXG5JbiBjYXNlIG9uZSBwYXJ0eSBmYWlscyB0byBzcGVuZCBhbiBvdXRwdXQgYnkgcHJvdmlkaW5nIHRoZSBIVExDIHNlY3JldCwgdGhlXG5vdGhlciBwYXJ0eSBjYW4gc3BlbmQgdGhlIEhUTEMgb3V0cHV0IGFmdGVyIDIgZGF5cy5cblxuKioxLiBCdWlsZCBzcGVuZGluZyB0cmFuc2FjdGlvbiB1c2luZyBzcGVuZGluZyBrZXkuKipcblxuKiozLiBCcm9hZGNhc3Qgc3BlbmRpbmcgdHJhbnNhY3Rpb24gYW5kIHRoZSBtb3N0IHJlY2VudCBjb21taXRtZW50XG50cmFuc2FjdGlvbi4qKlxuXG4jIyMgUmVhY3QgdG8gb3RoZXIgYWdlbnQgYnJvYWRjYXN0aW5nIGFuIG9sZCBjb21taXRtZW50IHRyYW5zYWN0aW9uXG5cbkluIHRoYXQgY2FzZSBvbmUgcGFydHkgYnJvYWRjYXN0cyBhbiBvbGQgY29tbWl0bWVudCB0cmFuc2FjdGlvbixcbnRoZSBvdGhlciBwYXJ0eSBnb2VzIHRyb3VnaCB0aGUgZm9sbG93aW5nOlxuXG4qKjEuIEZpbmQgdGhlIGNvcnJlc3BvbmRpbmcgSFRMQyBzZWNyZXQuKipcblxuKioyLiBDcmVhdGUgYW4gb3V0cHV0IHNjcmlwdCB0aGF0IHNwZW5kcyB0aGUgSFRMQyBvdXRwdXQuKipcblxuKiozLiBGaW5kIHRoZSBjb3JyZXNwb25kaW5nIHJldm9jYXRpb24gc2VjcmV0LioqXG5cbioqNC4gQ3JlYXRlIGFuIG91dHB1dCBzY3JpcHQgdGhhdCBzcGVuZHMgdGhlIHJldm9jYXRpb24gb3V0cHV0LioqXG5cbioqNS4gQnVpbGQgYSB0cmFuc2FjdGlvbiB0aGF0IHNwZW5kcyBib3RoIG91dHB1dHMuKipcblxuVGhpcyBoYXMgdG8gaGFwcGVuIHdpdGhpbiBvbmUgZGF5LCBpbiBvcmRlciB0byBtYWtlIHN1cmUgdGhhdCB0aGUgcmV2b2NhdGlvblxub3V0cHV0IGNhbiBiZSBzcGVudC5cblxuKiovXG4iLCJsZXQgQm4gPSByZXF1aXJlKCd5b3Vycy1iaXRjb2luL2xpYi9ibicpXG5cbi8vIHNlZSBoZXJlIGZvciBleHBsYW5hdGlvbjogaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy84NTk1NTA5L2hvdy1kby15b3Utc2hhcmUtY29uc3RhbnRzLWluLW5vZGVqcy1tb2R1bGVzXG5mdW5jdGlvbiBkZWZpbmUgKG5hbWUsIHZhbHVlKSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7XG4gICAgdmFsdWU6IHZhbHVlLFxuICAgIGVudW1lcmFibGU6IHRydWVcbiAgfSlcbn1cblxuZGVmaW5lKCdDU1ZfREVMQVknLCBCbigxMDApKVxuIiwiLy8ganVzdCBhIGR1bW15IGF0IHRoaXMgcG9pbnRcbid1c2Ugc3RyaWN0J1xubGV0IFN0cnVjdCA9IHJlcXVpcmUoJ3lvdXJzLWJpdGNvaW4vbGliL3N0cnVjdCcpXG5sZXQgQm4gPSByZXF1aXJlKCd5b3Vycy1iaXRjb2luL2xpYi9ibicpXG5sZXQgU2NyaXB0ID0gcmVxdWlyZSgneW91cnMtYml0Y29pbi9saWIvc2NyaXB0JylcbmxldCBIdGxjU2VjcmV0ID0gcmVxdWlyZSgnLi9zY3J0cy9odGxjLXNlY3JldCcpXG5sZXQgUmV2U2VjcmV0ID0gcmVxdWlyZSgnLi9zY3J0cy9yZXYtc2VjcmV0JylcblxuY2xhc3MgT3V0cHV0IGV4dGVuZHMgU3RydWN0IHtcbiAgY29uc3RydWN0b3IgKFxuICAgIGtpbmQsXG4gICAgbmV0d29ya1NvdXJjZUlkLFxuICAgIGNoYW5uZWxTb3VyY2VJZCxcbiAgICBjaGFubmVsRGVzdElkLFxuICAgIG5ldHdvcmtEZXN0SWQsXG4gICAgY2hhbm5lbFNvdXJjZVBhdGgsXG4gICAgY2hhbm5lbERlc3RQYXRoLFxuICAgIGh0bGNTZWNyZXQsXG4gICAgcmV2U2VjcmV0LFxuICAgIGFtb3VudCxcbiAgICByZXZvY2FibGUsXG4gICAgcmVkZWVtU2NyaXB0LFxuICAgIHNjcmlwdFB1YmtleVxuICApIHtcbiAgICBzdXBlcigpXG4gICAgdGhpcy5mcm9tT2JqZWN0KHtcbiAgICAgIGtpbmQsXG4gICAgICBuZXR3b3JrU291cmNlSWQsXG4gICAgICBjaGFubmVsU291cmNlSWQsXG4gICAgICBjaGFubmVsRGVzdElkLFxuICAgICAgbmV0d29ya0Rlc3RJZCxcbiAgICAgIGNoYW5uZWxTb3VyY2VQYXRoLFxuICAgICAgY2hhbm5lbERlc3RQYXRoLFxuICAgICAgaHRsY1NlY3JldCxcbiAgICAgIHJldlNlY3JldCxcbiAgICAgIGFtb3VudCxcbiAgICAgIHJldm9jYWJsZSxcbiAgICAgIHJlZGVlbVNjcmlwdCxcbiAgICAgIHNjcmlwdFB1YmtleVxuICAgIH0pXG4gIH1cblxuICBmcm9tSlNPTiAoanNvbikge1xuICAgIHRoaXMuY2hhbm5lbFNvdXJjZVBhdGggPSBqc29uLmNoYW5uZWxTb3VyY2VQYXRoXG4gICAgdGhpcy5jaGFubmVsRGVzdFBhdGggPSBqc29uLmNoYW5uZWxEZXN0UGF0aFxuICAgIHRoaXMubmV0d29ya1NvdXJjZUlkID0ganNvbi5uZXR3b3JrU291cmNlSWRcbiAgICB0aGlzLmNoYW5uZWxTb3VyY2VJZCA9IGpzb24uY2hhbm5lbFNvdXJjZUlkXG4gICAgdGhpcy5jaGFubmVsRGVzdElkID0ganNvbi5jaGFubmVsRGVzdElkXG4gICAgdGhpcy5uZXR3b3JrRGVzdElkID0ganNvbi5uZXR3b3JrRGVzdElkXG4gICAgdGhpcy5raW5kID0ganNvbi5raW5kXG4gICAgdGhpcy5odGxjU2VjcmV0ID0ganNvbi5odGxjU2VjcmV0ID8gbmV3IEh0bGNTZWNyZXQoKS5mcm9tSlNPTihqc29uLmh0bGNTZWNyZXQpIDogdW5kZWZpbmVkXG4gICAgdGhpcy5yZXZTZWNyZXQgPSBqc29uLnJldlNlY3JldCA/IG5ldyBSZXZTZWNyZXQoKS5mcm9tSlNPTihqc29uLnJldlNlY3JldCkgOiB1bmRlZmluZWRcbiAgICB0aGlzLmFtb3VudCA9IGpzb24uYW1vdW50ID8gbmV3IEJuKCkuZnJvbUpTT04oanNvbi5hbW91bnQpIDogdW5kZWZpbmVkXG4gICAgdGhpcy5yZXZvY2FibGUgPSBqc29uLnJldm9jYWJsZVxuICAgIHRoaXMucmVkZWVtU2NyaXB0ID0ganNvbi5yZWRlZW1TY3JpcHQgPyBTY3JpcHQuZnJvbUpTT04oanNvbi5yZWRlZW1TY3JpcHQpIDogdW5kZWZpbmVkXG4gICAgdGhpcy5zY3JpcHRQdWJrZXkgPSBqc29uLnNjcmlwdFB1YmtleSA/IFNjcmlwdC5mcm9tSlNPTihqc29uLnNjcmlwdFB1YmtleSkgOiB1bmRlZmluZWRcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgdG9QdWJsaWMgKCkge1xuICAgIGxldCBvdXRwdXREZXNjID0gbmV3IE91dHB1dCgpXG4gICAgb3V0cHV0RGVzYy5jaGFubmVsU291cmNlUGF0aCA9IHRoaXMuY2hhbm5lbFNvdXJjZVBhdGhcbiAgICBvdXRwdXREZXNjLmNoYW5uZWxEZXN0UGF0aCA9IHRoaXMuY2hhbm5lbERlc3RQYXRoXG4gICAgb3V0cHV0RGVzYy5uZXR3b3JrU291cmNlSWQgPSB0aGlzLm5ldHdvcmtTb3VyY2VJZFxuICAgIG91dHB1dERlc2MuY2hhbm5lbFNvdXJjZUlkID0gdGhpcy5jaGFubmVsU291cmNlSWRcbiAgICBvdXRwdXREZXNjLmNoYW5uZWxEZXN0SWQgPSB0aGlzLmNoYW5uZWxEZXN0SWRcbiAgICBvdXRwdXREZXNjLm5ldHdvcmtEZXN0SWQgPSB0aGlzLm5ldHdvcmtEZXN0SWRcbiAgICBvdXRwdXREZXNjLmtpbmQgPSB0aGlzLmtpbmRcbiAgICBvdXRwdXREZXNjLmh0bGNTZWNyZXQgPSB0aGlzLmh0bGNTZWNyZXQgPyB0aGlzLmh0bGNTZWNyZXQudG9QdWJsaWMoKSA6IHVuZGVmaW5lZFxuICAgIG91dHB1dERlc2MucmV2U2VjcmV0ID0gdGhpcy5yZXZTZWNyZXQgPyB0aGlzLnJldlNlY3JldC50b1B1YmxpYygpIDogdW5kZWZpbmVkXG4gICAgb3V0cHV0RGVzYy5hbW91bnQgPSB0aGlzLmFtb3VudFxuICAgIG91dHB1dERlc2MucmV2b2NhYmxlID0gdGhpcy5yZXZvY2FibGVcbiAgICBvdXRwdXREZXNjLnJlZGVlbVNjcmlwdCA9IHRoaXMucmVkZWVtU2NyaXB0ID8gdGhpcy5yZWRlZW1TY3JpcHQudG9KU09OKCkgOiB1bmRlZmluZWRcbiAgICBvdXRwdXREZXNjLnNjcmlwdFB1YmtleSA9IHRoaXMuc2NyaXB0UHVia2V5ID8gdGhpcy5zY3JpcHRQdWJrZXkudG9KU09OKCkgOiB1bmRlZmluZWRcbiAgICByZXR1cm4gb3V0cHV0RGVzY1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gT3V0cHV0XG4iLCIndXNlIHN0cmljdCdcbmxldCBTZWNyZXQgPSByZXF1aXJlKCcuL3NlY3JldCcpXG5sZXQgYXNpbmsgPSByZXF1aXJlKCdhc2luaycpXG5cbmNsYXNzIEh0bGNTZWNyZXQgZXh0ZW5kcyBTZWNyZXQge1xuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgc3VwZXIoKVxuICAgIHRoaXMuZnJvbU9iamVjdCh7fSlcbiAgfVxuXG4gIGFzeW5jQ2hlY2sgKG90aGVyU2VjcmV0KSB7XG4gICAgcmV0dXJuIGFzaW5rKGZ1bmN0aW9uICogKCkge1xuICAgICAgcmV0dXJuIHlpZWxkIHRoaXMuYXN5bmNTdXBlckNoZWNrKClcbiAgICB9LCB0aGlzKVxuICB9XG5cbiAgdG9QdWJsaWMgKCkge1xuICAgIGxldCBzZWNyZXQgPSBuZXcgSHRsY1NlY3JldCgpXG4gICAgc2VjcmV0Lmhhc2ggPSB0aGlzLmhhc2hcbiAgICByZXR1cm4gc2VjcmV0XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBIdGxjU2VjcmV0XG4iLCIndXNlIHN0cmljdCdcbmxldCBTZWNyZXQgPSByZXF1aXJlKCcuL3NlY3JldCcpXG5sZXQgYXNpbmsgPSByZXF1aXJlKCdhc2luaycpXG5cbmNsYXNzIFJldm9jYXRpb25TZWNyZXQgZXh0ZW5kcyBTZWNyZXQge1xuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgc3VwZXIoKVxuICAgIHRoaXMuZnJvbU9iamVjdCh7fSlcbiAgfVxuXG4gIGFzeW5jQ2hlY2sgKG90aGVyU2VjcmV0KSB7XG4gICAgcmV0dXJuIGFzaW5rKGZ1bmN0aW9uICogKCkge1xuICAgICAgaWYgKG90aGVyU2VjcmV0KSB7XG4gICAgICAgIGlmICghb3RoZXJTZWNyZXQuaGFzaCB8fCBvdGhlclNlY3JldC5oYXNoLnRvU3RyaW5nKCdoZXgnKSAhPT0gdGhpcy5oYXNoLnRvU3RyaW5nKCdoZXgnKSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUHJvdmlkZWQgc2VjcmV0IGRvZXMgbm90IG1hdGNoIGxvY2FsIHNlY3JldCcpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB5aWVsZCB0aGlzLmFzeW5jU3VwZXJDaGVjaygpXG4gICAgfSwgdGhpcylcbiAgfVxuXG4gIHRvUHVibGljICgpIHtcbiAgICBsZXQgc2VjcmV0ID0gbmV3IFJldm9jYXRpb25TZWNyZXQoKVxuICAgIHNlY3JldC5oYXNoID0gdGhpcy5oYXNoXG4gICAgcmV0dXJuIHNlY3JldFxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUmV2b2NhdGlvblNlY3JldFxuIiwiJ3VzZSBzdHJpY3QnXG5sZXQgU3RydWN0ID0gcmVxdWlyZSgneW91cnMtYml0Y29pbi9saWIvc3RydWN0JylcbmxldCBhc2luayA9IHJlcXVpcmUoJ2FzaW5rJylcbmxldCBIYXNoID0gcmVxdWlyZSgneW91cnMtYml0Y29pbi9saWIvaGFzaCcpXG5sZXQgUmFuZG9tID0gcmVxdWlyZSgneW91cnMtYml0Y29pbi9saWIvcmFuZG9tJylcblxuY2xhc3MgU2VjcmV0IGV4dGVuZHMgU3RydWN0IHtcbiAgY29uc3RydWN0b3IgKGJ1ZiwgaGFzaCkge1xuICAgIHN1cGVyKClcbiAgICB0aGlzLmZyb21PYmplY3Qoe2J1ZiwgaGFzaH0pXG4gIH1cblxuICBhc3luY0luaXRpYWxpemUgKCkge1xuICAgIHJldHVybiBhc2luayhmdW5jdGlvbiAqICgpIHtcbiAgICAgIHRoaXMuZ2VuZXJhdGVCdWYoKVxuICAgICAgeWllbGQgdGhpcy5hc3luY0dlbmVyYXRlSGFzaCgpXG4gICAgICByZXR1cm4gdGhpc1xuICAgIH0sIHRoaXMpXG4gIH1cblxuICBnZW5lcmF0ZUJ1ZiAoKSB7XG4gICAgdGhpcy5idWYgPSBSYW5kb20uZ2V0UmFuZG9tQnVmZmVyKDMyKVxuICB9XG5cbiAgYXN5bmNHZW5lcmF0ZUhhc2ggKCkge1xuICAgIHJldHVybiBhc2luayhmdW5jdGlvbiAqICgpIHtcbiAgICAgIGlmICghdGhpcy5idWYpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBFcnJvcignYnVmZmVyIG11c3QgYmUgZ2VuZXJhdGVkIGJlZm9yZSBoYXNoIGNhbiBiZScpXG4gICAgICB9XG4gICAgICB0aGlzLmhhc2ggPSB5aWVsZCBIYXNoLmFzeW5jU2hhMjU2UmlwZW1kMTYwKHRoaXMuYnVmKVxuICAgIH0sIHRoaXMpXG4gIH1cblxuICBhc3luY1N1cGVyQ2hlY2sgKCkge1xuICAgIHJldHVybiBhc2luayhmdW5jdGlvbiAqICgpIHtcbiAgICAgIGlmICghdGhpcy5idWYpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdzZWNyZXQuYnVmIGlzIG5vdCBzZXQnKVxuICAgICAgfVxuICAgICAgaWYgKCF0aGlzLmhhc2gpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdzZWNyZXQuaGFzaCBpcyBub3Qgc2V0JylcbiAgICAgIH1cbiAgICAgIGxldCBoYXNoZWRCdWYgPSB5aWVsZCBIYXNoLmFzeW5jU2hhMjU2UmlwZW1kMTYwKHRoaXMuYnVmKVxuICAgICAgcmV0dXJuIGhhc2hlZEJ1Zi5lcXVhbHModGhpcy5oYXNoKVxuICAgIH0sIHRoaXMpXG4gIH1cblxuICAvKlxuICAgKiByZXR1cm5zIGEgbmV3IHNlY3JldCB3aXRoIHRoZSBidWZmZXIgdG9QdWJsaWNcbiAgICovXG4gIHRvUHVibGljICgpIHtcbiAgICBsZXQgc2VjcmV0ID0gbmV3IFNlY3JldCgpLmZyb21PYmplY3QodGhpcylcbiAgICBzZWNyZXQuYnVmID0gdW5kZWZpbmVkXG4gICAgcmV0dXJuIHNlY3JldFxuICB9XG5cbiAgdG9KU09OICgpIHtcbiAgICBsZXQganNvbiA9IHt9XG4gICAganNvbi5idWYgPSB0aGlzLmJ1ZiA/IHRoaXMuYnVmLnRvU3RyaW5nKCdoZXgnKSA6IHVuZGVmaW5lZFxuICAgIGpzb24uaGFzaCA9IHRoaXMuaGFzaCA/IHRoaXMuaGFzaC50b1N0cmluZygnaGV4JykgOiB1bmRlZmluZWRcbiAgICByZXR1cm4ganNvblxuICB9XG5cbiAgZnJvbUpTT04gKGpzb24pIHtcbiAgICB0aGlzLmJ1ZiA9IGpzb24uYnVmID8gbmV3IEJ1ZmZlcihqc29uLmJ1ZiwgJ2hleCcpIDogdW5kZWZpbmVkXG4gICAgdGhpcy5oYXNoID0ganNvbi5oYXNoID8gbmV3IEJ1ZmZlcihqc29uLmhhc2gsICdoZXgnKSA6IHVuZGVmaW5lZFxuICAgIHJldHVybiB0aGlzXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBTZWNyZXRcbiIsIid1c2Ugc3RyaWN0J1xubGV0IGFzaW5rID0gcmVxdWlyZSgnYXNpbmsnKVxubGV0IFR4ID0gcmVxdWlyZSgnLi90eCcpXG5sZXQgT3V0cHV0ID0gcmVxdWlyZSgnLi4vb3V0cHV0JylcbmxldCBUeEJ1aWxkZXIgPSByZXF1aXJlKCd5b3Vycy1iaXRjb2luL2xpYi90eC1idWlsZGVyJylcbmxldCBTY3JpcHQgPSByZXF1aXJlKCd5b3Vycy1iaXRjb2luL2xpYi9zY3JpcHQnKVxubGV0IE9wQ29kZSA9IHJlcXVpcmUoJ3lvdXJzLWJpdGNvaW4vbGliL29wLWNvZGUnKVxubGV0IEFkZHJlc3MgPSByZXF1aXJlKCd5b3Vycy1iaXRjb2luL2xpYi9hZGRyZXNzJylcbmxldCBCbiA9IHJlcXVpcmUoJ3lvdXJzLWJpdGNvaW4vbGliL2JuJylcbmxldCBDb25zdHMgPSByZXF1aXJlKCcuLi9jb25zdHMuanMnKVxuXG5jbGFzcyBDb21taXRtZW50IGV4dGVuZHMgVHgge1xuICBjb25zdHJ1Y3RvciAob3V0cHV0cywgdHhiKSB7XG4gICAgc3VwZXIoe291dHB1dHMsIHR4Yn0pXG4gIH1cblxuICBhc3luY0J1aWxkIChmdW5kaW5nVHhIYXNoLCBmdW5kaW5nVHhPdXQsIG11bHRpc2lnQWRkcmVzcywgYnVpbGRlcklkLCB4UHVicykge1xuICAgIHJldHVybiBhc2luayhmdW5jdGlvbiAqICgpIHtcbiAgICAgIGlmICghdGhpcy5vdXRwdXRzKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQ29tbWl0bWVudCBub3Qgc3VmZmljaWVudGx5IGluaXRpYWxpemVkJylcbiAgICAgIH1cblxuICAgICAgdGhpcy50eGIgPSBuZXcgVHhCdWlsZGVyKClcbiAgICAgIHRoaXMudHhiLmlucHV0RnJvbVNjcmlwdEhhc2hNdWx0aVNpZyhmdW5kaW5nVHhIYXNoLCAwLCBmdW5kaW5nVHhPdXQsIG11bHRpc2lnQWRkcmVzcy5zY3JpcHQpXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMub3V0cHV0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAvLyBidWlsZCBvdXRwdXQgc2NyaXB0c1xuICAgICAgICB0aGlzLm91dHB1dHNbaV0ucmV2b2NhYmxlID0gdGhpcy5vdXRwdXRzW2ldLmNoYW5uZWxEZXN0SWQgIT09IGJ1aWxkZXJJZFxuICAgICAgICB0aGlzLm91dHB1dHNbaV0ucmVkZWVtU2NyaXB0ID0gdGhpcy5idWlsZFJlZGVlbVNjcmlwdCh0aGlzLm91dHB1dHNbaV0sIGJ1aWxkZXJJZCwgeFB1YnMpXG4gICAgICAgIHRoaXMub3V0cHV0c1tpXS5zY3JpcHRQdWJrZXkgPSBBZGRyZXNzLmZyb21SZWRlZW1TY3JpcHQodGhpcy5vdXRwdXRzW2ldLnJlZGVlbVNjcmlwdCkudG9TY3JpcHQoKVxuXG4gICAgICAgIGlmIChpIDwgdGhpcy5vdXRwdXRzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICB0aGlzLnR4Yi5vdXRwdXRUb1NjcmlwdCh0aGlzLm91dHB1dHNbaV0uYW1vdW50LCB0aGlzLm91dHB1dHNbaV0uc2NyaXB0UHVia2V5KVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMudHhiLnNldENoYW5nZVNjcmlwdCh0aGlzLm91dHB1dHNbaV0uc2NyaXB0UHVia2V5KVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMudHhiLmJ1aWxkKClcbiAgICAgIHlpZWxkIHRoaXMudHhiLmFzeW5jU2lnbigwLCBtdWx0aXNpZ0FkZHJlc3Mua2V5UGFpciwgZnVuZGluZ1R4T3V0KVxuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9LCB0aGlzKVxuICB9XG5cbiAgYnVpbGRSZWRlZW1TY3JpcHQgKG91dHB1dE9iamVjdCwgYnVpbGRlcklkLCB4UHVicykge1xuICAgIGlmIChvdXRwdXRPYmplY3Qua2luZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0luc3VmZmljaWVudCBhcmd1bWVudHMgZm9yIGJ1aWxkUmVkZWVtU2NyaXB0JylcbiAgICB9XG5cbiAgICBsZXQgc291cmNlUGF0aCA9IG91dHB1dE9iamVjdC5jaGFubmVsU291cmNlUGF0aFxuICAgIGxldCBzb3VyY2VCaXAgPSB4UHVic1tvdXRwdXRPYmplY3QuY2hhbm5lbFNvdXJjZUlkXVxuICAgIGxldCBzb3VyY2VQdWJLZXkgPSBzb3VyY2VCaXAuZGVyaXZlKHNvdXJjZVBhdGgpLnB1YktleSAvLyBUT0RPOiBhc3luY0Rlcml2ZVxuXG4gICAgbGV0IGRlc3RQYXRoID0gb3V0cHV0T2JqZWN0LmNoYW5uZWxEZXN0UGF0aFxuICAgIGxldCBkZXN0QmlwID0geFB1YnNbb3V0cHV0T2JqZWN0LmNoYW5uZWxEZXN0SWRdXG4gICAgbGV0IGRlc3RQdWJLZXkgPSBkZXN0QmlwLmRlcml2ZShkZXN0UGF0aCkucHViS2V5IC8vIFRPRE86IGFzeW5jRGVyaXZlXG5cbiAgICBpZiAob3V0cHV0T2JqZWN0LmtpbmQgPT09ICdwdWJLZXknICYmIG91dHB1dE9iamVjdC5jaGFubmVsRGVzdElkID09PSBidWlsZGVySWQpIHtcbiAgICAgIC8vIGJ1aWxkIGFuIHNwZW5kIHRvIHB1YmtleSBzY3JpcHRcbiAgICAgIHJldHVybiB0aGlzLnB1YktleVJlZGVlbVNjcmlwdChkZXN0UHViS2V5KVxuICAgIH0gZWxzZSBpZiAob3V0cHV0T2JqZWN0LmtpbmQgPT09ICdwdWJLZXknICYmIG91dHB1dE9iamVjdC5jaGFubmVsRGVzdElkICE9PSBidWlsZGVySWQpIHtcbiAgICAgIC8vIGJ1aWxkIGEgcmV2b2NhYmxlIHNwZW5kIHRvIHB1YmtleSBzY3JpcHRcbiAgICAgIHJldHVybiB0aGlzLnJldlB1YktleVJlZGVlbVNjcmlwdChkZXN0UHViS2V5LCBzb3VyY2VQdWJLZXksIG91dHB1dE9iamVjdClcbiAgICB9IGVsc2UgaWYgKG91dHB1dE9iamVjdC5raW5kID09PSAnaHRsYycgJiYgb3V0cHV0T2JqZWN0LmNoYW5uZWxEZXN0SWQgPT09IGJ1aWxkZXJJZCkge1xuICAgICAgLy8gYnVpbGQgYW4gSFRMQyBzY3JpcHRcbiAgICAgIHJldHVybiB0aGlzLmh0bGNSZWRlZW1TY3JpcHQoZGVzdFB1YktleSwgc291cmNlUHViS2V5LCBvdXRwdXRPYmplY3QpXG4gICAgfSBpZiAob3V0cHV0T2JqZWN0LmtpbmQgPT09ICdodGxjJyAmJiBvdXRwdXRPYmplY3QuY2hhbm5lbERlc3RJZCAhPT0gYnVpbGRlcklkKSB7XG4gICAgICAvLyBidWlsZCBhIHJldm9jYWJsZSBIVExDIHNjdGlwdFxuICAgICAgcmV0dXJuIHRoaXMucmV2SHRsY1JlZGVlbVNjcmlwdChkZXN0UHViS2V5LCBzb3VyY2VQdWJLZXksIG91dHB1dE9iamVjdClcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIGtpbmQgaW4gQ29tbWl0bWVudC5hc3luY0J1aWxkJylcbiAgICB9XG4gIH1cblxuICBwdWJLZXlSZWRlZW1TY3JpcHQgKGRlc3RQdWJLZXkpIHtcbiAgICAvLyBvdXRwdXQgdG8gY2hhbm5lbCBkZXN0XG4gICAgcmV0dXJuIG5ldyBTY3JpcHQoKVxuICAgICAgLndyaXRlQnVmZmVyKGRlc3RQdWJLZXkudG9CdWZmZXIoKSlcbiAgICAgIC53cml0ZU9wQ29kZShPcENvZGUuT1BfQ0hFQ0tTSUcpXG4gIH1cblxuICAvLyBhbGwgY2hlY2tzIGJ1dCB0aGUgbGFzdCBzaG91bGQgYmUgLi4uVkVSSUZZXG4gIHJldlB1YktleVJlZGVlbVNjcmlwdCAoZGVzdFB1YktleSwgc291cmNlUHViS2V5LCBvdXRwdXRPYmplY3QpIHtcbiAgICByZXR1cm4gbmV3IFNjcmlwdCgpXG4gICAgICAud3JpdGVPcENvZGUoT3BDb2RlLk9QX0lGKVxuICAgICAgICAvLyBvdXRwdXQgdG8gY2hhbm5lbCBkZXN0XG4gICAgICAgIC8vIGVuY3VtYmVyZWQgYnkgYSBDU1ZfREVMQVkgQ1NWIHRpbWUgbG9ja1xuICAgICAgICAvLyB0aW1lIGxvY2sgaXMgbmVlZGVkIHRvIGFsbG93IGNoYW5uZWwgc291cmNlIHRvIHNwZW5kIHZpYSBicmFuY2ggMlxuICAgICAgICAvLyBzaG91bGQgdGhlIHR4IGJlIHJldm9rZWRcbiAgICAgICAgLndyaXRlQnVmZmVyKGRlc3RQdWJLZXkudG9CdWZmZXIoKSlcbiAgICAgICAgLndyaXRlT3BDb2RlKE9wQ29kZS5PUF9DSEVDS1NJRylcbiAgICAgICAgLndyaXRlQm4ob3V0cHV0T2JqZWN0LmNzdkRlbGF5IHx8IENvbnN0cy5DU1ZfREVMQVkpXG4gICAgICAgIC53cml0ZU9wQ29kZShPcENvZGUuT1BfQ0hFQ0tTRVFVRU5DRVZFUklGWSlcbiAgICAgICAgLndyaXRlT3BDb2RlKE9wQ29kZS5PUF9EUk9QKVxuICAgICAgLndyaXRlT3BDb2RlKE9wQ29kZS5PUF9FTFNFKVxuICAgICAgICAvLyBvdXRwdXQgdG8gY2hhbm5lbCBzb3VyY2VcbiAgICAgICAgLy8gc291cmNlUHViS2V5ICYgb3duZXIncyByZXZvY2F0aW9uIHNlY3JldCBuZWVkZWQgdG8gc3BlbmRcbiAgICAgICAgLy8gdGhpcyBicmFuY2ggaXMgdXNlZCBpZiBhIHJldm9rZWQgY29tbWl0bWVudCB0eCBoYXMgYmVlbiBicm9hZGNhc3RcbiAgICAgICAgLndyaXRlQnVmZmVyKHNvdXJjZVB1YktleS50b0J1ZmZlcigpKVxuICAgICAgICAud3JpdGVPcENvZGUoT3BDb2RlLk9QX0NIRUNLU0lHVkVSSUZZKVxuICAgICAgICAud3JpdGVPcENvZGUoT3BDb2RlLk9QX0hBU0gxNjApXG4gICAgICAgIC53cml0ZUJ1ZmZlcihvdXRwdXRPYmplY3QucmV2U2VjcmV0Lmhhc2gpXG4gICAgICAgIC53cml0ZU9wQ29kZShPcENvZGUuT1BfRVFVQUwpXG4gICAgICAud3JpdGVPcENvZGUoT3BDb2RlLk9QX0VORElGKVxuICB9XG5cbiAgaHRsY1JlZGVlbVNjcmlwdCAoZGVzdFB1YktleSwgc291cmNlUHViS2V5LCBvdXRwdXRPYmplY3QpIHtcbiAgICBsZXQgc2NyaXB0ID0gbmV3IFNjcmlwdCgpXG4gICAgICAud3JpdGVPcENvZGUoT3BDb2RlLk9QX0lGKVxuICAgICAgICAvLyBvdXRwdXQgdG8gY2hhbm5lbCBkZXN0XG4gICAgICAgIC8vIGNoYW5uZWwgZGVzdCdzIHNpZyAmIGFuZCBuZXR3b3JrIGRlc3QncyBIVExDIHNlY3JldCBuZWVkZWQgdG8gc3BlbmRcbiAgICAgICAgLy8gdGhpcyBicmFuY2ggY2FuIGJlIHNwZW50IGlmIGNoYW5lbCBkZXN0IGhhcyB0aGUgaHRsYyBzZWNyZXRcbiAgICAgICAgLndyaXRlQnVmZmVyKGRlc3RQdWJLZXkudG9CdWZmZXIoKSkgLy8gcHVzaCB0aGUgYWdlbnQncyBwdWJLZXlcbiAgICAgICAgLndyaXRlT3BDb2RlKE9wQ29kZS5PUF9DSEVDS1NJR1ZFUklGWSkgLy8gY2hlY2sgc2lnIGFnYWluc3QgcmVkZWVtIHNjcmlwdFxuICAgICAgICAud3JpdGVPcENvZGUoT3BDb2RlLk9QX0hBU0gxNjApIC8vIGhhc2ggaHRsYyBzZWNyZXQgZnJvbSByZWRlZW0gc2NyaXB0XG4gICAgICAgIC53cml0ZUJ1ZmZlcihvdXRwdXRPYmplY3QuaHRsY1NlY3JldC5oYXNoKSAvLyBwdXNoIGh0bGMgc2VjcmV0IGhhc2ggb2YgdGhlIGh0bGMgc2VjcmV0XG4gICAgICAgIC53cml0ZU9wQ29kZShPcENvZGUuT1BfRVFVQUwpIC8vIGNoZWNrIGVxdWFsaXR5XG4gICAgICAud3JpdGVPcENvZGUoT3BDb2RlLk9QX0VMU0UpXG4gICAgICAgIC8vIG91dHB1dCB0byBjaGFubmVsIHNvdXJjZVxuICAgICAgICAvLyBjaGFubmVsIHNvdXJjZSdzIHNpZyBuZWVkZWQgdG8gc3BlbmQsIHN1YmplY3QgdG8gU1ZDIGxvY2tcbiAgICAgICAgLy8gdGhpcyBicmFuY2ggY2FuIGJlIHNwZW50IGlmIGNoYW5uZWwgZGVzdCBkb2VzIG5vdCByZXZlaWwgdGhlIGh0bGMgc2VjcmV0IGluIHRpbWVcbiAgICAgICAgLndyaXRlQnVmZmVyKHNvdXJjZVB1YktleS50b0J1ZmZlcigpKVxuICAgICAgICAud3JpdGVPcENvZGUoT3BDb2RlLk9QX0NIRUNLU0lHKVxuICAgICAgICAud3JpdGVCbihvdXRwdXRPYmplY3QuY3N2RGVsYXkgfHwgQ29uc3RzLkNTVl9ERUxBWSlcbiAgICAgICAgLndyaXRlT3BDb2RlKE9wQ29kZS5PUF9DSEVDS1NFUVVFTkNFVkVSSUZZKVxuICAgICAgICAud3JpdGVPcENvZGUoT3BDb2RlLk9QX0RST1ApXG4gICAgICAud3JpdGVPcENvZGUoT3BDb2RlLk9QX0VORElGKVxuICAgIHJldHVybiBzY3JpcHRcbiAgfVxuXG4gIHJldkh0bGNSZWRlZW1TY3JpcHQgKGRlc3RQdWJLZXksIHNvdXJjZVB1YktleSwgb3V0cHV0T2JqZWN0KSB7XG4gICAgbGV0IGxvbmdEZWxheSA9IG91dHB1dE9iamVjdC5jc3ZEZWxheSB8fCBDb25zdHMuQ1NWX0RFTEFZXG4gICAgbGV0IHNob3J0RGVsYXkgPSBsb25nRGVsYXkuZGl2KEJuKDIpKVxuICAgIHJldHVybiBuZXcgU2NyaXB0KClcbiAgICAgIC53cml0ZU9wQ29kZShPcENvZGUuT1BfSUYpXG4gICAgICAgIC8vIG91dHB1dCB0byBjaGFubmVsIGRlc3RcbiAgICAgICAgLy8gY2hhbm5lbCBkZXN0J3Mgc2lnICYgYW5kIG5ldHdvcmsgZGVzdCdzIEhUTEMgc2VjcmV0IG5lZWRlZCB0byBzcGVuZFxuICAgICAgICAvLyB0aGlzIGJyYW5jaCBjYW4gYmUgc3BlbnQgaWYgY2hhbmVsIGRlc3QgaGFzIHRoZSBodGxjIHNlY3JldFxuICAgICAgICAvLyBjb3JyZXNwb25kcyB0byB0aGUgZmlyc3QgYnJhbmNoIG9mIHRoZSBodGxjIHNjcmlwdFxuICAgICAgICAvLyBtdXN0IGJlIGVuY3VtYmVyZWQgYnkgYSB0aW1lIGxvY2sgdG8gYWxsb3cgY2hhbm5lbCBzb3VyY2UgdG8gc3BlbmQgaWYgdHggd2FzIHJldm9rZWRcbiAgICAgICAgLndyaXRlQnVmZmVyKGRlc3RQdWJLZXkudG9CdWZmZXIoKSkgLy8gY2hlY2sgcHVia2V5XG4gICAgICAgIC53cml0ZU9wQ29kZShPcENvZGUuT1BfQ0hFQ0tTSUdWRVJJRlkpXG4gICAgICAgIC53cml0ZU9wQ29kZShPcENvZGUuT1BfSEFTSDE2MCkgLy8gY2hlY2sgaHRsYyBzZWNyZXRcbiAgICAgICAgLndyaXRlQnVmZmVyKG91dHB1dE9iamVjdC5odGxjU2VjcmV0Lmhhc2gpXG4gICAgICAgIC53cml0ZU9wQ29kZShPcENvZGUuT1BfRVFVQUxWRVJJRlkpXG4gICAgICAgIC53cml0ZUJuKHNob3J0RGVsYXkpIC8vIGNoZWNrIHRpbWUgbG9ja1xuICAgICAgICAud3JpdGVPcENvZGUoT3BDb2RlLk9QX0NIRUNLU0VRVUVOQ0VWRVJJRlkpXG4gICAgICAud3JpdGVPcENvZGUoT3BDb2RlLk9QX0VMU0UpXG4gICAgICAgLndyaXRlT3BDb2RlKE9wQ29kZS5PUF9JRilcbiAgICAgICAgIC8vIG91dHB1dCB0byBjaGFubmVsIHNvdXJjZVxuICAgICAgICAgLy8gY2hhbm5lbCBzb3VyY2UncyBzaWcgbmVlZGVkIHRvIHNwZW5kLCBzdWJqZWN0IHRvIFNWQyBsb2NrXG4gICAgICAgICAvLyB0aGlzIGJyYW5jaCBjYW4gYmUgc3BlbnQgaWYgY2hhbm5lbCBkZXN0IGRvZXMgbm90IHJldmVpbCB0aGUgaHRsYyBzZWNyZXQgaW4gdGltZVxuICAgICAgICAgLy8gY29ycmVzcG9uZHMgdG8gc2Vjb25kIGJyYW5jaCBvZiBodGxjIHNjcmlwdFxuICAgICAgICAud3JpdGVCdWZmZXIoc291cmNlUHViS2V5LnRvQnVmZmVyKCkpXG4gICAgICAgIC53cml0ZU9wQ29kZShPcENvZGUuT1BfQ0hFQ0tTSUcpXG4gICAgICAgIC53cml0ZUJuKGxvbmdEZWxheSlcbiAgICAgICAgLndyaXRlT3BDb2RlKE9wQ29kZS5PUF9DSEVDS1NFUVVFTkNFVkVSSUZZKVxuICAgICAgICAud3JpdGVPcENvZGUoT3BDb2RlLk9QX0RST1ApXG4gICAgICAud3JpdGVPcENvZGUoT3BDb2RlLk9QX0VMU0UpXG4gICAgICAgIC8vIG91dHB1dCB0byBjaGFubmVsIHNvdXJjZVxuICAgICAgICAvLyBzb3VyY2VQdWJLZXkgJiBvd25lcidzIHJldm9jYXRpb24gc2VjcmV0IG5lZWRlZCB0byBzcGVuZFxuICAgICAgICAvLyB0aGlzIGJyYW5jaCBpcyB1c2VkIGlmIGEgcmV2b2tlZCBjb21taXRtZW50IHR4IGhhcyBiZWVuIGJyb2FkY2FzdFxuICAgICAgICAvLyB0aGlzIGNvcnJlc3BvbmRzIHRvIHNlY29uZCBicmFuY2ggb2YgcmV2IHB1YktleSBzY3JpcHRcbiAgICAgICAgLndyaXRlQnVmZmVyKHNvdXJjZVB1YktleS50b0J1ZmZlcigpKVxuICAgICAgICAud3JpdGVPcENvZGUoT3BDb2RlLk9QX0NIRUNLU0lHVkVSSUZZKVxuICAgICAgICAud3JpdGVPcENvZGUoT3BDb2RlLk9QX0hBU0gxNjApXG4gICAgICAgIC53cml0ZUJ1ZmZlcihvdXRwdXRPYmplY3QucmV2U2VjcmV0Lmhhc2gpXG4gICAgICAgIC53cml0ZU9wQ29kZShPcENvZGUuT1BfRVFVQUwpXG4gICAgICAud3JpdGVPcENvZGUoT3BDb2RlLk9QX0VORElGKVxuICAgIC53cml0ZU9wQ29kZShPcENvZGUuT1BfRU5ESUYpXG4gIH1cblxuICBmcm9tSlNPTiAoanNvbikge1xuICAgIGlmIChqc29uLm91dHB1dHMpIHtcbiAgICAgIHRoaXMub3V0cHV0cyA9IFtdXG4gICAgICBmb3IgKGxldCBpIGluIGpzb24ub3V0cHV0cykge1xuICAgICAgICB0aGlzLm91dHB1dHMucHVzaChuZXcgT3V0cHV0KCkuZnJvbUpTT04oanNvbi5vdXRwdXRzW2ldKSlcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy50eGIgPSBqc29uLnR4YiA/IG5ldyBUeEJ1aWxkZXIoKS5mcm9tSlNPTihqc29uLnR4YikgOiB1bmRlZmluZWRcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgdG9QdWJsaWMgKCkge1xuICAgIGxldCBjb21taXRtZW50ID0gbmV3IENvbW1pdG1lbnQoKS5mcm9tT2JqZWN0KClcbiAgICBpZiAodGhpcy5vdXRwdXRzKSB7XG4gICAgICBjb21taXRtZW50Lm91dHB1dHMgPSBbXVxuICAgICAgZm9yIChsZXQgaSBpbiB0aGlzLm91dHB1dHMpIHtcbiAgICAgICAgY29tbWl0bWVudC5vdXRwdXRzLnB1c2godGhpcy5vdXRwdXRzW2ldLnRvUHVibGljKCkpXG4gICAgICB9XG4gICAgfVxuICAgIGNvbW1pdG1lbnQudHhiID0gdGhpcy50eGJcbiAgICByZXR1cm4gY29tbWl0bWVudFxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQ29tbWl0bWVudFxuIiwiJ3VzZSBzdHJpY3QnXG5sZXQgYXNpbmsgPSByZXF1aXJlKCdhc2luaycpXG5sZXQgVHhCdWlsZGVyID0gcmVxdWlyZSgneW91cnMtYml0Y29pbi9saWIvdHgtYnVpbGRlcicpXG5sZXQgVHggPSByZXF1aXJlKCcuL3R4JylcblxuY2xhc3MgRnVuZGluZyBleHRlbmRzIFR4IHtcbiAgY29uc3RydWN0b3IgKCkge1xuICAgIHN1cGVyKClcbiAgICB0aGlzLmZyb21PYmplY3Qoe30pXG4gIH1cblxuICBhc3luY0luaXRpYWxpemUgKGFtb3VudCwgc291cmNlQWRkcmVzcywgbXVsdGlzaWdBZGRyZXNzLCBpbnB1dFR4SGFzaGJ1ZiwgaW5wdXRUeG91dG51bSwgaW5wdXRUeG91dCwgcHViS2V5KSB7XG4gICAgcmV0dXJuIGFzaW5rKGZ1bmN0aW9uICogKCkge1xuICAgICAgaWYgKCFhbW91bnQgfHwgIXNvdXJjZUFkZHJlc3MgfHwgIW11bHRpc2lnQWRkcmVzcyB8fCAhaW5wdXRUeEhhc2hidWYgfHxcbiAgICAgICAgICB0eXBlb2YgaW5wdXRUeG91dG51bSAhPT0gJ251bWJlcicgfHwgIWlucHV0VHhvdXQgfHwgIXB1YktleSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0luc3VmZmljaWVudCBhcmd1bWVudHMgZm9yIEZ1bmRpbmcuYXN5bmNJbml0aWFsaXplJylcbiAgICAgIH1cblxuICAgICAgdGhpcy5hbW91bnQgPSBhbW91bnRcbiAgICAgIHRoaXMudHhiID0gbmV3IFR4QnVpbGRlcigpXG4gICAgICB0aGlzLnR4Yi5pbnB1dEZyb21QdWJLZXlIYXNoKGlucHV0VHhIYXNoYnVmLCBpbnB1dFR4b3V0bnVtLCBpbnB1dFR4b3V0LCBwdWJLZXkpXG4gICAgICB0aGlzLnR4Yi5zZXRDaGFuZ2VBZGRyZXNzKHNvdXJjZUFkZHJlc3MuYWRkcmVzcylcbiAgICAgIHRoaXMudHhiLm91dHB1dFRvQWRkcmVzcyhhbW91bnQsIG11bHRpc2lnQWRkcmVzcy5hZGRyZXNzKVxuICAgICAgdGhpcy50eGIuYnVpbGQoKVxuICAgICAgdGhpcy50eGIuc2lnbigwLCBzb3VyY2VBZGRyZXNzLmtleVBhaXIsIGlucHV0VHhvdXQpXG4gICAgfSwgdGhpcylcbiAgfVxuXG4gIGZyb21KU09OIChqc29uKSB7XG4gICAgdGhpcy5mcm9tT2JqZWN0KHtcbiAgICAgIGFtb3VudDoganNvbi5hbW91bnQsXG4gICAgICB0eGI6IG5ldyBUeEJ1aWxkZXIoKS5mcm9tSlNPTihqc29uLnR4YilcbiAgICB9KVxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICBhc3luY1RvUHVibGljICgpIHtcbiAgICByZXR1cm4gYXNpbmsoZnVuY3Rpb24gKiAoKSB7XG4gICAgICBsZXQgZnVuZGluZyA9IG5ldyBGdW5kaW5nKClcbiAgICAgIGxldCBoYXNoID0geWllbGQgdGhpcy50eGIudHguYXN5bmNIYXNoKClcbiAgICAgIGZ1bmRpbmcuYW1vdW50ID0gdGhpcy5hbW91bnRcbiAgICAgIGZ1bmRpbmcudHhiID0gbmV3IFR4QnVpbGRlcigpXG4gICAgICBmdW5kaW5nLnR4Yi50eC50eE91dHMgPSB0aGlzLnR4Yi50eC50eE91dHNcbiAgICAgIGZ1bmRpbmcudHhiLnR4Lmhhc2ggPSAoKSA9PiBoYXNoXG4gICAgICByZXR1cm4gZnVuZGluZ1xuICAgIH0sIHRoaXMpXG4gIH1cblxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEZ1bmRpbmdcbiIsIid1c2Ugc3RyaWN0J1xubGV0IGFzaW5rID0gcmVxdWlyZSgnYXNpbmsnKVxubGV0IEhhc2ggPSByZXF1aXJlKCd5b3Vycy1iaXRjb2luL2xpYi9oYXNoJylcbmxldCBTdHJ1Y3QgPSByZXF1aXJlKCd5b3Vycy1iaXRjb2luL2xpYi9zdHJ1Y3QnKVxubGV0IFNjcmlwdCA9IHJlcXVpcmUoJ3lvdXJzLWJpdGNvaW4vbGliL3NjcmlwdCcpXG5sZXQgT3BDb2RlID0gcmVxdWlyZSgneW91cnMtYml0Y29pbi9saWIvb3AtY29kZScpXG5cbmNsYXNzIFR4IGV4dGVuZHMgU3RydWN0IHtcbiAgY29uc3RydWN0b3IgKCkge1xuICAgIHN1cGVyKClcbiAgICB0aGlzLmZyb21PYmplY3Qoe30pXG4gIH1cblxuICB0b1Ayc2hJbnB1dCAoc2NyaXB0LCByZWRlZW1TY3JpcHQpIHtcbiAgICBpZiAoIXNjcmlwdCB8fCAhcmVkZWVtU2NyaXB0KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0luc3VmZmljaWVudCBwYXJhbWV0ZXJzIGZvciB0b1Ayc2hJbnB1dCcpXG4gICAgfVxuICAgIGxldCBuZXdTY3JpcHQgPSBTY3JpcHQuZnJvbUJ1ZmZlcihzY3JpcHQudG9CdWZmZXIoKSkgLy8gY29weVxuICAgIG5ld1NjcmlwdC53cml0ZUJ1ZmZlcihyZWRlZW1TY3JpcHQudG9CdWZmZXIoKSlcbiAgICByZXR1cm4gbmV3U2NyaXB0XG4gIH1cblxuICBhc3luY1RvUDJzaE91dHB1dCAoc2NyaXB0KSB7XG4gICAgcmV0dXJuIGFzaW5rKGZ1bmN0aW9uICogKCkge1xuICAgICAgaWYgKCFzY3JpcHQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnN1ZmZpY2llbnQgcGFyYW1ldGVycyBmb3IgYXN5bmNUb1Ayc2hPdXRwdXQnKVxuICAgICAgfVxuICAgICAgbGV0IHNjcmlwdEhhc2ggPSB5aWVsZCBIYXNoLmFzeW5jU2hhMjU2UmlwZW1kMTYwKHNjcmlwdC50b0J1ZmZlcigpKVxuXG4gICAgICByZXR1cm4gbmV3IFNjcmlwdCgpXG4gICAgICAgIC53cml0ZU9wQ29kZShPcENvZGUuT1BfSEFTSDE2MClcbiAgICAgICAgLndyaXRlQnVmZmVyKHNjcmlwdEhhc2gpXG4gICAgICAgIC53cml0ZU9wQ29kZShPcENvZGUuT1BfRVFVQUwpXG4gICAgfSwgdGhpcylcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFR4XG4iLCIvLyBqdXN0IGEgZHVtbXkgYXQgdGhpcyBwb2ludFxuJ3VzZSBzdHJpY3QnXG5sZXQgU3RydWN0ID0gcmVxdWlyZSgneW91cnMtYml0Y29pbi9saWIvc3RydWN0JylcbmxldCBUeG91dCA9IHJlcXVpcmUoJ3lvdXJzLWJpdGNvaW4vbGliL3R4LW91dCcpXG5sZXQgQWRkcmVzcyA9IHJlcXVpcmUoJ3lvdXJzLWJpdGNvaW4vbGliL2FkZHJlc3MnKVxuXG5jbGFzcyBXYWxsZXQgZXh0ZW5kcyBTdHJ1Y3Qge1xuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgc3VwZXIoKVxuICAgIHRoaXMuZnJvbU9iamVjdCh7fSlcbiAgfVxuXG4gIC8qXG4gICAqIGp1c3QgYSBtb2NrdXAgYXQgdGhpcyBwb2ludFxuICAgKi9cbiAgZ2V0VW5zcGVudE91dHB1dCAoYW1vdW50LCBwdWJrZXkpIHtcbiAgICAvLyBmcm9tIGxpbmUgNDQ0IHNjcml0cC1leGFtcGxlc1xuICAgIGxldCBpbnB1dFR4QWRkcmVzcyA9IEFkZHJlc3MuZnJvbVB1YktleShwdWJrZXkpXG4gICAgbGV0IHNjcmlwdFB1YmtleSA9IGlucHV0VHhBZGRyZXNzLnRvU2NyaXB0KClcbiAgICBsZXQgaW5wdXRUeEhhc2hidWYgPSBuZXcgQnVmZmVyKDMyKVxuICAgIGlucHV0VHhIYXNoYnVmLmZpbGwoMCkgLy8gYSBmYWtlLCBub24tZXhpc3RlbnQgaW5wdXQgdHJhbnNhY3Rpb25cbiAgICBsZXQgaW5wdXRUeG91dG51bSA9IDBcbiAgICBsZXQgaW5wdXRUeG91dCA9IG5ldyBUeG91dChhbW91bnQpLnNldFNjcmlwdChzY3JpcHRQdWJrZXkpXG5cbiAgICByZXR1cm4ge1xuICAgICAgaW5wdXRUeG91dDogbmV3IFR4b3V0KGFtb3VudCkuc2V0U2NyaXB0KGlucHV0VHhBZGRyZXNzLnRvU2NyaXB0KCkpLFxuICAgICAgdHhoYXNoYnVmOiBpbnB1dFR4SGFzaGJ1ZixcbiAgICAgIHR4b3V0bnVtOiBpbnB1dFR4b3V0bnVtLFxuICAgICAgdHhvdXQ6IGlucHV0VHhvdXQsXG4gICAgICBwdWJLZXk6IHB1YmtleVxuICAgIH1cbiAgfVxuXG4gIGZyb21KU09OIChqc29uKSB7XG4gICAgdGhpcy5mcm9tT2JqZWN0KHt9KVxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICB0b1B1YmxpYyAoKSB7XG4gICAgcmV0dXJuIHRoaXNcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFdhbGxldFxuIiwiLyoqXG4gKiBhc2lua1xuICogPT09PT1cbiAqXG4gKiBhc2luayBpcyB0aGUgc2FtZSB0aGluZyBhcywgb3IgYSByZW5hbWUgb2YsIHNwYXduLiBzcGF3biBpbiB0dXJuIGlzIGEgdG9vbFxuICogZm9yIHJlcGVhdGVkbHkgY2FsbGluZyB0aGUgLnRoZW5zIG9mIHByb21pc2VzIHlpZWxkZWQgYnkgYSBnZW5lcmF0b3IuXG4gKiBCYXNpY2FsbHksIHRoaXMgbWFrZXMgaXQgcG9zc2libGUgdG8gd3JpdGUgYXN5bmNocm9ub3VzLCBwcm9taXNpZmllZCBjb2RlXG4gKiB3aXRoIG5vcm1hbCB0cnkvY2F0Y2hlcyB0aGF0IGxvb2sganVzdCBsaWtlIHN5bmNocm9ub3VzIGNvZGUuIEl0IGNyZWF0ZXNcbiAqIHNob3J0ZXIgYW5kIGVhc2llciB0byB1bmRlcnN0YW5kIGNvZGUuIEh5cG90aGV0aWNhbGx5LCB0aGVyZSB3aWxsIGJlIGFcbiAqIGZlYXR1cmUgaW4gdGhlIG5leHQgdmVyc2lvbiBvZiBqYXZhc2NyaXB0LCBFUzcsIGNhbGxlZCBcImFzeW5jIGZ1bmN0aW9uc1wiLFxuICogd2hpY2ggZG8gZXhhY3RseSB3aGF0IGFzaW5rIGRvZXMuIFdoZW4vaWYgdGhhdCBoYXBwZW5zIGFuZCB3ZSBjYW4gYWNjZXNzIGl0XG4gKiBpbiBub2RlLCB3ZSBjYW4gc2ltcGx5IHJlbW92ZSBhbGwgY2FsbHMgdG8gYXNpbmsgYW5kIG91ciBjb2RlIHNob3VsZCBiZWhhdmVcbiAqIGluIHRoZSBzYW1lIHdheS5cbiAqXG4gKiBTZWU6XG4gKiBodHRwOi8vdGMzOS5naXRodWIuaW8vZWNtYXNjcmlwdC1hc3luY2F3YWl0L1xuICogaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvZWNtYXNjcmlwdC1hc3luY2F3YWl0XG4gKiBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9qYWtlYXJjaGliYWxkLzMxYjg5Y2JhNjI3OTI0OTcyYWQ2XG4gKiBodHRwOi8vd3d3Lmh0bWw1cm9ja3MuY29tL2VuL3R1dG9yaWFscy9lczYvcHJvbWlzZXMvXG4gKiBodHRwczovL2Jsb2dzLndpbmRvd3MuY29tL21zZWRnZWRldi8yMDE1LzA5LzMwL2FzeW5jaHJvbm91cy1jb2RlLWdldHMtZWFzaWVyLXdpdGgtZXMyMDE2LWFzeW5jLWZ1bmN0aW9uLXN1cHBvcnQtaW4tY2hha3JhLWFuZC1taWNyb3NvZnQtZWRnZS9cbiAqL1xuJ3VzZSBzdHJpY3QnXG5mdW5jdGlvbiBzcGF3biAoZ2VuRiwgc2VsZikge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgIHZhciBnZW4gPSBnZW5GLmNhbGwoc2VsZilcbiAgICBmdW5jdGlvbiBzdGVwIChuZXh0Rikge1xuICAgICAgdmFyIG5leHRcbiAgICAgIHRyeSB7XG4gICAgICAgIG5leHQgPSBuZXh0RigpXG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIGZpbmlzaGVkIHdpdGggZmFpbHVyZSwgcmVqZWN0IHRoZSBwcm9taXNlXG4gICAgICAgIHJlamVjdChlKVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIGlmIChuZXh0LmRvbmUpIHtcbiAgICAgICAgLy8gZmluaXNoZWQgd2l0aCBzdWNjZXNzLCByZXNvbHZlIHRoZSBwcm9taXNlXG4gICAgICAgIHJlc29sdmUobmV4dC52YWx1ZSlcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICAvLyBub3QgZmluaXNoZWQsIGNoYWluIG9mZiB0aGUgeWllbGRlZCBwcm9taXNlIGFuZCBgc3RlcGAgYWdhaW5cbiAgICAgIFByb21pc2UucmVzb2x2ZShuZXh0LnZhbHVlKS50aGVuKGZ1bmN0aW9uICh2KSB7XG4gICAgICAgIHN0ZXAoZnVuY3Rpb24gKCkgeyByZXR1cm4gZ2VuLm5leHQodikgfSlcbiAgICAgIH0sIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHN0ZXAoZnVuY3Rpb24gKCkgeyByZXR1cm4gZ2VuLnRocm93KGUpIH0pXG4gICAgICB9KVxuICAgIH1cbiAgICBzdGVwKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGdlbi5uZXh0KHVuZGVmaW5lZCkgfSlcbiAgfSlcbn1cbm1vZHVsZS5leHBvcnRzID0gc3Bhd25cbiIsIlwidXNlIHN0cmljdFwiO1xuXG5yZXF1aXJlKFwiY29yZS1qcy9zaGltXCIpO1xuXG5yZXF1aXJlKFwicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lXCIpO1xuXG5yZXF1aXJlKFwiY29yZS1qcy9mbi9yZWdleHAvZXNjYXBlXCIpO1xuXG5pZiAoZ2xvYmFsLl9iYWJlbFBvbHlmaWxsKSB7XG4gIHRocm93IG5ldyBFcnJvcihcIm9ubHkgb25lIGluc3RhbmNlIG9mIGJhYmVsLXBvbHlmaWxsIGlzIGFsbG93ZWRcIik7XG59XG5nbG9iYWwuX2JhYmVsUG9seWZpbGwgPSB0cnVlO1xuXG52YXIgREVGSU5FX1BST1BFUlRZID0gXCJkZWZpbmVQcm9wZXJ0eVwiO1xuZnVuY3Rpb24gZGVmaW5lKE8sIGtleSwgdmFsdWUpIHtcbiAgT1trZXldIHx8IE9iamVjdFtERUZJTkVfUFJPUEVSVFldKE8sIGtleSwge1xuICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICB2YWx1ZTogdmFsdWVcbiAgfSk7XG59XG5cbmRlZmluZShTdHJpbmcucHJvdG90eXBlLCBcInBhZExlZnRcIiwgXCJcIi5wYWRTdGFydCk7XG5kZWZpbmUoU3RyaW5nLnByb3RvdHlwZSwgXCJwYWRSaWdodFwiLCBcIlwiLnBhZEVuZCk7XG5cblwicG9wLHJldmVyc2Usc2hpZnQsa2V5cyx2YWx1ZXMsZW50cmllcyxpbmRleE9mLGV2ZXJ5LHNvbWUsZm9yRWFjaCxtYXAsZmlsdGVyLGZpbmQsZmluZEluZGV4LGluY2x1ZGVzLGpvaW4sc2xpY2UsY29uY2F0LHB1c2gsc3BsaWNlLHVuc2hpZnQsc29ydCxsYXN0SW5kZXhPZixyZWR1Y2UscmVkdWNlUmlnaHQsY29weVdpdGhpbixmaWxsXCIuc3BsaXQoXCIsXCIpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBbXVtrZXldICYmIGRlZmluZShBcnJheSwga2V5LCBGdW5jdGlvbi5jYWxsLmJpbmQoW11ba2V5XSkpO1xufSk7IiwiJ3VzZSBzdHJpY3QnXG5cbmV4cG9ydHMuYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGhcbmV4cG9ydHMudG9CeXRlQXJyYXkgPSB0b0J5dGVBcnJheVxuZXhwb3J0cy5mcm9tQnl0ZUFycmF5ID0gZnJvbUJ5dGVBcnJheVxuXG52YXIgbG9va3VwID0gW11cbnZhciByZXZMb29rdXAgPSBbXVxudmFyIEFyciA9IHR5cGVvZiBVaW50OEFycmF5ICE9PSAndW5kZWZpbmVkJyA/IFVpbnQ4QXJyYXkgOiBBcnJheVxuXG52YXIgY29kZSA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvJ1xuZm9yICh2YXIgaSA9IDAsIGxlbiA9IGNvZGUubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgbG9va3VwW2ldID0gY29kZVtpXVxuICByZXZMb29rdXBbY29kZS5jaGFyQ29kZUF0KGkpXSA9IGlcbn1cblxucmV2TG9va3VwWyctJy5jaGFyQ29kZUF0KDApXSA9IDYyXG5yZXZMb29rdXBbJ18nLmNoYXJDb2RlQXQoMCldID0gNjNcblxuZnVuY3Rpb24gcGxhY2VIb2xkZXJzQ291bnQgKGI2NCkge1xuICB2YXIgbGVuID0gYjY0Lmxlbmd0aFxuICBpZiAobGVuICUgNCA+IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgc3RyaW5nLiBMZW5ndGggbXVzdCBiZSBhIG11bHRpcGxlIG9mIDQnKVxuICB9XG5cbiAgLy8gdGhlIG51bWJlciBvZiBlcXVhbCBzaWducyAocGxhY2UgaG9sZGVycylcbiAgLy8gaWYgdGhlcmUgYXJlIHR3byBwbGFjZWhvbGRlcnMsIHRoYW4gdGhlIHR3byBjaGFyYWN0ZXJzIGJlZm9yZSBpdFxuICAvLyByZXByZXNlbnQgb25lIGJ5dGVcbiAgLy8gaWYgdGhlcmUgaXMgb25seSBvbmUsIHRoZW4gdGhlIHRocmVlIGNoYXJhY3RlcnMgYmVmb3JlIGl0IHJlcHJlc2VudCAyIGJ5dGVzXG4gIC8vIHRoaXMgaXMganVzdCBhIGNoZWFwIGhhY2sgdG8gbm90IGRvIGluZGV4T2YgdHdpY2VcbiAgcmV0dXJuIGI2NFtsZW4gLSAyXSA9PT0gJz0nID8gMiA6IGI2NFtsZW4gLSAxXSA9PT0gJz0nID8gMSA6IDBcbn1cblxuZnVuY3Rpb24gYnl0ZUxlbmd0aCAoYjY0KSB7XG4gIC8vIGJhc2U2NCBpcyA0LzMgKyB1cCB0byB0d28gY2hhcmFjdGVycyBvZiB0aGUgb3JpZ2luYWwgZGF0YVxuICByZXR1cm4gYjY0Lmxlbmd0aCAqIDMgLyA0IC0gcGxhY2VIb2xkZXJzQ291bnQoYjY0KVxufVxuXG5mdW5jdGlvbiB0b0J5dGVBcnJheSAoYjY0KSB7XG4gIHZhciBpLCBqLCBsLCB0bXAsIHBsYWNlSG9sZGVycywgYXJyXG4gIHZhciBsZW4gPSBiNjQubGVuZ3RoXG4gIHBsYWNlSG9sZGVycyA9IHBsYWNlSG9sZGVyc0NvdW50KGI2NClcblxuICBhcnIgPSBuZXcgQXJyKGxlbiAqIDMgLyA0IC0gcGxhY2VIb2xkZXJzKVxuXG4gIC8vIGlmIHRoZXJlIGFyZSBwbGFjZWhvbGRlcnMsIG9ubHkgZ2V0IHVwIHRvIHRoZSBsYXN0IGNvbXBsZXRlIDQgY2hhcnNcbiAgbCA9IHBsYWNlSG9sZGVycyA+IDAgPyBsZW4gLSA0IDogbGVuXG5cbiAgdmFyIEwgPSAwXG5cbiAgZm9yIChpID0gMCwgaiA9IDA7IGkgPCBsOyBpICs9IDQsIGogKz0gMykge1xuICAgIHRtcCA9IChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDE4KSB8IChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA8PCAxMikgfCAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAyKV0gPDwgNikgfCByZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDMpXVxuICAgIGFycltMKytdID0gKHRtcCA+PiAxNikgJiAweEZGXG4gICAgYXJyW0wrK10gPSAodG1wID4+IDgpICYgMHhGRlxuICAgIGFycltMKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgaWYgKHBsYWNlSG9sZGVycyA9PT0gMikge1xuICAgIHRtcCA9IChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDIpIHwgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldID4+IDQpXG4gICAgYXJyW0wrK10gPSB0bXAgJiAweEZGXG4gIH0gZWxzZSBpZiAocGxhY2VIb2xkZXJzID09PSAxKSB7XG4gICAgdG1wID0gKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMTApIHwgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldIDw8IDQpIHwgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMildID4+IDIpXG4gICAgYXJyW0wrK10gPSAodG1wID4+IDgpICYgMHhGRlxuICAgIGFycltMKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIGFyclxufVxuXG5mdW5jdGlvbiB0cmlwbGV0VG9CYXNlNjQgKG51bSkge1xuICByZXR1cm4gbG9va3VwW251bSA+PiAxOCAmIDB4M0ZdICsgbG9va3VwW251bSA+PiAxMiAmIDB4M0ZdICsgbG9va3VwW251bSA+PiA2ICYgMHgzRl0gKyBsb29rdXBbbnVtICYgMHgzRl1cbn1cblxuZnVuY3Rpb24gZW5jb2RlQ2h1bmsgKHVpbnQ4LCBzdGFydCwgZW5kKSB7XG4gIHZhciB0bXBcbiAgdmFyIG91dHB1dCA9IFtdXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgaSArPSAzKSB7XG4gICAgdG1wID0gKHVpbnQ4W2ldIDw8IDE2KSArICh1aW50OFtpICsgMV0gPDwgOCkgKyAodWludDhbaSArIDJdKVxuICAgIG91dHB1dC5wdXNoKHRyaXBsZXRUb0Jhc2U2NCh0bXApKVxuICB9XG4gIHJldHVybiBvdXRwdXQuam9pbignJylcbn1cblxuZnVuY3Rpb24gZnJvbUJ5dGVBcnJheSAodWludDgpIHtcbiAgdmFyIHRtcFxuICB2YXIgbGVuID0gdWludDgubGVuZ3RoXG4gIHZhciBleHRyYUJ5dGVzID0gbGVuICUgMyAvLyBpZiB3ZSBoYXZlIDEgYnl0ZSBsZWZ0LCBwYWQgMiBieXRlc1xuICB2YXIgb3V0cHV0ID0gJydcbiAgdmFyIHBhcnRzID0gW11cbiAgdmFyIG1heENodW5rTGVuZ3RoID0gMTYzODMgLy8gbXVzdCBiZSBtdWx0aXBsZSBvZiAzXG5cbiAgLy8gZ28gdGhyb3VnaCB0aGUgYXJyYXkgZXZlcnkgdGhyZWUgYnl0ZXMsIHdlJ2xsIGRlYWwgd2l0aCB0cmFpbGluZyBzdHVmZiBsYXRlclxuICBmb3IgKHZhciBpID0gMCwgbGVuMiA9IGxlbiAtIGV4dHJhQnl0ZXM7IGkgPCBsZW4yOyBpICs9IG1heENodW5rTGVuZ3RoKSB7XG4gICAgcGFydHMucHVzaChlbmNvZGVDaHVuayh1aW50OCwgaSwgKGkgKyBtYXhDaHVua0xlbmd0aCkgPiBsZW4yID8gbGVuMiA6IChpICsgbWF4Q2h1bmtMZW5ndGgpKSlcbiAgfVxuXG4gIC8vIHBhZCB0aGUgZW5kIHdpdGggemVyb3MsIGJ1dCBtYWtlIHN1cmUgdG8gbm90IGZvcmdldCB0aGUgZXh0cmEgYnl0ZXNcbiAgaWYgKGV4dHJhQnl0ZXMgPT09IDEpIHtcbiAgICB0bXAgPSB1aW50OFtsZW4gLSAxXVxuICAgIG91dHB1dCArPSBsb29rdXBbdG1wID4+IDJdXG4gICAgb3V0cHV0ICs9IGxvb2t1cFsodG1wIDw8IDQpICYgMHgzRl1cbiAgICBvdXRwdXQgKz0gJz09J1xuICB9IGVsc2UgaWYgKGV4dHJhQnl0ZXMgPT09IDIpIHtcbiAgICB0bXAgPSAodWludDhbbGVuIC0gMl0gPDwgOCkgKyAodWludDhbbGVuIC0gMV0pXG4gICAgb3V0cHV0ICs9IGxvb2t1cFt0bXAgPj4gMTBdXG4gICAgb3V0cHV0ICs9IGxvb2t1cFsodG1wID4+IDQpICYgMHgzRl1cbiAgICBvdXRwdXQgKz0gbG9va3VwWyh0bXAgPDwgMikgJiAweDNGXVxuICAgIG91dHB1dCArPSAnPSdcbiAgfVxuXG4gIHBhcnRzLnB1c2gob3V0cHV0KVxuXG4gIHJldHVybiBwYXJ0cy5qb2luKCcnKVxufVxuIiwiIiwiLyohXG4gKiBUaGUgYnVmZmVyIG1vZHVsZSBmcm9tIG5vZGUuanMsIGZvciB0aGUgYnJvd3Nlci5cbiAqXG4gKiBAYXV0aG9yICAgRmVyb3NzIEFib3VraGFkaWplaCA8ZmVyb3NzQGZlcm9zcy5vcmc+IDxodHRwOi8vZmVyb3NzLm9yZz5cbiAqIEBsaWNlbnNlICBNSVRcbiAqL1xuLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi9cblxuJ3VzZSBzdHJpY3QnXG5cbnZhciBiYXNlNjQgPSByZXF1aXJlKCdiYXNlNjQtanMnKVxudmFyIGllZWU3NTQgPSByZXF1aXJlKCdpZWVlNzU0JylcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnaXNhcnJheScpXG5cbmV4cG9ydHMuQnVmZmVyID0gQnVmZmVyXG5leHBvcnRzLlNsb3dCdWZmZXIgPSBTbG93QnVmZmVyXG5leHBvcnRzLklOU1BFQ1RfTUFYX0JZVEVTID0gNTBcblxuLyoqXG4gKiBJZiBgQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlRgOlxuICogICA9PT0gdHJ1ZSAgICBVc2UgVWludDhBcnJheSBpbXBsZW1lbnRhdGlvbiAoZmFzdGVzdClcbiAqICAgPT09IGZhbHNlICAgVXNlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiAobW9zdCBjb21wYXRpYmxlLCBldmVuIElFNilcbiAqXG4gKiBCcm93c2VycyB0aGF0IHN1cHBvcnQgdHlwZWQgYXJyYXlzIGFyZSBJRSAxMCssIEZpcmVmb3ggNCssIENocm9tZSA3KywgU2FmYXJpIDUuMSssXG4gKiBPcGVyYSAxMS42KywgaU9TIDQuMisuXG4gKlxuICogRHVlIHRvIHZhcmlvdXMgYnJvd3NlciBidWdzLCBzb21ldGltZXMgdGhlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiB3aWxsIGJlIHVzZWQgZXZlblxuICogd2hlbiB0aGUgYnJvd3NlciBzdXBwb3J0cyB0eXBlZCBhcnJheXMuXG4gKlxuICogTm90ZTpcbiAqXG4gKiAgIC0gRmlyZWZveCA0LTI5IGxhY2tzIHN1cHBvcnQgZm9yIGFkZGluZyBuZXcgcHJvcGVydGllcyB0byBgVWludDhBcnJheWAgaW5zdGFuY2VzLFxuICogICAgIFNlZTogaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9Njk1NDM4LlxuICpcbiAqICAgLSBDaHJvbWUgOS0xMCBpcyBtaXNzaW5nIHRoZSBgVHlwZWRBcnJheS5wcm90b3R5cGUuc3ViYXJyYXlgIGZ1bmN0aW9uLlxuICpcbiAqICAgLSBJRTEwIGhhcyBhIGJyb2tlbiBgVHlwZWRBcnJheS5wcm90b3R5cGUuc3ViYXJyYXlgIGZ1bmN0aW9uIHdoaWNoIHJldHVybnMgYXJyYXlzIG9mXG4gKiAgICAgaW5jb3JyZWN0IGxlbmd0aCBpbiBzb21lIHNpdHVhdGlvbnMuXG5cbiAqIFdlIGRldGVjdCB0aGVzZSBidWdneSBicm93c2VycyBhbmQgc2V0IGBCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVGAgdG8gYGZhbHNlYCBzbyB0aGV5XG4gKiBnZXQgdGhlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiwgd2hpY2ggaXMgc2xvd2VyIGJ1dCBiZWhhdmVzIGNvcnJlY3RseS5cbiAqL1xuQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgPSBnbG9iYWwuVFlQRURfQVJSQVlfU1VQUE9SVCAhPT0gdW5kZWZpbmVkXG4gID8gZ2xvYmFsLlRZUEVEX0FSUkFZX1NVUFBPUlRcbiAgOiB0eXBlZEFycmF5U3VwcG9ydCgpXG5cbi8qXG4gKiBFeHBvcnQga01heExlbmd0aCBhZnRlciB0eXBlZCBhcnJheSBzdXBwb3J0IGlzIGRldGVybWluZWQuXG4gKi9cbmV4cG9ydHMua01heExlbmd0aCA9IGtNYXhMZW5ndGgoKVxuXG5mdW5jdGlvbiB0eXBlZEFycmF5U3VwcG9ydCAoKSB7XG4gIHRyeSB7XG4gICAgdmFyIGFyciA9IG5ldyBVaW50OEFycmF5KDEpXG4gICAgYXJyLl9fcHJvdG9fXyA9IHtfX3Byb3RvX186IFVpbnQ4QXJyYXkucHJvdG90eXBlLCBmb286IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDQyIH19XG4gICAgcmV0dXJuIGFyci5mb28oKSA9PT0gNDIgJiYgLy8gdHlwZWQgYXJyYXkgaW5zdGFuY2VzIGNhbiBiZSBhdWdtZW50ZWRcbiAgICAgICAgdHlwZW9mIGFyci5zdWJhcnJheSA9PT0gJ2Z1bmN0aW9uJyAmJiAvLyBjaHJvbWUgOS0xMCBsYWNrIGBzdWJhcnJheWBcbiAgICAgICAgYXJyLnN1YmFycmF5KDEsIDEpLmJ5dGVMZW5ndGggPT09IDAgLy8gaWUxMCBoYXMgYnJva2VuIGBzdWJhcnJheWBcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbmZ1bmN0aW9uIGtNYXhMZW5ndGggKCkge1xuICByZXR1cm4gQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlRcbiAgICA/IDB4N2ZmZmZmZmZcbiAgICA6IDB4M2ZmZmZmZmZcbn1cblxuZnVuY3Rpb24gY3JlYXRlQnVmZmVyICh0aGF0LCBsZW5ndGgpIHtcbiAgaWYgKGtNYXhMZW5ndGgoKSA8IGxlbmd0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbnZhbGlkIHR5cGVkIGFycmF5IGxlbmd0aCcpXG4gIH1cbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgLy8gUmV0dXJuIGFuIGF1Z21lbnRlZCBgVWludDhBcnJheWAgaW5zdGFuY2UsIGZvciBiZXN0IHBlcmZvcm1hbmNlXG4gICAgdGhhdCA9IG5ldyBVaW50OEFycmF5KGxlbmd0aClcbiAgICB0aGF0Ll9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgfSBlbHNlIHtcbiAgICAvLyBGYWxsYmFjazogUmV0dXJuIGFuIG9iamVjdCBpbnN0YW5jZSBvZiB0aGUgQnVmZmVyIGNsYXNzXG4gICAgaWYgKHRoYXQgPT09IG51bGwpIHtcbiAgICAgIHRoYXQgPSBuZXcgQnVmZmVyKGxlbmd0aClcbiAgICB9XG4gICAgdGhhdC5sZW5ndGggPSBsZW5ndGhcbiAgfVxuXG4gIHJldHVybiB0aGF0XG59XG5cbi8qKlxuICogVGhlIEJ1ZmZlciBjb25zdHJ1Y3RvciByZXR1cm5zIGluc3RhbmNlcyBvZiBgVWludDhBcnJheWAgdGhhdCBoYXZlIHRoZWlyXG4gKiBwcm90b3R5cGUgY2hhbmdlZCB0byBgQnVmZmVyLnByb3RvdHlwZWAuIEZ1cnRoZXJtb3JlLCBgQnVmZmVyYCBpcyBhIHN1YmNsYXNzIG9mXG4gKiBgVWludDhBcnJheWAsIHNvIHRoZSByZXR1cm5lZCBpbnN0YW5jZXMgd2lsbCBoYXZlIGFsbCB0aGUgbm9kZSBgQnVmZmVyYCBtZXRob2RzXG4gKiBhbmQgdGhlIGBVaW50OEFycmF5YCBtZXRob2RzLiBTcXVhcmUgYnJhY2tldCBub3RhdGlvbiB3b3JrcyBhcyBleHBlY3RlZCAtLSBpdFxuICogcmV0dXJucyBhIHNpbmdsZSBvY3RldC5cbiAqXG4gKiBUaGUgYFVpbnQ4QXJyYXlgIHByb3RvdHlwZSByZW1haW5zIHVubW9kaWZpZWQuXG4gKi9cblxuZnVuY3Rpb24gQnVmZmVyIChhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUICYmICEodGhpcyBpbnN0YW5jZW9mIEJ1ZmZlcikpIHtcbiAgICByZXR1cm4gbmV3IEJ1ZmZlcihhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIC8vIENvbW1vbiBjYXNlLlxuICBpZiAodHlwZW9mIGFyZyA9PT0gJ251bWJlcicpIHtcbiAgICBpZiAodHlwZW9mIGVuY29kaW5nT3JPZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdJZiBlbmNvZGluZyBpcyBzcGVjaWZpZWQgdGhlbiB0aGUgZmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZydcbiAgICAgIClcbiAgICB9XG4gICAgcmV0dXJuIGFsbG9jVW5zYWZlKHRoaXMsIGFyZylcbiAgfVxuICByZXR1cm4gZnJvbSh0aGlzLCBhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuQnVmZmVyLnBvb2xTaXplID0gODE5MiAvLyBub3QgdXNlZCBieSB0aGlzIGltcGxlbWVudGF0aW9uXG5cbi8vIFRPRE86IExlZ2FjeSwgbm90IG5lZWRlZCBhbnltb3JlLiBSZW1vdmUgaW4gbmV4dCBtYWpvciB2ZXJzaW9uLlxuQnVmZmVyLl9hdWdtZW50ID0gZnVuY3Rpb24gKGFycikge1xuICBhcnIuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICByZXR1cm4gYXJyXG59XG5cbmZ1bmN0aW9uIGZyb20gKHRoYXQsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcInZhbHVlXCIgYXJndW1lbnQgbXVzdCBub3QgYmUgYSBudW1iZXInKVxuICB9XG5cbiAgaWYgKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiYgdmFsdWUgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xuICAgIHJldHVybiBmcm9tQXJyYXlCdWZmZXIodGhhdCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGZyb21TdHJpbmcodGhhdCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQpXG4gIH1cblxuICByZXR1cm4gZnJvbU9iamVjdCh0aGF0LCB2YWx1ZSlcbn1cblxuLyoqXG4gKiBGdW5jdGlvbmFsbHkgZXF1aXZhbGVudCB0byBCdWZmZXIoYXJnLCBlbmNvZGluZykgYnV0IHRocm93cyBhIFR5cGVFcnJvclxuICogaWYgdmFsdWUgaXMgYSBudW1iZXIuXG4gKiBCdWZmZXIuZnJvbShzdHJbLCBlbmNvZGluZ10pXG4gKiBCdWZmZXIuZnJvbShhcnJheSlcbiAqIEJ1ZmZlci5mcm9tKGJ1ZmZlcilcbiAqIEJ1ZmZlci5mcm9tKGFycmF5QnVmZmVyWywgYnl0ZU9mZnNldFssIGxlbmd0aF1dKVxuICoqL1xuQnVmZmVyLmZyb20gPSBmdW5jdGlvbiAodmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gZnJvbShudWxsLCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG5pZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgQnVmZmVyLnByb3RvdHlwZS5fX3Byb3RvX18gPSBVaW50OEFycmF5LnByb3RvdHlwZVxuICBCdWZmZXIuX19wcm90b19fID0gVWludDhBcnJheVxuICBpZiAodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnNwZWNpZXMgJiZcbiAgICAgIEJ1ZmZlcltTeW1ib2wuc3BlY2llc10gPT09IEJ1ZmZlcikge1xuICAgIC8vIEZpeCBzdWJhcnJheSgpIGluIEVTMjAxNi4gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlci9wdWxsLzk3XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEJ1ZmZlciwgU3ltYm9sLnNwZWNpZXMsIHtcbiAgICAgIHZhbHVlOiBudWxsLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSlcbiAgfVxufVxuXG5mdW5jdGlvbiBhc3NlcnRTaXplIChzaXplKSB7XG4gIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcInNpemVcIiBhcmd1bWVudCBtdXN0IGJlIGEgbnVtYmVyJylcbiAgfSBlbHNlIGlmIChzaXplIDwgMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcInNpemVcIiBhcmd1bWVudCBtdXN0IG5vdCBiZSBuZWdhdGl2ZScpXG4gIH1cbn1cblxuZnVuY3Rpb24gYWxsb2MgKHRoYXQsIHNpemUsIGZpbGwsIGVuY29kaW5nKSB7XG4gIGFzc2VydFNpemUoc2l6ZSlcbiAgaWYgKHNpemUgPD0gMCkge1xuICAgIHJldHVybiBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSlcbiAgfVxuICBpZiAoZmlsbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gT25seSBwYXkgYXR0ZW50aW9uIHRvIGVuY29kaW5nIGlmIGl0J3MgYSBzdHJpbmcuIFRoaXNcbiAgICAvLyBwcmV2ZW50cyBhY2NpZGVudGFsbHkgc2VuZGluZyBpbiBhIG51bWJlciB0aGF0IHdvdWxkXG4gICAgLy8gYmUgaW50ZXJwcmV0dGVkIGFzIGEgc3RhcnQgb2Zmc2V0LlxuICAgIHJldHVybiB0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnXG4gICAgICA/IGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKS5maWxsKGZpbGwsIGVuY29kaW5nKVxuICAgICAgOiBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSkuZmlsbChmaWxsKVxuICB9XG4gIHJldHVybiBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSlcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IGZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKiBhbGxvYyhzaXplWywgZmlsbFssIGVuY29kaW5nXV0pXG4gKiovXG5CdWZmZXIuYWxsb2MgPSBmdW5jdGlvbiAoc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGFsbG9jKG51bGwsIHNpemUsIGZpbGwsIGVuY29kaW5nKVxufVxuXG5mdW5jdGlvbiBhbGxvY1Vuc2FmZSAodGhhdCwgc2l6ZSkge1xuICBhc3NlcnRTaXplKHNpemUpXG4gIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSA8IDAgPyAwIDogY2hlY2tlZChzaXplKSB8IDApXG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNpemU7ICsraSkge1xuICAgICAgdGhhdFtpXSA9IDBcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRoYXRcbn1cblxuLyoqXG4gKiBFcXVpdmFsZW50IHRvIEJ1ZmZlcihudW0pLCBieSBkZWZhdWx0IGNyZWF0ZXMgYSBub24temVyby1maWxsZWQgQnVmZmVyIGluc3RhbmNlLlxuICogKi9cbkJ1ZmZlci5hbGxvY1Vuc2FmZSA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIHJldHVybiBhbGxvY1Vuc2FmZShudWxsLCBzaXplKVxufVxuLyoqXG4gKiBFcXVpdmFsZW50IHRvIFNsb3dCdWZmZXIobnVtKSwgYnkgZGVmYXVsdCBjcmVhdGVzIGEgbm9uLXplcm8tZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqL1xuQnVmZmVyLmFsbG9jVW5zYWZlU2xvdyA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIHJldHVybiBhbGxvY1Vuc2FmZShudWxsLCBzaXplKVxufVxuXG5mdW5jdGlvbiBmcm9tU3RyaW5nICh0aGF0LCBzdHJpbmcsIGVuY29kaW5nKSB7XG4gIGlmICh0eXBlb2YgZW5jb2RpbmcgIT09ICdzdHJpbmcnIHx8IGVuY29kaW5nID09PSAnJykge1xuICAgIGVuY29kaW5nID0gJ3V0ZjgnXG4gIH1cblxuICBpZiAoIUJ1ZmZlci5pc0VuY29kaW5nKGVuY29kaW5nKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiZW5jb2RpbmdcIiBtdXN0IGJlIGEgdmFsaWQgc3RyaW5nIGVuY29kaW5nJylcbiAgfVxuXG4gIHZhciBsZW5ndGggPSBieXRlTGVuZ3RoKHN0cmluZywgZW5jb2RpbmcpIHwgMFxuICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbmd0aClcblxuICB2YXIgYWN0dWFsID0gdGhhdC53cml0ZShzdHJpbmcsIGVuY29kaW5nKVxuXG4gIGlmIChhY3R1YWwgIT09IGxlbmd0aCkge1xuICAgIC8vIFdyaXRpbmcgYSBoZXggc3RyaW5nLCBmb3IgZXhhbXBsZSwgdGhhdCBjb250YWlucyBpbnZhbGlkIGNoYXJhY3RlcnMgd2lsbFxuICAgIC8vIGNhdXNlIGV2ZXJ5dGhpbmcgYWZ0ZXIgdGhlIGZpcnN0IGludmFsaWQgY2hhcmFjdGVyIHRvIGJlIGlnbm9yZWQuIChlLmcuXG4gICAgLy8gJ2FieHhjZCcgd2lsbCBiZSB0cmVhdGVkIGFzICdhYicpXG4gICAgdGhhdCA9IHRoYXQuc2xpY2UoMCwgYWN0dWFsKVxuICB9XG5cbiAgcmV0dXJuIHRoYXRcbn1cblxuZnVuY3Rpb24gZnJvbUFycmF5TGlrZSAodGhhdCwgYXJyYXkpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCA8IDAgPyAwIDogY2hlY2tlZChhcnJheS5sZW5ndGgpIHwgMFxuICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbmd0aClcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkgKz0gMSkge1xuICAgIHRoYXRbaV0gPSBhcnJheVtpXSAmIDI1NVxuICB9XG4gIHJldHVybiB0aGF0XG59XG5cbmZ1bmN0aW9uIGZyb21BcnJheUJ1ZmZlciAodGhhdCwgYXJyYXksIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICBhcnJheS5ieXRlTGVuZ3RoIC8vIHRoaXMgdGhyb3dzIGlmIGBhcnJheWAgaXMgbm90IGEgdmFsaWQgQXJyYXlCdWZmZXJcblxuICBpZiAoYnl0ZU9mZnNldCA8IDAgfHwgYXJyYXkuYnl0ZUxlbmd0aCA8IGJ5dGVPZmZzZXQpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXFwnb2Zmc2V0XFwnIGlzIG91dCBvZiBib3VuZHMnKVxuICB9XG5cbiAgaWYgKGFycmF5LmJ5dGVMZW5ndGggPCBieXRlT2Zmc2V0ICsgKGxlbmd0aCB8fCAwKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcXCdsZW5ndGhcXCcgaXMgb3V0IG9mIGJvdW5kcycpXG4gIH1cblxuICBpZiAoYnl0ZU9mZnNldCA9PT0gdW5kZWZpbmVkICYmIGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYXJyYXkgPSBuZXcgVWludDhBcnJheShhcnJheSlcbiAgfSBlbHNlIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXksIGJ5dGVPZmZzZXQpXG4gIH0gZWxzZSB7XG4gICAgYXJyYXkgPSBuZXcgVWludDhBcnJheShhcnJheSwgYnl0ZU9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgLy8gUmV0dXJuIGFuIGF1Z21lbnRlZCBgVWludDhBcnJheWAgaW5zdGFuY2UsIGZvciBiZXN0IHBlcmZvcm1hbmNlXG4gICAgdGhhdCA9IGFycmF5XG4gICAgdGhhdC5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIH0gZWxzZSB7XG4gICAgLy8gRmFsbGJhY2s6IFJldHVybiBhbiBvYmplY3QgaW5zdGFuY2Ugb2YgdGhlIEJ1ZmZlciBjbGFzc1xuICAgIHRoYXQgPSBmcm9tQXJyYXlMaWtlKHRoYXQsIGFycmF5KVxuICB9XG4gIHJldHVybiB0aGF0XG59XG5cbmZ1bmN0aW9uIGZyb21PYmplY3QgKHRoYXQsIG9iaikge1xuICBpZiAoQnVmZmVyLmlzQnVmZmVyKG9iaikpIHtcbiAgICB2YXIgbGVuID0gY2hlY2tlZChvYmoubGVuZ3RoKSB8IDBcbiAgICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbilcblxuICAgIGlmICh0aGF0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHRoYXRcbiAgICB9XG5cbiAgICBvYmouY29weSh0aGF0LCAwLCAwLCBsZW4pXG4gICAgcmV0dXJuIHRoYXRcbiAgfVxuXG4gIGlmIChvYmopIHtcbiAgICBpZiAoKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgb2JqLmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB8fCAnbGVuZ3RoJyBpbiBvYmopIHtcbiAgICAgIGlmICh0eXBlb2Ygb2JqLmxlbmd0aCAhPT0gJ251bWJlcicgfHwgaXNuYW4ob2JqLmxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcih0aGF0LCAwKVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZyb21BcnJheUxpa2UodGhhdCwgb2JqKVxuICAgIH1cblxuICAgIGlmIChvYmoudHlwZSA9PT0gJ0J1ZmZlcicgJiYgaXNBcnJheShvYmouZGF0YSkpIHtcbiAgICAgIHJldHVybiBmcm9tQXJyYXlMaWtlKHRoYXQsIG9iai5kYXRhKVxuICAgIH1cbiAgfVxuXG4gIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmcsIEJ1ZmZlciwgQXJyYXlCdWZmZXIsIEFycmF5LCBvciBhcnJheS1saWtlIG9iamVjdC4nKVxufVxuXG5mdW5jdGlvbiBjaGVja2VkIChsZW5ndGgpIHtcbiAgLy8gTm90ZTogY2Fubm90IHVzZSBgbGVuZ3RoIDwga01heExlbmd0aCgpYCBoZXJlIGJlY2F1c2UgdGhhdCBmYWlscyB3aGVuXG4gIC8vIGxlbmd0aCBpcyBOYU4gKHdoaWNoIGlzIG90aGVyd2lzZSBjb2VyY2VkIHRvIHplcm8uKVxuICBpZiAobGVuZ3RoID49IGtNYXhMZW5ndGgoKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdBdHRlbXB0IHRvIGFsbG9jYXRlIEJ1ZmZlciBsYXJnZXIgdGhhbiBtYXhpbXVtICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICdzaXplOiAweCcgKyBrTWF4TGVuZ3RoKCkudG9TdHJpbmcoMTYpICsgJyBieXRlcycpXG4gIH1cbiAgcmV0dXJuIGxlbmd0aCB8IDBcbn1cblxuZnVuY3Rpb24gU2xvd0J1ZmZlciAobGVuZ3RoKSB7XG4gIGlmICgrbGVuZ3RoICE9IGxlbmd0aCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGVxZXFlcVxuICAgIGxlbmd0aCA9IDBcbiAgfVxuICByZXR1cm4gQnVmZmVyLmFsbG9jKCtsZW5ndGgpXG59XG5cbkJ1ZmZlci5pc0J1ZmZlciA9IGZ1bmN0aW9uIGlzQnVmZmVyIChiKSB7XG4gIHJldHVybiAhIShiICE9IG51bGwgJiYgYi5faXNCdWZmZXIpXG59XG5cbkJ1ZmZlci5jb21wYXJlID0gZnVuY3Rpb24gY29tcGFyZSAoYSwgYikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihhKSB8fCAhQnVmZmVyLmlzQnVmZmVyKGIpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnRzIG11c3QgYmUgQnVmZmVycycpXG4gIH1cblxuICBpZiAoYSA9PT0gYikgcmV0dXJuIDBcblxuICB2YXIgeCA9IGEubGVuZ3RoXG4gIHZhciB5ID0gYi5sZW5ndGhcblxuICBmb3IgKHZhciBpID0gMCwgbGVuID0gTWF0aC5taW4oeCwgeSk7IGkgPCBsZW47ICsraSkge1xuICAgIGlmIChhW2ldICE9PSBiW2ldKSB7XG4gICAgICB4ID0gYVtpXVxuICAgICAgeSA9IGJbaV1cbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgaWYgKHggPCB5KSByZXR1cm4gLTFcbiAgaWYgKHkgPCB4KSByZXR1cm4gMVxuICByZXR1cm4gMFxufVxuXG5CdWZmZXIuaXNFbmNvZGluZyA9IGZ1bmN0aW9uIGlzRW5jb2RpbmcgKGVuY29kaW5nKSB7XG4gIHN3aXRjaCAoU3RyaW5nKGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgY2FzZSAnaGV4JzpcbiAgICBjYXNlICd1dGY4JzpcbiAgICBjYXNlICd1dGYtOCc6XG4gICAgY2FzZSAnYXNjaWknOlxuICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgY2FzZSAnYmluYXJ5JzpcbiAgICBjYXNlICdiYXNlNjQnOlxuICAgIGNhc2UgJ3VjczInOlxuICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICBjYXNlICd1dGYxNmxlJzpcbiAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG5CdWZmZXIuY29uY2F0ID0gZnVuY3Rpb24gY29uY2F0IChsaXN0LCBsZW5ndGgpIHtcbiAgaWYgKCFpc0FycmF5KGxpc3QpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJsaXN0XCIgYXJndW1lbnQgbXVzdCBiZSBhbiBBcnJheSBvZiBCdWZmZXJzJylcbiAgfVxuXG4gIGlmIChsaXN0Lmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBCdWZmZXIuYWxsb2MoMClcbiAgfVxuXG4gIHZhciBpXG4gIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGxlbmd0aCA9IDBcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7ICsraSkge1xuICAgICAgbGVuZ3RoICs9IGxpc3RbaV0ubGVuZ3RoXG4gICAgfVxuICB9XG5cbiAgdmFyIGJ1ZmZlciA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShsZW5ndGgpXG4gIHZhciBwb3MgPSAwXG4gIGZvciAoaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgKytpKSB7XG4gICAgdmFyIGJ1ZiA9IGxpc3RbaV1cbiAgICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihidWYpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImxpc3RcIiBhcmd1bWVudCBtdXN0IGJlIGFuIEFycmF5IG9mIEJ1ZmZlcnMnKVxuICAgIH1cbiAgICBidWYuY29weShidWZmZXIsIHBvcylcbiAgICBwb3MgKz0gYnVmLmxlbmd0aFxuICB9XG4gIHJldHVybiBidWZmZXJcbn1cblxuZnVuY3Rpb24gYnl0ZUxlbmd0aCAoc3RyaW5nLCBlbmNvZGluZykge1xuICBpZiAoQnVmZmVyLmlzQnVmZmVyKHN0cmluZykpIHtcbiAgICByZXR1cm4gc3RyaW5nLmxlbmd0aFxuICB9XG4gIGlmICh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBBcnJheUJ1ZmZlci5pc1ZpZXcgPT09ICdmdW5jdGlvbicgJiZcbiAgICAgIChBcnJheUJ1ZmZlci5pc1ZpZXcoc3RyaW5nKSB8fCBzdHJpbmcgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikpIHtcbiAgICByZXR1cm4gc3RyaW5nLmJ5dGVMZW5ndGhcbiAgfVxuICBpZiAodHlwZW9mIHN0cmluZyAhPT0gJ3N0cmluZycpIHtcbiAgICBzdHJpbmcgPSAnJyArIHN0cmluZ1xuICB9XG5cbiAgdmFyIGxlbiA9IHN0cmluZy5sZW5ndGhcbiAgaWYgKGxlbiA9PT0gMCkgcmV0dXJuIDBcblxuICAvLyBVc2UgYSBmb3IgbG9vcCB0byBhdm9pZCByZWN1cnNpb25cbiAgdmFyIGxvd2VyZWRDYXNlID0gZmFsc2VcbiAgZm9yICg7Oykge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gbGVuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgIGNhc2UgdW5kZWZpbmVkOlxuICAgICAgICByZXR1cm4gdXRmOFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGhcbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiBsZW4gKiAyXG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gbGVuID4+PiAxXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICByZXR1cm4gYmFzZTY0VG9CeXRlcyhzdHJpbmcpLmxlbmd0aFxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSByZXR1cm4gdXRmOFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGggLy8gYXNzdW1lIHV0ZjhcbiAgICAgICAgZW5jb2RpbmcgPSAoJycgKyBlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cbkJ1ZmZlci5ieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aFxuXG5mdW5jdGlvbiBzbG93VG9TdHJpbmcgKGVuY29kaW5nLCBzdGFydCwgZW5kKSB7XG4gIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlXG5cbiAgLy8gTm8gbmVlZCB0byB2ZXJpZnkgdGhhdCBcInRoaXMubGVuZ3RoIDw9IE1BWF9VSU5UMzJcIiBzaW5jZSBpdCdzIGEgcmVhZC1vbmx5XG4gIC8vIHByb3BlcnR5IG9mIGEgdHlwZWQgYXJyYXkuXG5cbiAgLy8gVGhpcyBiZWhhdmVzIG5laXRoZXIgbGlrZSBTdHJpbmcgbm9yIFVpbnQ4QXJyYXkgaW4gdGhhdCB3ZSBzZXQgc3RhcnQvZW5kXG4gIC8vIHRvIHRoZWlyIHVwcGVyL2xvd2VyIGJvdW5kcyBpZiB0aGUgdmFsdWUgcGFzc2VkIGlzIG91dCBvZiByYW5nZS5cbiAgLy8gdW5kZWZpbmVkIGlzIGhhbmRsZWQgc3BlY2lhbGx5IGFzIHBlciBFQ01BLTI2MiA2dGggRWRpdGlvbixcbiAgLy8gU2VjdGlvbiAxMy4zLjMuNyBSdW50aW1lIFNlbWFudGljczogS2V5ZWRCaW5kaW5nSW5pdGlhbGl6YXRpb24uXG4gIGlmIChzdGFydCA9PT0gdW5kZWZpbmVkIHx8IHN0YXJ0IDwgMCkge1xuICAgIHN0YXJ0ID0gMFxuICB9XG4gIC8vIFJldHVybiBlYXJseSBpZiBzdGFydCA+IHRoaXMubGVuZ3RoLiBEb25lIGhlcmUgdG8gcHJldmVudCBwb3RlbnRpYWwgdWludDMyXG4gIC8vIGNvZXJjaW9uIGZhaWwgYmVsb3cuXG4gIGlmIChzdGFydCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICBpZiAoZW5kID09PSB1bmRlZmluZWQgfHwgZW5kID4gdGhpcy5sZW5ndGgpIHtcbiAgICBlbmQgPSB0aGlzLmxlbmd0aFxuICB9XG5cbiAgaWYgKGVuZCA8PSAwKSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICAvLyBGb3JjZSBjb2Vyc2lvbiB0byB1aW50MzIuIFRoaXMgd2lsbCBhbHNvIGNvZXJjZSBmYWxzZXkvTmFOIHZhbHVlcyB0byAwLlxuICBlbmQgPj4+PSAwXG4gIHN0YXJ0ID4+Pj0gMFxuXG4gIGlmIChlbmQgPD0gc3RhcnQpIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIGlmICghZW5jb2RpbmcpIGVuY29kaW5nID0gJ3V0ZjgnXG5cbiAgd2hpbGUgKHRydWUpIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gaGV4U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICAgIHJldHVybiB1dGY4U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgICByZXR1cm4gYXNjaWlTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGxhdGluMVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIHJldHVybiBiYXNlNjRTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gdXRmMTZsZVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgICAgICBlbmNvZGluZyA9IChlbmNvZGluZyArICcnKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuXG4vLyBUaGUgcHJvcGVydHkgaXMgdXNlZCBieSBgQnVmZmVyLmlzQnVmZmVyYCBhbmQgYGlzLWJ1ZmZlcmAgKGluIFNhZmFyaSA1LTcpIHRvIGRldGVjdFxuLy8gQnVmZmVyIGluc3RhbmNlcy5cbkJ1ZmZlci5wcm90b3R5cGUuX2lzQnVmZmVyID0gdHJ1ZVxuXG5mdW5jdGlvbiBzd2FwIChiLCBuLCBtKSB7XG4gIHZhciBpID0gYltuXVxuICBiW25dID0gYlttXVxuICBiW21dID0gaVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnN3YXAxNiA9IGZ1bmN0aW9uIHN3YXAxNiAoKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgMiAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgMTYtYml0cycpXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gMikge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDEpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwMzIgPSBmdW5jdGlvbiBzd2FwMzIgKCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbiAlIDQgIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDMyLWJpdHMnKVxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDQpIHtcbiAgICBzd2FwKHRoaXMsIGksIGkgKyAzKVxuICAgIHN3YXAodGhpcywgaSArIDEsIGkgKyAyKVxuICB9XG4gIHJldHVybiB0aGlzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDY0ID0gZnVuY3Rpb24gc3dhcDY0ICgpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW4gJSA4ICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA2NC1iaXRzJylcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSA4KSB7XG4gICAgc3dhcCh0aGlzLCBpLCBpICsgNylcbiAgICBzd2FwKHRoaXMsIGkgKyAxLCBpICsgNilcbiAgICBzd2FwKHRoaXMsIGkgKyAyLCBpICsgNSlcbiAgICBzd2FwKHRoaXMsIGkgKyAzLCBpICsgNClcbiAgfVxuICByZXR1cm4gdGhpc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcgKCkge1xuICB2YXIgbGVuZ3RoID0gdGhpcy5sZW5ndGggfCAwXG4gIGlmIChsZW5ndGggPT09IDApIHJldHVybiAnJ1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIHV0ZjhTbGljZSh0aGlzLCAwLCBsZW5ndGgpXG4gIHJldHVybiBzbG93VG9TdHJpbmcuYXBwbHkodGhpcywgYXJndW1lbnRzKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmVxdWFscyA9IGZ1bmN0aW9uIGVxdWFscyAoYikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihiKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlcicpXG4gIGlmICh0aGlzID09PSBiKSByZXR1cm4gdHJ1ZVxuICByZXR1cm4gQnVmZmVyLmNvbXBhcmUodGhpcywgYikgPT09IDBcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbnNwZWN0ID0gZnVuY3Rpb24gaW5zcGVjdCAoKSB7XG4gIHZhciBzdHIgPSAnJ1xuICB2YXIgbWF4ID0gZXhwb3J0cy5JTlNQRUNUX01BWF9CWVRFU1xuICBpZiAodGhpcy5sZW5ndGggPiAwKSB7XG4gICAgc3RyID0gdGhpcy50b1N0cmluZygnaGV4JywgMCwgbWF4KS5tYXRjaCgvLnsyfS9nKS5qb2luKCcgJylcbiAgICBpZiAodGhpcy5sZW5ndGggPiBtYXgpIHN0ciArPSAnIC4uLiAnXG4gIH1cbiAgcmV0dXJuICc8QnVmZmVyICcgKyBzdHIgKyAnPidcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5jb21wYXJlID0gZnVuY3Rpb24gY29tcGFyZSAodGFyZ2V0LCBzdGFydCwgZW5kLCB0aGlzU3RhcnQsIHRoaXNFbmQpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIodGFyZ2V0KSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXInKVxuICB9XG5cbiAgaWYgKHN0YXJ0ID09PSB1bmRlZmluZWQpIHtcbiAgICBzdGFydCA9IDBcbiAgfVxuICBpZiAoZW5kID09PSB1bmRlZmluZWQpIHtcbiAgICBlbmQgPSB0YXJnZXQgPyB0YXJnZXQubGVuZ3RoIDogMFxuICB9XG4gIGlmICh0aGlzU3RhcnQgPT09IHVuZGVmaW5lZCkge1xuICAgIHRoaXNTdGFydCA9IDBcbiAgfVxuICBpZiAodGhpc0VuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhpc0VuZCA9IHRoaXMubGVuZ3RoXG4gIH1cblxuICBpZiAoc3RhcnQgPCAwIHx8IGVuZCA+IHRhcmdldC5sZW5ndGggfHwgdGhpc1N0YXJ0IDwgMCB8fCB0aGlzRW5kID4gdGhpcy5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignb3V0IG9mIHJhbmdlIGluZGV4JylcbiAgfVxuXG4gIGlmICh0aGlzU3RhcnQgPj0gdGhpc0VuZCAmJiBzdGFydCA+PSBlbmQpIHtcbiAgICByZXR1cm4gMFxuICB9XG4gIGlmICh0aGlzU3RhcnQgPj0gdGhpc0VuZCkge1xuICAgIHJldHVybiAtMVxuICB9XG4gIGlmIChzdGFydCA+PSBlbmQpIHtcbiAgICByZXR1cm4gMVxuICB9XG5cbiAgc3RhcnQgPj4+PSAwXG4gIGVuZCA+Pj49IDBcbiAgdGhpc1N0YXJ0ID4+Pj0gMFxuICB0aGlzRW5kID4+Pj0gMFxuXG4gIGlmICh0aGlzID09PSB0YXJnZXQpIHJldHVybiAwXG5cbiAgdmFyIHggPSB0aGlzRW5kIC0gdGhpc1N0YXJ0XG4gIHZhciB5ID0gZW5kIC0gc3RhcnRcbiAgdmFyIGxlbiA9IE1hdGgubWluKHgsIHkpXG5cbiAgdmFyIHRoaXNDb3B5ID0gdGhpcy5zbGljZSh0aGlzU3RhcnQsIHRoaXNFbmQpXG4gIHZhciB0YXJnZXRDb3B5ID0gdGFyZ2V0LnNsaWNlKHN0YXJ0LCBlbmQpXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgIGlmICh0aGlzQ29weVtpXSAhPT0gdGFyZ2V0Q29weVtpXSkge1xuICAgICAgeCA9IHRoaXNDb3B5W2ldXG4gICAgICB5ID0gdGFyZ2V0Q29weVtpXVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICBpZiAoeCA8IHkpIHJldHVybiAtMVxuICBpZiAoeSA8IHgpIHJldHVybiAxXG4gIHJldHVybiAwXG59XG5cbi8vIEZpbmRzIGVpdGhlciB0aGUgZmlyc3QgaW5kZXggb2YgYHZhbGAgaW4gYGJ1ZmZlcmAgYXQgb2Zmc2V0ID49IGBieXRlT2Zmc2V0YCxcbi8vIE9SIHRoZSBsYXN0IGluZGV4IG9mIGB2YWxgIGluIGBidWZmZXJgIGF0IG9mZnNldCA8PSBgYnl0ZU9mZnNldGAuXG4vL1xuLy8gQXJndW1lbnRzOlxuLy8gLSBidWZmZXIgLSBhIEJ1ZmZlciB0byBzZWFyY2hcbi8vIC0gdmFsIC0gYSBzdHJpbmcsIEJ1ZmZlciwgb3IgbnVtYmVyXG4vLyAtIGJ5dGVPZmZzZXQgLSBhbiBpbmRleCBpbnRvIGBidWZmZXJgOyB3aWxsIGJlIGNsYW1wZWQgdG8gYW4gaW50MzJcbi8vIC0gZW5jb2RpbmcgLSBhbiBvcHRpb25hbCBlbmNvZGluZywgcmVsZXZhbnQgaXMgdmFsIGlzIGEgc3RyaW5nXG4vLyAtIGRpciAtIHRydWUgZm9yIGluZGV4T2YsIGZhbHNlIGZvciBsYXN0SW5kZXhPZlxuZnVuY3Rpb24gYmlkaXJlY3Rpb25hbEluZGV4T2YgKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKSB7XG4gIC8vIEVtcHR5IGJ1ZmZlciBtZWFucyBubyBtYXRjaFxuICBpZiAoYnVmZmVyLmxlbmd0aCA9PT0gMCkgcmV0dXJuIC0xXG5cbiAgLy8gTm9ybWFsaXplIGJ5dGVPZmZzZXRcbiAgaWYgKHR5cGVvZiBieXRlT2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgIGVuY29kaW5nID0gYnl0ZU9mZnNldFxuICAgIGJ5dGVPZmZzZXQgPSAwXG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA+IDB4N2ZmZmZmZmYpIHtcbiAgICBieXRlT2Zmc2V0ID0gMHg3ZmZmZmZmZlxuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPCAtMHg4MDAwMDAwMCkge1xuICAgIGJ5dGVPZmZzZXQgPSAtMHg4MDAwMDAwMFxuICB9XG4gIGJ5dGVPZmZzZXQgPSArYnl0ZU9mZnNldCAgLy8gQ29lcmNlIHRvIE51bWJlci5cbiAgaWYgKGlzTmFOKGJ5dGVPZmZzZXQpKSB7XG4gICAgLy8gYnl0ZU9mZnNldDogaXQgaXQncyB1bmRlZmluZWQsIG51bGwsIE5hTiwgXCJmb29cIiwgZXRjLCBzZWFyY2ggd2hvbGUgYnVmZmVyXG4gICAgYnl0ZU9mZnNldCA9IGRpciA/IDAgOiAoYnVmZmVyLmxlbmd0aCAtIDEpXG4gIH1cblxuICAvLyBOb3JtYWxpemUgYnl0ZU9mZnNldDogbmVnYXRpdmUgb2Zmc2V0cyBzdGFydCBmcm9tIHRoZSBlbmQgb2YgdGhlIGJ1ZmZlclxuICBpZiAoYnl0ZU9mZnNldCA8IDApIGJ5dGVPZmZzZXQgPSBidWZmZXIubGVuZ3RoICsgYnl0ZU9mZnNldFxuICBpZiAoYnl0ZU9mZnNldCA+PSBidWZmZXIubGVuZ3RoKSB7XG4gICAgaWYgKGRpcikgcmV0dXJuIC0xXG4gICAgZWxzZSBieXRlT2Zmc2V0ID0gYnVmZmVyLmxlbmd0aCAtIDFcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0IDwgMCkge1xuICAgIGlmIChkaXIpIGJ5dGVPZmZzZXQgPSAwXG4gICAgZWxzZSByZXR1cm4gLTFcbiAgfVxuXG4gIC8vIE5vcm1hbGl6ZSB2YWxcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFsID0gQnVmZmVyLmZyb20odmFsLCBlbmNvZGluZylcbiAgfVxuXG4gIC8vIEZpbmFsbHksIHNlYXJjaCBlaXRoZXIgaW5kZXhPZiAoaWYgZGlyIGlzIHRydWUpIG9yIGxhc3RJbmRleE9mXG4gIGlmIChCdWZmZXIuaXNCdWZmZXIodmFsKSkge1xuICAgIC8vIFNwZWNpYWwgY2FzZTogbG9va2luZyBmb3IgZW1wdHkgc3RyaW5nL2J1ZmZlciBhbHdheXMgZmFpbHNcbiAgICBpZiAodmFsLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIC0xXG4gICAgfVxuICAgIHJldHVybiBhcnJheUluZGV4T2YoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpXG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICB2YWwgPSB2YWwgJiAweEZGIC8vIFNlYXJjaCBmb3IgYSBieXRlIHZhbHVlIFswLTI1NV1cbiAgICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgJiZcbiAgICAgICAgdHlwZW9mIFVpbnQ4QXJyYXkucHJvdG90eXBlLmluZGV4T2YgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGlmIChkaXIpIHtcbiAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXkucHJvdG90eXBlLmluZGV4T2YuY2FsbChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBVaW50OEFycmF5LnByb3RvdHlwZS5sYXN0SW5kZXhPZi5jYWxsKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0KVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYXJyYXlJbmRleE9mKGJ1ZmZlciwgWyB2YWwgXSwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcilcbiAgfVxuXG4gIHRocm93IG5ldyBUeXBlRXJyb3IoJ3ZhbCBtdXN0IGJlIHN0cmluZywgbnVtYmVyIG9yIEJ1ZmZlcicpXG59XG5cbmZ1bmN0aW9uIGFycmF5SW5kZXhPZiAoYXJyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpIHtcbiAgdmFyIGluZGV4U2l6ZSA9IDFcbiAgdmFyIGFyckxlbmd0aCA9IGFyci5sZW5ndGhcbiAgdmFyIHZhbExlbmd0aCA9IHZhbC5sZW5ndGhcblxuICBpZiAoZW5jb2RpbmcgIT09IHVuZGVmaW5lZCkge1xuICAgIGVuY29kaW5nID0gU3RyaW5nKGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgaWYgKGVuY29kaW5nID09PSAndWNzMicgfHwgZW5jb2RpbmcgPT09ICd1Y3MtMicgfHxcbiAgICAgICAgZW5jb2RpbmcgPT09ICd1dGYxNmxlJyB8fCBlbmNvZGluZyA9PT0gJ3V0Zi0xNmxlJykge1xuICAgICAgaWYgKGFyci5sZW5ndGggPCAyIHx8IHZhbC5sZW5ndGggPCAyKSB7XG4gICAgICAgIHJldHVybiAtMVxuICAgICAgfVxuICAgICAgaW5kZXhTaXplID0gMlxuICAgICAgYXJyTGVuZ3RoIC89IDJcbiAgICAgIHZhbExlbmd0aCAvPSAyXG4gICAgICBieXRlT2Zmc2V0IC89IDJcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZWFkIChidWYsIGkpIHtcbiAgICBpZiAoaW5kZXhTaXplID09PSAxKSB7XG4gICAgICByZXR1cm4gYnVmW2ldXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBidWYucmVhZFVJbnQxNkJFKGkgKiBpbmRleFNpemUpXG4gICAgfVxuICB9XG5cbiAgdmFyIGlcbiAgaWYgKGRpcikge1xuICAgIHZhciBmb3VuZEluZGV4ID0gLTFcbiAgICBmb3IgKGkgPSBieXRlT2Zmc2V0OyBpIDwgYXJyTGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChyZWFkKGFyciwgaSkgPT09IHJlYWQodmFsLCBmb3VuZEluZGV4ID09PSAtMSA/IDAgOiBpIC0gZm91bmRJbmRleCkpIHtcbiAgICAgICAgaWYgKGZvdW5kSW5kZXggPT09IC0xKSBmb3VuZEluZGV4ID0gaVxuICAgICAgICBpZiAoaSAtIGZvdW5kSW5kZXggKyAxID09PSB2YWxMZW5ndGgpIHJldHVybiBmb3VuZEluZGV4ICogaW5kZXhTaXplXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoZm91bmRJbmRleCAhPT0gLTEpIGkgLT0gaSAtIGZvdW5kSW5kZXhcbiAgICAgICAgZm91bmRJbmRleCA9IC0xXG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChieXRlT2Zmc2V0ICsgdmFsTGVuZ3RoID4gYXJyTGVuZ3RoKSBieXRlT2Zmc2V0ID0gYXJyTGVuZ3RoIC0gdmFsTGVuZ3RoXG4gICAgZm9yIChpID0gYnl0ZU9mZnNldDsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHZhciBmb3VuZCA9IHRydWVcbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdmFsTGVuZ3RoOyBqKyspIHtcbiAgICAgICAgaWYgKHJlYWQoYXJyLCBpICsgaikgIT09IHJlYWQodmFsLCBqKSkge1xuICAgICAgICAgIGZvdW5kID0gZmFsc2VcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoZm91bmQpIHJldHVybiBpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIC0xXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuaW5jbHVkZXMgPSBmdW5jdGlvbiBpbmNsdWRlcyAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICByZXR1cm4gdGhpcy5pbmRleE9mKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpICE9PSAtMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluZGV4T2YgPSBmdW5jdGlvbiBpbmRleE9mICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiBiaWRpcmVjdGlvbmFsSW5kZXhPZih0aGlzLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCB0cnVlKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmxhc3RJbmRleE9mID0gZnVuY3Rpb24gbGFzdEluZGV4T2YgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGJpZGlyZWN0aW9uYWxJbmRleE9mKHRoaXMsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGZhbHNlKVxufVxuXG5mdW5jdGlvbiBoZXhXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIG9mZnNldCA9IE51bWJlcihvZmZzZXQpIHx8IDBcbiAgdmFyIHJlbWFpbmluZyA9IGJ1Zi5sZW5ndGggLSBvZmZzZXRcbiAgaWYgKCFsZW5ndGgpIHtcbiAgICBsZW5ndGggPSByZW1haW5pbmdcbiAgfSBlbHNlIHtcbiAgICBsZW5ndGggPSBOdW1iZXIobGVuZ3RoKVxuICAgIGlmIChsZW5ndGggPiByZW1haW5pbmcpIHtcbiAgICAgIGxlbmd0aCA9IHJlbWFpbmluZ1xuICAgIH1cbiAgfVxuXG4gIC8vIG11c3QgYmUgYW4gZXZlbiBudW1iZXIgb2YgZGlnaXRzXG4gIHZhciBzdHJMZW4gPSBzdHJpbmcubGVuZ3RoXG4gIGlmIChzdHJMZW4gJSAyICE9PSAwKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIGhleCBzdHJpbmcnKVxuXG4gIGlmIChsZW5ndGggPiBzdHJMZW4gLyAyKSB7XG4gICAgbGVuZ3RoID0gc3RyTGVuIC8gMlxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICB2YXIgcGFyc2VkID0gcGFyc2VJbnQoc3RyaW5nLnN1YnN0cihpICogMiwgMiksIDE2KVxuICAgIGlmIChpc05hTihwYXJzZWQpKSByZXR1cm4gaVxuICAgIGJ1ZltvZmZzZXQgKyBpXSA9IHBhcnNlZFxuICB9XG4gIHJldHVybiBpXG59XG5cbmZ1bmN0aW9uIHV0ZjhXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKHV0ZjhUb0J5dGVzKHN0cmluZywgYnVmLmxlbmd0aCAtIG9mZnNldCksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGFzY2lpV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcihhc2NpaVRvQnl0ZXMoc3RyaW5nKSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gbGF0aW4xV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYXNjaWlXcml0ZShidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGJhc2U2NFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIoYmFzZTY0VG9CeXRlcyhzdHJpbmcpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiB1Y3MyV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcih1dGYxNmxlVG9CeXRlcyhzdHJpbmcsIGJ1Zi5sZW5ndGggLSBvZmZzZXQpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gd3JpdGUgKHN0cmluZywgb2Zmc2V0LCBsZW5ndGgsIGVuY29kaW5nKSB7XG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcpXG4gIGlmIChvZmZzZXQgPT09IHVuZGVmaW5lZCkge1xuICAgIGVuY29kaW5nID0gJ3V0ZjgnXG4gICAgbGVuZ3RoID0gdGhpcy5sZW5ndGhcbiAgICBvZmZzZXQgPSAwXG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcsIGVuY29kaW5nKVxuICB9IGVsc2UgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkICYmIHR5cGVvZiBvZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgZW5jb2RpbmcgPSBvZmZzZXRcbiAgICBsZW5ndGggPSB0aGlzLmxlbmd0aFxuICAgIG9mZnNldCA9IDBcbiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZywgb2Zmc2V0WywgbGVuZ3RoXVssIGVuY29kaW5nXSlcbiAgfSBlbHNlIGlmIChpc0Zpbml0ZShvZmZzZXQpKSB7XG4gICAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICAgIGlmIChpc0Zpbml0ZShsZW5ndGgpKSB7XG4gICAgICBsZW5ndGggPSBsZW5ndGggfCAwXG4gICAgICBpZiAoZW5jb2RpbmcgPT09IHVuZGVmaW5lZCkgZW5jb2RpbmcgPSAndXRmOCdcbiAgICB9IGVsc2Uge1xuICAgICAgZW5jb2RpbmcgPSBsZW5ndGhcbiAgICAgIGxlbmd0aCA9IHVuZGVmaW5lZFxuICAgIH1cbiAgLy8gbGVnYWN5IHdyaXRlKHN0cmluZywgZW5jb2RpbmcsIG9mZnNldCwgbGVuZ3RoKSAtIHJlbW92ZSBpbiB2MC4xM1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICdCdWZmZXIud3JpdGUoc3RyaW5nLCBlbmNvZGluZywgb2Zmc2V0WywgbGVuZ3RoXSkgaXMgbm8gbG9uZ2VyIHN1cHBvcnRlZCdcbiAgICApXG4gIH1cblxuICB2YXIgcmVtYWluaW5nID0gdGhpcy5sZW5ndGggLSBvZmZzZXRcbiAgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkIHx8IGxlbmd0aCA+IHJlbWFpbmluZykgbGVuZ3RoID0gcmVtYWluaW5nXG5cbiAgaWYgKChzdHJpbmcubGVuZ3RoID4gMCAmJiAobGVuZ3RoIDwgMCB8fCBvZmZzZXQgPCAwKSkgfHwgb2Zmc2V0ID4gdGhpcy5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQXR0ZW1wdCB0byB3cml0ZSBvdXRzaWRlIGJ1ZmZlciBib3VuZHMnKVxuICB9XG5cbiAgaWYgKCFlbmNvZGluZykgZW5jb2RpbmcgPSAndXRmOCdcblxuICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZVxuICBmb3IgKDs7KSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGhleFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgICByZXR1cm4gdXRmOFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgICAgcmV0dXJuIGFzY2lpV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBsYXRpbjFXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICAvLyBXYXJuaW5nOiBtYXhMZW5ndGggbm90IHRha2VuIGludG8gYWNjb3VudCBpbiBiYXNlNjRXcml0ZVxuICAgICAgICByZXR1cm4gYmFzZTY0V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIHVjczJXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICAgICAgZW5jb2RpbmcgPSAoJycgKyBlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04gKCkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6ICdCdWZmZXInLFxuICAgIGRhdGE6IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHRoaXMuX2FyciB8fCB0aGlzLCAwKVxuICB9XG59XG5cbmZ1bmN0aW9uIGJhc2U2NFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgaWYgKHN0YXJ0ID09PSAwICYmIGVuZCA9PT0gYnVmLmxlbmd0aCkge1xuICAgIHJldHVybiBiYXNlNjQuZnJvbUJ5dGVBcnJheShidWYpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGJhc2U2NC5mcm9tQnl0ZUFycmF5KGJ1Zi5zbGljZShzdGFydCwgZW5kKSlcbiAgfVxufVxuXG5mdW5jdGlvbiB1dGY4U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG4gIHZhciByZXMgPSBbXVxuXG4gIHZhciBpID0gc3RhcnRcbiAgd2hpbGUgKGkgPCBlbmQpIHtcbiAgICB2YXIgZmlyc3RCeXRlID0gYnVmW2ldXG4gICAgdmFyIGNvZGVQb2ludCA9IG51bGxcbiAgICB2YXIgYnl0ZXNQZXJTZXF1ZW5jZSA9IChmaXJzdEJ5dGUgPiAweEVGKSA/IDRcbiAgICAgIDogKGZpcnN0Qnl0ZSA+IDB4REYpID8gM1xuICAgICAgOiAoZmlyc3RCeXRlID4gMHhCRikgPyAyXG4gICAgICA6IDFcblxuICAgIGlmIChpICsgYnl0ZXNQZXJTZXF1ZW5jZSA8PSBlbmQpIHtcbiAgICAgIHZhciBzZWNvbmRCeXRlLCB0aGlyZEJ5dGUsIGZvdXJ0aEJ5dGUsIHRlbXBDb2RlUG9pbnRcblxuICAgICAgc3dpdGNoIChieXRlc1BlclNlcXVlbmNlKSB7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICBpZiAoZmlyc3RCeXRlIDwgMHg4MCkge1xuICAgICAgICAgICAgY29kZVBvaW50ID0gZmlyc3RCeXRlXG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4MUYpIDw8IDB4NiB8IChzZWNvbmRCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHg3Rikge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl1cbiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAodGhpcmRCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHhGKSA8PCAweEMgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpIDw8IDB4NiB8ICh0aGlyZEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweDdGRiAmJiAodGVtcENvZGVQb2ludCA8IDB4RDgwMCB8fCB0ZW1wQ29kZVBvaW50ID4gMHhERkZGKSkge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgNDpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl1cbiAgICAgICAgICBmb3VydGhCeXRlID0gYnVmW2kgKyAzXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwICYmICh0aGlyZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAoZm91cnRoQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4RikgPDwgMHgxMiB8IChzZWNvbmRCeXRlICYgMHgzRikgPDwgMHhDIHwgKHRoaXJkQnl0ZSAmIDB4M0YpIDw8IDB4NiB8IChmb3VydGhCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHhGRkZGICYmIHRlbXBDb2RlUG9pbnQgPCAweDExMDAwMCkge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChjb2RlUG9pbnQgPT09IG51bGwpIHtcbiAgICAgIC8vIHdlIGRpZCBub3QgZ2VuZXJhdGUgYSB2YWxpZCBjb2RlUG9pbnQgc28gaW5zZXJ0IGFcbiAgICAgIC8vIHJlcGxhY2VtZW50IGNoYXIgKFUrRkZGRCkgYW5kIGFkdmFuY2Ugb25seSAxIGJ5dGVcbiAgICAgIGNvZGVQb2ludCA9IDB4RkZGRFxuICAgICAgYnl0ZXNQZXJTZXF1ZW5jZSA9IDFcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA+IDB4RkZGRikge1xuICAgICAgLy8gZW5jb2RlIHRvIHV0ZjE2IChzdXJyb2dhdGUgcGFpciBkYW5jZSlcbiAgICAgIGNvZGVQb2ludCAtPSAweDEwMDAwXG4gICAgICByZXMucHVzaChjb2RlUG9pbnQgPj4+IDEwICYgMHgzRkYgfCAweEQ4MDApXG4gICAgICBjb2RlUG9pbnQgPSAweERDMDAgfCBjb2RlUG9pbnQgJiAweDNGRlxuICAgIH1cblxuICAgIHJlcy5wdXNoKGNvZGVQb2ludClcbiAgICBpICs9IGJ5dGVzUGVyU2VxdWVuY2VcbiAgfVxuXG4gIHJldHVybiBkZWNvZGVDb2RlUG9pbnRzQXJyYXkocmVzKVxufVxuXG4vLyBCYXNlZCBvbiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yMjc0NzI3Mi82ODA3NDIsIHRoZSBicm93c2VyIHdpdGhcbi8vIHRoZSBsb3dlc3QgbGltaXQgaXMgQ2hyb21lLCB3aXRoIDB4MTAwMDAgYXJncy5cbi8vIFdlIGdvIDEgbWFnbml0dWRlIGxlc3MsIGZvciBzYWZldHlcbnZhciBNQVhfQVJHVU1FTlRTX0xFTkdUSCA9IDB4MTAwMFxuXG5mdW5jdGlvbiBkZWNvZGVDb2RlUG9pbnRzQXJyYXkgKGNvZGVQb2ludHMpIHtcbiAgdmFyIGxlbiA9IGNvZGVQb2ludHMubGVuZ3RoXG4gIGlmIChsZW4gPD0gTUFYX0FSR1VNRU5UU19MRU5HVEgpIHtcbiAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsIGNvZGVQb2ludHMpIC8vIGF2b2lkIGV4dHJhIHNsaWNlKClcbiAgfVxuXG4gIC8vIERlY29kZSBpbiBjaHVua3MgdG8gYXZvaWQgXCJjYWxsIHN0YWNrIHNpemUgZXhjZWVkZWRcIi5cbiAgdmFyIHJlcyA9ICcnXG4gIHZhciBpID0gMFxuICB3aGlsZSAoaSA8IGxlbikge1xuICAgIHJlcyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFxuICAgICAgU3RyaW5nLFxuICAgICAgY29kZVBvaW50cy5zbGljZShpLCBpICs9IE1BWF9BUkdVTUVOVFNfTEVOR1RIKVxuICAgIClcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIGFzY2lpU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgcmV0ID0gJydcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgcmV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmW2ldICYgMHg3RilcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbmZ1bmN0aW9uIGxhdGluMVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHJldCA9ICcnXG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcblxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgIHJldCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZltpXSlcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbmZ1bmN0aW9uIGhleFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxlbiA9IGJ1Zi5sZW5ndGhcblxuICBpZiAoIXN0YXJ0IHx8IHN0YXJ0IDwgMCkgc3RhcnQgPSAwXG4gIGlmICghZW5kIHx8IGVuZCA8IDAgfHwgZW5kID4gbGVuKSBlbmQgPSBsZW5cblxuICB2YXIgb3V0ID0gJydcbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICBvdXQgKz0gdG9IZXgoYnVmW2ldKVxuICB9XG4gIHJldHVybiBvdXRcbn1cblxuZnVuY3Rpb24gdXRmMTZsZVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGJ5dGVzID0gYnVmLnNsaWNlKHN0YXJ0LCBlbmQpXG4gIHZhciByZXMgPSAnJ1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGJ5dGVzLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgcmVzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnl0ZXNbaV0gKyBieXRlc1tpICsgMV0gKiAyNTYpXG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnNsaWNlID0gZnVuY3Rpb24gc2xpY2UgKHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIHN0YXJ0ID0gfn5zdGFydFxuICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IH5+ZW5kXG5cbiAgaWYgKHN0YXJ0IDwgMCkge1xuICAgIHN0YXJ0ICs9IGxlblxuICAgIGlmIChzdGFydCA8IDApIHN0YXJ0ID0gMFxuICB9IGVsc2UgaWYgKHN0YXJ0ID4gbGVuKSB7XG4gICAgc3RhcnQgPSBsZW5cbiAgfVxuXG4gIGlmIChlbmQgPCAwKSB7XG4gICAgZW5kICs9IGxlblxuICAgIGlmIChlbmQgPCAwKSBlbmQgPSAwXG4gIH0gZWxzZSBpZiAoZW5kID4gbGVuKSB7XG4gICAgZW5kID0gbGVuXG4gIH1cblxuICBpZiAoZW5kIDwgc3RhcnQpIGVuZCA9IHN0YXJ0XG5cbiAgdmFyIG5ld0J1ZlxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICBuZXdCdWYgPSB0aGlzLnN1YmFycmF5KHN0YXJ0LCBlbmQpXG4gICAgbmV3QnVmLl9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgfSBlbHNlIHtcbiAgICB2YXIgc2xpY2VMZW4gPSBlbmQgLSBzdGFydFxuICAgIG5ld0J1ZiA9IG5ldyBCdWZmZXIoc2xpY2VMZW4sIHVuZGVmaW5lZClcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNsaWNlTGVuOyArK2kpIHtcbiAgICAgIG5ld0J1ZltpXSA9IHRoaXNbaSArIHN0YXJ0XVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXdCdWZcbn1cblxuLypcbiAqIE5lZWQgdG8gbWFrZSBzdXJlIHRoYXQgYnVmZmVyIGlzbid0IHRyeWluZyB0byB3cml0ZSBvdXQgb2YgYm91bmRzLlxuICovXG5mdW5jdGlvbiBjaGVja09mZnNldCAob2Zmc2V0LCBleHQsIGxlbmd0aCkge1xuICBpZiAoKG9mZnNldCAlIDEpICE9PSAwIHx8IG9mZnNldCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdvZmZzZXQgaXMgbm90IHVpbnQnKVxuICBpZiAob2Zmc2V0ICsgZXh0ID4gbGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVHJ5aW5nIHRvIGFjY2VzcyBiZXlvbmQgYnVmZmVyIGxlbmd0aCcpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnRMRSA9IGZ1bmN0aW9uIHJlYWRVSW50TEUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdXG4gIHZhciBtdWwgPSAxXG4gIHZhciBpID0gMFxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIGldICogbXVsXG4gIH1cblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnRCRSA9IGZ1bmN0aW9uIHJlYWRVSW50QkUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG4gIH1cblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAtLWJ5dGVMZW5ndGhdXG4gIHZhciBtdWwgPSAxXG4gIHdoaWxlIChieXRlTGVuZ3RoID4gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIC0tYnl0ZUxlbmd0aF0gKiBtdWxcbiAgfVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDggPSBmdW5jdGlvbiByZWFkVUludDggKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAxLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIHRoaXNbb2Zmc2V0XVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MTZMRSA9IGZ1bmN0aW9uIHJlYWRVSW50MTZMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gdGhpc1tvZmZzZXRdIHwgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDE2QkUgPSBmdW5jdGlvbiByZWFkVUludDE2QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuICh0aGlzW29mZnNldF0gPDwgOCkgfCB0aGlzW29mZnNldCArIDFdXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQzMkxFID0gZnVuY3Rpb24gcmVhZFVJbnQzMkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICgodGhpc1tvZmZzZXRdKSB8XG4gICAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KSB8XG4gICAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCAxNikpICtcbiAgICAgICh0aGlzW29mZnNldCArIDNdICogMHgxMDAwMDAwKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MzJCRSA9IGZ1bmN0aW9uIHJlYWRVSW50MzJCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdICogMHgxMDAwMDAwKSArXG4gICAgKCh0aGlzW29mZnNldCArIDFdIDw8IDE2KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgOCkgfFxuICAgIHRoaXNbb2Zmc2V0ICsgM10pXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludExFID0gZnVuY3Rpb24gcmVhZEludExFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XVxuICB2YXIgbXVsID0gMVxuICB2YXIgaSA9IDBcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyBpXSAqIG11bFxuICB9XG4gIG11bCAqPSAweDgwXG5cbiAgaWYgKHZhbCA+PSBtdWwpIHZhbCAtPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aClcblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludEJFID0gZnVuY3Rpb24gcmVhZEludEJFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIGkgPSBieXRlTGVuZ3RoXG4gIHZhciBtdWwgPSAxXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIC0taV1cbiAgd2hpbGUgKGkgPiAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgLS1pXSAqIG11bFxuICB9XG4gIG11bCAqPSAweDgwXG5cbiAgaWYgKHZhbCA+PSBtdWwpIHZhbCAtPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aClcblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDggPSBmdW5jdGlvbiByZWFkSW50OCAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDEsIHRoaXMubGVuZ3RoKVxuICBpZiAoISh0aGlzW29mZnNldF0gJiAweDgwKSkgcmV0dXJuICh0aGlzW29mZnNldF0pXG4gIHJldHVybiAoKDB4ZmYgLSB0aGlzW29mZnNldF0gKyAxKSAqIC0xKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQxNkxFID0gZnVuY3Rpb24gcmVhZEludDE2TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XSB8ICh0aGlzW29mZnNldCArIDFdIDw8IDgpXG4gIHJldHVybiAodmFsICYgMHg4MDAwKSA/IHZhbCB8IDB4RkZGRjAwMDAgOiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MTZCRSA9IGZ1bmN0aW9uIHJlYWRJbnQxNkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIDFdIHwgKHRoaXNbb2Zmc2V0XSA8PCA4KVxuICByZXR1cm4gKHZhbCAmIDB4ODAwMCkgPyB2YWwgfCAweEZGRkYwMDAwIDogdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyTEUgPSBmdW5jdGlvbiByZWFkSW50MzJMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdKSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOCkgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDE2KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgM10gPDwgMjQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyQkUgPSBmdW5jdGlvbiByZWFkSW50MzJCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdIDw8IDI0KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCA4KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgM10pXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0TEUgPSBmdW5jdGlvbiByZWFkRmxvYXRMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgdHJ1ZSwgMjMsIDQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0QkUgPSBmdW5jdGlvbiByZWFkRmxvYXRCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgZmFsc2UsIDIzLCA0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWREb3VibGVMRSA9IGZ1bmN0aW9uIHJlYWREb3VibGVMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDgsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgdHJ1ZSwgNTIsIDgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZERvdWJsZUJFID0gZnVuY3Rpb24gcmVhZERvdWJsZUJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgOCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCBmYWxzZSwgNTIsIDgpXG59XG5cbmZ1bmN0aW9uIGNoZWNrSW50IChidWYsIHZhbHVlLCBvZmZzZXQsIGV4dCwgbWF4LCBtaW4pIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJidWZmZXJcIiBhcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyIGluc3RhbmNlJylcbiAgaWYgKHZhbHVlID4gbWF4IHx8IHZhbHVlIDwgbWluKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXCJ2YWx1ZVwiIGFyZ3VtZW50IGlzIG91dCBvZiBib3VuZHMnKVxuICBpZiAob2Zmc2V0ICsgZXh0ID4gYnVmLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50TEUgPSBmdW5jdGlvbiB3cml0ZVVJbnRMRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBtYXhCeXRlcyA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKSAtIDFcbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBtYXhCeXRlcywgMClcbiAgfVxuXG4gIHZhciBtdWwgPSAxXG4gIHZhciBpID0gMFxuICB0aGlzW29mZnNldF0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB0aGlzW29mZnNldCArIGldID0gKHZhbHVlIC8gbXVsKSAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50QkUgPSBmdW5jdGlvbiB3cml0ZVVJbnRCRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBtYXhCeXRlcyA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKSAtIDFcbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBtYXhCeXRlcywgMClcbiAgfVxuXG4gIHZhciBpID0gYnl0ZUxlbmd0aCAtIDFcbiAgdmFyIG11bCA9IDFcbiAgdGhpc1tvZmZzZXQgKyBpXSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoLS1pID49IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB0aGlzW29mZnNldCArIGldID0gKHZhbHVlIC8gbXVsKSAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50OCA9IGZ1bmN0aW9uIHdyaXRlVUludDggKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMSwgMHhmZiwgMClcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkgdmFsdWUgPSBNYXRoLmZsb29yKHZhbHVlKVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgMVxufVxuXG5mdW5jdGlvbiBvYmplY3RXcml0ZVVJbnQxNiAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4pIHtcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmYgKyB2YWx1ZSArIDFcbiAgZm9yICh2YXIgaSA9IDAsIGogPSBNYXRoLm1pbihidWYubGVuZ3RoIC0gb2Zmc2V0LCAyKTsgaSA8IGo7ICsraSkge1xuICAgIGJ1ZltvZmZzZXQgKyBpXSA9ICh2YWx1ZSAmICgweGZmIDw8ICg4ICogKGxpdHRsZUVuZGlhbiA/IGkgOiAxIC0gaSkpKSkgPj4+XG4gICAgICAobGl0dGxlRW5kaWFuID8gaSA6IDEgLSBpKSAqIDhcbiAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDE2TEUgPSBmdW5jdGlvbiB3cml0ZVVJbnQxNkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4ZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQxNkJFID0gZnVuY3Rpb24gd3JpdGVVSW50MTZCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweGZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5mdW5jdGlvbiBvYmplY3RXcml0ZVVJbnQzMiAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4pIHtcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmZmZmZmICsgdmFsdWUgKyAxXG4gIGZvciAodmFyIGkgPSAwLCBqID0gTWF0aC5taW4oYnVmLmxlbmd0aCAtIG9mZnNldCwgNCk7IGkgPCBqOyArK2kpIHtcbiAgICBidWZbb2Zmc2V0ICsgaV0gPSAodmFsdWUgPj4+IChsaXR0bGVFbmRpYW4gPyBpIDogMyAtIGkpICogOCkgJiAweGZmXG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQzMkxFID0gZnVuY3Rpb24gd3JpdGVVSW50MzJMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweGZmZmZmZmZmLCAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlID4+PiAyNClcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiAxNilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDMyQkUgPSBmdW5jdGlvbiB3cml0ZVVJbnQzMkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4ZmZmZmZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gMjQpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50TEUgPSBmdW5jdGlvbiB3cml0ZUludExFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbGltaXQgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCAtIDEpXG5cbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBsaW1pdCAtIDEsIC1saW1pdClcbiAgfVxuXG4gIHZhciBpID0gMFxuICB2YXIgbXVsID0gMVxuICB2YXIgc3ViID0gMFxuICB0aGlzW29mZnNldF0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICBpZiAodmFsdWUgPCAwICYmIHN1YiA9PT0gMCAmJiB0aGlzW29mZnNldCArIGkgLSAxXSAhPT0gMCkge1xuICAgICAgc3ViID0gMVxuICAgIH1cbiAgICB0aGlzW29mZnNldCArIGldID0gKCh2YWx1ZSAvIG11bCkgPj4gMCkgLSBzdWIgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50QkUgPSBmdW5jdGlvbiB3cml0ZUludEJFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbGltaXQgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCAtIDEpXG5cbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBsaW1pdCAtIDEsIC1saW1pdClcbiAgfVxuXG4gIHZhciBpID0gYnl0ZUxlbmd0aCAtIDFcbiAgdmFyIG11bCA9IDFcbiAgdmFyIHN1YiA9IDBcbiAgdGhpc1tvZmZzZXQgKyBpXSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoLS1pID49IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICBpZiAodmFsdWUgPCAwICYmIHN1YiA9PT0gMCAmJiB0aGlzW29mZnNldCArIGkgKyAxXSAhPT0gMCkge1xuICAgICAgc3ViID0gMVxuICAgIH1cbiAgICB0aGlzW29mZnNldCArIGldID0gKCh2YWx1ZSAvIG11bCkgPj4gMCkgLSBzdWIgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50OCA9IGZ1bmN0aW9uIHdyaXRlSW50OCAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAxLCAweDdmLCAtMHg4MClcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkgdmFsdWUgPSBNYXRoLmZsb29yKHZhbHVlKVxuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmYgKyB2YWx1ZSArIDFcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDE2TEUgPSBmdW5jdGlvbiB3cml0ZUludDE2TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHg3ZmZmLCAtMHg4MDAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MTZCRSA9IGZ1bmN0aW9uIHdyaXRlSW50MTZCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweDdmZmYsIC0weDgwMDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MzJMRSA9IGZ1bmN0aW9uIHdyaXRlSW50MzJMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweDdmZmZmZmZmLCAtMHg4MDAwMDAwMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgPj4+IDI0KVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDMyQkUgPSBmdW5jdGlvbiB3cml0ZUludDMyQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHg3ZmZmZmZmZiwgLTB4ODAwMDAwMDApXG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZmZmZmZmZiArIHZhbHVlICsgMVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDI0KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuZnVuY3Rpb24gY2hlY2tJRUVFNzU0IChidWYsIHZhbHVlLCBvZmZzZXQsIGV4dCwgbWF4LCBtaW4pIHtcbiAgaWYgKG9mZnNldCArIGV4dCA+IGJ1Zi5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxuICBpZiAob2Zmc2V0IDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG59XG5cbmZ1bmN0aW9uIHdyaXRlRmxvYXQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tJRUVFNzU0KGJ1ZiwgdmFsdWUsIG9mZnNldCwgNCwgMy40MDI4MjM0NjYzODUyODg2ZSszOCwgLTMuNDAyODIzNDY2Mzg1Mjg4NmUrMzgpXG4gIH1cbiAgaWVlZTc1NC53cml0ZShidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgMjMsIDQpXG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVGbG9hdExFID0gZnVuY3Rpb24gd3JpdGVGbG9hdExFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVGbG9hdCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUZsb2F0QkUgPSBmdW5jdGlvbiB3cml0ZUZsb2F0QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZUZsb2F0KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydClcbn1cblxuZnVuY3Rpb24gd3JpdGVEb3VibGUgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tJRUVFNzU0KGJ1ZiwgdmFsdWUsIG9mZnNldCwgOCwgMS43OTc2OTMxMzQ4NjIzMTU3RSszMDgsIC0xLjc5NzY5MzEzNDg2MjMxNTdFKzMwOClcbiAgfVxuICBpZWVlNzU0LndyaXRlKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCA1MiwgOClcbiAgcmV0dXJuIG9mZnNldCArIDhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZURvdWJsZUxFID0gZnVuY3Rpb24gd3JpdGVEb3VibGVMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRG91YmxlKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRG91YmxlQkUgPSBmdW5jdGlvbiB3cml0ZURvdWJsZUJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVEb3VibGUodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG4vLyBjb3B5KHRhcmdldEJ1ZmZlciwgdGFyZ2V0U3RhcnQ9MCwgc291cmNlU3RhcnQ9MCwgc291cmNlRW5kPWJ1ZmZlci5sZW5ndGgpXG5CdWZmZXIucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiBjb3B5ICh0YXJnZXQsIHRhcmdldFN0YXJ0LCBzdGFydCwgZW5kKSB7XG4gIGlmICghc3RhcnQpIHN0YXJ0ID0gMFxuICBpZiAoIWVuZCAmJiBlbmQgIT09IDApIGVuZCA9IHRoaXMubGVuZ3RoXG4gIGlmICh0YXJnZXRTdGFydCA+PSB0YXJnZXQubGVuZ3RoKSB0YXJnZXRTdGFydCA9IHRhcmdldC5sZW5ndGhcbiAgaWYgKCF0YXJnZXRTdGFydCkgdGFyZ2V0U3RhcnQgPSAwXG4gIGlmIChlbmQgPiAwICYmIGVuZCA8IHN0YXJ0KSBlbmQgPSBzdGFydFxuXG4gIC8vIENvcHkgMCBieXRlczsgd2UncmUgZG9uZVxuICBpZiAoZW5kID09PSBzdGFydCkgcmV0dXJuIDBcbiAgaWYgKHRhcmdldC5sZW5ndGggPT09IDAgfHwgdGhpcy5sZW5ndGggPT09IDApIHJldHVybiAwXG5cbiAgLy8gRmF0YWwgZXJyb3IgY29uZGl0aW9uc1xuICBpZiAodGFyZ2V0U3RhcnQgPCAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3RhcmdldFN0YXJ0IG91dCBvZiBib3VuZHMnKVxuICB9XG4gIGlmIChzdGFydCA8IDAgfHwgc3RhcnQgPj0gdGhpcy5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdzb3VyY2VTdGFydCBvdXQgb2YgYm91bmRzJylcbiAgaWYgKGVuZCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdzb3VyY2VFbmQgb3V0IG9mIGJvdW5kcycpXG5cbiAgLy8gQXJlIHdlIG9vYj9cbiAgaWYgKGVuZCA+IHRoaXMubGVuZ3RoKSBlbmQgPSB0aGlzLmxlbmd0aFxuICBpZiAodGFyZ2V0Lmxlbmd0aCAtIHRhcmdldFN0YXJ0IDwgZW5kIC0gc3RhcnQpIHtcbiAgICBlbmQgPSB0YXJnZXQubGVuZ3RoIC0gdGFyZ2V0U3RhcnQgKyBzdGFydFxuICB9XG5cbiAgdmFyIGxlbiA9IGVuZCAtIHN0YXJ0XG4gIHZhciBpXG5cbiAgaWYgKHRoaXMgPT09IHRhcmdldCAmJiBzdGFydCA8IHRhcmdldFN0YXJ0ICYmIHRhcmdldFN0YXJ0IDwgZW5kKSB7XG4gICAgLy8gZGVzY2VuZGluZyBjb3B5IGZyb20gZW5kXG4gICAgZm9yIChpID0gbGVuIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgIHRhcmdldFtpICsgdGFyZ2V0U3RhcnRdID0gdGhpc1tpICsgc3RhcnRdXG4gICAgfVxuICB9IGVsc2UgaWYgKGxlbiA8IDEwMDAgfHwgIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgLy8gYXNjZW5kaW5nIGNvcHkgZnJvbSBzdGFydFxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgICAgdGFyZ2V0W2kgKyB0YXJnZXRTdGFydF0gPSB0aGlzW2kgKyBzdGFydF1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgVWludDhBcnJheS5wcm90b3R5cGUuc2V0LmNhbGwoXG4gICAgICB0YXJnZXQsXG4gICAgICB0aGlzLnN1YmFycmF5KHN0YXJ0LCBzdGFydCArIGxlbiksXG4gICAgICB0YXJnZXRTdGFydFxuICAgIClcbiAgfVxuXG4gIHJldHVybiBsZW5cbn1cblxuLy8gVXNhZ2U6XG4vLyAgICBidWZmZXIuZmlsbChudW1iZXJbLCBvZmZzZXRbLCBlbmRdXSlcbi8vICAgIGJ1ZmZlci5maWxsKGJ1ZmZlclssIG9mZnNldFssIGVuZF1dKVxuLy8gICAgYnVmZmVyLmZpbGwoc3RyaW5nWywgb2Zmc2V0WywgZW5kXV1bLCBlbmNvZGluZ10pXG5CdWZmZXIucHJvdG90eXBlLmZpbGwgPSBmdW5jdGlvbiBmaWxsICh2YWwsIHN0YXJ0LCBlbmQsIGVuY29kaW5nKSB7XG4gIC8vIEhhbmRsZSBzdHJpbmcgY2FzZXM6XG4gIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgIGlmICh0eXBlb2Ygc3RhcnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbmNvZGluZyA9IHN0YXJ0XG4gICAgICBzdGFydCA9IDBcbiAgICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZW5kID09PSAnc3RyaW5nJykge1xuICAgICAgZW5jb2RpbmcgPSBlbmRcbiAgICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gICAgfVxuICAgIGlmICh2YWwubGVuZ3RoID09PSAxKSB7XG4gICAgICB2YXIgY29kZSA9IHZhbC5jaGFyQ29kZUF0KDApXG4gICAgICBpZiAoY29kZSA8IDI1Nikge1xuICAgICAgICB2YWwgPSBjb2RlXG4gICAgICB9XG4gICAgfVxuICAgIGlmIChlbmNvZGluZyAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBlbmNvZGluZyAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2VuY29kaW5nIG11c3QgYmUgYSBzdHJpbmcnKVxuICAgIH1cbiAgICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJyAmJiAhQnVmZmVyLmlzRW5jb2RpbmcoZW5jb2RpbmcpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgdmFsID0gdmFsICYgMjU1XG4gIH1cblxuICAvLyBJbnZhbGlkIHJhbmdlcyBhcmUgbm90IHNldCB0byBhIGRlZmF1bHQsIHNvIGNhbiByYW5nZSBjaGVjayBlYXJseS5cbiAgaWYgKHN0YXJ0IDwgMCB8fCB0aGlzLmxlbmd0aCA8IHN0YXJ0IHx8IHRoaXMubGVuZ3RoIDwgZW5kKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ091dCBvZiByYW5nZSBpbmRleCcpXG4gIH1cblxuICBpZiAoZW5kIDw9IHN0YXJ0KSB7XG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIHN0YXJ0ID0gc3RhcnQgPj4+IDBcbiAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyB0aGlzLmxlbmd0aCA6IGVuZCA+Pj4gMFxuXG4gIGlmICghdmFsKSB2YWwgPSAwXG5cbiAgdmFyIGlcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgZm9yIChpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgICAgdGhpc1tpXSA9IHZhbFxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgYnl0ZXMgPSBCdWZmZXIuaXNCdWZmZXIodmFsKVxuICAgICAgPyB2YWxcbiAgICAgIDogdXRmOFRvQnl0ZXMobmV3IEJ1ZmZlcih2YWwsIGVuY29kaW5nKS50b1N0cmluZygpKVxuICAgIHZhciBsZW4gPSBieXRlcy5sZW5ndGhcbiAgICBmb3IgKGkgPSAwOyBpIDwgZW5kIC0gc3RhcnQ7ICsraSkge1xuICAgICAgdGhpc1tpICsgc3RhcnRdID0gYnl0ZXNbaSAlIGxlbl1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpc1xufVxuXG4vLyBIRUxQRVIgRlVOQ1RJT05TXG4vLyA9PT09PT09PT09PT09PT09XG5cbnZhciBJTlZBTElEX0JBU0U2NF9SRSA9IC9bXitcXC8wLTlBLVphLXotX10vZ1xuXG5mdW5jdGlvbiBiYXNlNjRjbGVhbiAoc3RyKSB7XG4gIC8vIE5vZGUgc3RyaXBzIG91dCBpbnZhbGlkIGNoYXJhY3RlcnMgbGlrZSBcXG4gYW5kIFxcdCBmcm9tIHRoZSBzdHJpbmcsIGJhc2U2NC1qcyBkb2VzIG5vdFxuICBzdHIgPSBzdHJpbmd0cmltKHN0cikucmVwbGFjZShJTlZBTElEX0JBU0U2NF9SRSwgJycpXG4gIC8vIE5vZGUgY29udmVydHMgc3RyaW5ncyB3aXRoIGxlbmd0aCA8IDIgdG8gJydcbiAgaWYgKHN0ci5sZW5ndGggPCAyKSByZXR1cm4gJydcbiAgLy8gTm9kZSBhbGxvd3MgZm9yIG5vbi1wYWRkZWQgYmFzZTY0IHN0cmluZ3MgKG1pc3NpbmcgdHJhaWxpbmcgPT09KSwgYmFzZTY0LWpzIGRvZXMgbm90XG4gIHdoaWxlIChzdHIubGVuZ3RoICUgNCAhPT0gMCkge1xuICAgIHN0ciA9IHN0ciArICc9J1xuICB9XG4gIHJldHVybiBzdHJcbn1cblxuZnVuY3Rpb24gc3RyaW5ndHJpbSAoc3RyKSB7XG4gIGlmIChzdHIudHJpbSkgcmV0dXJuIHN0ci50cmltKClcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9eXFxzK3xcXHMrJC9nLCAnJylcbn1cblxuZnVuY3Rpb24gdG9IZXggKG4pIHtcbiAgaWYgKG4gPCAxNikgcmV0dXJuICcwJyArIG4udG9TdHJpbmcoMTYpXG4gIHJldHVybiBuLnRvU3RyaW5nKDE2KVxufVxuXG5mdW5jdGlvbiB1dGY4VG9CeXRlcyAoc3RyaW5nLCB1bml0cykge1xuICB1bml0cyA9IHVuaXRzIHx8IEluZmluaXR5XG4gIHZhciBjb2RlUG9pbnRcbiAgdmFyIGxlbmd0aCA9IHN0cmluZy5sZW5ndGhcbiAgdmFyIGxlYWRTdXJyb2dhdGUgPSBudWxsXG4gIHZhciBieXRlcyA9IFtdXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGNvZGVQb2ludCA9IHN0cmluZy5jaGFyQ29kZUF0KGkpXG5cbiAgICAvLyBpcyBzdXJyb2dhdGUgY29tcG9uZW50XG4gICAgaWYgKGNvZGVQb2ludCA+IDB4RDdGRiAmJiBjb2RlUG9pbnQgPCAweEUwMDApIHtcbiAgICAgIC8vIGxhc3QgY2hhciB3YXMgYSBsZWFkXG4gICAgICBpZiAoIWxlYWRTdXJyb2dhdGUpIHtcbiAgICAgICAgLy8gbm8gbGVhZCB5ZXRcbiAgICAgICAgaWYgKGNvZGVQb2ludCA+IDB4REJGRikge1xuICAgICAgICAgIC8vIHVuZXhwZWN0ZWQgdHJhaWxcbiAgICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9IGVsc2UgaWYgKGkgKyAxID09PSBsZW5ndGgpIHtcbiAgICAgICAgICAvLyB1bnBhaXJlZCBsZWFkXG4gICAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHZhbGlkIGxlYWRcbiAgICAgICAgbGVhZFN1cnJvZ2F0ZSA9IGNvZGVQb2ludFxuXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIC8vIDIgbGVhZHMgaW4gYSByb3dcbiAgICAgIGlmIChjb2RlUG9pbnQgPCAweERDMDApIHtcbiAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgIGxlYWRTdXJyb2dhdGUgPSBjb2RlUG9pbnRcbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgLy8gdmFsaWQgc3Vycm9nYXRlIHBhaXJcbiAgICAgIGNvZGVQb2ludCA9IChsZWFkU3Vycm9nYXRlIC0gMHhEODAwIDw8IDEwIHwgY29kZVBvaW50IC0gMHhEQzAwKSArIDB4MTAwMDBcbiAgICB9IGVsc2UgaWYgKGxlYWRTdXJyb2dhdGUpIHtcbiAgICAgIC8vIHZhbGlkIGJtcCBjaGFyLCBidXQgbGFzdCBjaGFyIHdhcyBhIGxlYWRcbiAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgIH1cblxuICAgIGxlYWRTdXJyb2dhdGUgPSBudWxsXG5cbiAgICAvLyBlbmNvZGUgdXRmOFxuICAgIGlmIChjb2RlUG9pbnQgPCAweDgwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDEpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goY29kZVBvaW50KVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHg4MDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMikgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiB8IDB4QzAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDEwMDAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDMpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweEMgfCAweEUwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2ICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDExMDAwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSA0KSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHgxMiB8IDB4RjAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweEMgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgY29kZSBwb2ludCcpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJ5dGVzXG59XG5cbmZ1bmN0aW9uIGFzY2lpVG9CeXRlcyAoc3RyKSB7XG4gIHZhciBieXRlQXJyYXkgPSBbXVxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkge1xuICAgIC8vIE5vZGUncyBjb2RlIHNlZW1zIHRvIGJlIGRvaW5nIHRoaXMgYW5kIG5vdCAmIDB4N0YuLlxuICAgIGJ5dGVBcnJheS5wdXNoKHN0ci5jaGFyQ29kZUF0KGkpICYgMHhGRilcbiAgfVxuICByZXR1cm4gYnl0ZUFycmF5XG59XG5cbmZ1bmN0aW9uIHV0ZjE2bGVUb0J5dGVzIChzdHIsIHVuaXRzKSB7XG4gIHZhciBjLCBoaSwgbG9cbiAgdmFyIGJ5dGVBcnJheSA9IFtdXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKSB7XG4gICAgaWYgKCh1bml0cyAtPSAyKSA8IDApIGJyZWFrXG5cbiAgICBjID0gc3RyLmNoYXJDb2RlQXQoaSlcbiAgICBoaSA9IGMgPj4gOFxuICAgIGxvID0gYyAlIDI1NlxuICAgIGJ5dGVBcnJheS5wdXNoKGxvKVxuICAgIGJ5dGVBcnJheS5wdXNoKGhpKVxuICB9XG5cbiAgcmV0dXJuIGJ5dGVBcnJheVxufVxuXG5mdW5jdGlvbiBiYXNlNjRUb0J5dGVzIChzdHIpIHtcbiAgcmV0dXJuIGJhc2U2NC50b0J5dGVBcnJheShiYXNlNjRjbGVhbihzdHIpKVxufVxuXG5mdW5jdGlvbiBibGl0QnVmZmVyIChzcmMsIGRzdCwgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGlmICgoaSArIG9mZnNldCA+PSBkc3QubGVuZ3RoKSB8fCAoaSA+PSBzcmMubGVuZ3RoKSkgYnJlYWtcbiAgICBkc3RbaSArIG9mZnNldF0gPSBzcmNbaV1cbiAgfVxuICByZXR1cm4gaVxufVxuXG5mdW5jdGlvbiBpc25hbiAodmFsKSB7XG4gIHJldHVybiB2YWwgIT09IHZhbCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNlbGYtY29tcGFyZVxufVxuIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9jb3JlLnJlZ2V4cC5lc2NhcGUnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLlJlZ0V4cC5lc2NhcGU7IiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG4gIGlmKHR5cGVvZiBpdCAhPSAnZnVuY3Rpb24nKXRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGEgZnVuY3Rpb24hJyk7XG4gIHJldHVybiBpdDtcbn07IiwidmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCwgbXNnKXtcbiAgaWYodHlwZW9mIGl0ICE9ICdudW1iZXInICYmIGNvZihpdCkgIT0gJ051bWJlcicpdGhyb3cgVHlwZUVycm9yKG1zZyk7XG4gIHJldHVybiAraXQ7XG59OyIsIi8vIDIyLjEuMy4zMSBBcnJheS5wcm90b3R5cGVbQEB1bnNjb3BhYmxlc11cbnZhciBVTlNDT1BBQkxFUyA9IHJlcXVpcmUoJy4vX3drcycpKCd1bnNjb3BhYmxlcycpXG4gICwgQXJyYXlQcm90byAgPSBBcnJheS5wcm90b3R5cGU7XG5pZihBcnJheVByb3RvW1VOU0NPUEFCTEVTXSA9PSB1bmRlZmluZWQpcmVxdWlyZSgnLi9faGlkZScpKEFycmF5UHJvdG8sIFVOU0NPUEFCTEVTLCB7fSk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGtleSl7XG4gIEFycmF5UHJvdG9bVU5TQ09QQUJMRVNdW2tleV0gPSB0cnVlO1xufTsiLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0LCBDb25zdHJ1Y3RvciwgbmFtZSwgZm9yYmlkZGVuRmllbGQpe1xuICBpZighKGl0IGluc3RhbmNlb2YgQ29uc3RydWN0b3IpIHx8IChmb3JiaWRkZW5GaWVsZCAhPT0gdW5kZWZpbmVkICYmIGZvcmJpZGRlbkZpZWxkIGluIGl0KSl7XG4gICAgdGhyb3cgVHlwZUVycm9yKG5hbWUgKyAnOiBpbmNvcnJlY3QgaW52b2NhdGlvbiEnKTtcbiAgfSByZXR1cm4gaXQ7XG59OyIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG4gIGlmKCFpc09iamVjdChpdCkpdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYW4gb2JqZWN0IScpO1xuICByZXR1cm4gaXQ7XG59OyIsIi8vIDIyLjEuMy4zIEFycmF5LnByb3RvdHlwZS5jb3B5V2l0aGluKHRhcmdldCwgc3RhcnQsIGVuZCA9IHRoaXMubGVuZ3RoKVxuJ3VzZSBzdHJpY3QnO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0JylcbiAgLCB0b0luZGV4ICA9IHJlcXVpcmUoJy4vX3RvLWluZGV4JylcbiAgLCB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFtdLmNvcHlXaXRoaW4gfHwgZnVuY3Rpb24gY29weVdpdGhpbih0YXJnZXQvKj0gMCovLCBzdGFydC8qPSAwLCBlbmQgPSBAbGVuZ3RoKi8pe1xuICB2YXIgTyAgICAgPSB0b09iamVjdCh0aGlzKVxuICAgICwgbGVuICAgPSB0b0xlbmd0aChPLmxlbmd0aClcbiAgICAsIHRvICAgID0gdG9JbmRleCh0YXJnZXQsIGxlbilcbiAgICAsIGZyb20gID0gdG9JbmRleChzdGFydCwgbGVuKVxuICAgICwgZW5kICAgPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZFxuICAgICwgY291bnQgPSBNYXRoLm1pbigoZW5kID09PSB1bmRlZmluZWQgPyBsZW4gOiB0b0luZGV4KGVuZCwgbGVuKSkgLSBmcm9tLCBsZW4gLSB0bylcbiAgICAsIGluYyAgID0gMTtcbiAgaWYoZnJvbSA8IHRvICYmIHRvIDwgZnJvbSArIGNvdW50KXtcbiAgICBpbmMgID0gLTE7XG4gICAgZnJvbSArPSBjb3VudCAtIDE7XG4gICAgdG8gICArPSBjb3VudCAtIDE7XG4gIH1cbiAgd2hpbGUoY291bnQtLSA+IDApe1xuICAgIGlmKGZyb20gaW4gTylPW3RvXSA9IE9bZnJvbV07XG4gICAgZWxzZSBkZWxldGUgT1t0b107XG4gICAgdG8gICArPSBpbmM7XG4gICAgZnJvbSArPSBpbmM7XG4gIH0gcmV0dXJuIE87XG59OyIsIi8vIDIyLjEuMy42IEFycmF5LnByb3RvdHlwZS5maWxsKHZhbHVlLCBzdGFydCA9IDAsIGVuZCA9IHRoaXMubGVuZ3RoKVxuJ3VzZSBzdHJpY3QnO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0JylcbiAgLCB0b0luZGV4ICA9IHJlcXVpcmUoJy4vX3RvLWluZGV4JylcbiAgLCB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBmaWxsKHZhbHVlIC8qLCBzdGFydCA9IDAsIGVuZCA9IEBsZW5ndGggKi8pe1xuICB2YXIgTyAgICAgID0gdG9PYmplY3QodGhpcylcbiAgICAsIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKVxuICAgICwgYUxlbiAgID0gYXJndW1lbnRzLmxlbmd0aFxuICAgICwgaW5kZXggID0gdG9JbmRleChhTGVuID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgbGVuZ3RoKVxuICAgICwgZW5kICAgID0gYUxlbiA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWRcbiAgICAsIGVuZFBvcyA9IGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogdG9JbmRleChlbmQsIGxlbmd0aCk7XG4gIHdoaWxlKGVuZFBvcyA+IGluZGV4KU9baW5kZXgrK10gPSB2YWx1ZTtcbiAgcmV0dXJuIE87XG59OyIsInZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0ZXIsIElURVJBVE9SKXtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICBmb3JPZihpdGVyLCBmYWxzZSwgcmVzdWx0LnB1c2gsIHJlc3VsdCwgSVRFUkFUT1IpO1xuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsIi8vIGZhbHNlIC0+IEFycmF5I2luZGV4T2Zcbi8vIHRydWUgIC0+IEFycmF5I2luY2x1ZGVzXG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpXG4gICwgdG9MZW5ndGggID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJylcbiAgLCB0b0luZGV4ICAgPSByZXF1aXJlKCcuL190by1pbmRleCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihJU19JTkNMVURFUyl7XG4gIHJldHVybiBmdW5jdGlvbigkdGhpcywgZWwsIGZyb21JbmRleCl7XG4gICAgdmFyIE8gICAgICA9IHRvSU9iamVjdCgkdGhpcylcbiAgICAgICwgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpXG4gICAgICAsIGluZGV4ICA9IHRvSW5kZXgoZnJvbUluZGV4LCBsZW5ndGgpXG4gICAgICAsIHZhbHVlO1xuICAgIC8vIEFycmF5I2luY2x1ZGVzIHVzZXMgU2FtZVZhbHVlWmVybyBlcXVhbGl0eSBhbGdvcml0aG1cbiAgICBpZihJU19JTkNMVURFUyAmJiBlbCAhPSBlbCl3aGlsZShsZW5ndGggPiBpbmRleCl7XG4gICAgICB2YWx1ZSA9IE9baW5kZXgrK107XG4gICAgICBpZih2YWx1ZSAhPSB2YWx1ZSlyZXR1cm4gdHJ1ZTtcbiAgICAvLyBBcnJheSN0b0luZGV4IGlnbm9yZXMgaG9sZXMsIEFycmF5I2luY2x1ZGVzIC0gbm90XG4gICAgfSBlbHNlIGZvcig7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspaWYoSVNfSU5DTFVERVMgfHwgaW5kZXggaW4gTyl7XG4gICAgICBpZihPW2luZGV4XSA9PT0gZWwpcmV0dXJuIElTX0lOQ0xVREVTIHx8IGluZGV4IHx8IDA7XG4gICAgfSByZXR1cm4gIUlTX0lOQ0xVREVTICYmIC0xO1xuICB9O1xufTsiLCIvLyAwIC0+IEFycmF5I2ZvckVhY2hcbi8vIDEgLT4gQXJyYXkjbWFwXG4vLyAyIC0+IEFycmF5I2ZpbHRlclxuLy8gMyAtPiBBcnJheSNzb21lXG4vLyA0IC0+IEFycmF5I2V2ZXJ5XG4vLyA1IC0+IEFycmF5I2ZpbmRcbi8vIDYgLT4gQXJyYXkjZmluZEluZGV4XG52YXIgY3R4ICAgICAgPSByZXF1aXJlKCcuL19jdHgnKVxuICAsIElPYmplY3QgID0gcmVxdWlyZSgnLi9faW9iamVjdCcpXG4gICwgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKVxuICAsIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJylcbiAgLCBhc2MgICAgICA9IHJlcXVpcmUoJy4vX2FycmF5LXNwZWNpZXMtY3JlYXRlJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKFRZUEUsICRjcmVhdGUpe1xuICB2YXIgSVNfTUFQICAgICAgICA9IFRZUEUgPT0gMVxuICAgICwgSVNfRklMVEVSICAgICA9IFRZUEUgPT0gMlxuICAgICwgSVNfU09NRSAgICAgICA9IFRZUEUgPT0gM1xuICAgICwgSVNfRVZFUlkgICAgICA9IFRZUEUgPT0gNFxuICAgICwgSVNfRklORF9JTkRFWCA9IFRZUEUgPT0gNlxuICAgICwgTk9fSE9MRVMgICAgICA9IFRZUEUgPT0gNSB8fCBJU19GSU5EX0lOREVYXG4gICAgLCBjcmVhdGUgICAgICAgID0gJGNyZWF0ZSB8fCBhc2M7XG4gIHJldHVybiBmdW5jdGlvbigkdGhpcywgY2FsbGJhY2tmbiwgdGhhdCl7XG4gICAgdmFyIE8gICAgICA9IHRvT2JqZWN0KCR0aGlzKVxuICAgICAgLCBzZWxmICAgPSBJT2JqZWN0KE8pXG4gICAgICAsIGYgICAgICA9IGN0eChjYWxsYmFja2ZuLCB0aGF0LCAzKVxuICAgICAgLCBsZW5ndGggPSB0b0xlbmd0aChzZWxmLmxlbmd0aClcbiAgICAgICwgaW5kZXggID0gMFxuICAgICAgLCByZXN1bHQgPSBJU19NQVAgPyBjcmVhdGUoJHRoaXMsIGxlbmd0aCkgOiBJU19GSUxURVIgPyBjcmVhdGUoJHRoaXMsIDApIDogdW5kZWZpbmVkXG4gICAgICAsIHZhbCwgcmVzO1xuICAgIGZvcig7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspaWYoTk9fSE9MRVMgfHwgaW5kZXggaW4gc2VsZil7XG4gICAgICB2YWwgPSBzZWxmW2luZGV4XTtcbiAgICAgIHJlcyA9IGYodmFsLCBpbmRleCwgTyk7XG4gICAgICBpZihUWVBFKXtcbiAgICAgICAgaWYoSVNfTUFQKXJlc3VsdFtpbmRleF0gPSByZXM7ICAgICAgICAgICAgLy8gbWFwXG4gICAgICAgIGVsc2UgaWYocmVzKXN3aXRjaChUWVBFKXtcbiAgICAgICAgICBjYXNlIDM6IHJldHVybiB0cnVlOyAgICAgICAgICAgICAgICAgICAgLy8gc29tZVxuICAgICAgICAgIGNhc2UgNTogcmV0dXJuIHZhbDsgICAgICAgICAgICAgICAgICAgICAvLyBmaW5kXG4gICAgICAgICAgY2FzZSA2OiByZXR1cm4gaW5kZXg7ICAgICAgICAgICAgICAgICAgIC8vIGZpbmRJbmRleFxuICAgICAgICAgIGNhc2UgMjogcmVzdWx0LnB1c2godmFsKTsgICAgICAgICAgICAgICAvLyBmaWx0ZXJcbiAgICAgICAgfSBlbHNlIGlmKElTX0VWRVJZKXJldHVybiBmYWxzZTsgICAgICAgICAgLy8gZXZlcnlcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIElTX0ZJTkRfSU5ERVggPyAtMSA6IElTX1NPTUUgfHwgSVNfRVZFUlkgPyBJU19FVkVSWSA6IHJlc3VsdDtcbiAgfTtcbn07IiwidmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKVxuICAsIHRvT2JqZWN0ICA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpXG4gICwgSU9iamVjdCAgID0gcmVxdWlyZSgnLi9faW9iamVjdCcpXG4gICwgdG9MZW5ndGggID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odGhhdCwgY2FsbGJhY2tmbiwgYUxlbiwgbWVtbywgaXNSaWdodCl7XG4gIGFGdW5jdGlvbihjYWxsYmFja2ZuKTtcbiAgdmFyIE8gICAgICA9IHRvT2JqZWN0KHRoYXQpXG4gICAgLCBzZWxmICAgPSBJT2JqZWN0KE8pXG4gICAgLCBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aClcbiAgICAsIGluZGV4ICA9IGlzUmlnaHQgPyBsZW5ndGggLSAxIDogMFxuICAgICwgaSAgICAgID0gaXNSaWdodCA/IC0xIDogMTtcbiAgaWYoYUxlbiA8IDIpZm9yKDs7KXtcbiAgICBpZihpbmRleCBpbiBzZWxmKXtcbiAgICAgIG1lbW8gPSBzZWxmW2luZGV4XTtcbiAgICAgIGluZGV4ICs9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgaW5kZXggKz0gaTtcbiAgICBpZihpc1JpZ2h0ID8gaW5kZXggPCAwIDogbGVuZ3RoIDw9IGluZGV4KXtcbiAgICAgIHRocm93IFR5cGVFcnJvcignUmVkdWNlIG9mIGVtcHR5IGFycmF5IHdpdGggbm8gaW5pdGlhbCB2YWx1ZScpO1xuICAgIH1cbiAgfVxuICBmb3IoO2lzUmlnaHQgPyBpbmRleCA+PSAwIDogbGVuZ3RoID4gaW5kZXg7IGluZGV4ICs9IGkpaWYoaW5kZXggaW4gc2VsZil7XG4gICAgbWVtbyA9IGNhbGxiYWNrZm4obWVtbywgc2VsZltpbmRleF0sIGluZGV4LCBPKTtcbiAgfVxuICByZXR1cm4gbWVtbztcbn07IiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0JylcbiAgLCBpc0FycmF5ICA9IHJlcXVpcmUoJy4vX2lzLWFycmF5JylcbiAgLCBTUEVDSUVTICA9IHJlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob3JpZ2luYWwpe1xuICB2YXIgQztcbiAgaWYoaXNBcnJheShvcmlnaW5hbCkpe1xuICAgIEMgPSBvcmlnaW5hbC5jb25zdHJ1Y3RvcjtcbiAgICAvLyBjcm9zcy1yZWFsbSBmYWxsYmFja1xuICAgIGlmKHR5cGVvZiBDID09ICdmdW5jdGlvbicgJiYgKEMgPT09IEFycmF5IHx8IGlzQXJyYXkoQy5wcm90b3R5cGUpKSlDID0gdW5kZWZpbmVkO1xuICAgIGlmKGlzT2JqZWN0KEMpKXtcbiAgICAgIEMgPSBDW1NQRUNJRVNdO1xuICAgICAgaWYoQyA9PT0gbnVsbClDID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfSByZXR1cm4gQyA9PT0gdW5kZWZpbmVkID8gQXJyYXkgOiBDO1xufTsiLCIvLyA5LjQuMi4zIEFycmF5U3BlY2llc0NyZWF0ZShvcmlnaW5hbEFycmF5LCBsZW5ndGgpXG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9fYXJyYXktc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG9yaWdpbmFsLCBsZW5ndGgpe1xuICByZXR1cm4gbmV3IChzcGVjaWVzQ29uc3RydWN0b3Iob3JpZ2luYWwpKShsZW5ndGgpO1xufTsiLCIndXNlIHN0cmljdCc7XG52YXIgYUZ1bmN0aW9uICA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKVxuICAsIGlzT2JqZWN0ICAgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKVxuICAsIGludm9rZSAgICAgPSByZXF1aXJlKCcuL19pbnZva2UnKVxuICAsIGFycmF5U2xpY2UgPSBbXS5zbGljZVxuICAsIGZhY3RvcmllcyAgPSB7fTtcblxudmFyIGNvbnN0cnVjdCA9IGZ1bmN0aW9uKEYsIGxlbiwgYXJncyl7XG4gIGlmKCEobGVuIGluIGZhY3Rvcmllcykpe1xuICAgIGZvcih2YXIgbiA9IFtdLCBpID0gMDsgaSA8IGxlbjsgaSsrKW5baV0gPSAnYVsnICsgaSArICddJztcbiAgICBmYWN0b3JpZXNbbGVuXSA9IEZ1bmN0aW9uKCdGLGEnLCAncmV0dXJuIG5ldyBGKCcgKyBuLmpvaW4oJywnKSArICcpJyk7XG4gIH0gcmV0dXJuIGZhY3Rvcmllc1tsZW5dKEYsIGFyZ3MpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBGdW5jdGlvbi5iaW5kIHx8IGZ1bmN0aW9uIGJpbmQodGhhdCAvKiwgYXJncy4uLiAqLyl7XG4gIHZhciBmbiAgICAgICA9IGFGdW5jdGlvbih0aGlzKVxuICAgICwgcGFydEFyZ3MgPSBhcnJheVNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgdmFyIGJvdW5kID0gZnVuY3Rpb24oLyogYXJncy4uLiAqLyl7XG4gICAgdmFyIGFyZ3MgPSBwYXJ0QXJncy5jb25jYXQoYXJyYXlTbGljZS5jYWxsKGFyZ3VtZW50cykpO1xuICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgYm91bmQgPyBjb25zdHJ1Y3QoZm4sIGFyZ3MubGVuZ3RoLCBhcmdzKSA6IGludm9rZShmbiwgYXJncywgdGhhdCk7XG4gIH07XG4gIGlmKGlzT2JqZWN0KGZuLnByb3RvdHlwZSkpYm91bmQucHJvdG90eXBlID0gZm4ucHJvdG90eXBlO1xuICByZXR1cm4gYm91bmQ7XG59OyIsIi8vIGdldHRpbmcgdGFnIGZyb20gMTkuMS4zLjYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZygpXG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJylcbiAgLCBUQUcgPSByZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKVxuICAvLyBFUzMgd3JvbmcgaGVyZVxuICAsIEFSRyA9IGNvZihmdW5jdGlvbigpeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpID09ICdBcmd1bWVudHMnO1xuXG4vLyBmYWxsYmFjayBmb3IgSUUxMSBTY3JpcHQgQWNjZXNzIERlbmllZCBlcnJvclxudmFyIHRyeUdldCA9IGZ1bmN0aW9uKGl0LCBrZXkpe1xuICB0cnkge1xuICAgIHJldHVybiBpdFtrZXldO1xuICB9IGNhdGNoKGUpeyAvKiBlbXB0eSAqLyB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgdmFyIE8sIFQsIEI7XG4gIHJldHVybiBpdCA9PT0gdW5kZWZpbmVkID8gJ1VuZGVmaW5lZCcgOiBpdCA9PT0gbnVsbCA/ICdOdWxsJ1xuICAgIC8vIEBAdG9TdHJpbmdUYWcgY2FzZVxuICAgIDogdHlwZW9mIChUID0gdHJ5R2V0KE8gPSBPYmplY3QoaXQpLCBUQUcpKSA9PSAnc3RyaW5nJyA/IFRcbiAgICAvLyBidWlsdGluVGFnIGNhc2VcbiAgICA6IEFSRyA/IGNvZihPKVxuICAgIC8vIEVTMyBhcmd1bWVudHMgZmFsbGJhY2tcbiAgICA6IChCID0gY29mKE8pKSA9PSAnT2JqZWN0JyAmJiB0eXBlb2YgTy5jYWxsZWUgPT0gJ2Z1bmN0aW9uJyA/ICdBcmd1bWVudHMnIDogQjtcbn07IiwidmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChpdCkuc2xpY2UoOCwgLTEpO1xufTsiLCIndXNlIHN0cmljdCc7XG52YXIgZFAgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mXG4gICwgY3JlYXRlICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJylcbiAgLCByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpXG4gICwgY3R4ICAgICAgICAgPSByZXF1aXJlKCcuL19jdHgnKVxuICAsIGFuSW5zdGFuY2UgID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKVxuICAsIGRlZmluZWQgICAgID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpXG4gICwgZm9yT2YgICAgICAgPSByZXF1aXJlKCcuL19mb3Itb2YnKVxuICAsICRpdGVyRGVmaW5lID0gcmVxdWlyZSgnLi9faXRlci1kZWZpbmUnKVxuICAsIHN0ZXAgICAgICAgID0gcmVxdWlyZSgnLi9faXRlci1zdGVwJylcbiAgLCBzZXRTcGVjaWVzICA9IHJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJylcbiAgLCBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJylcbiAgLCBmYXN0S2V5ICAgICA9IHJlcXVpcmUoJy4vX21ldGEnKS5mYXN0S2V5XG4gICwgU0laRSAgICAgICAgPSBERVNDUklQVE9SUyA/ICdfcycgOiAnc2l6ZSc7XG5cbnZhciBnZXRFbnRyeSA9IGZ1bmN0aW9uKHRoYXQsIGtleSl7XG4gIC8vIGZhc3QgY2FzZVxuICB2YXIgaW5kZXggPSBmYXN0S2V5KGtleSksIGVudHJ5O1xuICBpZihpbmRleCAhPT0gJ0YnKXJldHVybiB0aGF0Ll9pW2luZGV4XTtcbiAgLy8gZnJvemVuIG9iamVjdCBjYXNlXG4gIGZvcihlbnRyeSA9IHRoYXQuX2Y7IGVudHJ5OyBlbnRyeSA9IGVudHJ5Lm4pe1xuICAgIGlmKGVudHJ5LmsgPT0ga2V5KXJldHVybiBlbnRyeTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGdldENvbnN0cnVjdG9yOiBmdW5jdGlvbih3cmFwcGVyLCBOQU1FLCBJU19NQVAsIEFEREVSKXtcbiAgICB2YXIgQyA9IHdyYXBwZXIoZnVuY3Rpb24odGhhdCwgaXRlcmFibGUpe1xuICAgICAgYW5JbnN0YW5jZSh0aGF0LCBDLCBOQU1FLCAnX2knKTtcbiAgICAgIHRoYXQuX2kgPSBjcmVhdGUobnVsbCk7IC8vIGluZGV4XG4gICAgICB0aGF0Ll9mID0gdW5kZWZpbmVkOyAgICAvLyBmaXJzdCBlbnRyeVxuICAgICAgdGhhdC5fbCA9IHVuZGVmaW5lZDsgICAgLy8gbGFzdCBlbnRyeVxuICAgICAgdGhhdFtTSVpFXSA9IDA7ICAgICAgICAgLy8gc2l6ZVxuICAgICAgaWYoaXRlcmFibGUgIT0gdW5kZWZpbmVkKWZvck9mKGl0ZXJhYmxlLCBJU19NQVAsIHRoYXRbQURERVJdLCB0aGF0KTtcbiAgICB9KTtcbiAgICByZWRlZmluZUFsbChDLnByb3RvdHlwZSwge1xuICAgICAgLy8gMjMuMS4zLjEgTWFwLnByb3RvdHlwZS5jbGVhcigpXG4gICAgICAvLyAyMy4yLjMuMiBTZXQucHJvdG90eXBlLmNsZWFyKClcbiAgICAgIGNsZWFyOiBmdW5jdGlvbiBjbGVhcigpe1xuICAgICAgICBmb3IodmFyIHRoYXQgPSB0aGlzLCBkYXRhID0gdGhhdC5faSwgZW50cnkgPSB0aGF0Ll9mOyBlbnRyeTsgZW50cnkgPSBlbnRyeS5uKXtcbiAgICAgICAgICBlbnRyeS5yID0gdHJ1ZTtcbiAgICAgICAgICBpZihlbnRyeS5wKWVudHJ5LnAgPSBlbnRyeS5wLm4gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgZGVsZXRlIGRhdGFbZW50cnkuaV07XG4gICAgICAgIH1cbiAgICAgICAgdGhhdC5fZiA9IHRoYXQuX2wgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoYXRbU0laRV0gPSAwO1xuICAgICAgfSxcbiAgICAgIC8vIDIzLjEuMy4zIE1hcC5wcm90b3R5cGUuZGVsZXRlKGtleSlcbiAgICAgIC8vIDIzLjIuMy40IFNldC5wcm90b3R5cGUuZGVsZXRlKHZhbHVlKVxuICAgICAgJ2RlbGV0ZSc6IGZ1bmN0aW9uKGtleSl7XG4gICAgICAgIHZhciB0aGF0ICA9IHRoaXNcbiAgICAgICAgICAsIGVudHJ5ID0gZ2V0RW50cnkodGhhdCwga2V5KTtcbiAgICAgICAgaWYoZW50cnkpe1xuICAgICAgICAgIHZhciBuZXh0ID0gZW50cnkublxuICAgICAgICAgICAgLCBwcmV2ID0gZW50cnkucDtcbiAgICAgICAgICBkZWxldGUgdGhhdC5faVtlbnRyeS5pXTtcbiAgICAgICAgICBlbnRyeS5yID0gdHJ1ZTtcbiAgICAgICAgICBpZihwcmV2KXByZXYubiA9IG5leHQ7XG4gICAgICAgICAgaWYobmV4dCluZXh0LnAgPSBwcmV2O1xuICAgICAgICAgIGlmKHRoYXQuX2YgPT0gZW50cnkpdGhhdC5fZiA9IG5leHQ7XG4gICAgICAgICAgaWYodGhhdC5fbCA9PSBlbnRyeSl0aGF0Ll9sID0gcHJldjtcbiAgICAgICAgICB0aGF0W1NJWkVdLS07XG4gICAgICAgIH0gcmV0dXJuICEhZW50cnk7XG4gICAgICB9LFxuICAgICAgLy8gMjMuMi4zLjYgU2V0LnByb3RvdHlwZS5mb3JFYWNoKGNhbGxiYWNrZm4sIHRoaXNBcmcgPSB1bmRlZmluZWQpXG4gICAgICAvLyAyMy4xLjMuNSBNYXAucHJvdG90eXBlLmZvckVhY2goY2FsbGJhY2tmbiwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbiAgICAgIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2tmbiAvKiwgdGhhdCA9IHVuZGVmaW5lZCAqLyl7XG4gICAgICAgIGFuSW5zdGFuY2UodGhpcywgQywgJ2ZvckVhY2gnKTtcbiAgICAgICAgdmFyIGYgPSBjdHgoY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIDMpXG4gICAgICAgICAgLCBlbnRyeTtcbiAgICAgICAgd2hpbGUoZW50cnkgPSBlbnRyeSA/IGVudHJ5Lm4gOiB0aGlzLl9mKXtcbiAgICAgICAgICBmKGVudHJ5LnYsIGVudHJ5LmssIHRoaXMpO1xuICAgICAgICAgIC8vIHJldmVydCB0byB0aGUgbGFzdCBleGlzdGluZyBlbnRyeVxuICAgICAgICAgIHdoaWxlKGVudHJ5ICYmIGVudHJ5LnIpZW50cnkgPSBlbnRyeS5wO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgLy8gMjMuMS4zLjcgTWFwLnByb3RvdHlwZS5oYXMoa2V5KVxuICAgICAgLy8gMjMuMi4zLjcgU2V0LnByb3RvdHlwZS5oYXModmFsdWUpXG4gICAgICBoYXM6IGZ1bmN0aW9uIGhhcyhrZXkpe1xuICAgICAgICByZXR1cm4gISFnZXRFbnRyeSh0aGlzLCBrZXkpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGlmKERFU0NSSVBUT1JTKWRQKEMucHJvdG90eXBlLCAnc2l6ZScsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKXtcbiAgICAgICAgcmV0dXJuIGRlZmluZWQodGhpc1tTSVpFXSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIEM7XG4gIH0sXG4gIGRlZjogZnVuY3Rpb24odGhhdCwga2V5LCB2YWx1ZSl7XG4gICAgdmFyIGVudHJ5ID0gZ2V0RW50cnkodGhhdCwga2V5KVxuICAgICAgLCBwcmV2LCBpbmRleDtcbiAgICAvLyBjaGFuZ2UgZXhpc3RpbmcgZW50cnlcbiAgICBpZihlbnRyeSl7XG4gICAgICBlbnRyeS52ID0gdmFsdWU7XG4gICAgLy8gY3JlYXRlIG5ldyBlbnRyeVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGF0Ll9sID0gZW50cnkgPSB7XG4gICAgICAgIGk6IGluZGV4ID0gZmFzdEtleShrZXksIHRydWUpLCAvLyA8LSBpbmRleFxuICAgICAgICBrOiBrZXksICAgICAgICAgICAgICAgICAgICAgICAgLy8gPC0ga2V5XG4gICAgICAgIHY6IHZhbHVlLCAgICAgICAgICAgICAgICAgICAgICAvLyA8LSB2YWx1ZVxuICAgICAgICBwOiBwcmV2ID0gdGhhdC5fbCwgICAgICAgICAgICAgLy8gPC0gcHJldmlvdXMgZW50cnlcbiAgICAgICAgbjogdW5kZWZpbmVkLCAgICAgICAgICAgICAgICAgIC8vIDwtIG5leHQgZW50cnlcbiAgICAgICAgcjogZmFsc2UgICAgICAgICAgICAgICAgICAgICAgIC8vIDwtIHJlbW92ZWRcbiAgICAgIH07XG4gICAgICBpZighdGhhdC5fZil0aGF0Ll9mID0gZW50cnk7XG4gICAgICBpZihwcmV2KXByZXYubiA9IGVudHJ5O1xuICAgICAgdGhhdFtTSVpFXSsrO1xuICAgICAgLy8gYWRkIHRvIGluZGV4XG4gICAgICBpZihpbmRleCAhPT0gJ0YnKXRoYXQuX2lbaW5kZXhdID0gZW50cnk7XG4gICAgfSByZXR1cm4gdGhhdDtcbiAgfSxcbiAgZ2V0RW50cnk6IGdldEVudHJ5LFxuICBzZXRTdHJvbmc6IGZ1bmN0aW9uKEMsIE5BTUUsIElTX01BUCl7XG4gICAgLy8gYWRkIC5rZXlzLCAudmFsdWVzLCAuZW50cmllcywgW0BAaXRlcmF0b3JdXG4gICAgLy8gMjMuMS4zLjQsIDIzLjEuMy44LCAyMy4xLjMuMTEsIDIzLjEuMy4xMiwgMjMuMi4zLjUsIDIzLjIuMy44LCAyMy4yLjMuMTAsIDIzLjIuMy4xMVxuICAgICRpdGVyRGVmaW5lKEMsIE5BTUUsIGZ1bmN0aW9uKGl0ZXJhdGVkLCBraW5kKXtcbiAgICAgIHRoaXMuX3QgPSBpdGVyYXRlZDsgIC8vIHRhcmdldFxuICAgICAgdGhpcy5fayA9IGtpbmQ7ICAgICAgLy8ga2luZFxuICAgICAgdGhpcy5fbCA9IHVuZGVmaW5lZDsgLy8gcHJldmlvdXNcbiAgICB9LCBmdW5jdGlvbigpe1xuICAgICAgdmFyIHRoYXQgID0gdGhpc1xuICAgICAgICAsIGtpbmQgID0gdGhhdC5fa1xuICAgICAgICAsIGVudHJ5ID0gdGhhdC5fbDtcbiAgICAgIC8vIHJldmVydCB0byB0aGUgbGFzdCBleGlzdGluZyBlbnRyeVxuICAgICAgd2hpbGUoZW50cnkgJiYgZW50cnkucillbnRyeSA9IGVudHJ5LnA7XG4gICAgICAvLyBnZXQgbmV4dCBlbnRyeVxuICAgICAgaWYoIXRoYXQuX3QgfHwgISh0aGF0Ll9sID0gZW50cnkgPSBlbnRyeSA/IGVudHJ5Lm4gOiB0aGF0Ll90Ll9mKSl7XG4gICAgICAgIC8vIG9yIGZpbmlzaCB0aGUgaXRlcmF0aW9uXG4gICAgICAgIHRoYXQuX3QgPSB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiBzdGVwKDEpO1xuICAgICAgfVxuICAgICAgLy8gcmV0dXJuIHN0ZXAgYnkga2luZFxuICAgICAgaWYoa2luZCA9PSAna2V5cycgIClyZXR1cm4gc3RlcCgwLCBlbnRyeS5rKTtcbiAgICAgIGlmKGtpbmQgPT0gJ3ZhbHVlcycpcmV0dXJuIHN0ZXAoMCwgZW50cnkudik7XG4gICAgICByZXR1cm4gc3RlcCgwLCBbZW50cnkuaywgZW50cnkudl0pO1xuICAgIH0sIElTX01BUCA/ICdlbnRyaWVzJyA6ICd2YWx1ZXMnICwgIUlTX01BUCwgdHJ1ZSk7XG5cbiAgICAvLyBhZGQgW0BAc3BlY2llc10sIDIzLjEuMi4yLCAyMy4yLjIuMlxuICAgIHNldFNwZWNpZXMoTkFNRSk7XG4gIH1cbn07IiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL0RhdmlkQnJ1YW50L01hcC1TZXQucHJvdG90eXBlLnRvSlNPTlxudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJylcbiAgLCBmcm9tICAgID0gcmVxdWlyZSgnLi9fYXJyYXktZnJvbS1pdGVyYWJsZScpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihOQU1FKXtcbiAgcmV0dXJuIGZ1bmN0aW9uIHRvSlNPTigpe1xuICAgIGlmKGNsYXNzb2YodGhpcykgIT0gTkFNRSl0aHJvdyBUeXBlRXJyb3IoTkFNRSArIFwiI3RvSlNPTiBpc24ndCBnZW5lcmljXCIpO1xuICAgIHJldHVybiBmcm9tKHRoaXMpO1xuICB9O1xufTsiLCIndXNlIHN0cmljdCc7XG52YXIgcmVkZWZpbmVBbGwgICAgICAgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKVxuICAsIGdldFdlYWsgICAgICAgICAgID0gcmVxdWlyZSgnLi9fbWV0YScpLmdldFdlYWtcbiAgLCBhbk9iamVjdCAgICAgICAgICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpXG4gICwgaXNPYmplY3QgICAgICAgICAgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKVxuICAsIGFuSW5zdGFuY2UgICAgICAgID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKVxuICAsIGZvck9mICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fZm9yLW9mJylcbiAgLCBjcmVhdGVBcnJheU1ldGhvZCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKVxuICAsICRoYXMgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9faGFzJylcbiAgLCBhcnJheUZpbmQgICAgICAgICA9IGNyZWF0ZUFycmF5TWV0aG9kKDUpXG4gICwgYXJyYXlGaW5kSW5kZXggICAgPSBjcmVhdGVBcnJheU1ldGhvZCg2KVxuICAsIGlkICAgICAgICAgICAgICAgID0gMDtcblxuLy8gZmFsbGJhY2sgZm9yIHVuY2F1Z2h0IGZyb3plbiBrZXlzXG52YXIgdW5jYXVnaHRGcm96ZW5TdG9yZSA9IGZ1bmN0aW9uKHRoYXQpe1xuICByZXR1cm4gdGhhdC5fbCB8fCAodGhhdC5fbCA9IG5ldyBVbmNhdWdodEZyb3plblN0b3JlKTtcbn07XG52YXIgVW5jYXVnaHRGcm96ZW5TdG9yZSA9IGZ1bmN0aW9uKCl7XG4gIHRoaXMuYSA9IFtdO1xufTtcbnZhciBmaW5kVW5jYXVnaHRGcm96ZW4gPSBmdW5jdGlvbihzdG9yZSwga2V5KXtcbiAgcmV0dXJuIGFycmF5RmluZChzdG9yZS5hLCBmdW5jdGlvbihpdCl7XG4gICAgcmV0dXJuIGl0WzBdID09PSBrZXk7XG4gIH0pO1xufTtcblVuY2F1Z2h0RnJvemVuU3RvcmUucHJvdG90eXBlID0ge1xuICBnZXQ6IGZ1bmN0aW9uKGtleSl7XG4gICAgdmFyIGVudHJ5ID0gZmluZFVuY2F1Z2h0RnJvemVuKHRoaXMsIGtleSk7XG4gICAgaWYoZW50cnkpcmV0dXJuIGVudHJ5WzFdO1xuICB9LFxuICBoYXM6IGZ1bmN0aW9uKGtleSl7XG4gICAgcmV0dXJuICEhZmluZFVuY2F1Z2h0RnJvemVuKHRoaXMsIGtleSk7XG4gIH0sXG4gIHNldDogZnVuY3Rpb24oa2V5LCB2YWx1ZSl7XG4gICAgdmFyIGVudHJ5ID0gZmluZFVuY2F1Z2h0RnJvemVuKHRoaXMsIGtleSk7XG4gICAgaWYoZW50cnkpZW50cnlbMV0gPSB2YWx1ZTtcbiAgICBlbHNlIHRoaXMuYS5wdXNoKFtrZXksIHZhbHVlXSk7XG4gIH0sXG4gICdkZWxldGUnOiBmdW5jdGlvbihrZXkpe1xuICAgIHZhciBpbmRleCA9IGFycmF5RmluZEluZGV4KHRoaXMuYSwgZnVuY3Rpb24oaXQpe1xuICAgICAgcmV0dXJuIGl0WzBdID09PSBrZXk7XG4gICAgfSk7XG4gICAgaWYofmluZGV4KXRoaXMuYS5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIHJldHVybiAhIX5pbmRleDtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGdldENvbnN0cnVjdG9yOiBmdW5jdGlvbih3cmFwcGVyLCBOQU1FLCBJU19NQVAsIEFEREVSKXtcbiAgICB2YXIgQyA9IHdyYXBwZXIoZnVuY3Rpb24odGhhdCwgaXRlcmFibGUpe1xuICAgICAgYW5JbnN0YW5jZSh0aGF0LCBDLCBOQU1FLCAnX2knKTtcbiAgICAgIHRoYXQuX2kgPSBpZCsrOyAgICAgIC8vIGNvbGxlY3Rpb24gaWRcbiAgICAgIHRoYXQuX2wgPSB1bmRlZmluZWQ7IC8vIGxlYWsgc3RvcmUgZm9yIHVuY2F1Z2h0IGZyb3plbiBvYmplY3RzXG4gICAgICBpZihpdGVyYWJsZSAhPSB1bmRlZmluZWQpZm9yT2YoaXRlcmFibGUsIElTX01BUCwgdGhhdFtBRERFUl0sIHRoYXQpO1xuICAgIH0pO1xuICAgIHJlZGVmaW5lQWxsKEMucHJvdG90eXBlLCB7XG4gICAgICAvLyAyMy4zLjMuMiBXZWFrTWFwLnByb3RvdHlwZS5kZWxldGUoa2V5KVxuICAgICAgLy8gMjMuNC4zLjMgV2Vha1NldC5wcm90b3R5cGUuZGVsZXRlKHZhbHVlKVxuICAgICAgJ2RlbGV0ZSc6IGZ1bmN0aW9uKGtleSl7XG4gICAgICAgIGlmKCFpc09iamVjdChrZXkpKXJldHVybiBmYWxzZTtcbiAgICAgICAgdmFyIGRhdGEgPSBnZXRXZWFrKGtleSk7XG4gICAgICAgIGlmKGRhdGEgPT09IHRydWUpcmV0dXJuIHVuY2F1Z2h0RnJvemVuU3RvcmUodGhpcylbJ2RlbGV0ZSddKGtleSk7XG4gICAgICAgIHJldHVybiBkYXRhICYmICRoYXMoZGF0YSwgdGhpcy5faSkgJiYgZGVsZXRlIGRhdGFbdGhpcy5faV07XG4gICAgICB9LFxuICAgICAgLy8gMjMuMy4zLjQgV2Vha01hcC5wcm90b3R5cGUuaGFzKGtleSlcbiAgICAgIC8vIDIzLjQuMy40IFdlYWtTZXQucHJvdG90eXBlLmhhcyh2YWx1ZSlcbiAgICAgIGhhczogZnVuY3Rpb24gaGFzKGtleSl7XG4gICAgICAgIGlmKCFpc09iamVjdChrZXkpKXJldHVybiBmYWxzZTtcbiAgICAgICAgdmFyIGRhdGEgPSBnZXRXZWFrKGtleSk7XG4gICAgICAgIGlmKGRhdGEgPT09IHRydWUpcmV0dXJuIHVuY2F1Z2h0RnJvemVuU3RvcmUodGhpcykuaGFzKGtleSk7XG4gICAgICAgIHJldHVybiBkYXRhICYmICRoYXMoZGF0YSwgdGhpcy5faSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIEM7XG4gIH0sXG4gIGRlZjogZnVuY3Rpb24odGhhdCwga2V5LCB2YWx1ZSl7XG4gICAgdmFyIGRhdGEgPSBnZXRXZWFrKGFuT2JqZWN0KGtleSksIHRydWUpO1xuICAgIGlmKGRhdGEgPT09IHRydWUpdW5jYXVnaHRGcm96ZW5TdG9yZSh0aGF0KS5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgZWxzZSBkYXRhW3RoYXQuX2ldID0gdmFsdWU7XG4gICAgcmV0dXJuIHRoYXQ7XG4gIH0sXG4gIHVmc3RvcmU6IHVuY2F1Z2h0RnJvemVuU3RvcmVcbn07IiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fZ2xvYmFsJylcbiAgLCAkZXhwb3J0ICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgcmVkZWZpbmUgICAgICAgICAgPSByZXF1aXJlKCcuL19yZWRlZmluZScpXG4gICwgcmVkZWZpbmVBbGwgICAgICAgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKVxuICAsIG1ldGEgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fbWV0YScpXG4gICwgZm9yT2YgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19mb3Itb2YnKVxuICAsIGFuSW5zdGFuY2UgICAgICAgID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKVxuICAsIGlzT2JqZWN0ICAgICAgICAgID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0JylcbiAgLCBmYWlscyAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2ZhaWxzJylcbiAgLCAkaXRlckRldGVjdCAgICAgICA9IHJlcXVpcmUoJy4vX2l0ZXItZGV0ZWN0JylcbiAgLCBzZXRUb1N0cmluZ1RhZyAgICA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJylcbiAgLCBpbmhlcml0SWZSZXF1aXJlZCA9IHJlcXVpcmUoJy4vX2luaGVyaXQtaWYtcmVxdWlyZWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihOQU1FLCB3cmFwcGVyLCBtZXRob2RzLCBjb21tb24sIElTX01BUCwgSVNfV0VBSyl7XG4gIHZhciBCYXNlICA9IGdsb2JhbFtOQU1FXVxuICAgICwgQyAgICAgPSBCYXNlXG4gICAgLCBBRERFUiA9IElTX01BUCA/ICdzZXQnIDogJ2FkZCdcbiAgICAsIHByb3RvID0gQyAmJiBDLnByb3RvdHlwZVxuICAgICwgTyAgICAgPSB7fTtcbiAgdmFyIGZpeE1ldGhvZCA9IGZ1bmN0aW9uKEtFWSl7XG4gICAgdmFyIGZuID0gcHJvdG9bS0VZXTtcbiAgICByZWRlZmluZShwcm90bywgS0VZLFxuICAgICAgS0VZID09ICdkZWxldGUnID8gZnVuY3Rpb24oYSl7XG4gICAgICAgIHJldHVybiBJU19XRUFLICYmICFpc09iamVjdChhKSA/IGZhbHNlIDogZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEpO1xuICAgICAgfSA6IEtFWSA9PSAnaGFzJyA/IGZ1bmN0aW9uIGhhcyhhKXtcbiAgICAgICAgcmV0dXJuIElTX1dFQUsgJiYgIWlzT2JqZWN0KGEpID8gZmFsc2UgOiBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSk7XG4gICAgICB9IDogS0VZID09ICdnZXQnID8gZnVuY3Rpb24gZ2V0KGEpe1xuICAgICAgICByZXR1cm4gSVNfV0VBSyAmJiAhaXNPYmplY3QoYSkgPyB1bmRlZmluZWQgOiBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSk7XG4gICAgICB9IDogS0VZID09ICdhZGQnID8gZnVuY3Rpb24gYWRkKGEpeyBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSk7IHJldHVybiB0aGlzOyB9XG4gICAgICAgIDogZnVuY3Rpb24gc2V0KGEsIGIpeyBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSwgYik7IHJldHVybiB0aGlzOyB9XG4gICAgKTtcbiAgfTtcbiAgaWYodHlwZW9mIEMgIT0gJ2Z1bmN0aW9uJyB8fCAhKElTX1dFQUsgfHwgcHJvdG8uZm9yRWFjaCAmJiAhZmFpbHMoZnVuY3Rpb24oKXtcbiAgICBuZXcgQygpLmVudHJpZXMoKS5uZXh0KCk7XG4gIH0pKSl7XG4gICAgLy8gY3JlYXRlIGNvbGxlY3Rpb24gY29uc3RydWN0b3JcbiAgICBDID0gY29tbW9uLmdldENvbnN0cnVjdG9yKHdyYXBwZXIsIE5BTUUsIElTX01BUCwgQURERVIpO1xuICAgIHJlZGVmaW5lQWxsKEMucHJvdG90eXBlLCBtZXRob2RzKTtcbiAgICBtZXRhLk5FRUQgPSB0cnVlO1xuICB9IGVsc2Uge1xuICAgIHZhciBpbnN0YW5jZSAgICAgICAgICAgICA9IG5ldyBDXG4gICAgICAvLyBlYXJseSBpbXBsZW1lbnRhdGlvbnMgbm90IHN1cHBvcnRzIGNoYWluaW5nXG4gICAgICAsIEhBU05UX0NIQUlOSU5HICAgICAgID0gaW5zdGFuY2VbQURERVJdKElTX1dFQUsgPyB7fSA6IC0wLCAxKSAhPSBpbnN0YW5jZVxuICAgICAgLy8gVjggfiAgQ2hyb21pdW0gNDAtIHdlYWstY29sbGVjdGlvbnMgdGhyb3dzIG9uIHByaW1pdGl2ZXMsIGJ1dCBzaG91bGQgcmV0dXJuIGZhbHNlXG4gICAgICAsIFRIUk9XU19PTl9QUklNSVRJVkVTID0gZmFpbHMoZnVuY3Rpb24oKXsgaW5zdGFuY2UuaGFzKDEpOyB9KVxuICAgICAgLy8gbW9zdCBlYXJseSBpbXBsZW1lbnRhdGlvbnMgZG9lc24ndCBzdXBwb3J0cyBpdGVyYWJsZXMsIG1vc3QgbW9kZXJuIC0gbm90IGNsb3NlIGl0IGNvcnJlY3RseVxuICAgICAgLCBBQ0NFUFRfSVRFUkFCTEVTICAgICA9ICRpdGVyRGV0ZWN0KGZ1bmN0aW9uKGl0ZXIpeyBuZXcgQyhpdGVyKTsgfSkgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICAgIC8vIGZvciBlYXJseSBpbXBsZW1lbnRhdGlvbnMgLTAgYW5kICswIG5vdCB0aGUgc2FtZVxuICAgICAgLCBCVUdHWV9aRVJPID0gIUlTX1dFQUsgJiYgZmFpbHMoZnVuY3Rpb24oKXtcbiAgICAgICAgLy8gVjggfiBDaHJvbWl1bSA0Mi0gZmFpbHMgb25seSB3aXRoIDUrIGVsZW1lbnRzXG4gICAgICAgIHZhciAkaW5zdGFuY2UgPSBuZXcgQygpXG4gICAgICAgICAgLCBpbmRleCAgICAgPSA1O1xuICAgICAgICB3aGlsZShpbmRleC0tKSRpbnN0YW5jZVtBRERFUl0oaW5kZXgsIGluZGV4KTtcbiAgICAgICAgcmV0dXJuICEkaW5zdGFuY2UuaGFzKC0wKTtcbiAgICAgIH0pO1xuICAgIGlmKCFBQ0NFUFRfSVRFUkFCTEVTKXsgXG4gICAgICBDID0gd3JhcHBlcihmdW5jdGlvbih0YXJnZXQsIGl0ZXJhYmxlKXtcbiAgICAgICAgYW5JbnN0YW5jZSh0YXJnZXQsIEMsIE5BTUUpO1xuICAgICAgICB2YXIgdGhhdCA9IGluaGVyaXRJZlJlcXVpcmVkKG5ldyBCYXNlLCB0YXJnZXQsIEMpO1xuICAgICAgICBpZihpdGVyYWJsZSAhPSB1bmRlZmluZWQpZm9yT2YoaXRlcmFibGUsIElTX01BUCwgdGhhdFtBRERFUl0sIHRoYXQpO1xuICAgICAgICByZXR1cm4gdGhhdDtcbiAgICAgIH0pO1xuICAgICAgQy5wcm90b3R5cGUgPSBwcm90bztcbiAgICAgIHByb3RvLmNvbnN0cnVjdG9yID0gQztcbiAgICB9XG4gICAgaWYoVEhST1dTX09OX1BSSU1JVElWRVMgfHwgQlVHR1lfWkVSTyl7XG4gICAgICBmaXhNZXRob2QoJ2RlbGV0ZScpO1xuICAgICAgZml4TWV0aG9kKCdoYXMnKTtcbiAgICAgIElTX01BUCAmJiBmaXhNZXRob2QoJ2dldCcpO1xuICAgIH1cbiAgICBpZihCVUdHWV9aRVJPIHx8IEhBU05UX0NIQUlOSU5HKWZpeE1ldGhvZChBRERFUik7XG4gICAgLy8gd2VhayBjb2xsZWN0aW9ucyBzaG91bGQgbm90IGNvbnRhaW5zIC5jbGVhciBtZXRob2RcbiAgICBpZihJU19XRUFLICYmIHByb3RvLmNsZWFyKWRlbGV0ZSBwcm90by5jbGVhcjtcbiAgfVxuXG4gIHNldFRvU3RyaW5nVGFnKEMsIE5BTUUpO1xuXG4gIE9bTkFNRV0gPSBDO1xuICAkZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqIChDICE9IEJhc2UpLCBPKTtcblxuICBpZighSVNfV0VBSyljb21tb24uc2V0U3Ryb25nKEMsIE5BTUUsIElTX01BUCk7XG5cbiAgcmV0dXJuIEM7XG59OyIsInZhciBjb3JlID0gbW9kdWxlLmV4cG9ydHMgPSB7dmVyc2lvbjogJzIuNC4wJ307XG5pZih0eXBlb2YgX19lID09ICdudW1iZXInKV9fZSA9IGNvcmU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWYiLCIndXNlIHN0cmljdCc7XG52YXIgJGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJylcbiAgLCBjcmVhdGVEZXNjICAgICAgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob2JqZWN0LCBpbmRleCwgdmFsdWUpe1xuICBpZihpbmRleCBpbiBvYmplY3QpJGRlZmluZVByb3BlcnR5LmYob2JqZWN0LCBpbmRleCwgY3JlYXRlRGVzYygwLCB2YWx1ZSkpO1xuICBlbHNlIG9iamVjdFtpbmRleF0gPSB2YWx1ZTtcbn07IiwiLy8gb3B0aW9uYWwgLyBzaW1wbGUgY29udGV4dCBiaW5kaW5nXG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihmbiwgdGhhdCwgbGVuZ3RoKXtcbiAgYUZ1bmN0aW9uKGZuKTtcbiAgaWYodGhhdCA9PT0gdW5kZWZpbmVkKXJldHVybiBmbjtcbiAgc3dpdGNoKGxlbmd0aCl7XG4gICAgY2FzZSAxOiByZXR1cm4gZnVuY3Rpb24oYSl7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhKTtcbiAgICB9O1xuICAgIGNhc2UgMjogcmV0dXJuIGZ1bmN0aW9uKGEsIGIpe1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYik7XG4gICAgfTtcbiAgICBjYXNlIDM6IHJldHVybiBmdW5jdGlvbihhLCBiLCBjKXtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIsIGMpO1xuICAgIH07XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uKC8qIC4uLmFyZ3MgKi8pe1xuICAgIHJldHVybiBmbi5hcHBseSh0aGF0LCBhcmd1bWVudHMpO1xuICB9O1xufTsiLCIndXNlIHN0cmljdCc7XG52YXIgYW5PYmplY3QgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKVxuICAsIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJylcbiAgLCBOVU1CRVIgICAgICA9ICdudW1iZXInO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGhpbnQpe1xuICBpZihoaW50ICE9PSAnc3RyaW5nJyAmJiBoaW50ICE9PSBOVU1CRVIgJiYgaGludCAhPT0gJ2RlZmF1bHQnKXRocm93IFR5cGVFcnJvcignSW5jb3JyZWN0IGhpbnQnKTtcbiAgcmV0dXJuIHRvUHJpbWl0aXZlKGFuT2JqZWN0KHRoaXMpLCBoaW50ICE9IE5VTUJFUik7XG59OyIsIi8vIDcuMi4xIFJlcXVpcmVPYmplY3RDb2VyY2libGUoYXJndW1lbnQpXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgaWYoaXQgPT0gdW5kZWZpbmVkKXRocm93IFR5cGVFcnJvcihcIkNhbid0IGNhbGwgbWV0aG9kIG9uICBcIiArIGl0KTtcbiAgcmV0dXJuIGl0O1xufTsiLCIvLyBUaGFuaydzIElFOCBmb3IgaGlzIGZ1bm55IGRlZmluZVByb3BlcnR5XG5tb2R1bGUuZXhwb3J0cyA9ICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uKCl7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICdhJywge2dldDogZnVuY3Rpb24oKXsgcmV0dXJuIDc7IH19KS5hICE9IDc7XG59KTsiLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKVxuICAsIGRvY3VtZW50ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuZG9jdW1lbnRcbiAgLy8gaW4gb2xkIElFIHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50IGlzICdvYmplY3QnXG4gICwgaXMgPSBpc09iamVjdChkb2N1bWVudCkgJiYgaXNPYmplY3QoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIGlzID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChpdCkgOiB7fTtcbn07IiwiLy8gSUUgOC0gZG9uJ3QgZW51bSBidWcga2V5c1xubW9kdWxlLmV4cG9ydHMgPSAoXG4gICdjb25zdHJ1Y3RvcixoYXNPd25Qcm9wZXJ0eSxpc1Byb3RvdHlwZU9mLHByb3BlcnR5SXNFbnVtZXJhYmxlLHRvTG9jYWxlU3RyaW5nLHRvU3RyaW5nLHZhbHVlT2YnXG4pLnNwbGl0KCcsJyk7IiwiLy8gYWxsIGVudW1lcmFibGUgb2JqZWN0IGtleXMsIGluY2x1ZGVzIHN5bWJvbHNcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKVxuICAsIGdPUFMgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpXG4gICwgcElFICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuICB2YXIgcmVzdWx0ICAgICA9IGdldEtleXMoaXQpXG4gICAgLCBnZXRTeW1ib2xzID0gZ09QUy5mO1xuICBpZihnZXRTeW1ib2xzKXtcbiAgICB2YXIgc3ltYm9scyA9IGdldFN5bWJvbHMoaXQpXG4gICAgICAsIGlzRW51bSAgPSBwSUUuZlxuICAgICAgLCBpICAgICAgID0gMFxuICAgICAgLCBrZXk7XG4gICAgd2hpbGUoc3ltYm9scy5sZW5ndGggPiBpKWlmKGlzRW51bS5jYWxsKGl0LCBrZXkgPSBzeW1ib2xzW2krK10pKXJlc3VsdC5wdXNoKGtleSk7XG4gIH0gcmV0dXJuIHJlc3VsdDtcbn07IiwidmFyIGdsb2JhbCAgICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpXG4gICwgY29yZSAgICAgID0gcmVxdWlyZSgnLi9fY29yZScpXG4gICwgaGlkZSAgICAgID0gcmVxdWlyZSgnLi9faGlkZScpXG4gICwgcmVkZWZpbmUgID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKVxuICAsIGN0eCAgICAgICA9IHJlcXVpcmUoJy4vX2N0eCcpXG4gICwgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG5cbnZhciAkZXhwb3J0ID0gZnVuY3Rpb24odHlwZSwgbmFtZSwgc291cmNlKXtcbiAgdmFyIElTX0ZPUkNFRCA9IHR5cGUgJiAkZXhwb3J0LkZcbiAgICAsIElTX0dMT0JBTCA9IHR5cGUgJiAkZXhwb3J0LkdcbiAgICAsIElTX1NUQVRJQyA9IHR5cGUgJiAkZXhwb3J0LlNcbiAgICAsIElTX1BST1RPICA9IHR5cGUgJiAkZXhwb3J0LlBcbiAgICAsIElTX0JJTkQgICA9IHR5cGUgJiAkZXhwb3J0LkJcbiAgICAsIHRhcmdldCAgICA9IElTX0dMT0JBTCA/IGdsb2JhbCA6IElTX1NUQVRJQyA/IGdsb2JhbFtuYW1lXSB8fCAoZ2xvYmFsW25hbWVdID0ge30pIDogKGdsb2JhbFtuYW1lXSB8fCB7fSlbUFJPVE9UWVBFXVxuICAgICwgZXhwb3J0cyAgID0gSVNfR0xPQkFMID8gY29yZSA6IGNvcmVbbmFtZV0gfHwgKGNvcmVbbmFtZV0gPSB7fSlcbiAgICAsIGV4cFByb3RvICA9IGV4cG9ydHNbUFJPVE9UWVBFXSB8fCAoZXhwb3J0c1tQUk9UT1RZUEVdID0ge30pXG4gICAgLCBrZXksIG93biwgb3V0LCBleHA7XG4gIGlmKElTX0dMT0JBTClzb3VyY2UgPSBuYW1lO1xuICBmb3Ioa2V5IGluIHNvdXJjZSl7XG4gICAgLy8gY29udGFpbnMgaW4gbmF0aXZlXG4gICAgb3duID0gIUlTX0ZPUkNFRCAmJiB0YXJnZXQgJiYgdGFyZ2V0W2tleV0gIT09IHVuZGVmaW5lZDtcbiAgICAvLyBleHBvcnQgbmF0aXZlIG9yIHBhc3NlZFxuICAgIG91dCA9IChvd24gPyB0YXJnZXQgOiBzb3VyY2UpW2tleV07XG4gICAgLy8gYmluZCB0aW1lcnMgdG8gZ2xvYmFsIGZvciBjYWxsIGZyb20gZXhwb3J0IGNvbnRleHRcbiAgICBleHAgPSBJU19CSU5EICYmIG93biA/IGN0eChvdXQsIGdsb2JhbCkgOiBJU19QUk9UTyAmJiB0eXBlb2Ygb3V0ID09ICdmdW5jdGlvbicgPyBjdHgoRnVuY3Rpb24uY2FsbCwgb3V0KSA6IG91dDtcbiAgICAvLyBleHRlbmQgZ2xvYmFsXG4gICAgaWYodGFyZ2V0KXJlZGVmaW5lKHRhcmdldCwga2V5LCBvdXQsIHR5cGUgJiAkZXhwb3J0LlUpO1xuICAgIC8vIGV4cG9ydFxuICAgIGlmKGV4cG9ydHNba2V5XSAhPSBvdXQpaGlkZShleHBvcnRzLCBrZXksIGV4cCk7XG4gICAgaWYoSVNfUFJPVE8gJiYgZXhwUHJvdG9ba2V5XSAhPSBvdXQpZXhwUHJvdG9ba2V5XSA9IG91dDtcbiAgfVxufTtcbmdsb2JhbC5jb3JlID0gY29yZTtcbi8vIHR5cGUgYml0bWFwXG4kZXhwb3J0LkYgPSAxOyAgIC8vIGZvcmNlZFxuJGV4cG9ydC5HID0gMjsgICAvLyBnbG9iYWxcbiRleHBvcnQuUyA9IDQ7ICAgLy8gc3RhdGljXG4kZXhwb3J0LlAgPSA4OyAgIC8vIHByb3RvXG4kZXhwb3J0LkIgPSAxNjsgIC8vIGJpbmRcbiRleHBvcnQuVyA9IDMyOyAgLy8gd3JhcFxuJGV4cG9ydC5VID0gNjQ7ICAvLyBzYWZlXG4kZXhwb3J0LlIgPSAxMjg7IC8vIHJlYWwgcHJvdG8gbWV0aG9kIGZvciBgbGlicmFyeWAgXG5tb2R1bGUuZXhwb3J0cyA9ICRleHBvcnQ7IiwidmFyIE1BVENIID0gcmVxdWlyZSgnLi9fd2tzJykoJ21hdGNoJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKEtFWSl7XG4gIHZhciByZSA9IC8uLztcbiAgdHJ5IHtcbiAgICAnLy4vJ1tLRVldKHJlKTtcbiAgfSBjYXRjaChlKXtcbiAgICB0cnkge1xuICAgICAgcmVbTUFUQ0hdID0gZmFsc2U7XG4gICAgICByZXR1cm4gIScvLi8nW0tFWV0ocmUpO1xuICAgIH0gY2F0Y2goZil7IC8qIGVtcHR5ICovIH1cbiAgfSByZXR1cm4gdHJ1ZTtcbn07IiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihleGVjKXtcbiAgdHJ5IHtcbiAgICByZXR1cm4gISFleGVjKCk7XG4gIH0gY2F0Y2goZSl7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn07IiwiJ3VzZSBzdHJpY3QnO1xudmFyIGhpZGUgICAgID0gcmVxdWlyZSgnLi9faGlkZScpXG4gICwgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpXG4gICwgZmFpbHMgICAgPSByZXF1aXJlKCcuL19mYWlscycpXG4gICwgZGVmaW5lZCAgPSByZXF1aXJlKCcuL19kZWZpbmVkJylcbiAgLCB3a3MgICAgICA9IHJlcXVpcmUoJy4vX3drcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKEtFWSwgbGVuZ3RoLCBleGVjKXtcbiAgdmFyIFNZTUJPTCAgID0gd2tzKEtFWSlcbiAgICAsIGZucyAgICAgID0gZXhlYyhkZWZpbmVkLCBTWU1CT0wsICcnW0tFWV0pXG4gICAgLCBzdHJmbiAgICA9IGZuc1swXVxuICAgICwgcnhmbiAgICAgPSBmbnNbMV07XG4gIGlmKGZhaWxzKGZ1bmN0aW9uKCl7XG4gICAgdmFyIE8gPSB7fTtcbiAgICBPW1NZTUJPTF0gPSBmdW5jdGlvbigpeyByZXR1cm4gNzsgfTtcbiAgICByZXR1cm4gJydbS0VZXShPKSAhPSA3O1xuICB9KSl7XG4gICAgcmVkZWZpbmUoU3RyaW5nLnByb3RvdHlwZSwgS0VZLCBzdHJmbik7XG4gICAgaGlkZShSZWdFeHAucHJvdG90eXBlLCBTWU1CT0wsIGxlbmd0aCA9PSAyXG4gICAgICAvLyAyMS4yLjUuOCBSZWdFeHAucHJvdG90eXBlW0BAcmVwbGFjZV0oc3RyaW5nLCByZXBsYWNlVmFsdWUpXG4gICAgICAvLyAyMS4yLjUuMTEgUmVnRXhwLnByb3RvdHlwZVtAQHNwbGl0XShzdHJpbmcsIGxpbWl0KVxuICAgICAgPyBmdW5jdGlvbihzdHJpbmcsIGFyZyl7IHJldHVybiByeGZuLmNhbGwoc3RyaW5nLCB0aGlzLCBhcmcpOyB9XG4gICAgICAvLyAyMS4yLjUuNiBSZWdFeHAucHJvdG90eXBlW0BAbWF0Y2hdKHN0cmluZylcbiAgICAgIC8vIDIxLjIuNS45IFJlZ0V4cC5wcm90b3R5cGVbQEBzZWFyY2hdKHN0cmluZylcbiAgICAgIDogZnVuY3Rpb24oc3RyaW5nKXsgcmV0dXJuIHJ4Zm4uY2FsbChzdHJpbmcsIHRoaXMpOyB9XG4gICAgKTtcbiAgfVxufTsiLCIndXNlIHN0cmljdCc7XG4vLyAyMS4yLjUuMyBnZXQgUmVnRXhwLnByb3RvdHlwZS5mbGFnc1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCl7XG4gIHZhciB0aGF0ICAgPSBhbk9iamVjdCh0aGlzKVxuICAgICwgcmVzdWx0ID0gJyc7XG4gIGlmKHRoYXQuZ2xvYmFsKSAgICAgcmVzdWx0ICs9ICdnJztcbiAgaWYodGhhdC5pZ25vcmVDYXNlKSByZXN1bHQgKz0gJ2knO1xuICBpZih0aGF0Lm11bHRpbGluZSkgIHJlc3VsdCArPSAnbSc7XG4gIGlmKHRoYXQudW5pY29kZSkgICAgcmVzdWx0ICs9ICd1JztcbiAgaWYodGhhdC5zdGlja3kpICAgICByZXN1bHQgKz0gJ3knO1xuICByZXR1cm4gcmVzdWx0O1xufTsiLCJ2YXIgY3R4ICAgICAgICAgPSByZXF1aXJlKCcuL19jdHgnKVxuICAsIGNhbGwgICAgICAgID0gcmVxdWlyZSgnLi9faXRlci1jYWxsJylcbiAgLCBpc0FycmF5SXRlciA9IHJlcXVpcmUoJy4vX2lzLWFycmF5LWl0ZXInKVxuICAsIGFuT2JqZWN0ICAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JylcbiAgLCB0b0xlbmd0aCAgICA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpXG4gICwgZ2V0SXRlckZuICAgPSByZXF1aXJlKCcuL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpXG4gICwgQlJFQUsgICAgICAgPSB7fVxuICAsIFJFVFVSTiAgICAgID0ge307XG52YXIgZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXRlcmFibGUsIGVudHJpZXMsIGZuLCB0aGF0LCBJVEVSQVRPUil7XG4gIHZhciBpdGVyRm4gPSBJVEVSQVRPUiA/IGZ1bmN0aW9uKCl7IHJldHVybiBpdGVyYWJsZTsgfSA6IGdldEl0ZXJGbihpdGVyYWJsZSlcbiAgICAsIGYgICAgICA9IGN0eChmbiwgdGhhdCwgZW50cmllcyA/IDIgOiAxKVxuICAgICwgaW5kZXggID0gMFxuICAgICwgbGVuZ3RoLCBzdGVwLCBpdGVyYXRvciwgcmVzdWx0O1xuICBpZih0eXBlb2YgaXRlckZuICE9ICdmdW5jdGlvbicpdGhyb3cgVHlwZUVycm9yKGl0ZXJhYmxlICsgJyBpcyBub3QgaXRlcmFibGUhJyk7XG4gIC8vIGZhc3QgY2FzZSBmb3IgYXJyYXlzIHdpdGggZGVmYXVsdCBpdGVyYXRvclxuICBpZihpc0FycmF5SXRlcihpdGVyRm4pKWZvcihsZW5ndGggPSB0b0xlbmd0aChpdGVyYWJsZS5sZW5ndGgpOyBsZW5ndGggPiBpbmRleDsgaW5kZXgrKyl7XG4gICAgcmVzdWx0ID0gZW50cmllcyA/IGYoYW5PYmplY3Qoc3RlcCA9IGl0ZXJhYmxlW2luZGV4XSlbMF0sIHN0ZXBbMV0pIDogZihpdGVyYWJsZVtpbmRleF0pO1xuICAgIGlmKHJlc3VsdCA9PT0gQlJFQUsgfHwgcmVzdWx0ID09PSBSRVRVUk4pcmV0dXJuIHJlc3VsdDtcbiAgfSBlbHNlIGZvcihpdGVyYXRvciA9IGl0ZXJGbi5jYWxsKGl0ZXJhYmxlKTsgIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lOyApe1xuICAgIHJlc3VsdCA9IGNhbGwoaXRlcmF0b3IsIGYsIHN0ZXAudmFsdWUsIGVudHJpZXMpO1xuICAgIGlmKHJlc3VsdCA9PT0gQlJFQUsgfHwgcmVzdWx0ID09PSBSRVRVUk4pcmV0dXJuIHJlc3VsdDtcbiAgfVxufTtcbmV4cG9ydHMuQlJFQUsgID0gQlJFQUs7XG5leHBvcnRzLlJFVFVSTiA9IFJFVFVSTjsiLCIvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvODYjaXNzdWVjb21tZW50LTExNTc1OTAyOFxudmFyIGdsb2JhbCA9IG1vZHVsZS5leHBvcnRzID0gdHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuTWF0aCA9PSBNYXRoXG4gID8gd2luZG93IDogdHlwZW9mIHNlbGYgIT0gJ3VuZGVmaW5lZCcgJiYgc2VsZi5NYXRoID09IE1hdGggPyBzZWxmIDogRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbmlmKHR5cGVvZiBfX2cgPT0gJ251bWJlcicpX19nID0gZ2xvYmFsOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmIiwidmFyIGhhc093blByb3BlcnR5ID0ge30uaGFzT3duUHJvcGVydHk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0LCBrZXkpe1xuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChpdCwga2V5KTtcbn07IiwidmFyIGRQICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKVxuICAsIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBmdW5jdGlvbihvYmplY3QsIGtleSwgdmFsdWUpe1xuICByZXR1cm4gZFAuZihvYmplY3QsIGtleSwgY3JlYXRlRGVzYygxLCB2YWx1ZSkpO1xufSA6IGZ1bmN0aW9uKG9iamVjdCwga2V5LCB2YWx1ZSl7XG4gIG9iamVjdFtrZXldID0gdmFsdWU7XG4gIHJldHVybiBvYmplY3Q7XG59OyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuZG9jdW1lbnQgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50OyIsIm1vZHVsZS5leHBvcnRzID0gIXJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24oKXtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyZXF1aXJlKCcuL19kb20tY3JlYXRlJykoJ2RpdicpLCAnYScsIHtnZXQ6IGZ1bmN0aW9uKCl7IHJldHVybiA3OyB9fSkuYSAhPSA3O1xufSk7IiwidmFyIGlzT2JqZWN0ICAgICAgID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0JylcbiAgLCBzZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX3NldC1wcm90bycpLnNldDtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odGhhdCwgdGFyZ2V0LCBDKXtcbiAgdmFyIFAsIFMgPSB0YXJnZXQuY29uc3RydWN0b3I7XG4gIGlmKFMgIT09IEMgJiYgdHlwZW9mIFMgPT0gJ2Z1bmN0aW9uJyAmJiAoUCA9IFMucHJvdG90eXBlKSAhPT0gQy5wcm90b3R5cGUgJiYgaXNPYmplY3QoUCkgJiYgc2V0UHJvdG90eXBlT2Ype1xuICAgIHNldFByb3RvdHlwZU9mKHRoYXQsIFApO1xuICB9IHJldHVybiB0aGF0O1xufTsiLCIvLyBmYXN0IGFwcGx5LCBodHRwOi8vanNwZXJmLmxua2l0LmNvbS9mYXN0LWFwcGx5LzVcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oZm4sIGFyZ3MsIHRoYXQpe1xuICB2YXIgdW4gPSB0aGF0ID09PSB1bmRlZmluZWQ7XG4gIHN3aXRjaChhcmdzLmxlbmd0aCl7XG4gICAgY2FzZSAwOiByZXR1cm4gdW4gPyBmbigpXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQpO1xuICAgIGNhc2UgMTogcmV0dXJuIHVuID8gZm4oYXJnc1swXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSk7XG4gICAgY2FzZSAyOiByZXR1cm4gdW4gPyBmbihhcmdzWzBdLCBhcmdzWzFdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICBjYXNlIDM6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgIGNhc2UgNDogcmV0dXJuIHVuID8gZm4oYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSk7XG4gIH0gcmV0dXJuICAgICAgICAgICAgICBmbi5hcHBseSh0aGF0LCBhcmdzKTtcbn07IiwiLy8gZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBhbmQgbm9uLWVudW1lcmFibGUgb2xkIFY4IHN0cmluZ3NcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0KCd6JykucHJvcGVydHlJc0VudW1lcmFibGUoMCkgPyBPYmplY3QgOiBmdW5jdGlvbihpdCl7XG4gIHJldHVybiBjb2YoaXQpID09ICdTdHJpbmcnID8gaXQuc3BsaXQoJycpIDogT2JqZWN0KGl0KTtcbn07IiwiLy8gY2hlY2sgb24gZGVmYXVsdCBBcnJheSBpdGVyYXRvclxudmFyIEl0ZXJhdG9ycyAgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKVxuICAsIElURVJBVE9SICAgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKVxuICAsIEFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGU7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuICByZXR1cm4gaXQgIT09IHVuZGVmaW5lZCAmJiAoSXRlcmF0b3JzLkFycmF5ID09PSBpdCB8fCBBcnJheVByb3RvW0lURVJBVE9SXSA9PT0gaXQpO1xufTsiLCIvLyA3LjIuMiBJc0FycmF5KGFyZ3VtZW50KVxudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xubW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIGlzQXJyYXkoYXJnKXtcbiAgcmV0dXJuIGNvZihhcmcpID09ICdBcnJheSc7XG59OyIsIi8vIDIwLjEuMi4zIE51bWJlci5pc0ludGVnZXIobnVtYmVyKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0JylcbiAgLCBmbG9vciAgICA9IE1hdGguZmxvb3I7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzSW50ZWdlcihpdCl7XG4gIHJldHVybiAhaXNPYmplY3QoaXQpICYmIGlzRmluaXRlKGl0KSAmJiBmbG9vcihpdCkgPT09IGl0O1xufTsiLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PT0gJ29iamVjdCcgPyBpdCAhPT0gbnVsbCA6IHR5cGVvZiBpdCA9PT0gJ2Z1bmN0aW9uJztcbn07IiwiLy8gNy4yLjggSXNSZWdFeHAoYXJndW1lbnQpXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKVxuICAsIGNvZiAgICAgID0gcmVxdWlyZSgnLi9fY29mJylcbiAgLCBNQVRDSCAgICA9IHJlcXVpcmUoJy4vX3drcycpKCdtYXRjaCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG4gIHZhciBpc1JlZ0V4cDtcbiAgcmV0dXJuIGlzT2JqZWN0KGl0KSAmJiAoKGlzUmVnRXhwID0gaXRbTUFUQ0hdKSAhPT0gdW5kZWZpbmVkID8gISFpc1JlZ0V4cCA6IGNvZihpdCkgPT0gJ1JlZ0V4cCcpO1xufTsiLCIvLyBjYWxsIHNvbWV0aGluZyBvbiBpdGVyYXRvciBzdGVwIHdpdGggc2FmZSBjbG9zaW5nIG9uIGVycm9yXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXRlcmF0b3IsIGZuLCB2YWx1ZSwgZW50cmllcyl7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGVudHJpZXMgPyBmbihhbk9iamVjdCh2YWx1ZSlbMF0sIHZhbHVlWzFdKSA6IGZuKHZhbHVlKTtcbiAgLy8gNy40LjYgSXRlcmF0b3JDbG9zZShpdGVyYXRvciwgY29tcGxldGlvbilcbiAgfSBjYXRjaChlKXtcbiAgICB2YXIgcmV0ID0gaXRlcmF0b3JbJ3JldHVybiddO1xuICAgIGlmKHJldCAhPT0gdW5kZWZpbmVkKWFuT2JqZWN0KHJldC5jYWxsKGl0ZXJhdG9yKSk7XG4gICAgdGhyb3cgZTtcbiAgfVxufTsiLCIndXNlIHN0cmljdCc7XG52YXIgY3JlYXRlICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJylcbiAgLCBkZXNjcmlwdG9yICAgICA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKVxuICAsIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKVxuICAsIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG5cbi8vIDI1LjEuMi4xLjEgJUl0ZXJhdG9yUHJvdG90eXBlJVtAQGl0ZXJhdG9yXSgpXG5yZXF1aXJlKCcuL19oaWRlJykoSXRlcmF0b3JQcm90b3R5cGUsIHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpLCBmdW5jdGlvbigpeyByZXR1cm4gdGhpczsgfSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpe1xuICBDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBjcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUsIHtuZXh0OiBkZXNjcmlwdG9yKDEsIG5leHQpfSk7XG4gIHNldFRvU3RyaW5nVGFnKENvbnN0cnVjdG9yLCBOQU1FICsgJyBJdGVyYXRvcicpO1xufTsiLCIndXNlIHN0cmljdCc7XG52YXIgTElCUkFSWSAgICAgICAgPSByZXF1aXJlKCcuL19saWJyYXJ5JylcbiAgLCAkZXhwb3J0ICAgICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgcmVkZWZpbmUgICAgICAgPSByZXF1aXJlKCcuL19yZWRlZmluZScpXG4gICwgaGlkZSAgICAgICAgICAgPSByZXF1aXJlKCcuL19oaWRlJylcbiAgLCBoYXMgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2hhcycpXG4gICwgSXRlcmF0b3JzICAgICAgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKVxuICAsICRpdGVyQ3JlYXRlICAgID0gcmVxdWlyZSgnLi9faXRlci1jcmVhdGUnKVxuICAsIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKVxuICAsIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpXG4gICwgSVRFUkFUT1IgICAgICAgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKVxuICAsIEJVR0dZICAgICAgICAgID0gIShbXS5rZXlzICYmICduZXh0JyBpbiBbXS5rZXlzKCkpIC8vIFNhZmFyaSBoYXMgYnVnZ3kgaXRlcmF0b3JzIHcvbyBgbmV4dGBcbiAgLCBGRl9JVEVSQVRPUiAgICA9ICdAQGl0ZXJhdG9yJ1xuICAsIEtFWVMgICAgICAgICAgID0gJ2tleXMnXG4gICwgVkFMVUVTICAgICAgICAgPSAndmFsdWVzJztcblxudmFyIHJldHVyblRoaXMgPSBmdW5jdGlvbigpeyByZXR1cm4gdGhpczsgfTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihCYXNlLCBOQU1FLCBDb25zdHJ1Y3RvciwgbmV4dCwgREVGQVVMVCwgSVNfU0VULCBGT1JDRUQpe1xuICAkaXRlckNyZWF0ZShDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCk7XG4gIHZhciBnZXRNZXRob2QgPSBmdW5jdGlvbihraW5kKXtcbiAgICBpZighQlVHR1kgJiYga2luZCBpbiBwcm90bylyZXR1cm4gcHJvdG9ba2luZF07XG4gICAgc3dpdGNoKGtpbmQpe1xuICAgICAgY2FzZSBLRVlTOiByZXR1cm4gZnVuY3Rpb24ga2V5cygpeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICAgICAgY2FzZSBWQUxVRVM6IHJldHVybiBmdW5jdGlvbiB2YWx1ZXMoKXsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgICB9IHJldHVybiBmdW5jdGlvbiBlbnRyaWVzKCl7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gIH07XG4gIHZhciBUQUcgICAgICAgID0gTkFNRSArICcgSXRlcmF0b3InXG4gICAgLCBERUZfVkFMVUVTID0gREVGQVVMVCA9PSBWQUxVRVNcbiAgICAsIFZBTFVFU19CVUcgPSBmYWxzZVxuICAgICwgcHJvdG8gICAgICA9IEJhc2UucHJvdG90eXBlXG4gICAgLCAkbmF0aXZlICAgID0gcHJvdG9bSVRFUkFUT1JdIHx8IHByb3RvW0ZGX0lURVJBVE9SXSB8fCBERUZBVUxUICYmIHByb3RvW0RFRkFVTFRdXG4gICAgLCAkZGVmYXVsdCAgID0gJG5hdGl2ZSB8fCBnZXRNZXRob2QoREVGQVVMVClcbiAgICAsICRlbnRyaWVzICAgPSBERUZBVUxUID8gIURFRl9WQUxVRVMgPyAkZGVmYXVsdCA6IGdldE1ldGhvZCgnZW50cmllcycpIDogdW5kZWZpbmVkXG4gICAgLCAkYW55TmF0aXZlID0gTkFNRSA9PSAnQXJyYXknID8gcHJvdG8uZW50cmllcyB8fCAkbmF0aXZlIDogJG5hdGl2ZVxuICAgICwgbWV0aG9kcywga2V5LCBJdGVyYXRvclByb3RvdHlwZTtcbiAgLy8gRml4IG5hdGl2ZVxuICBpZigkYW55TmF0aXZlKXtcbiAgICBJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvdHlwZU9mKCRhbnlOYXRpdmUuY2FsbChuZXcgQmFzZSkpO1xuICAgIGlmKEl0ZXJhdG9yUHJvdG90eXBlICE9PSBPYmplY3QucHJvdG90eXBlKXtcbiAgICAgIC8vIFNldCBAQHRvU3RyaW5nVGFnIHRvIG5hdGl2ZSBpdGVyYXRvcnNcbiAgICAgIHNldFRvU3RyaW5nVGFnKEl0ZXJhdG9yUHJvdG90eXBlLCBUQUcsIHRydWUpO1xuICAgICAgLy8gZml4IGZvciBzb21lIG9sZCBlbmdpbmVzXG4gICAgICBpZighTElCUkFSWSAmJiAhaGFzKEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUikpaGlkZShJdGVyYXRvclByb3RvdHlwZSwgSVRFUkFUT1IsIHJldHVyblRoaXMpO1xuICAgIH1cbiAgfVxuICAvLyBmaXggQXJyYXkje3ZhbHVlcywgQEBpdGVyYXRvcn0ubmFtZSBpbiBWOCAvIEZGXG4gIGlmKERFRl9WQUxVRVMgJiYgJG5hdGl2ZSAmJiAkbmF0aXZlLm5hbWUgIT09IFZBTFVFUyl7XG4gICAgVkFMVUVTX0JVRyA9IHRydWU7XG4gICAgJGRlZmF1bHQgPSBmdW5jdGlvbiB2YWx1ZXMoKXsgcmV0dXJuICRuYXRpdmUuY2FsbCh0aGlzKTsgfTtcbiAgfVxuICAvLyBEZWZpbmUgaXRlcmF0b3JcbiAgaWYoKCFMSUJSQVJZIHx8IEZPUkNFRCkgJiYgKEJVR0dZIHx8IFZBTFVFU19CVUcgfHwgIXByb3RvW0lURVJBVE9SXSkpe1xuICAgIGhpZGUocHJvdG8sIElURVJBVE9SLCAkZGVmYXVsdCk7XG4gIH1cbiAgLy8gUGx1ZyBmb3IgbGlicmFyeVxuICBJdGVyYXRvcnNbTkFNRV0gPSAkZGVmYXVsdDtcbiAgSXRlcmF0b3JzW1RBR10gID0gcmV0dXJuVGhpcztcbiAgaWYoREVGQVVMVCl7XG4gICAgbWV0aG9kcyA9IHtcbiAgICAgIHZhbHVlczogIERFRl9WQUxVRVMgPyAkZGVmYXVsdCA6IGdldE1ldGhvZChWQUxVRVMpLFxuICAgICAga2V5czogICAgSVNfU0VUICAgICA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKEtFWVMpLFxuICAgICAgZW50cmllczogJGVudHJpZXNcbiAgICB9O1xuICAgIGlmKEZPUkNFRClmb3Ioa2V5IGluIG1ldGhvZHMpe1xuICAgICAgaWYoIShrZXkgaW4gcHJvdG8pKXJlZGVmaW5lKHByb3RvLCBrZXksIG1ldGhvZHNba2V5XSk7XG4gICAgfSBlbHNlICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKEJVR0dZIHx8IFZBTFVFU19CVUcpLCBOQU1FLCBtZXRob2RzKTtcbiAgfVxuICByZXR1cm4gbWV0aG9kcztcbn07IiwidmFyIElURVJBVE9SICAgICA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpXG4gICwgU0FGRV9DTE9TSU5HID0gZmFsc2U7XG5cbnRyeSB7XG4gIHZhciByaXRlciA9IFs3XVtJVEVSQVRPUl0oKTtcbiAgcml0ZXJbJ3JldHVybiddID0gZnVuY3Rpb24oKXsgU0FGRV9DTE9TSU5HID0gdHJ1ZTsgfTtcbiAgQXJyYXkuZnJvbShyaXRlciwgZnVuY3Rpb24oKXsgdGhyb3cgMjsgfSk7XG59IGNhdGNoKGUpeyAvKiBlbXB0eSAqLyB9XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oZXhlYywgc2tpcENsb3Npbmcpe1xuICBpZighc2tpcENsb3NpbmcgJiYgIVNBRkVfQ0xPU0lORylyZXR1cm4gZmFsc2U7XG4gIHZhciBzYWZlID0gZmFsc2U7XG4gIHRyeSB7XG4gICAgdmFyIGFyciAgPSBbN11cbiAgICAgICwgaXRlciA9IGFycltJVEVSQVRPUl0oKTtcbiAgICBpdGVyLm5leHQgPSBmdW5jdGlvbigpeyByZXR1cm4ge2RvbmU6IHNhZmUgPSB0cnVlfTsgfTtcbiAgICBhcnJbSVRFUkFUT1JdID0gZnVuY3Rpb24oKXsgcmV0dXJuIGl0ZXI7IH07XG4gICAgZXhlYyhhcnIpO1xuICB9IGNhdGNoKGUpeyAvKiBlbXB0eSAqLyB9XG4gIHJldHVybiBzYWZlO1xufTsiLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGRvbmUsIHZhbHVlKXtcbiAgcmV0dXJuIHt2YWx1ZTogdmFsdWUsIGRvbmU6ICEhZG9uZX07XG59OyIsIm1vZHVsZS5leHBvcnRzID0ge307IiwidmFyIGdldEtleXMgICA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJylcbiAgLCB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG9iamVjdCwgZWwpe1xuICB2YXIgTyAgICAgID0gdG9JT2JqZWN0KG9iamVjdClcbiAgICAsIGtleXMgICA9IGdldEtleXMoTylcbiAgICAsIGxlbmd0aCA9IGtleXMubGVuZ3RoXG4gICAgLCBpbmRleCAgPSAwXG4gICAgLCBrZXk7XG4gIHdoaWxlKGxlbmd0aCA+IGluZGV4KWlmKE9ba2V5ID0ga2V5c1tpbmRleCsrXV0gPT09IGVsKXJldHVybiBrZXk7XG59OyIsIm1vZHVsZS5leHBvcnRzID0gZmFsc2U7IiwiLy8gMjAuMi4yLjE0IE1hdGguZXhwbTEoeClcbnZhciAkZXhwbTEgPSBNYXRoLmV4cG0xO1xubW9kdWxlLmV4cG9ydHMgPSAoISRleHBtMVxuICAvLyBPbGQgRkYgYnVnXG4gIHx8ICRleHBtMSgxMCkgPiAyMjAyNS40NjU3OTQ4MDY3MTkgfHwgJGV4cG0xKDEwKSA8IDIyMDI1LjQ2NTc5NDgwNjcxNjUxNjhcbiAgLy8gVG9yIEJyb3dzZXIgYnVnXG4gIHx8ICRleHBtMSgtMmUtMTcpICE9IC0yZS0xN1xuKSA/IGZ1bmN0aW9uIGV4cG0xKHgpe1xuICByZXR1cm4gKHggPSAreCkgPT0gMCA/IHggOiB4ID4gLTFlLTYgJiYgeCA8IDFlLTYgPyB4ICsgeCAqIHggLyAyIDogTWF0aC5leHAoeCkgLSAxO1xufSA6ICRleHBtMTsiLCIvLyAyMC4yLjIuMjAgTWF0aC5sb2cxcCh4KVxubW9kdWxlLmV4cG9ydHMgPSBNYXRoLmxvZzFwIHx8IGZ1bmN0aW9uIGxvZzFwKHgpe1xuICByZXR1cm4gKHggPSAreCkgPiAtMWUtOCAmJiB4IDwgMWUtOCA/IHggLSB4ICogeCAvIDIgOiBNYXRoLmxvZygxICsgeCk7XG59OyIsIi8vIDIwLjIuMi4yOCBNYXRoLnNpZ24oeClcbm1vZHVsZS5leHBvcnRzID0gTWF0aC5zaWduIHx8IGZ1bmN0aW9uIHNpZ24oeCl7XG4gIHJldHVybiAoeCA9ICt4KSA9PSAwIHx8IHggIT0geCA/IHggOiB4IDwgMCA/IC0xIDogMTtcbn07IiwidmFyIE1FVEEgICAgID0gcmVxdWlyZSgnLi9fdWlkJykoJ21ldGEnKVxuICAsIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0JylcbiAgLCBoYXMgICAgICA9IHJlcXVpcmUoJy4vX2hhcycpXG4gICwgc2V0RGVzYyAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mXG4gICwgaWQgICAgICAgPSAwO1xudmFyIGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGUgfHwgZnVuY3Rpb24oKXtcbiAgcmV0dXJuIHRydWU7XG59O1xudmFyIEZSRUVaRSA9ICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uKCl7XG4gIHJldHVybiBpc0V4dGVuc2libGUoT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKHt9KSk7XG59KTtcbnZhciBzZXRNZXRhID0gZnVuY3Rpb24oaXQpe1xuICBzZXREZXNjKGl0LCBNRVRBLCB7dmFsdWU6IHtcbiAgICBpOiAnTycgKyArK2lkLCAvLyBvYmplY3QgSURcbiAgICB3OiB7fSAgICAgICAgICAvLyB3ZWFrIGNvbGxlY3Rpb25zIElEc1xuICB9fSk7XG59O1xudmFyIGZhc3RLZXkgPSBmdW5jdGlvbihpdCwgY3JlYXRlKXtcbiAgLy8gcmV0dXJuIHByaW1pdGl2ZSB3aXRoIHByZWZpeFxuICBpZighaXNPYmplY3QoaXQpKXJldHVybiB0eXBlb2YgaXQgPT0gJ3N5bWJvbCcgPyBpdCA6ICh0eXBlb2YgaXQgPT0gJ3N0cmluZycgPyAnUycgOiAnUCcpICsgaXQ7XG4gIGlmKCFoYXMoaXQsIE1FVEEpKXtcbiAgICAvLyBjYW4ndCBzZXQgbWV0YWRhdGEgdG8gdW5jYXVnaHQgZnJvemVuIG9iamVjdFxuICAgIGlmKCFpc0V4dGVuc2libGUoaXQpKXJldHVybiAnRic7XG4gICAgLy8gbm90IG5lY2Vzc2FyeSB0byBhZGQgbWV0YWRhdGFcbiAgICBpZighY3JlYXRlKXJldHVybiAnRSc7XG4gICAgLy8gYWRkIG1pc3NpbmcgbWV0YWRhdGFcbiAgICBzZXRNZXRhKGl0KTtcbiAgLy8gcmV0dXJuIG9iamVjdCBJRFxuICB9IHJldHVybiBpdFtNRVRBXS5pO1xufTtcbnZhciBnZXRXZWFrID0gZnVuY3Rpb24oaXQsIGNyZWF0ZSl7XG4gIGlmKCFoYXMoaXQsIE1FVEEpKXtcbiAgICAvLyBjYW4ndCBzZXQgbWV0YWRhdGEgdG8gdW5jYXVnaHQgZnJvemVuIG9iamVjdFxuICAgIGlmKCFpc0V4dGVuc2libGUoaXQpKXJldHVybiB0cnVlO1xuICAgIC8vIG5vdCBuZWNlc3NhcnkgdG8gYWRkIG1ldGFkYXRhXG4gICAgaWYoIWNyZWF0ZSlyZXR1cm4gZmFsc2U7XG4gICAgLy8gYWRkIG1pc3NpbmcgbWV0YWRhdGFcbiAgICBzZXRNZXRhKGl0KTtcbiAgLy8gcmV0dXJuIGhhc2ggd2VhayBjb2xsZWN0aW9ucyBJRHNcbiAgfSByZXR1cm4gaXRbTUVUQV0udztcbn07XG4vLyBhZGQgbWV0YWRhdGEgb24gZnJlZXplLWZhbWlseSBtZXRob2RzIGNhbGxpbmdcbnZhciBvbkZyZWV6ZSA9IGZ1bmN0aW9uKGl0KXtcbiAgaWYoRlJFRVpFICYmIG1ldGEuTkVFRCAmJiBpc0V4dGVuc2libGUoaXQpICYmICFoYXMoaXQsIE1FVEEpKXNldE1ldGEoaXQpO1xuICByZXR1cm4gaXQ7XG59O1xudmFyIG1ldGEgPSBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgS0VZOiAgICAgIE1FVEEsXG4gIE5FRUQ6ICAgICBmYWxzZSxcbiAgZmFzdEtleTogIGZhc3RLZXksXG4gIGdldFdlYWs6ICBnZXRXZWFrLFxuICBvbkZyZWV6ZTogb25GcmVlemVcbn07IiwidmFyIE1hcCAgICAgPSByZXF1aXJlKCcuL2VzNi5tYXAnKVxuICAsICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIHNoYXJlZCAgPSByZXF1aXJlKCcuL19zaGFyZWQnKSgnbWV0YWRhdGEnKVxuICAsIHN0b3JlICAgPSBzaGFyZWQuc3RvcmUgfHwgKHNoYXJlZC5zdG9yZSA9IG5ldyAocmVxdWlyZSgnLi9lczYud2Vhay1tYXAnKSkpO1xuXG52YXIgZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcCA9IGZ1bmN0aW9uKHRhcmdldCwgdGFyZ2V0S2V5LCBjcmVhdGUpe1xuICB2YXIgdGFyZ2V0TWV0YWRhdGEgPSBzdG9yZS5nZXQodGFyZ2V0KTtcbiAgaWYoIXRhcmdldE1ldGFkYXRhKXtcbiAgICBpZighY3JlYXRlKXJldHVybiB1bmRlZmluZWQ7XG4gICAgc3RvcmUuc2V0KHRhcmdldCwgdGFyZ2V0TWV0YWRhdGEgPSBuZXcgTWFwKTtcbiAgfVxuICB2YXIga2V5TWV0YWRhdGEgPSB0YXJnZXRNZXRhZGF0YS5nZXQodGFyZ2V0S2V5KTtcbiAgaWYoIWtleU1ldGFkYXRhKXtcbiAgICBpZighY3JlYXRlKXJldHVybiB1bmRlZmluZWQ7XG4gICAgdGFyZ2V0TWV0YWRhdGEuc2V0KHRhcmdldEtleSwga2V5TWV0YWRhdGEgPSBuZXcgTWFwKTtcbiAgfSByZXR1cm4ga2V5TWV0YWRhdGE7XG59O1xudmFyIG9yZGluYXJ5SGFzT3duTWV0YWRhdGEgPSBmdW5jdGlvbihNZXRhZGF0YUtleSwgTywgUCl7XG4gIHZhciBtZXRhZGF0YU1hcCA9IGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAoTywgUCwgZmFsc2UpO1xuICByZXR1cm4gbWV0YWRhdGFNYXAgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogbWV0YWRhdGFNYXAuaGFzKE1ldGFkYXRhS2V5KTtcbn07XG52YXIgb3JkaW5hcnlHZXRPd25NZXRhZGF0YSA9IGZ1bmN0aW9uKE1ldGFkYXRhS2V5LCBPLCBQKXtcbiAgdmFyIG1ldGFkYXRhTWFwID0gZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcChPLCBQLCBmYWxzZSk7XG4gIHJldHVybiBtZXRhZGF0YU1hcCA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogbWV0YWRhdGFNYXAuZ2V0KE1ldGFkYXRhS2V5KTtcbn07XG52YXIgb3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YSA9IGZ1bmN0aW9uKE1ldGFkYXRhS2V5LCBNZXRhZGF0YVZhbHVlLCBPLCBQKXtcbiAgZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcChPLCBQLCB0cnVlKS5zZXQoTWV0YWRhdGFLZXksIE1ldGFkYXRhVmFsdWUpO1xufTtcbnZhciBvcmRpbmFyeU93bk1ldGFkYXRhS2V5cyA9IGZ1bmN0aW9uKHRhcmdldCwgdGFyZ2V0S2V5KXtcbiAgdmFyIG1ldGFkYXRhTWFwID0gZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcCh0YXJnZXQsIHRhcmdldEtleSwgZmFsc2UpXG4gICAgLCBrZXlzICAgICAgICA9IFtdO1xuICBpZihtZXRhZGF0YU1hcCltZXRhZGF0YU1hcC5mb3JFYWNoKGZ1bmN0aW9uKF8sIGtleSl7IGtleXMucHVzaChrZXkpOyB9KTtcbiAgcmV0dXJuIGtleXM7XG59O1xudmFyIHRvTWV0YUtleSA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIGl0ID09PSB1bmRlZmluZWQgfHwgdHlwZW9mIGl0ID09ICdzeW1ib2wnID8gaXQgOiBTdHJpbmcoaXQpO1xufTtcbnZhciBleHAgPSBmdW5jdGlvbihPKXtcbiAgJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0JywgTyk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc3RvcmU6IHN0b3JlLFxuICBtYXA6IGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAsXG4gIGhhczogb3JkaW5hcnlIYXNPd25NZXRhZGF0YSxcbiAgZ2V0OiBvcmRpbmFyeUdldE93bk1ldGFkYXRhLFxuICBzZXQ6IG9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEsXG4gIGtleXM6IG9yZGluYXJ5T3duTWV0YWRhdGFLZXlzLFxuICBrZXk6IHRvTWV0YUtleSxcbiAgZXhwOiBleHBcbn07IiwidmFyIGdsb2JhbCAgICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpXG4gICwgbWFjcm90YXNrID0gcmVxdWlyZSgnLi9fdGFzaycpLnNldFxuICAsIE9ic2VydmVyICA9IGdsb2JhbC5NdXRhdGlvbk9ic2VydmVyIHx8IGdsb2JhbC5XZWJLaXRNdXRhdGlvbk9ic2VydmVyXG4gICwgcHJvY2VzcyAgID0gZ2xvYmFsLnByb2Nlc3NcbiAgLCBQcm9taXNlICAgPSBnbG9iYWwuUHJvbWlzZVxuICAsIGlzTm9kZSAgICA9IHJlcXVpcmUoJy4vX2NvZicpKHByb2Nlc3MpID09ICdwcm9jZXNzJztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpe1xuICB2YXIgaGVhZCwgbGFzdCwgbm90aWZ5O1xuXG4gIHZhciBmbHVzaCA9IGZ1bmN0aW9uKCl7XG4gICAgdmFyIHBhcmVudCwgZm47XG4gICAgaWYoaXNOb2RlICYmIChwYXJlbnQgPSBwcm9jZXNzLmRvbWFpbikpcGFyZW50LmV4aXQoKTtcbiAgICB3aGlsZShoZWFkKXtcbiAgICAgIGZuICAgPSBoZWFkLmZuO1xuICAgICAgaGVhZCA9IGhlYWQubmV4dDtcbiAgICAgIHRyeSB7XG4gICAgICAgIGZuKCk7XG4gICAgICB9IGNhdGNoKGUpe1xuICAgICAgICBpZihoZWFkKW5vdGlmeSgpO1xuICAgICAgICBlbHNlIGxhc3QgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRocm93IGU7XG4gICAgICB9XG4gICAgfSBsYXN0ID0gdW5kZWZpbmVkO1xuICAgIGlmKHBhcmVudClwYXJlbnQuZW50ZXIoKTtcbiAgfTtcblxuICAvLyBOb2RlLmpzXG4gIGlmKGlzTm9kZSl7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24oKXtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soZmx1c2gpO1xuICAgIH07XG4gIC8vIGJyb3dzZXJzIHdpdGggTXV0YXRpb25PYnNlcnZlclxuICB9IGVsc2UgaWYoT2JzZXJ2ZXIpe1xuICAgIHZhciB0b2dnbGUgPSB0cnVlXG4gICAgICAsIG5vZGUgICA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcnKTtcbiAgICBuZXcgT2JzZXJ2ZXIoZmx1c2gpLm9ic2VydmUobm9kZSwge2NoYXJhY3RlckRhdGE6IHRydWV9KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICBub3RpZnkgPSBmdW5jdGlvbigpe1xuICAgICAgbm9kZS5kYXRhID0gdG9nZ2xlID0gIXRvZ2dsZTtcbiAgICB9O1xuICAvLyBlbnZpcm9ubWVudHMgd2l0aCBtYXliZSBub24tY29tcGxldGVseSBjb3JyZWN0LCBidXQgZXhpc3RlbnQgUHJvbWlzZVxuICB9IGVsc2UgaWYoUHJvbWlzZSAmJiBQcm9taXNlLnJlc29sdmUpe1xuICAgIHZhciBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24oKXtcbiAgICAgIHByb21pc2UudGhlbihmbHVzaCk7XG4gICAgfTtcbiAgLy8gZm9yIG90aGVyIGVudmlyb25tZW50cyAtIG1hY3JvdGFzayBiYXNlZCBvbjpcbiAgLy8gLSBzZXRJbW1lZGlhdGVcbiAgLy8gLSBNZXNzYWdlQ2hhbm5lbFxuICAvLyAtIHdpbmRvdy5wb3N0TWVzc2FnXG4gIC8vIC0gb25yZWFkeXN0YXRlY2hhbmdlXG4gIC8vIC0gc2V0VGltZW91dFxuICB9IGVsc2Uge1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uKCl7XG4gICAgICAvLyBzdHJhbmdlIElFICsgd2VicGFjayBkZXYgc2VydmVyIGJ1ZyAtIHVzZSAuY2FsbChnbG9iYWwpXG4gICAgICBtYWNyb3Rhc2suY2FsbChnbG9iYWwsIGZsdXNoKTtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKGZuKXtcbiAgICB2YXIgdGFzayA9IHtmbjogZm4sIG5leHQ6IHVuZGVmaW5lZH07XG4gICAgaWYobGFzdClsYXN0Lm5leHQgPSB0YXNrO1xuICAgIGlmKCFoZWFkKXtcbiAgICAgIGhlYWQgPSB0YXNrO1xuICAgICAgbm90aWZ5KCk7XG4gICAgfSBsYXN0ID0gdGFzaztcbiAgfTtcbn07IiwiJ3VzZSBzdHJpY3QnO1xuLy8gMTkuMS4yLjEgT2JqZWN0LmFzc2lnbih0YXJnZXQsIHNvdXJjZSwgLi4uKVxudmFyIGdldEtleXMgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKVxuICAsIGdPUFMgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcHMnKVxuICAsIHBJRSAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpXG4gICwgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKVxuICAsIElPYmplY3QgID0gcmVxdWlyZSgnLi9faW9iamVjdCcpXG4gICwgJGFzc2lnbiAgPSBPYmplY3QuYXNzaWduO1xuXG4vLyBzaG91bGQgd29yayB3aXRoIHN5bWJvbHMgYW5kIHNob3VsZCBoYXZlIGRldGVybWluaXN0aWMgcHJvcGVydHkgb3JkZXIgKFY4IGJ1Zylcbm1vZHVsZS5leHBvcnRzID0gISRhc3NpZ24gfHwgcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbigpe1xuICB2YXIgQSA9IHt9XG4gICAgLCBCID0ge31cbiAgICAsIFMgPSBTeW1ib2woKVxuICAgICwgSyA9ICdhYmNkZWZnaGlqa2xtbm9wcXJzdCc7XG4gIEFbU10gPSA3O1xuICBLLnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uKGspeyBCW2tdID0gazsgfSk7XG4gIHJldHVybiAkYXNzaWduKHt9LCBBKVtTXSAhPSA3IHx8IE9iamVjdC5rZXlzKCRhc3NpZ24oe30sIEIpKS5qb2luKCcnKSAhPSBLO1xufSkgPyBmdW5jdGlvbiBhc3NpZ24odGFyZ2V0LCBzb3VyY2UpeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gIHZhciBUICAgICA9IHRvT2JqZWN0KHRhcmdldClcbiAgICAsIGFMZW4gID0gYXJndW1lbnRzLmxlbmd0aFxuICAgICwgaW5kZXggPSAxXG4gICAgLCBnZXRTeW1ib2xzID0gZ09QUy5mXG4gICAgLCBpc0VudW0gICAgID0gcElFLmY7XG4gIHdoaWxlKGFMZW4gPiBpbmRleCl7XG4gICAgdmFyIFMgICAgICA9IElPYmplY3QoYXJndW1lbnRzW2luZGV4KytdKVxuICAgICAgLCBrZXlzICAgPSBnZXRTeW1ib2xzID8gZ2V0S2V5cyhTKS5jb25jYXQoZ2V0U3ltYm9scyhTKSkgOiBnZXRLZXlzKFMpXG4gICAgICAsIGxlbmd0aCA9IGtleXMubGVuZ3RoXG4gICAgICAsIGogICAgICA9IDBcbiAgICAgICwga2V5O1xuICAgIHdoaWxlKGxlbmd0aCA+IGopaWYoaXNFbnVtLmNhbGwoUywga2V5ID0ga2V5c1tqKytdKSlUW2tleV0gPSBTW2tleV07XG4gIH0gcmV0dXJuIFQ7XG59IDogJGFzc2lnbjsiLCIvLyAxOS4xLjIuMiAvIDE1LjIuMy41IE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbnZhciBhbk9iamVjdCAgICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpXG4gICwgZFBzICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZHBzJylcbiAgLCBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKVxuICAsIElFX1BST1RPICAgID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpXG4gICwgRW1wdHkgICAgICAgPSBmdW5jdGlvbigpeyAvKiBlbXB0eSAqLyB9XG4gICwgUFJPVE9UWVBFICAgPSAncHJvdG90eXBlJztcblxuLy8gQ3JlYXRlIG9iamVjdCB3aXRoIGZha2UgYG51bGxgIHByb3RvdHlwZTogdXNlIGlmcmFtZSBPYmplY3Qgd2l0aCBjbGVhcmVkIHByb3RvdHlwZVxudmFyIGNyZWF0ZURpY3QgPSBmdW5jdGlvbigpe1xuICAvLyBUaHJhc2gsIHdhc3RlIGFuZCBzb2RvbXk6IElFIEdDIGJ1Z1xuICB2YXIgaWZyYW1lID0gcmVxdWlyZSgnLi9fZG9tLWNyZWF0ZScpKCdpZnJhbWUnKVxuICAgICwgaSAgICAgID0gZW51bUJ1Z0tleXMubGVuZ3RoXG4gICAgLCBsdCAgICAgPSAnPCdcbiAgICAsIGd0ICAgICA9ICc+J1xuICAgICwgaWZyYW1lRG9jdW1lbnQ7XG4gIGlmcmFtZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICByZXF1aXJlKCcuL19odG1sJykuYXBwZW5kQ2hpbGQoaWZyYW1lKTtcbiAgaWZyYW1lLnNyYyA9ICdqYXZhc2NyaXB0Oic7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tc2NyaXB0LXVybFxuICAvLyBjcmVhdGVEaWN0ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuT2JqZWN0O1xuICAvLyBodG1sLnJlbW92ZUNoaWxkKGlmcmFtZSk7XG4gIGlmcmFtZURvY3VtZW50ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQ7XG4gIGlmcmFtZURvY3VtZW50Lm9wZW4oKTtcbiAgaWZyYW1lRG9jdW1lbnQud3JpdGUobHQgKyAnc2NyaXB0JyArIGd0ICsgJ2RvY3VtZW50LkY9T2JqZWN0JyArIGx0ICsgJy9zY3JpcHQnICsgZ3QpO1xuICBpZnJhbWVEb2N1bWVudC5jbG9zZSgpO1xuICBjcmVhdGVEaWN0ID0gaWZyYW1lRG9jdW1lbnQuRjtcbiAgd2hpbGUoaS0tKWRlbGV0ZSBjcmVhdGVEaWN0W1BST1RPVFlQRV1bZW51bUJ1Z0tleXNbaV1dO1xuICByZXR1cm4gY3JlYXRlRGljdCgpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuY3JlYXRlIHx8IGZ1bmN0aW9uIGNyZWF0ZShPLCBQcm9wZXJ0aWVzKXtcbiAgdmFyIHJlc3VsdDtcbiAgaWYoTyAhPT0gbnVsbCl7XG4gICAgRW1wdHlbUFJPVE9UWVBFXSA9IGFuT2JqZWN0KE8pO1xuICAgIHJlc3VsdCA9IG5ldyBFbXB0eTtcbiAgICBFbXB0eVtQUk9UT1RZUEVdID0gbnVsbDtcbiAgICAvLyBhZGQgXCJfX3Byb3RvX19cIiBmb3IgT2JqZWN0LmdldFByb3RvdHlwZU9mIHBvbHlmaWxsXG4gICAgcmVzdWx0W0lFX1BST1RPXSA9IE87XG4gIH0gZWxzZSByZXN1bHQgPSBjcmVhdGVEaWN0KCk7XG4gIHJldHVybiBQcm9wZXJ0aWVzID09PSB1bmRlZmluZWQgPyByZXN1bHQgOiBkUHMocmVzdWx0LCBQcm9wZXJ0aWVzKTtcbn07XG4iLCJ2YXIgYW5PYmplY3QgICAgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKVxuICAsIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi9faWU4LWRvbS1kZWZpbmUnKVxuICAsIHRvUHJpbWl0aXZlICAgID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJylcbiAgLCBkUCAgICAgICAgICAgICA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcblxuZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpe1xuICBhbk9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBhbk9iamVjdChBdHRyaWJ1dGVzKTtcbiAgaWYoSUU4X0RPTV9ERUZJTkUpdHJ5IHtcbiAgICByZXR1cm4gZFAoTywgUCwgQXR0cmlidXRlcyk7XG4gIH0gY2F0Y2goZSl7IC8qIGVtcHR5ICovIH1cbiAgaWYoJ2dldCcgaW4gQXR0cmlidXRlcyB8fCAnc2V0JyBpbiBBdHRyaWJ1dGVzKXRocm93IFR5cGVFcnJvcignQWNjZXNzb3JzIG5vdCBzdXBwb3J0ZWQhJyk7XG4gIGlmKCd2YWx1ZScgaW4gQXR0cmlidXRlcylPW1BdID0gQXR0cmlidXRlcy52YWx1ZTtcbiAgcmV0dXJuIE87XG59OyIsInZhciBkUCAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpXG4gICwgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKVxuICAsIGdldEtleXMgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpe1xuICBhbk9iamVjdChPKTtcbiAgdmFyIGtleXMgICA9IGdldEtleXMoUHJvcGVydGllcylcbiAgICAsIGxlbmd0aCA9IGtleXMubGVuZ3RoXG4gICAgLCBpID0gMFxuICAgICwgUDtcbiAgd2hpbGUobGVuZ3RoID4gaSlkUC5mKE8sIFAgPSBrZXlzW2krK10sIFByb3BlcnRpZXNbUF0pO1xuICByZXR1cm4gTztcbn07IiwiLy8gRm9yY2VkIHJlcGxhY2VtZW50IHByb3RvdHlwZSBhY2Nlc3NvcnMgbWV0aG9kc1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19saWJyYXJ5Jyl8fCAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbigpe1xuICB2YXIgSyA9IE1hdGgucmFuZG9tKCk7XG4gIC8vIEluIEZGIHRocm93cyBvbmx5IGRlZmluZSBtZXRob2RzXG4gIF9fZGVmaW5lU2V0dGVyX18uY2FsbChudWxsLCBLLCBmdW5jdGlvbigpeyAvKiBlbXB0eSAqL30pO1xuICBkZWxldGUgcmVxdWlyZSgnLi9fZ2xvYmFsJylbS107XG59KTsiLCJ2YXIgcElFICAgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtcGllJylcbiAgLCBjcmVhdGVEZXNjICAgICA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKVxuICAsIHRvSU9iamVjdCAgICAgID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpXG4gICwgdG9QcmltaXRpdmUgICAgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKVxuICAsIGhhcyAgICAgICAgICAgID0gcmVxdWlyZSgnLi9faGFzJylcbiAgLCBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4vX2llOC1kb20tZGVmaW5lJylcbiAgLCBnT1BEICAgICAgICAgICA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbmV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBnT1BEIDogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApe1xuICBPID0gdG9JT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGlmKElFOF9ET01fREVGSU5FKXRyeSB7XG4gICAgcmV0dXJuIGdPUEQoTywgUCk7XG4gIH0gY2F0Y2goZSl7IC8qIGVtcHR5ICovIH1cbiAgaWYoaGFzKE8sIFApKXJldHVybiBjcmVhdGVEZXNjKCFwSUUuZi5jYWxsKE8sIFApLCBPW1BdKTtcbn07IiwiLy8gZmFsbGJhY2sgZm9yIElFMTEgYnVnZ3kgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgd2l0aCBpZnJhbWUgYW5kIHdpbmRvd1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKVxuICAsIGdPUE4gICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZlxuICAsIHRvU3RyaW5nICA9IHt9LnRvU3RyaW5nO1xuXG52YXIgd2luZG93TmFtZXMgPSB0eXBlb2Ygd2luZG93ID09ICdvYmplY3QnICYmIHdpbmRvdyAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lc1xuICA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHdpbmRvdykgOiBbXTtcblxudmFyIGdldFdpbmRvd05hbWVzID0gZnVuY3Rpb24oaXQpe1xuICB0cnkge1xuICAgIHJldHVybiBnT1BOKGl0KTtcbiAgfSBjYXRjaChlKXtcbiAgICByZXR1cm4gd2luZG93TmFtZXMuc2xpY2UoKTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMuZiA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoaXQpe1xuICByZXR1cm4gd2luZG93TmFtZXMgJiYgdG9TdHJpbmcuY2FsbChpdCkgPT0gJ1tvYmplY3QgV2luZG93XScgPyBnZXRXaW5kb3dOYW1lcyhpdCkgOiBnT1BOKHRvSU9iamVjdChpdCkpO1xufTtcbiIsIi8vIDE5LjEuMi43IC8gMTUuMi4zLjQgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoTylcbnZhciAka2V5cyAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMtaW50ZXJuYWwnKVxuICAsIGhpZGRlbktleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJykuY29uY2F0KCdsZW5ndGgnLCAncHJvdG90eXBlJyk7XG5cbmV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHx8IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoTyl7XG4gIHJldHVybiAka2V5cyhPLCBoaWRkZW5LZXlzKTtcbn07IiwiZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9sczsiLCIvLyAxOS4xLjIuOSAvIDE1LjIuMy4yIE9iamVjdC5nZXRQcm90b3R5cGVPZihPKVxudmFyIGhhcyAgICAgICAgID0gcmVxdWlyZSgnLi9faGFzJylcbiAgLCB0b09iamVjdCAgICA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpXG4gICwgSUVfUFJPVE8gICAgPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJylcbiAgLCBPYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmdldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uKE8pe1xuICBPID0gdG9PYmplY3QoTyk7XG4gIGlmKGhhcyhPLCBJRV9QUk9UTykpcmV0dXJuIE9bSUVfUFJPVE9dO1xuICBpZih0eXBlb2YgTy5jb25zdHJ1Y3RvciA9PSAnZnVuY3Rpb24nICYmIE8gaW5zdGFuY2VvZiBPLmNvbnN0cnVjdG9yKXtcbiAgICByZXR1cm4gTy5jb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG4gIH0gcmV0dXJuIE8gaW5zdGFuY2VvZiBPYmplY3QgPyBPYmplY3RQcm90byA6IG51bGw7XG59OyIsInZhciBoYXMgICAgICAgICAgPSByZXF1aXJlKCcuL19oYXMnKVxuICAsIHRvSU9iamVjdCAgICA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKVxuICAsIGFycmF5SW5kZXhPZiA9IHJlcXVpcmUoJy4vX2FycmF5LWluY2x1ZGVzJykoZmFsc2UpXG4gICwgSUVfUFJPVE8gICAgID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG9iamVjdCwgbmFtZXMpe1xuICB2YXIgTyAgICAgID0gdG9JT2JqZWN0KG9iamVjdClcbiAgICAsIGkgICAgICA9IDBcbiAgICAsIHJlc3VsdCA9IFtdXG4gICAgLCBrZXk7XG4gIGZvcihrZXkgaW4gTylpZihrZXkgIT0gSUVfUFJPVE8paGFzKE8sIGtleSkgJiYgcmVzdWx0LnB1c2goa2V5KTtcbiAgLy8gRG9uJ3QgZW51bSBidWcgJiBoaWRkZW4ga2V5c1xuICB3aGlsZShuYW1lcy5sZW5ndGggPiBpKWlmKGhhcyhPLCBrZXkgPSBuYW1lc1tpKytdKSl7XG4gICAgfmFycmF5SW5kZXhPZihyZXN1bHQsIGtleSkgfHwgcmVzdWx0LnB1c2goa2V5KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTsiLCIvLyAxOS4xLjIuMTQgLyAxNS4yLjMuMTQgT2JqZWN0LmtleXMoTylcbnZhciAka2V5cyAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzLWludGVybmFsJylcbiAgLCBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiBrZXlzKE8pe1xuICByZXR1cm4gJGtleXMoTywgZW51bUJ1Z0tleXMpO1xufTsiLCJleHBvcnRzLmYgPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTsiLCIvLyBtb3N0IE9iamVjdCBtZXRob2RzIGJ5IEVTNiBzaG91bGQgYWNjZXB0IHByaW1pdGl2ZXNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCBjb3JlICAgID0gcmVxdWlyZSgnLi9fY29yZScpXG4gICwgZmFpbHMgICA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKEtFWSwgZXhlYyl7XG4gIHZhciBmbiAgPSAoY29yZS5PYmplY3QgfHwge30pW0tFWV0gfHwgT2JqZWN0W0tFWV1cbiAgICAsIGV4cCA9IHt9O1xuICBleHBbS0VZXSA9IGV4ZWMoZm4pO1xuICAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIGZhaWxzKGZ1bmN0aW9uKCl7IGZuKDEpOyB9KSwgJ09iamVjdCcsIGV4cCk7XG59OyIsInZhciBnZXRLZXlzICAgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpXG4gICwgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpXG4gICwgaXNFbnVtICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpLmY7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGlzRW50cmllcyl7XG4gIHJldHVybiBmdW5jdGlvbihpdCl7XG4gICAgdmFyIE8gICAgICA9IHRvSU9iamVjdChpdClcbiAgICAgICwga2V5cyAgID0gZ2V0S2V5cyhPKVxuICAgICAgLCBsZW5ndGggPSBrZXlzLmxlbmd0aFxuICAgICAgLCBpICAgICAgPSAwXG4gICAgICAsIHJlc3VsdCA9IFtdXG4gICAgICAsIGtleTtcbiAgICB3aGlsZShsZW5ndGggPiBpKWlmKGlzRW51bS5jYWxsKE8sIGtleSA9IGtleXNbaSsrXSkpe1xuICAgICAgcmVzdWx0LnB1c2goaXNFbnRyaWVzID8gW2tleSwgT1trZXldXSA6IE9ba2V5XSk7XG4gICAgfSByZXR1cm4gcmVzdWx0O1xuICB9O1xufTsiLCIvLyBhbGwgb2JqZWN0IGtleXMsIGluY2x1ZGVzIG5vbi1lbnVtZXJhYmxlIGFuZCBzeW1ib2xzXG52YXIgZ09QTiAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpXG4gICwgZ09QUyAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpXG4gICwgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKVxuICAsIFJlZmxlY3QgID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuUmVmbGVjdDtcbm1vZHVsZS5leHBvcnRzID0gUmVmbGVjdCAmJiBSZWZsZWN0Lm93bktleXMgfHwgZnVuY3Rpb24gb3duS2V5cyhpdCl7XG4gIHZhciBrZXlzICAgICAgID0gZ09QTi5mKGFuT2JqZWN0KGl0KSlcbiAgICAsIGdldFN5bWJvbHMgPSBnT1BTLmY7XG4gIHJldHVybiBnZXRTeW1ib2xzID8ga2V5cy5jb25jYXQoZ2V0U3ltYm9scyhpdCkpIDoga2V5cztcbn07IiwidmFyICRwYXJzZUZsb2F0ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykucGFyc2VGbG9hdFxuICAsICR0cmltICAgICAgID0gcmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKS50cmltO1xuXG5tb2R1bGUuZXhwb3J0cyA9IDEgLyAkcGFyc2VGbG9hdChyZXF1aXJlKCcuL19zdHJpbmctd3MnKSArICctMCcpICE9PSAtSW5maW5pdHkgPyBmdW5jdGlvbiBwYXJzZUZsb2F0KHN0cil7XG4gIHZhciBzdHJpbmcgPSAkdHJpbShTdHJpbmcoc3RyKSwgMylcbiAgICAsIHJlc3VsdCA9ICRwYXJzZUZsb2F0KHN0cmluZyk7XG4gIHJldHVybiByZXN1bHQgPT09IDAgJiYgc3RyaW5nLmNoYXJBdCgwKSA9PSAnLScgPyAtMCA6IHJlc3VsdDtcbn0gOiAkcGFyc2VGbG9hdDsiLCJ2YXIgJHBhcnNlSW50ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykucGFyc2VJbnRcbiAgLCAkdHJpbSAgICAgPSByZXF1aXJlKCcuL19zdHJpbmctdHJpbScpLnRyaW1cbiAgLCB3cyAgICAgICAgPSByZXF1aXJlKCcuL19zdHJpbmctd3MnKVxuICAsIGhleCAgICAgICA9IC9eW1xcLStdPzBbeFhdLztcblxubW9kdWxlLmV4cG9ydHMgPSAkcGFyc2VJbnQod3MgKyAnMDgnKSAhPT0gOCB8fCAkcGFyc2VJbnQod3MgKyAnMHgxNicpICE9PSAyMiA/IGZ1bmN0aW9uIHBhcnNlSW50KHN0ciwgcmFkaXgpe1xuICB2YXIgc3RyaW5nID0gJHRyaW0oU3RyaW5nKHN0ciksIDMpO1xuICByZXR1cm4gJHBhcnNlSW50KHN0cmluZywgKHJhZGl4ID4+PiAwKSB8fCAoaGV4LnRlc3Qoc3RyaW5nKSA/IDE2IDogMTApKTtcbn0gOiAkcGFyc2VJbnQ7IiwiJ3VzZSBzdHJpY3QnO1xudmFyIHBhdGggICAgICA9IHJlcXVpcmUoJy4vX3BhdGgnKVxuICAsIGludm9rZSAgICA9IHJlcXVpcmUoJy4vX2ludm9rZScpXG4gICwgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigvKiAuLi5wYXJncyAqLyl7XG4gIHZhciBmbiAgICAgPSBhRnVuY3Rpb24odGhpcylcbiAgICAsIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGhcbiAgICAsIHBhcmdzICA9IEFycmF5KGxlbmd0aClcbiAgICAsIGkgICAgICA9IDBcbiAgICAsIF8gICAgICA9IHBhdGguX1xuICAgICwgaG9sZGVyID0gZmFsc2U7XG4gIHdoaWxlKGxlbmd0aCA+IGkpaWYoKHBhcmdzW2ldID0gYXJndW1lbnRzW2krK10pID09PSBfKWhvbGRlciA9IHRydWU7XG4gIHJldHVybiBmdW5jdGlvbigvKiAuLi5hcmdzICovKXtcbiAgICB2YXIgdGhhdCA9IHRoaXNcbiAgICAgICwgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgICwgaiA9IDAsIGsgPSAwLCBhcmdzO1xuICAgIGlmKCFob2xkZXIgJiYgIWFMZW4pcmV0dXJuIGludm9rZShmbiwgcGFyZ3MsIHRoYXQpO1xuICAgIGFyZ3MgPSBwYXJncy5zbGljZSgpO1xuICAgIGlmKGhvbGRlcilmb3IoO2xlbmd0aCA+IGo7IGorKylpZihhcmdzW2pdID09PSBfKWFyZ3Nbal0gPSBhcmd1bWVudHNbaysrXTtcbiAgICB3aGlsZShhTGVuID4gaylhcmdzLnB1c2goYXJndW1lbnRzW2srK10pO1xuICAgIHJldHVybiBpbnZva2UoZm4sIGFyZ3MsIHRoYXQpO1xuICB9O1xufTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpOyIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oYml0bWFwLCB2YWx1ZSl7XG4gIHJldHVybiB7XG4gICAgZW51bWVyYWJsZSAgOiAhKGJpdG1hcCAmIDEpLFxuICAgIGNvbmZpZ3VyYWJsZTogIShiaXRtYXAgJiAyKSxcbiAgICB3cml0YWJsZSAgICA6ICEoYml0bWFwICYgNCksXG4gICAgdmFsdWUgICAgICAgOiB2YWx1ZVxuICB9O1xufTsiLCJ2YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbih0YXJnZXQsIHNyYywgc2FmZSl7XG4gIGZvcih2YXIga2V5IGluIHNyYylyZWRlZmluZSh0YXJnZXQsIGtleSwgc3JjW2tleV0sIHNhZmUpO1xuICByZXR1cm4gdGFyZ2V0O1xufTsiLCJ2YXIgZ2xvYmFsICAgID0gcmVxdWlyZSgnLi9fZ2xvYmFsJylcbiAgLCBoaWRlICAgICAgPSByZXF1aXJlKCcuL19oaWRlJylcbiAgLCBoYXMgICAgICAgPSByZXF1aXJlKCcuL19oYXMnKVxuICAsIFNSQyAgICAgICA9IHJlcXVpcmUoJy4vX3VpZCcpKCdzcmMnKVxuICAsIFRPX1NUUklORyA9ICd0b1N0cmluZydcbiAgLCAkdG9TdHJpbmcgPSBGdW5jdGlvbltUT19TVFJJTkddXG4gICwgVFBMICAgICAgID0gKCcnICsgJHRvU3RyaW5nKS5zcGxpdChUT19TVFJJTkcpO1xuXG5yZXF1aXJlKCcuL19jb3JlJykuaW5zcGVjdFNvdXJjZSA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuICR0b1N0cmluZy5jYWxsKGl0KTtcbn07XG5cbihtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKE8sIGtleSwgdmFsLCBzYWZlKXtcbiAgdmFyIGlzRnVuY3Rpb24gPSB0eXBlb2YgdmFsID09ICdmdW5jdGlvbic7XG4gIGlmKGlzRnVuY3Rpb24paGFzKHZhbCwgJ25hbWUnKSB8fCBoaWRlKHZhbCwgJ25hbWUnLCBrZXkpO1xuICBpZihPW2tleV0gPT09IHZhbClyZXR1cm47XG4gIGlmKGlzRnVuY3Rpb24paGFzKHZhbCwgU1JDKSB8fCBoaWRlKHZhbCwgU1JDLCBPW2tleV0gPyAnJyArIE9ba2V5XSA6IFRQTC5qb2luKFN0cmluZyhrZXkpKSk7XG4gIGlmKE8gPT09IGdsb2JhbCl7XG4gICAgT1trZXldID0gdmFsO1xuICB9IGVsc2Uge1xuICAgIGlmKCFzYWZlKXtcbiAgICAgIGRlbGV0ZSBPW2tleV07XG4gICAgICBoaWRlKE8sIGtleSwgdmFsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYoT1trZXldKU9ba2V5XSA9IHZhbDtcbiAgICAgIGVsc2UgaGlkZShPLCBrZXksIHZhbCk7XG4gICAgfVxuICB9XG4vLyBhZGQgZmFrZSBGdW5jdGlvbiN0b1N0cmluZyBmb3IgY29ycmVjdCB3b3JrIHdyYXBwZWQgbWV0aG9kcyAvIGNvbnN0cnVjdG9ycyB3aXRoIG1ldGhvZHMgbGlrZSBMb0Rhc2ggaXNOYXRpdmVcbn0pKEZ1bmN0aW9uLnByb3RvdHlwZSwgVE9fU1RSSU5HLCBmdW5jdGlvbiB0b1N0cmluZygpe1xuICByZXR1cm4gdHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyAmJiB0aGlzW1NSQ10gfHwgJHRvU3RyaW5nLmNhbGwodGhpcyk7XG59KTsiLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHJlZ0V4cCwgcmVwbGFjZSl7XG4gIHZhciByZXBsYWNlciA9IHJlcGxhY2UgPT09IE9iamVjdChyZXBsYWNlKSA/IGZ1bmN0aW9uKHBhcnQpe1xuICAgIHJldHVybiByZXBsYWNlW3BhcnRdO1xuICB9IDogcmVwbGFjZTtcbiAgcmV0dXJuIGZ1bmN0aW9uKGl0KXtcbiAgICByZXR1cm4gU3RyaW5nKGl0KS5yZXBsYWNlKHJlZ0V4cCwgcmVwbGFjZXIpO1xuICB9O1xufTsiLCIvLyA3LjIuOSBTYW1lVmFsdWUoeCwgeSlcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmlzIHx8IGZ1bmN0aW9uIGlzKHgsIHkpe1xuICByZXR1cm4geCA9PT0geSA/IHggIT09IDAgfHwgMSAvIHggPT09IDEgLyB5IDogeCAhPSB4ICYmIHkgIT0geTtcbn07IiwiLy8gV29ya3Mgd2l0aCBfX3Byb3RvX18gb25seS4gT2xkIHY4IGNhbid0IHdvcmsgd2l0aCBudWxsIHByb3RvIG9iamVjdHMuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0JylcbiAgLCBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGNoZWNrID0gZnVuY3Rpb24oTywgcHJvdG8pe1xuICBhbk9iamVjdChPKTtcbiAgaWYoIWlzT2JqZWN0KHByb3RvKSAmJiBwcm90byAhPT0gbnVsbCl0aHJvdyBUeXBlRXJyb3IocHJvdG8gKyBcIjogY2FuJ3Qgc2V0IGFzIHByb3RvdHlwZSFcIik7XG59O1xubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldDogT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8ICgnX19wcm90b19fJyBpbiB7fSA/IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICBmdW5jdGlvbih0ZXN0LCBidWdneSwgc2V0KXtcbiAgICAgIHRyeSB7XG4gICAgICAgIHNldCA9IHJlcXVpcmUoJy4vX2N0eCcpKEZ1bmN0aW9uLmNhbGwsIHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZihPYmplY3QucHJvdG90eXBlLCAnX19wcm90b19fJykuc2V0LCAyKTtcbiAgICAgICAgc2V0KHRlc3QsIFtdKTtcbiAgICAgICAgYnVnZ3kgPSAhKHRlc3QgaW5zdGFuY2VvZiBBcnJheSk7XG4gICAgICB9IGNhdGNoKGUpeyBidWdneSA9IHRydWU7IH1cbiAgICAgIHJldHVybiBmdW5jdGlvbiBzZXRQcm90b3R5cGVPZihPLCBwcm90byl7XG4gICAgICAgIGNoZWNrKE8sIHByb3RvKTtcbiAgICAgICAgaWYoYnVnZ3kpTy5fX3Byb3RvX18gPSBwcm90bztcbiAgICAgICAgZWxzZSBzZXQoTywgcHJvdG8pO1xuICAgICAgICByZXR1cm4gTztcbiAgICAgIH07XG4gICAgfSh7fSwgZmFsc2UpIDogdW5kZWZpbmVkKSxcbiAgY2hlY2s6IGNoZWNrXG59OyIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgICAgICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpXG4gICwgZFAgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKVxuICAsIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKVxuICAsIFNQRUNJRVMgICAgID0gcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihLRVkpe1xuICB2YXIgQyA9IGdsb2JhbFtLRVldO1xuICBpZihERVNDUklQVE9SUyAmJiBDICYmICFDW1NQRUNJRVNdKWRQLmYoQywgU1BFQ0lFUywge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uKCl7IHJldHVybiB0aGlzOyB9XG4gIH0pO1xufTsiLCJ2YXIgZGVmID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZlxuICAsIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpXG4gICwgVEFHID0gcmVxdWlyZSgnLi9fd2tzJykoJ3RvU3RyaW5nVGFnJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQsIHRhZywgc3RhdCl7XG4gIGlmKGl0ICYmICFoYXMoaXQgPSBzdGF0ID8gaXQgOiBpdC5wcm90b3R5cGUsIFRBRykpZGVmKGl0LCBUQUcsIHtjb25maWd1cmFibGU6IHRydWUsIHZhbHVlOiB0YWd9KTtcbn07IiwidmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCdrZXlzJylcbiAgLCB1aWQgICAgPSByZXF1aXJlKCcuL191aWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oa2V5KXtcbiAgcmV0dXJuIHNoYXJlZFtrZXldIHx8IChzaGFyZWRba2V5XSA9IHVpZChrZXkpKTtcbn07IiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpXG4gICwgU0hBUkVEID0gJ19fY29yZS1qc19zaGFyZWRfXydcbiAgLCBzdG9yZSAgPSBnbG9iYWxbU0hBUkVEXSB8fCAoZ2xvYmFsW1NIQVJFRF0gPSB7fSk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGtleSl7XG4gIHJldHVybiBzdG9yZVtrZXldIHx8IChzdG9yZVtrZXldID0ge30pO1xufTsiLCIvLyA3LjMuMjAgU3BlY2llc0NvbnN0cnVjdG9yKE8sIGRlZmF1bHRDb25zdHJ1Y3RvcilcbnZhciBhbk9iamVjdCAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKVxuICAsIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKVxuICAsIFNQRUNJRVMgICA9IHJlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKE8sIEQpe1xuICB2YXIgQyA9IGFuT2JqZWN0KE8pLmNvbnN0cnVjdG9yLCBTO1xuICByZXR1cm4gQyA9PT0gdW5kZWZpbmVkIHx8IChTID0gYW5PYmplY3QoQylbU1BFQ0lFU10pID09IHVuZGVmaW5lZCA/IEQgOiBhRnVuY3Rpb24oUyk7XG59OyIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obWV0aG9kLCBhcmcpe1xuICByZXR1cm4gISFtZXRob2QgJiYgZmFpbHMoZnVuY3Rpb24oKXtcbiAgICBhcmcgPyBtZXRob2QuY2FsbChudWxsLCBmdW5jdGlvbigpe30sIDEpIDogbWV0aG9kLmNhbGwobnVsbCk7XG4gIH0pO1xufTsiLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpXG4gICwgZGVmaW5lZCAgID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xuLy8gdHJ1ZSAgLT4gU3RyaW5nI2F0XG4vLyBmYWxzZSAtPiBTdHJpbmcjY29kZVBvaW50QXRcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oVE9fU1RSSU5HKXtcbiAgcmV0dXJuIGZ1bmN0aW9uKHRoYXQsIHBvcyl7XG4gICAgdmFyIHMgPSBTdHJpbmcoZGVmaW5lZCh0aGF0KSlcbiAgICAgICwgaSA9IHRvSW50ZWdlcihwb3MpXG4gICAgICAsIGwgPSBzLmxlbmd0aFxuICAgICAgLCBhLCBiO1xuICAgIGlmKGkgPCAwIHx8IGkgPj0gbClyZXR1cm4gVE9fU1RSSU5HID8gJycgOiB1bmRlZmluZWQ7XG4gICAgYSA9IHMuY2hhckNvZGVBdChpKTtcbiAgICByZXR1cm4gYSA8IDB4ZDgwMCB8fCBhID4gMHhkYmZmIHx8IGkgKyAxID09PSBsIHx8IChiID0gcy5jaGFyQ29kZUF0KGkgKyAxKSkgPCAweGRjMDAgfHwgYiA+IDB4ZGZmZlxuICAgICAgPyBUT19TVFJJTkcgPyBzLmNoYXJBdChpKSA6IGFcbiAgICAgIDogVE9fU1RSSU5HID8gcy5zbGljZShpLCBpICsgMikgOiAoYSAtIDB4ZDgwMCA8PCAxMCkgKyAoYiAtIDB4ZGMwMCkgKyAweDEwMDAwO1xuICB9O1xufTsiLCIvLyBoZWxwZXIgZm9yIFN0cmluZyN7c3RhcnRzV2l0aCwgZW5kc1dpdGgsIGluY2x1ZGVzfVxudmFyIGlzUmVnRXhwID0gcmVxdWlyZSgnLi9faXMtcmVnZXhwJylcbiAgLCBkZWZpbmVkICA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbih0aGF0LCBzZWFyY2hTdHJpbmcsIE5BTUUpe1xuICBpZihpc1JlZ0V4cChzZWFyY2hTdHJpbmcpKXRocm93IFR5cGVFcnJvcignU3RyaW5nIycgKyBOQU1FICsgXCIgZG9lc24ndCBhY2NlcHQgcmVnZXghXCIpO1xuICByZXR1cm4gU3RyaW5nKGRlZmluZWQodGhhdCkpO1xufTsiLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgZmFpbHMgICA9IHJlcXVpcmUoJy4vX2ZhaWxzJylcbiAgLCBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpXG4gICwgcXVvdCAgICA9IC9cIi9nO1xuLy8gQi4yLjMuMi4xIENyZWF0ZUhUTUwoc3RyaW5nLCB0YWcsIGF0dHJpYnV0ZSwgdmFsdWUpXG52YXIgY3JlYXRlSFRNTCA9IGZ1bmN0aW9uKHN0cmluZywgdGFnLCBhdHRyaWJ1dGUsIHZhbHVlKSB7XG4gIHZhciBTICA9IFN0cmluZyhkZWZpbmVkKHN0cmluZykpXG4gICAgLCBwMSA9ICc8JyArIHRhZztcbiAgaWYoYXR0cmlidXRlICE9PSAnJylwMSArPSAnICcgKyBhdHRyaWJ1dGUgKyAnPVwiJyArIFN0cmluZyh2YWx1ZSkucmVwbGFjZShxdW90LCAnJnF1b3Q7JykgKyAnXCInO1xuICByZXR1cm4gcDEgKyAnPicgKyBTICsgJzwvJyArIHRhZyArICc+Jztcbn07XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKE5BTUUsIGV4ZWMpe1xuICB2YXIgTyA9IHt9O1xuICBPW05BTUVdID0gZXhlYyhjcmVhdGVIVE1MKTtcbiAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBmYWlscyhmdW5jdGlvbigpe1xuICAgIHZhciB0ZXN0ID0gJydbTkFNRV0oJ1wiJyk7XG4gICAgcmV0dXJuIHRlc3QgIT09IHRlc3QudG9Mb3dlckNhc2UoKSB8fCB0ZXN0LnNwbGl0KCdcIicpLmxlbmd0aCA+IDM7XG4gIH0pLCAnU3RyaW5nJywgTyk7XG59OyIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXN0cmluZy1wYWQtc3RhcnQtZW5kXG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKVxuICAsIHJlcGVhdCAgID0gcmVxdWlyZSgnLi9fc3RyaW5nLXJlcGVhdCcpXG4gICwgZGVmaW5lZCAgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odGhhdCwgbWF4TGVuZ3RoLCBmaWxsU3RyaW5nLCBsZWZ0KXtcbiAgdmFyIFMgICAgICAgICAgICA9IFN0cmluZyhkZWZpbmVkKHRoYXQpKVxuICAgICwgc3RyaW5nTGVuZ3RoID0gUy5sZW5ndGhcbiAgICAsIGZpbGxTdHIgICAgICA9IGZpbGxTdHJpbmcgPT09IHVuZGVmaW5lZCA/ICcgJyA6IFN0cmluZyhmaWxsU3RyaW5nKVxuICAgICwgaW50TWF4TGVuZ3RoID0gdG9MZW5ndGgobWF4TGVuZ3RoKTtcbiAgaWYoaW50TWF4TGVuZ3RoIDw9IHN0cmluZ0xlbmd0aCB8fCBmaWxsU3RyID09ICcnKXJldHVybiBTO1xuICB2YXIgZmlsbExlbiA9IGludE1heExlbmd0aCAtIHN0cmluZ0xlbmd0aFxuICAgICwgc3RyaW5nRmlsbGVyID0gcmVwZWF0LmNhbGwoZmlsbFN0ciwgTWF0aC5jZWlsKGZpbGxMZW4gLyBmaWxsU3RyLmxlbmd0aCkpO1xuICBpZihzdHJpbmdGaWxsZXIubGVuZ3RoID4gZmlsbExlbilzdHJpbmdGaWxsZXIgPSBzdHJpbmdGaWxsZXIuc2xpY2UoMCwgZmlsbExlbik7XG4gIHJldHVybiBsZWZ0ID8gc3RyaW5nRmlsbGVyICsgUyA6IFMgKyBzdHJpbmdGaWxsZXI7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKVxuICAsIGRlZmluZWQgICA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiByZXBlYXQoY291bnQpe1xuICB2YXIgc3RyID0gU3RyaW5nKGRlZmluZWQodGhpcykpXG4gICAgLCByZXMgPSAnJ1xuICAgICwgbiAgID0gdG9JbnRlZ2VyKGNvdW50KTtcbiAgaWYobiA8IDAgfHwgbiA9PSBJbmZpbml0eSl0aHJvdyBSYW5nZUVycm9yKFwiQ291bnQgY2FuJ3QgYmUgbmVnYXRpdmVcIik7XG4gIGZvcig7biA+IDA7IChuID4+Pj0gMSkgJiYgKHN0ciArPSBzdHIpKWlmKG4gJiAxKXJlcyArPSBzdHI7XG4gIHJldHVybiByZXM7XG59OyIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpXG4gICwgZmFpbHMgICA9IHJlcXVpcmUoJy4vX2ZhaWxzJylcbiAgLCBzcGFjZXMgID0gcmVxdWlyZSgnLi9fc3RyaW5nLXdzJylcbiAgLCBzcGFjZSAgID0gJ1snICsgc3BhY2VzICsgJ10nXG4gICwgbm9uICAgICA9ICdcXHUyMDBiXFx1MDA4NSdcbiAgLCBsdHJpbSAgID0gUmVnRXhwKCdeJyArIHNwYWNlICsgc3BhY2UgKyAnKicpXG4gICwgcnRyaW0gICA9IFJlZ0V4cChzcGFjZSArIHNwYWNlICsgJyokJyk7XG5cbnZhciBleHBvcnRlciA9IGZ1bmN0aW9uKEtFWSwgZXhlYywgQUxJQVMpe1xuICB2YXIgZXhwICAgPSB7fTtcbiAgdmFyIEZPUkNFID0gZmFpbHMoZnVuY3Rpb24oKXtcbiAgICByZXR1cm4gISFzcGFjZXNbS0VZXSgpIHx8IG5vbltLRVldKCkgIT0gbm9uO1xuICB9KTtcbiAgdmFyIGZuID0gZXhwW0tFWV0gPSBGT1JDRSA/IGV4ZWModHJpbSkgOiBzcGFjZXNbS0VZXTtcbiAgaWYoQUxJQVMpZXhwW0FMSUFTXSA9IGZuO1xuICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIEZPUkNFLCAnU3RyaW5nJywgZXhwKTtcbn07XG5cbi8vIDEgLT4gU3RyaW5nI3RyaW1MZWZ0XG4vLyAyIC0+IFN0cmluZyN0cmltUmlnaHRcbi8vIDMgLT4gU3RyaW5nI3RyaW1cbnZhciB0cmltID0gZXhwb3J0ZXIudHJpbSA9IGZ1bmN0aW9uKHN0cmluZywgVFlQRSl7XG4gIHN0cmluZyA9IFN0cmluZyhkZWZpbmVkKHN0cmluZykpO1xuICBpZihUWVBFICYgMSlzdHJpbmcgPSBzdHJpbmcucmVwbGFjZShsdHJpbSwgJycpO1xuICBpZihUWVBFICYgMilzdHJpbmcgPSBzdHJpbmcucmVwbGFjZShydHJpbSwgJycpO1xuICByZXR1cm4gc3RyaW5nO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRlcjsiLCJtb2R1bGUuZXhwb3J0cyA9ICdcXHgwOVxceDBBXFx4MEJcXHgwQ1xceDBEXFx4MjBcXHhBMFxcdTE2ODBcXHUxODBFXFx1MjAwMFxcdTIwMDFcXHUyMDAyXFx1MjAwMycgK1xuICAnXFx1MjAwNFxcdTIwMDVcXHUyMDA2XFx1MjAwN1xcdTIwMDhcXHUyMDA5XFx1MjAwQVxcdTIwMkZcXHUyMDVGXFx1MzAwMFxcdTIwMjhcXHUyMDI5XFx1RkVGRic7IiwidmFyIGN0eCAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2N0eCcpXG4gICwgaW52b2tlICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9faW52b2tlJylcbiAgLCBodG1sICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19odG1sJylcbiAgLCBjZWwgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19kb20tY3JlYXRlJylcbiAgLCBnbG9iYWwgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19nbG9iYWwnKVxuICAsIHByb2Nlc3MgICAgICAgICAgICA9IGdsb2JhbC5wcm9jZXNzXG4gICwgc2V0VGFzayAgICAgICAgICAgID0gZ2xvYmFsLnNldEltbWVkaWF0ZVxuICAsIGNsZWFyVGFzayAgICAgICAgICA9IGdsb2JhbC5jbGVhckltbWVkaWF0ZVxuICAsIE1lc3NhZ2VDaGFubmVsICAgICA9IGdsb2JhbC5NZXNzYWdlQ2hhbm5lbFxuICAsIGNvdW50ZXIgICAgICAgICAgICA9IDBcbiAgLCBxdWV1ZSAgICAgICAgICAgICAgPSB7fVxuICAsIE9OUkVBRFlTVEFURUNIQU5HRSA9ICdvbnJlYWR5c3RhdGVjaGFuZ2UnXG4gICwgZGVmZXIsIGNoYW5uZWwsIHBvcnQ7XG52YXIgcnVuID0gZnVuY3Rpb24oKXtcbiAgdmFyIGlkID0gK3RoaXM7XG4gIGlmKHF1ZXVlLmhhc093blByb3BlcnR5KGlkKSl7XG4gICAgdmFyIGZuID0gcXVldWVbaWRdO1xuICAgIGRlbGV0ZSBxdWV1ZVtpZF07XG4gICAgZm4oKTtcbiAgfVxufTtcbnZhciBsaXN0ZW5lciA9IGZ1bmN0aW9uKGV2ZW50KXtcbiAgcnVuLmNhbGwoZXZlbnQuZGF0YSk7XG59O1xuLy8gTm9kZS5qcyAwLjkrICYgSUUxMCsgaGFzIHNldEltbWVkaWF0ZSwgb3RoZXJ3aXNlOlxuaWYoIXNldFRhc2sgfHwgIWNsZWFyVGFzayl7XG4gIHNldFRhc2sgPSBmdW5jdGlvbiBzZXRJbW1lZGlhdGUoZm4pe1xuICAgIHZhciBhcmdzID0gW10sIGkgPSAxO1xuICAgIHdoaWxlKGFyZ3VtZW50cy5sZW5ndGggPiBpKWFyZ3MucHVzaChhcmd1bWVudHNbaSsrXSk7XG4gICAgcXVldWVbKytjb3VudGVyXSA9IGZ1bmN0aW9uKCl7XG4gICAgICBpbnZva2UodHlwZW9mIGZuID09ICdmdW5jdGlvbicgPyBmbiA6IEZ1bmN0aW9uKGZuKSwgYXJncyk7XG4gICAgfTtcbiAgICBkZWZlcihjb3VudGVyKTtcbiAgICByZXR1cm4gY291bnRlcjtcbiAgfTtcbiAgY2xlYXJUYXNrID0gZnVuY3Rpb24gY2xlYXJJbW1lZGlhdGUoaWQpe1xuICAgIGRlbGV0ZSBxdWV1ZVtpZF07XG4gIH07XG4gIC8vIE5vZGUuanMgMC44LVxuICBpZihyZXF1aXJlKCcuL19jb2YnKShwcm9jZXNzKSA9PSAncHJvY2Vzcycpe1xuICAgIGRlZmVyID0gZnVuY3Rpb24oaWQpe1xuICAgICAgcHJvY2Vzcy5uZXh0VGljayhjdHgocnVuLCBpZCwgMSkpO1xuICAgIH07XG4gIC8vIEJyb3dzZXJzIHdpdGggTWVzc2FnZUNoYW5uZWwsIGluY2x1ZGVzIFdlYldvcmtlcnNcbiAgfSBlbHNlIGlmKE1lc3NhZ2VDaGFubmVsKXtcbiAgICBjaGFubmVsID0gbmV3IE1lc3NhZ2VDaGFubmVsO1xuICAgIHBvcnQgICAgPSBjaGFubmVsLnBvcnQyO1xuICAgIGNoYW5uZWwucG9ydDEub25tZXNzYWdlID0gbGlzdGVuZXI7XG4gICAgZGVmZXIgPSBjdHgocG9ydC5wb3N0TWVzc2FnZSwgcG9ydCwgMSk7XG4gIC8vIEJyb3dzZXJzIHdpdGggcG9zdE1lc3NhZ2UsIHNraXAgV2ViV29ya2Vyc1xuICAvLyBJRTggaGFzIHBvc3RNZXNzYWdlLCBidXQgaXQncyBzeW5jICYgdHlwZW9mIGl0cyBwb3N0TWVzc2FnZSBpcyAnb2JqZWN0J1xuICB9IGVsc2UgaWYoZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIgJiYgdHlwZW9mIHBvc3RNZXNzYWdlID09ICdmdW5jdGlvbicgJiYgIWdsb2JhbC5pbXBvcnRTY3JpcHRzKXtcbiAgICBkZWZlciA9IGZ1bmN0aW9uKGlkKXtcbiAgICAgIGdsb2JhbC5wb3N0TWVzc2FnZShpZCArICcnLCAnKicpO1xuICAgIH07XG4gICAgZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBsaXN0ZW5lciwgZmFsc2UpO1xuICAvLyBJRTgtXG4gIH0gZWxzZSBpZihPTlJFQURZU1RBVEVDSEFOR0UgaW4gY2VsKCdzY3JpcHQnKSl7XG4gICAgZGVmZXIgPSBmdW5jdGlvbihpZCl7XG4gICAgICBodG1sLmFwcGVuZENoaWxkKGNlbCgnc2NyaXB0JykpW09OUkVBRFlTVEFURUNIQU5HRV0gPSBmdW5jdGlvbigpe1xuICAgICAgICBodG1sLnJlbW92ZUNoaWxkKHRoaXMpO1xuICAgICAgICBydW4uY2FsbChpZCk7XG4gICAgICB9O1xuICAgIH07XG4gIC8vIFJlc3Qgb2xkIGJyb3dzZXJzXG4gIH0gZWxzZSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbihpZCl7XG4gICAgICBzZXRUaW1lb3V0KGN0eChydW4sIGlkLCAxKSwgMCk7XG4gICAgfTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldDogICBzZXRUYXNrLFxuICBjbGVhcjogY2xlYXJUYXNrXG59OyIsInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJylcbiAgLCBtYXggICAgICAgPSBNYXRoLm1heFxuICAsIG1pbiAgICAgICA9IE1hdGgubWluO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpbmRleCwgbGVuZ3RoKXtcbiAgaW5kZXggPSB0b0ludGVnZXIoaW5kZXgpO1xuICByZXR1cm4gaW5kZXggPCAwID8gbWF4KGluZGV4ICsgbGVuZ3RoLCAwKSA6IG1pbihpbmRleCwgbGVuZ3RoKTtcbn07IiwiLy8gNy4xLjQgVG9JbnRlZ2VyXG52YXIgY2VpbCAgPSBNYXRoLmNlaWxcbiAgLCBmbG9vciA9IE1hdGguZmxvb3I7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIGlzTmFOKGl0ID0gK2l0KSA/IDAgOiAoaXQgPiAwID8gZmxvb3IgOiBjZWlsKShpdCk7XG59OyIsIi8vIHRvIGluZGV4ZWQgb2JqZWN0LCB0b09iamVjdCB3aXRoIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgc3RyaW5nc1xudmFyIElPYmplY3QgPSByZXF1aXJlKCcuL19pb2JqZWN0JylcbiAgLCBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG4gIHJldHVybiBJT2JqZWN0KGRlZmluZWQoaXQpKTtcbn07IiwiLy8gNy4xLjE1IFRvTGVuZ3RoXG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpXG4gICwgbWluICAgICAgID0gTWF0aC5taW47XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIGl0ID4gMCA/IG1pbih0b0ludGVnZXIoaXQpLCAweDFmZmZmZmZmZmZmZmZmKSA6IDA7IC8vIHBvdygyLCA1MykgLSAxID09IDkwMDcxOTkyNTQ3NDA5OTFcbn07IiwiLy8gNy4xLjEzIFRvT2JqZWN0KGFyZ3VtZW50KVxudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIE9iamVjdChkZWZpbmVkKGl0KSk7XG59OyIsIi8vIDcuMS4xIFRvUHJpbWl0aXZlKGlucHV0IFssIFByZWZlcnJlZFR5cGVdKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG4vLyBpbnN0ZWFkIG9mIHRoZSBFUzYgc3BlYyB2ZXJzaW9uLCB3ZSBkaWRuJ3QgaW1wbGVtZW50IEBAdG9QcmltaXRpdmUgY2FzZVxuLy8gYW5kIHRoZSBzZWNvbmQgYXJndW1lbnQgLSBmbGFnIC0gcHJlZmVycmVkIHR5cGUgaXMgYSBzdHJpbmdcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQsIFMpe1xuICBpZighaXNPYmplY3QoaXQpKXJldHVybiBpdDtcbiAgdmFyIGZuLCB2YWw7XG4gIGlmKFMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpcmV0dXJuIHZhbDtcbiAgaWYodHlwZW9mIChmbiA9IGl0LnZhbHVlT2YpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSlyZXR1cm4gdmFsO1xuICBpZighUyAmJiB0eXBlb2YgKGZuID0gaXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSlyZXR1cm4gdmFsO1xuICB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjb252ZXJ0IG9iamVjdCB0byBwcmltaXRpdmUgdmFsdWVcIik7XG59OyIsIid1c2Ugc3RyaWN0JztcbmlmKHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykpe1xuICB2YXIgTElCUkFSWSAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKVxuICAgICwgZ2xvYmFsICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpXG4gICAgLCBmYWlscyAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fZmFpbHMnKVxuICAgICwgJGV4cG9ydCAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICAgLCAkdHlwZWQgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fdHlwZWQnKVxuICAgICwgJGJ1ZmZlciAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX3R5cGVkLWJ1ZmZlcicpXG4gICAgLCBjdHggICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fY3R4JylcbiAgICAsIGFuSW5zdGFuY2UgICAgICAgICAgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpXG4gICAgLCBwcm9wZXJ0eURlc2MgICAgICAgID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpXG4gICAgLCBoaWRlICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9faGlkZScpXG4gICAgLCByZWRlZmluZUFsbCAgICAgICAgID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJylcbiAgICAsIHRvSW50ZWdlciAgICAgICAgICAgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJylcbiAgICAsIHRvTGVuZ3RoICAgICAgICAgICAgPSByZXF1aXJlKCcuL190by1sZW5ndGgnKVxuICAgICwgdG9JbmRleCAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX3RvLWluZGV4JylcbiAgICAsIHRvUHJpbWl0aXZlICAgICAgICAgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKVxuICAgICwgaGFzICAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2hhcycpXG4gICAgLCBzYW1lICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fc2FtZS12YWx1ZScpXG4gICAgLCBjbGFzc29mICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpXG4gICAgLCBpc09iamVjdCAgICAgICAgICAgID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0JylcbiAgICAsIHRvT2JqZWN0ICAgICAgICAgICAgPSByZXF1aXJlKCcuL190by1vYmplY3QnKVxuICAgICwgaXNBcnJheUl0ZXIgICAgICAgICA9IHJlcXVpcmUoJy4vX2lzLWFycmF5LWl0ZXInKVxuICAgICwgY3JlYXRlICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKVxuICAgICwgZ2V0UHJvdG90eXBlT2YgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKVxuICAgICwgZ09QTiAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZlxuICAgICwgZ2V0SXRlckZuICAgICAgICAgICA9IHJlcXVpcmUoJy4vY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kJylcbiAgICAsIHVpZCAgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL191aWQnKVxuICAgICwgd2tzICAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX3drcycpXG4gICAgLCBjcmVhdGVBcnJheU1ldGhvZCAgID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpXG4gICAgLCBjcmVhdGVBcnJheUluY2x1ZGVzID0gcmVxdWlyZSgnLi9fYXJyYXktaW5jbHVkZXMnKVxuICAgICwgc3BlY2llc0NvbnN0cnVjdG9yICA9IHJlcXVpcmUoJy4vX3NwZWNpZXMtY29uc3RydWN0b3InKVxuICAgICwgQXJyYXlJdGVyYXRvcnMgICAgICA9IHJlcXVpcmUoJy4vZXM2LmFycmF5Lml0ZXJhdG9yJylcbiAgICAsIEl0ZXJhdG9ycyAgICAgICAgICAgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKVxuICAgICwgJGl0ZXJEZXRlY3QgICAgICAgICA9IHJlcXVpcmUoJy4vX2l0ZXItZGV0ZWN0JylcbiAgICAsIHNldFNwZWNpZXMgICAgICAgICAgPSByZXF1aXJlKCcuL19zZXQtc3BlY2llcycpXG4gICAgLCBhcnJheUZpbGwgICAgICAgICAgID0gcmVxdWlyZSgnLi9fYXJyYXktZmlsbCcpXG4gICAgLCBhcnJheUNvcHlXaXRoaW4gICAgID0gcmVxdWlyZSgnLi9fYXJyYXktY29weS13aXRoaW4nKVxuICAgICwgJERQICAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpXG4gICAgLCAkR09QRCAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKVxuICAgICwgZFAgICAgICAgICAgICAgICAgICA9ICREUC5mXG4gICAgLCBnT1BEICAgICAgICAgICAgICAgID0gJEdPUEQuZlxuICAgICwgUmFuZ2VFcnJvciAgICAgICAgICA9IGdsb2JhbC5SYW5nZUVycm9yXG4gICAgLCBUeXBlRXJyb3IgICAgICAgICAgID0gZ2xvYmFsLlR5cGVFcnJvclxuICAgICwgVWludDhBcnJheSAgICAgICAgICA9IGdsb2JhbC5VaW50OEFycmF5XG4gICAgLCBBUlJBWV9CVUZGRVIgICAgICAgID0gJ0FycmF5QnVmZmVyJ1xuICAgICwgU0hBUkVEX0JVRkZFUiAgICAgICA9ICdTaGFyZWQnICsgQVJSQVlfQlVGRkVSXG4gICAgLCBCWVRFU19QRVJfRUxFTUVOVCAgID0gJ0JZVEVTX1BFUl9FTEVNRU5UJ1xuICAgICwgUFJPVE9UWVBFICAgICAgICAgICA9ICdwcm90b3R5cGUnXG4gICAgLCBBcnJheVByb3RvICAgICAgICAgID0gQXJyYXlbUFJPVE9UWVBFXVxuICAgICwgJEFycmF5QnVmZmVyICAgICAgICA9ICRidWZmZXIuQXJyYXlCdWZmZXJcbiAgICAsICREYXRhVmlldyAgICAgICAgICAgPSAkYnVmZmVyLkRhdGFWaWV3XG4gICAgLCBhcnJheUZvckVhY2ggICAgICAgID0gY3JlYXRlQXJyYXlNZXRob2QoMClcbiAgICAsIGFycmF5RmlsdGVyICAgICAgICAgPSBjcmVhdGVBcnJheU1ldGhvZCgyKVxuICAgICwgYXJyYXlTb21lICAgICAgICAgICA9IGNyZWF0ZUFycmF5TWV0aG9kKDMpXG4gICAgLCBhcnJheUV2ZXJ5ICAgICAgICAgID0gY3JlYXRlQXJyYXlNZXRob2QoNClcbiAgICAsIGFycmF5RmluZCAgICAgICAgICAgPSBjcmVhdGVBcnJheU1ldGhvZCg1KVxuICAgICwgYXJyYXlGaW5kSW5kZXggICAgICA9IGNyZWF0ZUFycmF5TWV0aG9kKDYpXG4gICAgLCBhcnJheUluY2x1ZGVzICAgICAgID0gY3JlYXRlQXJyYXlJbmNsdWRlcyh0cnVlKVxuICAgICwgYXJyYXlJbmRleE9mICAgICAgICA9IGNyZWF0ZUFycmF5SW5jbHVkZXMoZmFsc2UpXG4gICAgLCBhcnJheVZhbHVlcyAgICAgICAgID0gQXJyYXlJdGVyYXRvcnMudmFsdWVzXG4gICAgLCBhcnJheUtleXMgICAgICAgICAgID0gQXJyYXlJdGVyYXRvcnMua2V5c1xuICAgICwgYXJyYXlFbnRyaWVzICAgICAgICA9IEFycmF5SXRlcmF0b3JzLmVudHJpZXNcbiAgICAsIGFycmF5TGFzdEluZGV4T2YgICAgPSBBcnJheVByb3RvLmxhc3RJbmRleE9mXG4gICAgLCBhcnJheVJlZHVjZSAgICAgICAgID0gQXJyYXlQcm90by5yZWR1Y2VcbiAgICAsIGFycmF5UmVkdWNlUmlnaHQgICAgPSBBcnJheVByb3RvLnJlZHVjZVJpZ2h0XG4gICAgLCBhcnJheUpvaW4gICAgICAgICAgID0gQXJyYXlQcm90by5qb2luXG4gICAgLCBhcnJheVNvcnQgICAgICAgICAgID0gQXJyYXlQcm90by5zb3J0XG4gICAgLCBhcnJheVNsaWNlICAgICAgICAgID0gQXJyYXlQcm90by5zbGljZVxuICAgICwgYXJyYXlUb1N0cmluZyAgICAgICA9IEFycmF5UHJvdG8udG9TdHJpbmdcbiAgICAsIGFycmF5VG9Mb2NhbGVTdHJpbmcgPSBBcnJheVByb3RvLnRvTG9jYWxlU3RyaW5nXG4gICAgLCBJVEVSQVRPUiAgICAgICAgICAgID0gd2tzKCdpdGVyYXRvcicpXG4gICAgLCBUQUcgICAgICAgICAgICAgICAgID0gd2tzKCd0b1N0cmluZ1RhZycpXG4gICAgLCBUWVBFRF9DT05TVFJVQ1RPUiAgID0gdWlkKCd0eXBlZF9jb25zdHJ1Y3RvcicpXG4gICAgLCBERUZfQ09OU1RSVUNUT1IgICAgID0gdWlkKCdkZWZfY29uc3RydWN0b3InKVxuICAgICwgQUxMX0NPTlNUUlVDVE9SUyAgICA9ICR0eXBlZC5DT05TVFJcbiAgICAsIFRZUEVEX0FSUkFZICAgICAgICAgPSAkdHlwZWQuVFlQRURcbiAgICAsIFZJRVcgICAgICAgICAgICAgICAgPSAkdHlwZWQuVklFV1xuICAgICwgV1JPTkdfTEVOR1RIICAgICAgICA9ICdXcm9uZyBsZW5ndGghJztcblxuICB2YXIgJG1hcCA9IGNyZWF0ZUFycmF5TWV0aG9kKDEsIGZ1bmN0aW9uKE8sIGxlbmd0aCl7XG4gICAgcmV0dXJuIGFsbG9jYXRlKHNwZWNpZXNDb25zdHJ1Y3RvcihPLCBPW0RFRl9DT05TVFJVQ1RPUl0pLCBsZW5ndGgpO1xuICB9KTtcblxuICB2YXIgTElUVExFX0VORElBTiA9IGZhaWxzKGZ1bmN0aW9uKCl7XG4gICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KG5ldyBVaW50MTZBcnJheShbMV0pLmJ1ZmZlcilbMF0gPT09IDE7XG4gIH0pO1xuXG4gIHZhciBGT1JDRURfU0VUID0gISFVaW50OEFycmF5ICYmICEhVWludDhBcnJheVtQUk9UT1RZUEVdLnNldCAmJiBmYWlscyhmdW5jdGlvbigpe1xuICAgIG5ldyBVaW50OEFycmF5KDEpLnNldCh7fSk7XG4gIH0pO1xuXG4gIHZhciBzdHJpY3RUb0xlbmd0aCA9IGZ1bmN0aW9uKGl0LCBTQU1FKXtcbiAgICBpZihpdCA9PT0gdW5kZWZpbmVkKXRocm93IFR5cGVFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgIHZhciBudW1iZXIgPSAraXRcbiAgICAgICwgbGVuZ3RoID0gdG9MZW5ndGgoaXQpO1xuICAgIGlmKFNBTUUgJiYgIXNhbWUobnVtYmVyLCBsZW5ndGgpKXRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTtcbiAgICByZXR1cm4gbGVuZ3RoO1xuICB9O1xuXG4gIHZhciB0b09mZnNldCA9IGZ1bmN0aW9uKGl0LCBCWVRFUyl7XG4gICAgdmFyIG9mZnNldCA9IHRvSW50ZWdlcihpdCk7XG4gICAgaWYob2Zmc2V0IDwgMCB8fCBvZmZzZXQgJSBCWVRFUyl0aHJvdyBSYW5nZUVycm9yKCdXcm9uZyBvZmZzZXQhJyk7XG4gICAgcmV0dXJuIG9mZnNldDtcbiAgfTtcblxuICB2YXIgdmFsaWRhdGUgPSBmdW5jdGlvbihpdCl7XG4gICAgaWYoaXNPYmplY3QoaXQpICYmIFRZUEVEX0FSUkFZIGluIGl0KXJldHVybiBpdDtcbiAgICB0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhIHR5cGVkIGFycmF5IScpO1xuICB9O1xuXG4gIHZhciBhbGxvY2F0ZSA9IGZ1bmN0aW9uKEMsIGxlbmd0aCl7XG4gICAgaWYoIShpc09iamVjdChDKSAmJiBUWVBFRF9DT05TVFJVQ1RPUiBpbiBDKSl7XG4gICAgICB0aHJvdyBUeXBlRXJyb3IoJ0l0IGlzIG5vdCBhIHR5cGVkIGFycmF5IGNvbnN0cnVjdG9yIScpO1xuICAgIH0gcmV0dXJuIG5ldyBDKGxlbmd0aCk7XG4gIH07XG5cbiAgdmFyIHNwZWNpZXNGcm9tTGlzdCA9IGZ1bmN0aW9uKE8sIGxpc3Qpe1xuICAgIHJldHVybiBmcm9tTGlzdChzcGVjaWVzQ29uc3RydWN0b3IoTywgT1tERUZfQ09OU1RSVUNUT1JdKSwgbGlzdCk7XG4gIH07XG5cbiAgdmFyIGZyb21MaXN0ID0gZnVuY3Rpb24oQywgbGlzdCl7XG4gICAgdmFyIGluZGV4ICA9IDBcbiAgICAgICwgbGVuZ3RoID0gbGlzdC5sZW5ndGhcbiAgICAgICwgcmVzdWx0ID0gYWxsb2NhdGUoQywgbGVuZ3RoKTtcbiAgICB3aGlsZShsZW5ndGggPiBpbmRleClyZXN1bHRbaW5kZXhdID0gbGlzdFtpbmRleCsrXTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIHZhciBhZGRHZXR0ZXIgPSBmdW5jdGlvbihpdCwga2V5LCBpbnRlcm5hbCl7XG4gICAgZFAoaXQsIGtleSwge2dldDogZnVuY3Rpb24oKXsgcmV0dXJuIHRoaXMuX2RbaW50ZXJuYWxdOyB9fSk7XG4gIH07XG5cbiAgdmFyICRmcm9tID0gZnVuY3Rpb24gZnJvbShzb3VyY2UgLyosIG1hcGZuLCB0aGlzQXJnICovKXtcbiAgICB2YXIgTyAgICAgICA9IHRvT2JqZWN0KHNvdXJjZSlcbiAgICAgICwgYUxlbiAgICA9IGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgICwgbWFwZm4gICA9IGFMZW4gPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkXG4gICAgICAsIG1hcHBpbmcgPSBtYXBmbiAhPT0gdW5kZWZpbmVkXG4gICAgICAsIGl0ZXJGbiAgPSBnZXRJdGVyRm4oTylcbiAgICAgICwgaSwgbGVuZ3RoLCB2YWx1ZXMsIHJlc3VsdCwgc3RlcCwgaXRlcmF0b3I7XG4gICAgaWYoaXRlckZuICE9IHVuZGVmaW5lZCAmJiAhaXNBcnJheUl0ZXIoaXRlckZuKSl7XG4gICAgICBmb3IoaXRlcmF0b3IgPSBpdGVyRm4uY2FsbChPKSwgdmFsdWVzID0gW10sIGkgPSAwOyAhKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmU7IGkrKyl7XG4gICAgICAgIHZhbHVlcy5wdXNoKHN0ZXAudmFsdWUpO1xuICAgICAgfSBPID0gdmFsdWVzO1xuICAgIH1cbiAgICBpZihtYXBwaW5nICYmIGFMZW4gPiAyKW1hcGZuID0gY3R4KG1hcGZuLCBhcmd1bWVudHNbMl0sIDIpO1xuICAgIGZvcihpID0gMCwgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpLCByZXN1bHQgPSBhbGxvY2F0ZSh0aGlzLCBsZW5ndGgpOyBsZW5ndGggPiBpOyBpKyspe1xuICAgICAgcmVzdWx0W2ldID0gbWFwcGluZyA/IG1hcGZuKE9baV0sIGkpIDogT1tpXTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICB2YXIgJG9mID0gZnVuY3Rpb24gb2YoLyouLi5pdGVtcyovKXtcbiAgICB2YXIgaW5kZXggID0gMFxuICAgICAgLCBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoXG4gICAgICAsIHJlc3VsdCA9IGFsbG9jYXRlKHRoaXMsIGxlbmd0aCk7XG4gICAgd2hpbGUobGVuZ3RoID4gaW5kZXgpcmVzdWx0W2luZGV4XSA9IGFyZ3VtZW50c1tpbmRleCsrXTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIC8vIGlPUyBTYWZhcmkgNi54IGZhaWxzIGhlcmVcbiAgdmFyIFRPX0xPQ0FMRV9CVUcgPSAhIVVpbnQ4QXJyYXkgJiYgZmFpbHMoZnVuY3Rpb24oKXsgYXJyYXlUb0xvY2FsZVN0cmluZy5jYWxsKG5ldyBVaW50OEFycmF5KDEpKTsgfSk7XG5cbiAgdmFyICR0b0xvY2FsZVN0cmluZyA9IGZ1bmN0aW9uIHRvTG9jYWxlU3RyaW5nKCl7XG4gICAgcmV0dXJuIGFycmF5VG9Mb2NhbGVTdHJpbmcuYXBwbHkoVE9fTE9DQUxFX0JVRyA/IGFycmF5U2xpY2UuY2FsbCh2YWxpZGF0ZSh0aGlzKSkgOiB2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgfTtcblxuICB2YXIgcHJvdG8gPSB7XG4gICAgY29weVdpdGhpbjogZnVuY3Rpb24gY29weVdpdGhpbih0YXJnZXQsIHN0YXJ0IC8qLCBlbmQgKi8pe1xuICAgICAgcmV0dXJuIGFycmF5Q29weVdpdGhpbi5jYWxsKHZhbGlkYXRlKHRoaXMpLCB0YXJnZXQsIHN0YXJ0LCBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBldmVyeTogZnVuY3Rpb24gZXZlcnkoY2FsbGJhY2tmbiAvKiwgdGhpc0FyZyAqLyl7XG4gICAgICByZXR1cm4gYXJyYXlFdmVyeSh2YWxpZGF0ZSh0aGlzKSwgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgZmlsbDogZnVuY3Rpb24gZmlsbCh2YWx1ZSAvKiwgc3RhcnQsIGVuZCAqLyl7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheUZpbGwuYXBwbHkodmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICBmaWx0ZXI6IGZ1bmN0aW9uIGZpbHRlcihjYWxsYmFja2ZuIC8qLCB0aGlzQXJnICovKXtcbiAgICAgIHJldHVybiBzcGVjaWVzRnJvbUxpc3QodGhpcywgYXJyYXlGaWx0ZXIodmFsaWRhdGUodGhpcyksIGNhbGxiYWNrZm4sXG4gICAgICAgIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKSk7XG4gICAgfSxcbiAgICBmaW5kOiBmdW5jdGlvbiBmaW5kKHByZWRpY2F0ZSAvKiwgdGhpc0FyZyAqLyl7XG4gICAgICByZXR1cm4gYXJyYXlGaW5kKHZhbGlkYXRlKHRoaXMpLCBwcmVkaWNhdGUsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGZpbmRJbmRleDogZnVuY3Rpb24gZmluZEluZGV4KHByZWRpY2F0ZSAvKiwgdGhpc0FyZyAqLyl7XG4gICAgICByZXR1cm4gYXJyYXlGaW5kSW5kZXgodmFsaWRhdGUodGhpcyksIHByZWRpY2F0ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgZm9yRWFjaDogZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFja2ZuIC8qLCB0aGlzQXJnICovKXtcbiAgICAgIGFycmF5Rm9yRWFjaCh2YWxpZGF0ZSh0aGlzKSwgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgaW5kZXhPZjogZnVuY3Rpb24gaW5kZXhPZihzZWFyY2hFbGVtZW50IC8qLCBmcm9tSW5kZXggKi8pe1xuICAgICAgcmV0dXJuIGFycmF5SW5kZXhPZih2YWxpZGF0ZSh0aGlzKSwgc2VhcmNoRWxlbWVudCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgaW5jbHVkZXM6IGZ1bmN0aW9uIGluY2x1ZGVzKHNlYXJjaEVsZW1lbnQgLyosIGZyb21JbmRleCAqLyl7XG4gICAgICByZXR1cm4gYXJyYXlJbmNsdWRlcyh2YWxpZGF0ZSh0aGlzKSwgc2VhcmNoRWxlbWVudCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgam9pbjogZnVuY3Rpb24gam9pbihzZXBhcmF0b3IpeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICByZXR1cm4gYXJyYXlKb2luLmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgbGFzdEluZGV4T2Y6IGZ1bmN0aW9uIGxhc3RJbmRleE9mKHNlYXJjaEVsZW1lbnQgLyosIGZyb21JbmRleCAqLyl7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheUxhc3RJbmRleE9mLmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgbWFwOiBmdW5jdGlvbiBtYXAobWFwZm4gLyosIHRoaXNBcmcgKi8pe1xuICAgICAgcmV0dXJuICRtYXAodmFsaWRhdGUodGhpcyksIG1hcGZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICByZWR1Y2U6IGZ1bmN0aW9uIHJlZHVjZShjYWxsYmFja2ZuIC8qLCBpbml0aWFsVmFsdWUgKi8peyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICByZXR1cm4gYXJyYXlSZWR1Y2UuYXBwbHkodmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICByZWR1Y2VSaWdodDogZnVuY3Rpb24gcmVkdWNlUmlnaHQoY2FsbGJhY2tmbiAvKiwgaW5pdGlhbFZhbHVlICovKXsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICAgcmV0dXJuIGFycmF5UmVkdWNlUmlnaHQuYXBwbHkodmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICByZXZlcnNlOiBmdW5jdGlvbiByZXZlcnNlKCl7XG4gICAgICB2YXIgdGhhdCAgID0gdGhpc1xuICAgICAgICAsIGxlbmd0aCA9IHZhbGlkYXRlKHRoYXQpLmxlbmd0aFxuICAgICAgICAsIG1pZGRsZSA9IE1hdGguZmxvb3IobGVuZ3RoIC8gMilcbiAgICAgICAgLCBpbmRleCAgPSAwXG4gICAgICAgICwgdmFsdWU7XG4gICAgICB3aGlsZShpbmRleCA8IG1pZGRsZSl7XG4gICAgICAgIHZhbHVlICAgICAgICAgPSB0aGF0W2luZGV4XTtcbiAgICAgICAgdGhhdFtpbmRleCsrXSA9IHRoYXRbLS1sZW5ndGhdO1xuICAgICAgICB0aGF0W2xlbmd0aF0gID0gdmFsdWU7XG4gICAgICB9IHJldHVybiB0aGF0O1xuICAgIH0sXG4gICAgc29tZTogZnVuY3Rpb24gc29tZShjYWxsYmFja2ZuIC8qLCB0aGlzQXJnICovKXtcbiAgICAgIHJldHVybiBhcnJheVNvbWUodmFsaWRhdGUodGhpcyksIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIHNvcnQ6IGZ1bmN0aW9uIHNvcnQoY29tcGFyZWZuKXtcbiAgICAgIHJldHVybiBhcnJheVNvcnQuY2FsbCh2YWxpZGF0ZSh0aGlzKSwgY29tcGFyZWZuKTtcbiAgICB9LFxuICAgIHN1YmFycmF5OiBmdW5jdGlvbiBzdWJhcnJheShiZWdpbiwgZW5kKXtcbiAgICAgIHZhciBPICAgICAgPSB2YWxpZGF0ZSh0aGlzKVxuICAgICAgICAsIGxlbmd0aCA9IE8ubGVuZ3RoXG4gICAgICAgICwgJGJlZ2luID0gdG9JbmRleChiZWdpbiwgbGVuZ3RoKTtcbiAgICAgIHJldHVybiBuZXcgKHNwZWNpZXNDb25zdHJ1Y3RvcihPLCBPW0RFRl9DT05TVFJVQ1RPUl0pKShcbiAgICAgICAgTy5idWZmZXIsXG4gICAgICAgIE8uYnl0ZU9mZnNldCArICRiZWdpbiAqIE8uQllURVNfUEVSX0VMRU1FTlQsXG4gICAgICAgIHRvTGVuZ3RoKChlbmQgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IHRvSW5kZXgoZW5kLCBsZW5ndGgpKSAtICRiZWdpbilcbiAgICAgICk7XG4gICAgfVxuICB9O1xuXG4gIHZhciAkc2xpY2UgPSBmdW5jdGlvbiBzbGljZShzdGFydCwgZW5kKXtcbiAgICByZXR1cm4gc3BlY2llc0Zyb21MaXN0KHRoaXMsIGFycmF5U2xpY2UuY2FsbCh2YWxpZGF0ZSh0aGlzKSwgc3RhcnQsIGVuZCkpO1xuICB9O1xuXG4gIHZhciAkc2V0ID0gZnVuY3Rpb24gc2V0KGFycmF5TGlrZSAvKiwgb2Zmc2V0ICovKXtcbiAgICB2YWxpZGF0ZSh0aGlzKTtcbiAgICB2YXIgb2Zmc2V0ID0gdG9PZmZzZXQoYXJndW1lbnRzWzFdLCAxKVxuICAgICAgLCBsZW5ndGggPSB0aGlzLmxlbmd0aFxuICAgICAgLCBzcmMgICAgPSB0b09iamVjdChhcnJheUxpa2UpXG4gICAgICAsIGxlbiAgICA9IHRvTGVuZ3RoKHNyYy5sZW5ndGgpXG4gICAgICAsIGluZGV4ICA9IDA7XG4gICAgaWYobGVuICsgb2Zmc2V0ID4gbGVuZ3RoKXRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTtcbiAgICB3aGlsZShpbmRleCA8IGxlbil0aGlzW29mZnNldCArIGluZGV4XSA9IHNyY1tpbmRleCsrXTtcbiAgfTtcblxuICB2YXIgJGl0ZXJhdG9ycyA9IHtcbiAgICBlbnRyaWVzOiBmdW5jdGlvbiBlbnRyaWVzKCl7XG4gICAgICByZXR1cm4gYXJyYXlFbnRyaWVzLmNhbGwodmFsaWRhdGUodGhpcykpO1xuICAgIH0sXG4gICAga2V5czogZnVuY3Rpb24ga2V5cygpe1xuICAgICAgcmV0dXJuIGFycmF5S2V5cy5jYWxsKHZhbGlkYXRlKHRoaXMpKTtcbiAgICB9LFxuICAgIHZhbHVlczogZnVuY3Rpb24gdmFsdWVzKCl7XG4gICAgICByZXR1cm4gYXJyYXlWYWx1ZXMuY2FsbCh2YWxpZGF0ZSh0aGlzKSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBpc1RBSW5kZXggPSBmdW5jdGlvbih0YXJnZXQsIGtleSl7XG4gICAgcmV0dXJuIGlzT2JqZWN0KHRhcmdldClcbiAgICAgICYmIHRhcmdldFtUWVBFRF9BUlJBWV1cbiAgICAgICYmIHR5cGVvZiBrZXkgIT0gJ3N5bWJvbCdcbiAgICAgICYmIGtleSBpbiB0YXJnZXRcbiAgICAgICYmIFN0cmluZygra2V5KSA9PSBTdHJpbmcoa2V5KTtcbiAgfTtcbiAgdmFyICRnZXREZXNjID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KXtcbiAgICByZXR1cm4gaXNUQUluZGV4KHRhcmdldCwga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKSlcbiAgICAgID8gcHJvcGVydHlEZXNjKDIsIHRhcmdldFtrZXldKVxuICAgICAgOiBnT1BEKHRhcmdldCwga2V5KTtcbiAgfTtcbiAgdmFyICRzZXREZXNjID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIGRlc2Mpe1xuICAgIGlmKGlzVEFJbmRleCh0YXJnZXQsIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSkpXG4gICAgICAmJiBpc09iamVjdChkZXNjKVxuICAgICAgJiYgaGFzKGRlc2MsICd2YWx1ZScpXG4gICAgICAmJiAhaGFzKGRlc2MsICdnZXQnKVxuICAgICAgJiYgIWhhcyhkZXNjLCAnc2V0JylcbiAgICAgIC8vIFRPRE86IGFkZCB2YWxpZGF0aW9uIGRlc2NyaXB0b3Igdy9vIGNhbGxpbmcgYWNjZXNzb3JzXG4gICAgICAmJiAhZGVzYy5jb25maWd1cmFibGVcbiAgICAgICYmICghaGFzKGRlc2MsICd3cml0YWJsZScpIHx8IGRlc2Mud3JpdGFibGUpXG4gICAgICAmJiAoIWhhcyhkZXNjLCAnZW51bWVyYWJsZScpIHx8IGRlc2MuZW51bWVyYWJsZSlcbiAgICApe1xuICAgICAgdGFyZ2V0W2tleV0gPSBkZXNjLnZhbHVlO1xuICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICB9IGVsc2UgcmV0dXJuIGRQKHRhcmdldCwga2V5LCBkZXNjKTtcbiAgfTtcblxuICBpZighQUxMX0NPTlNUUlVDVE9SUyl7XG4gICAgJEdPUEQuZiA9ICRnZXREZXNjO1xuICAgICREUC5mICAgPSAkc2V0RGVzYztcbiAgfVxuXG4gICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIUFMTF9DT05TVFJVQ1RPUlMsICdPYmplY3QnLCB7XG4gICAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiAkZ2V0RGVzYyxcbiAgICBkZWZpbmVQcm9wZXJ0eTogICAgICAgICAgICRzZXREZXNjXG4gIH0pO1xuXG4gIGlmKGZhaWxzKGZ1bmN0aW9uKCl7IGFycmF5VG9TdHJpbmcuY2FsbCh7fSk7IH0pKXtcbiAgICBhcnJheVRvU3RyaW5nID0gYXJyYXlUb0xvY2FsZVN0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCl7XG4gICAgICByZXR1cm4gYXJyYXlKb2luLmNhbGwodGhpcyk7XG4gICAgfVxuICB9XG5cbiAgdmFyICRUeXBlZEFycmF5UHJvdG90eXBlJCA9IHJlZGVmaW5lQWxsKHt9LCBwcm90byk7XG4gIHJlZGVmaW5lQWxsKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgJGl0ZXJhdG9ycyk7XG4gIGhpZGUoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCBJVEVSQVRPUiwgJGl0ZXJhdG9ycy52YWx1ZXMpO1xuICByZWRlZmluZUFsbCgkVHlwZWRBcnJheVByb3RvdHlwZSQsIHtcbiAgICBzbGljZTogICAgICAgICAgJHNsaWNlLFxuICAgIHNldDogICAgICAgICAgICAkc2V0LFxuICAgIGNvbnN0cnVjdG9yOiAgICBmdW5jdGlvbigpeyAvKiBub29wICovIH0sXG4gICAgdG9TdHJpbmc6ICAgICAgIGFycmF5VG9TdHJpbmcsXG4gICAgdG9Mb2NhbGVTdHJpbmc6ICR0b0xvY2FsZVN0cmluZ1xuICB9KTtcbiAgYWRkR2V0dGVyKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgJ2J1ZmZlcicsICdiJyk7XG4gIGFkZEdldHRlcigkVHlwZWRBcnJheVByb3RvdHlwZSQsICdieXRlT2Zmc2V0JywgJ28nKTtcbiAgYWRkR2V0dGVyKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgJ2J5dGVMZW5ndGgnLCAnbCcpO1xuICBhZGRHZXR0ZXIoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAnbGVuZ3RoJywgJ2UnKTtcbiAgZFAoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCBUQUcsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uKCl7IHJldHVybiB0aGlzW1RZUEVEX0FSUkFZXTsgfVxuICB9KTtcblxuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKEtFWSwgQllURVMsIHdyYXBwZXIsIENMQU1QRUQpe1xuICAgIENMQU1QRUQgPSAhIUNMQU1QRUQ7XG4gICAgdmFyIE5BTUUgICAgICAgPSBLRVkgKyAoQ0xBTVBFRCA/ICdDbGFtcGVkJyA6ICcnKSArICdBcnJheSdcbiAgICAgICwgSVNOVF9VSU5UOCA9IE5BTUUgIT0gJ1VpbnQ4QXJyYXknXG4gICAgICAsIEdFVFRFUiAgICAgPSAnZ2V0JyArIEtFWVxuICAgICAgLCBTRVRURVIgICAgID0gJ3NldCcgKyBLRVlcbiAgICAgICwgVHlwZWRBcnJheSA9IGdsb2JhbFtOQU1FXVxuICAgICAgLCBCYXNlICAgICAgID0gVHlwZWRBcnJheSB8fCB7fVxuICAgICAgLCBUQUMgICAgICAgID0gVHlwZWRBcnJheSAmJiBnZXRQcm90b3R5cGVPZihUeXBlZEFycmF5KVxuICAgICAgLCBGT1JDRUQgICAgID0gIVR5cGVkQXJyYXkgfHwgISR0eXBlZC5BQlZcbiAgICAgICwgTyAgICAgICAgICA9IHt9XG4gICAgICAsIFR5cGVkQXJyYXlQcm90b3R5cGUgPSBUeXBlZEFycmF5ICYmIFR5cGVkQXJyYXlbUFJPVE9UWVBFXTtcbiAgICB2YXIgZ2V0dGVyID0gZnVuY3Rpb24odGhhdCwgaW5kZXgpe1xuICAgICAgdmFyIGRhdGEgPSB0aGF0Ll9kO1xuICAgICAgcmV0dXJuIGRhdGEudltHRVRURVJdKGluZGV4ICogQllURVMgKyBkYXRhLm8sIExJVFRMRV9FTkRJQU4pO1xuICAgIH07XG4gICAgdmFyIHNldHRlciA9IGZ1bmN0aW9uKHRoYXQsIGluZGV4LCB2YWx1ZSl7XG4gICAgICB2YXIgZGF0YSA9IHRoYXQuX2Q7XG4gICAgICBpZihDTEFNUEVEKXZhbHVlID0gKHZhbHVlID0gTWF0aC5yb3VuZCh2YWx1ZSkpIDwgMCA/IDAgOiB2YWx1ZSA+IDB4ZmYgPyAweGZmIDogdmFsdWUgJiAweGZmO1xuICAgICAgZGF0YS52W1NFVFRFUl0oaW5kZXggKiBCWVRFUyArIGRhdGEubywgdmFsdWUsIExJVFRMRV9FTkRJQU4pO1xuICAgIH07XG4gICAgdmFyIGFkZEVsZW1lbnQgPSBmdW5jdGlvbih0aGF0LCBpbmRleCl7XG4gICAgICBkUCh0aGF0LCBpbmRleCwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgcmV0dXJuIGdldHRlcih0aGlzLCBpbmRleCk7XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24odmFsdWUpe1xuICAgICAgICAgIHJldHVybiBzZXR0ZXIodGhpcywgaW5kZXgsIHZhbHVlKTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZVxuICAgICAgfSk7XG4gICAgfTtcbiAgICBpZihGT1JDRUQpe1xuICAgICAgVHlwZWRBcnJheSA9IHdyYXBwZXIoZnVuY3Rpb24odGhhdCwgZGF0YSwgJG9mZnNldCwgJGxlbmd0aCl7XG4gICAgICAgIGFuSW5zdGFuY2UodGhhdCwgVHlwZWRBcnJheSwgTkFNRSwgJ19kJyk7XG4gICAgICAgIHZhciBpbmRleCAgPSAwXG4gICAgICAgICAgLCBvZmZzZXQgPSAwXG4gICAgICAgICAgLCBidWZmZXIsIGJ5dGVMZW5ndGgsIGxlbmd0aCwga2xhc3M7XG4gICAgICAgIGlmKCFpc09iamVjdChkYXRhKSl7XG4gICAgICAgICAgbGVuZ3RoICAgICA9IHN0cmljdFRvTGVuZ3RoKGRhdGEsIHRydWUpXG4gICAgICAgICAgYnl0ZUxlbmd0aCA9IGxlbmd0aCAqIEJZVEVTO1xuICAgICAgICAgIGJ1ZmZlciAgICAgPSBuZXcgJEFycmF5QnVmZmVyKGJ5dGVMZW5ndGgpO1xuICAgICAgICB9IGVsc2UgaWYoZGF0YSBpbnN0YW5jZW9mICRBcnJheUJ1ZmZlciB8fCAoa2xhc3MgPSBjbGFzc29mKGRhdGEpKSA9PSBBUlJBWV9CVUZGRVIgfHwga2xhc3MgPT0gU0hBUkVEX0JVRkZFUil7XG4gICAgICAgICAgYnVmZmVyID0gZGF0YTtcbiAgICAgICAgICBvZmZzZXQgPSB0b09mZnNldCgkb2Zmc2V0LCBCWVRFUyk7XG4gICAgICAgICAgdmFyICRsZW4gPSBkYXRhLmJ5dGVMZW5ndGg7XG4gICAgICAgICAgaWYoJGxlbmd0aCA9PT0gdW5kZWZpbmVkKXtcbiAgICAgICAgICAgIGlmKCRsZW4gJSBCWVRFUyl0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgICAgICAgICBieXRlTGVuZ3RoID0gJGxlbiAtIG9mZnNldDtcbiAgICAgICAgICAgIGlmKGJ5dGVMZW5ndGggPCAwKXRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYnl0ZUxlbmd0aCA9IHRvTGVuZ3RoKCRsZW5ndGgpICogQllURVM7XG4gICAgICAgICAgICBpZihieXRlTGVuZ3RoICsgb2Zmc2V0ID4gJGxlbil0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGxlbmd0aCA9IGJ5dGVMZW5ndGggLyBCWVRFUztcbiAgICAgICAgfSBlbHNlIGlmKFRZUEVEX0FSUkFZIGluIGRhdGEpe1xuICAgICAgICAgIHJldHVybiBmcm9tTGlzdChUeXBlZEFycmF5LCBkYXRhKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gJGZyb20uY2FsbChUeXBlZEFycmF5LCBkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBoaWRlKHRoYXQsICdfZCcsIHtcbiAgICAgICAgICBiOiBidWZmZXIsXG4gICAgICAgICAgbzogb2Zmc2V0LFxuICAgICAgICAgIGw6IGJ5dGVMZW5ndGgsXG4gICAgICAgICAgZTogbGVuZ3RoLFxuICAgICAgICAgIHY6IG5ldyAkRGF0YVZpZXcoYnVmZmVyKVxuICAgICAgICB9KTtcbiAgICAgICAgd2hpbGUoaW5kZXggPCBsZW5ndGgpYWRkRWxlbWVudCh0aGF0LCBpbmRleCsrKTtcbiAgICAgIH0pO1xuICAgICAgVHlwZWRBcnJheVByb3RvdHlwZSA9IFR5cGVkQXJyYXlbUFJPVE9UWVBFXSA9IGNyZWF0ZSgkVHlwZWRBcnJheVByb3RvdHlwZSQpO1xuICAgICAgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCAnY29uc3RydWN0b3InLCBUeXBlZEFycmF5KTtcbiAgICB9IGVsc2UgaWYoISRpdGVyRGV0ZWN0KGZ1bmN0aW9uKGl0ZXIpe1xuICAgICAgLy8gVjggd29ya3Mgd2l0aCBpdGVyYXRvcnMsIGJ1dCBmYWlscyBpbiBtYW55IG90aGVyIGNhc2VzXG4gICAgICAvLyBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9NDU1MlxuICAgICAgbmV3IFR5cGVkQXJyYXkobnVsbCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgICBuZXcgVHlwZWRBcnJheShpdGVyKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICB9LCB0cnVlKSl7XG4gICAgICBUeXBlZEFycmF5ID0gd3JhcHBlcihmdW5jdGlvbih0aGF0LCBkYXRhLCAkb2Zmc2V0LCAkbGVuZ3RoKXtcbiAgICAgICAgYW5JbnN0YW5jZSh0aGF0LCBUeXBlZEFycmF5LCBOQU1FKTtcbiAgICAgICAgdmFyIGtsYXNzO1xuICAgICAgICAvLyBgd3NgIG1vZHVsZSBidWcsIHRlbXBvcmFyaWx5IHJlbW92ZSB2YWxpZGF0aW9uIGxlbmd0aCBmb3IgVWludDhBcnJheVxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vd2Vic29ja2V0cy93cy9wdWxsLzY0NVxuICAgICAgICBpZighaXNPYmplY3QoZGF0YSkpcmV0dXJuIG5ldyBCYXNlKHN0cmljdFRvTGVuZ3RoKGRhdGEsIElTTlRfVUlOVDgpKTtcbiAgICAgICAgaWYoZGF0YSBpbnN0YW5jZW9mICRBcnJheUJ1ZmZlciB8fCAoa2xhc3MgPSBjbGFzc29mKGRhdGEpKSA9PSBBUlJBWV9CVUZGRVIgfHwga2xhc3MgPT0gU0hBUkVEX0JVRkZFUil7XG4gICAgICAgICAgcmV0dXJuICRsZW5ndGggIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgPyBuZXcgQmFzZShkYXRhLCB0b09mZnNldCgkb2Zmc2V0LCBCWVRFUyksICRsZW5ndGgpXG4gICAgICAgICAgICA6ICRvZmZzZXQgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICA/IG5ldyBCYXNlKGRhdGEsIHRvT2Zmc2V0KCRvZmZzZXQsIEJZVEVTKSlcbiAgICAgICAgICAgICAgOiBuZXcgQmFzZShkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBpZihUWVBFRF9BUlJBWSBpbiBkYXRhKXJldHVybiBmcm9tTGlzdChUeXBlZEFycmF5LCBkYXRhKTtcbiAgICAgICAgcmV0dXJuICRmcm9tLmNhbGwoVHlwZWRBcnJheSwgZGF0YSk7XG4gICAgICB9KTtcbiAgICAgIGFycmF5Rm9yRWFjaChUQUMgIT09IEZ1bmN0aW9uLnByb3RvdHlwZSA/IGdPUE4oQmFzZSkuY29uY2F0KGdPUE4oVEFDKSkgOiBnT1BOKEJhc2UpLCBmdW5jdGlvbihrZXkpe1xuICAgICAgICBpZighKGtleSBpbiBUeXBlZEFycmF5KSloaWRlKFR5cGVkQXJyYXksIGtleSwgQmFzZVtrZXldKTtcbiAgICAgIH0pO1xuICAgICAgVHlwZWRBcnJheVtQUk9UT1RZUEVdID0gVHlwZWRBcnJheVByb3RvdHlwZTtcbiAgICAgIGlmKCFMSUJSQVJZKVR5cGVkQXJyYXlQcm90b3R5cGUuY29uc3RydWN0b3IgPSBUeXBlZEFycmF5O1xuICAgIH1cbiAgICB2YXIgJG5hdGl2ZUl0ZXJhdG9yICAgPSBUeXBlZEFycmF5UHJvdG90eXBlW0lURVJBVE9SXVxuICAgICAgLCBDT1JSRUNUX0lURVJfTkFNRSA9ICEhJG5hdGl2ZUl0ZXJhdG9yICYmICgkbmF0aXZlSXRlcmF0b3IubmFtZSA9PSAndmFsdWVzJyB8fCAkbmF0aXZlSXRlcmF0b3IubmFtZSA9PSB1bmRlZmluZWQpXG4gICAgICAsICRpdGVyYXRvciAgICAgICAgID0gJGl0ZXJhdG9ycy52YWx1ZXM7XG4gICAgaGlkZShUeXBlZEFycmF5LCBUWVBFRF9DT05TVFJVQ1RPUiwgdHJ1ZSk7XG4gICAgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCBUWVBFRF9BUlJBWSwgTkFNRSk7XG4gICAgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCBWSUVXLCB0cnVlKTtcbiAgICBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIERFRl9DT05TVFJVQ1RPUiwgVHlwZWRBcnJheSk7XG5cbiAgICBpZihDTEFNUEVEID8gbmV3IFR5cGVkQXJyYXkoMSlbVEFHXSAhPSBOQU1FIDogIShUQUcgaW4gVHlwZWRBcnJheVByb3RvdHlwZSkpe1xuICAgICAgZFAoVHlwZWRBcnJheVByb3RvdHlwZSwgVEFHLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24oKXsgcmV0dXJuIE5BTUU7IH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIE9bTkFNRV0gPSBUeXBlZEFycmF5O1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAoVHlwZWRBcnJheSAhPSBCYXNlKSwgTyk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUywgTkFNRSwge1xuICAgICAgQllURVNfUEVSX0VMRU1FTlQ6IEJZVEVTLFxuICAgICAgZnJvbTogJGZyb20sXG4gICAgICBvZjogJG9mXG4gICAgfSk7XG5cbiAgICBpZighKEJZVEVTX1BFUl9FTEVNRU5UIGluIFR5cGVkQXJyYXlQcm90b3R5cGUpKWhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgQllURVNfUEVSX0VMRU1FTlQsIEJZVEVTKTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5QLCBOQU1FLCBwcm90byk7XG5cbiAgICBzZXRTcGVjaWVzKE5BTUUpO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBGT1JDRURfU0VULCBOQU1FLCB7c2V0OiAkc2V0fSk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFDT1JSRUNUX0lURVJfTkFNRSwgTkFNRSwgJGl0ZXJhdG9ycyk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChUeXBlZEFycmF5UHJvdG90eXBlLnRvU3RyaW5nICE9IGFycmF5VG9TdHJpbmcpLCBOQU1FLCB7dG9TdHJpbmc6IGFycmF5VG9TdHJpbmd9KTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogZmFpbHMoZnVuY3Rpb24oKXtcbiAgICAgIG5ldyBUeXBlZEFycmF5KDEpLnNsaWNlKCk7XG4gICAgfSksIE5BTUUsIHtzbGljZTogJHNsaWNlfSk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChmYWlscyhmdW5jdGlvbigpe1xuICAgICAgcmV0dXJuIFsxLCAyXS50b0xvY2FsZVN0cmluZygpICE9IG5ldyBUeXBlZEFycmF5KFsxLCAyXSkudG9Mb2NhbGVTdHJpbmcoKVxuICAgIH0pIHx8ICFmYWlscyhmdW5jdGlvbigpe1xuICAgICAgVHlwZWRBcnJheVByb3RvdHlwZS50b0xvY2FsZVN0cmluZy5jYWxsKFsxLCAyXSk7XG4gICAgfSkpLCBOQU1FLCB7dG9Mb2NhbGVTdHJpbmc6ICR0b0xvY2FsZVN0cmluZ30pO1xuXG4gICAgSXRlcmF0b3JzW05BTUVdID0gQ09SUkVDVF9JVEVSX05BTUUgPyAkbmF0aXZlSXRlcmF0b3IgOiAkaXRlcmF0b3I7XG4gICAgaWYoIUxJQlJBUlkgJiYgIUNPUlJFQ1RfSVRFUl9OQU1FKWhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgSVRFUkFUT1IsICRpdGVyYXRvcik7XG4gIH07XG59IGVsc2UgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpeyAvKiBlbXB0eSAqLyB9OyIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgICAgICAgICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpXG4gICwgREVTQ1JJUFRPUlMgICAgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpXG4gICwgTElCUkFSWSAgICAgICAgPSByZXF1aXJlKCcuL19saWJyYXJ5JylcbiAgLCAkdHlwZWQgICAgICAgICA9IHJlcXVpcmUoJy4vX3R5cGVkJylcbiAgLCBoaWRlICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2hpZGUnKVxuICAsIHJlZGVmaW5lQWxsICAgID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJylcbiAgLCBmYWlscyAgICAgICAgICA9IHJlcXVpcmUoJy4vX2ZhaWxzJylcbiAgLCBhbkluc3RhbmNlICAgICA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJylcbiAgLCB0b0ludGVnZXIgICAgICA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKVxuICAsIHRvTGVuZ3RoICAgICAgID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJylcbiAgLCBnT1BOICAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZlxuICAsIGRQICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZlxuICAsIGFycmF5RmlsbCAgICAgID0gcmVxdWlyZSgnLi9fYXJyYXktZmlsbCcpXG4gICwgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpXG4gICwgQVJSQVlfQlVGRkVSICAgPSAnQXJyYXlCdWZmZXInXG4gICwgREFUQV9WSUVXICAgICAgPSAnRGF0YVZpZXcnXG4gICwgUFJPVE9UWVBFICAgICAgPSAncHJvdG90eXBlJ1xuICAsIFdST05HX0xFTkdUSCAgID0gJ1dyb25nIGxlbmd0aCEnXG4gICwgV1JPTkdfSU5ERVggICAgPSAnV3JvbmcgaW5kZXghJ1xuICAsICRBcnJheUJ1ZmZlciAgID0gZ2xvYmFsW0FSUkFZX0JVRkZFUl1cbiAgLCAkRGF0YVZpZXcgICAgICA9IGdsb2JhbFtEQVRBX1ZJRVddXG4gICwgTWF0aCAgICAgICAgICAgPSBnbG9iYWwuTWF0aFxuICAsIFJhbmdlRXJyb3IgICAgID0gZ2xvYmFsLlJhbmdlRXJyb3JcbiAgLCBJbmZpbml0eSAgICAgICA9IGdsb2JhbC5JbmZpbml0eVxuICAsIEJhc2VCdWZmZXIgICAgID0gJEFycmF5QnVmZmVyXG4gICwgYWJzICAgICAgICAgICAgPSBNYXRoLmFic1xuICAsIHBvdyAgICAgICAgICAgID0gTWF0aC5wb3dcbiAgLCBmbG9vciAgICAgICAgICA9IE1hdGguZmxvb3JcbiAgLCBsb2cgICAgICAgICAgICA9IE1hdGgubG9nXG4gICwgTE4yICAgICAgICAgICAgPSBNYXRoLkxOMlxuICAsIEJVRkZFUiAgICAgICAgID0gJ2J1ZmZlcidcbiAgLCBCWVRFX0xFTkdUSCAgICA9ICdieXRlTGVuZ3RoJ1xuICAsIEJZVEVfT0ZGU0VUICAgID0gJ2J5dGVPZmZzZXQnXG4gICwgJEJVRkZFUiAgICAgICAgPSBERVNDUklQVE9SUyA/ICdfYicgOiBCVUZGRVJcbiAgLCAkTEVOR1RIICAgICAgICA9IERFU0NSSVBUT1JTID8gJ19sJyA6IEJZVEVfTEVOR1RIXG4gICwgJE9GRlNFVCAgICAgICAgPSBERVNDUklQVE9SUyA/ICdfbycgOiBCWVRFX09GRlNFVDtcblxuLy8gSUVFRTc1NCBjb252ZXJzaW9ucyBiYXNlZCBvbiBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2llZWU3NTRcbnZhciBwYWNrSUVFRTc1NCA9IGZ1bmN0aW9uKHZhbHVlLCBtTGVuLCBuQnl0ZXMpe1xuICB2YXIgYnVmZmVyID0gQXJyYXkobkJ5dGVzKVxuICAgICwgZUxlbiAgID0gbkJ5dGVzICogOCAtIG1MZW4gLSAxXG4gICAgLCBlTWF4ICAgPSAoMSA8PCBlTGVuKSAtIDFcbiAgICAsIGVCaWFzICA9IGVNYXggPj4gMVxuICAgICwgcnQgICAgID0gbUxlbiA9PT0gMjMgPyBwb3coMiwgLTI0KSAtIHBvdygyLCAtNzcpIDogMFxuICAgICwgaSAgICAgID0gMFxuICAgICwgcyAgICAgID0gdmFsdWUgPCAwIHx8IHZhbHVlID09PSAwICYmIDEgLyB2YWx1ZSA8IDAgPyAxIDogMFxuICAgICwgZSwgbSwgYztcbiAgdmFsdWUgPSBhYnModmFsdWUpXG4gIGlmKHZhbHVlICE9IHZhbHVlIHx8IHZhbHVlID09PSBJbmZpbml0eSl7XG4gICAgbSA9IHZhbHVlICE9IHZhbHVlID8gMSA6IDA7XG4gICAgZSA9IGVNYXg7XG4gIH0gZWxzZSB7XG4gICAgZSA9IGZsb29yKGxvZyh2YWx1ZSkgLyBMTjIpO1xuICAgIGlmKHZhbHVlICogKGMgPSBwb3coMiwgLWUpKSA8IDEpe1xuICAgICAgZS0tO1xuICAgICAgYyAqPSAyO1xuICAgIH1cbiAgICBpZihlICsgZUJpYXMgPj0gMSl7XG4gICAgICB2YWx1ZSArPSBydCAvIGM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhbHVlICs9IHJ0ICogcG93KDIsIDEgLSBlQmlhcyk7XG4gICAgfVxuICAgIGlmKHZhbHVlICogYyA+PSAyKXtcbiAgICAgIGUrKztcbiAgICAgIGMgLz0gMjtcbiAgICB9XG4gICAgaWYoZSArIGVCaWFzID49IGVNYXgpe1xuICAgICAgbSA9IDA7XG4gICAgICBlID0gZU1heDtcbiAgICB9IGVsc2UgaWYoZSArIGVCaWFzID49IDEpe1xuICAgICAgbSA9ICh2YWx1ZSAqIGMgLSAxKSAqIHBvdygyLCBtTGVuKTtcbiAgICAgIGUgPSBlICsgZUJpYXM7XG4gICAgfSBlbHNlIHtcbiAgICAgIG0gPSB2YWx1ZSAqIHBvdygyLCBlQmlhcyAtIDEpICogcG93KDIsIG1MZW4pO1xuICAgICAgZSA9IDA7XG4gICAgfVxuICB9XG4gIGZvcig7IG1MZW4gPj0gODsgYnVmZmVyW2krK10gPSBtICYgMjU1LCBtIC89IDI1NiwgbUxlbiAtPSA4KTtcbiAgZSA9IGUgPDwgbUxlbiB8IG07XG4gIGVMZW4gKz0gbUxlbjtcbiAgZm9yKDsgZUxlbiA+IDA7IGJ1ZmZlcltpKytdID0gZSAmIDI1NSwgZSAvPSAyNTYsIGVMZW4gLT0gOCk7XG4gIGJ1ZmZlclstLWldIHw9IHMgKiAxMjg7XG4gIHJldHVybiBidWZmZXI7XG59O1xudmFyIHVucGFja0lFRUU3NTQgPSBmdW5jdGlvbihidWZmZXIsIG1MZW4sIG5CeXRlcyl7XG4gIHZhciBlTGVuICA9IG5CeXRlcyAqIDggLSBtTGVuIC0gMVxuICAgICwgZU1heCAgPSAoMSA8PCBlTGVuKSAtIDFcbiAgICAsIGVCaWFzID0gZU1heCA+PiAxXG4gICAgLCBuQml0cyA9IGVMZW4gLSA3XG4gICAgLCBpICAgICA9IG5CeXRlcyAtIDFcbiAgICAsIHMgICAgID0gYnVmZmVyW2ktLV1cbiAgICAsIGUgICAgID0gcyAmIDEyN1xuICAgICwgbTtcbiAgcyA+Pj0gNztcbiAgZm9yKDsgbkJpdHMgPiAwOyBlID0gZSAqIDI1NiArIGJ1ZmZlcltpXSwgaS0tLCBuQml0cyAtPSA4KTtcbiAgbSA9IGUgJiAoMSA8PCAtbkJpdHMpIC0gMTtcbiAgZSA+Pj0gLW5CaXRzO1xuICBuQml0cyArPSBtTGVuO1xuICBmb3IoOyBuQml0cyA+IDA7IG0gPSBtICogMjU2ICsgYnVmZmVyW2ldLCBpLS0sIG5CaXRzIC09IDgpO1xuICBpZihlID09PSAwKXtcbiAgICBlID0gMSAtIGVCaWFzO1xuICB9IGVsc2UgaWYoZSA9PT0gZU1heCl7XG4gICAgcmV0dXJuIG0gPyBOYU4gOiBzID8gLUluZmluaXR5IDogSW5maW5pdHk7XG4gIH0gZWxzZSB7XG4gICAgbSA9IG0gKyBwb3coMiwgbUxlbik7XG4gICAgZSA9IGUgLSBlQmlhcztcbiAgfSByZXR1cm4gKHMgPyAtMSA6IDEpICogbSAqIHBvdygyLCBlIC0gbUxlbik7XG59O1xuXG52YXIgdW5wYWNrSTMyID0gZnVuY3Rpb24oYnl0ZXMpe1xuICByZXR1cm4gYnl0ZXNbM10gPDwgMjQgfCBieXRlc1syXSA8PCAxNiB8IGJ5dGVzWzFdIDw8IDggfCBieXRlc1swXTtcbn07XG52YXIgcGFja0k4ID0gZnVuY3Rpb24oaXQpe1xuICByZXR1cm4gW2l0ICYgMHhmZl07XG59O1xudmFyIHBhY2tJMTYgPSBmdW5jdGlvbihpdCl7XG4gIHJldHVybiBbaXQgJiAweGZmLCBpdCA+PiA4ICYgMHhmZl07XG59O1xudmFyIHBhY2tJMzIgPSBmdW5jdGlvbihpdCl7XG4gIHJldHVybiBbaXQgJiAweGZmLCBpdCA+PiA4ICYgMHhmZiwgaXQgPj4gMTYgJiAweGZmLCBpdCA+PiAyNCAmIDB4ZmZdO1xufTtcbnZhciBwYWNrRjY0ID0gZnVuY3Rpb24oaXQpe1xuICByZXR1cm4gcGFja0lFRUU3NTQoaXQsIDUyLCA4KTtcbn07XG52YXIgcGFja0YzMiA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIHBhY2tJRUVFNzU0KGl0LCAyMywgNCk7XG59O1xuXG52YXIgYWRkR2V0dGVyID0gZnVuY3Rpb24oQywga2V5LCBpbnRlcm5hbCl7XG4gIGRQKENbUFJPVE9UWVBFXSwga2V5LCB7Z2V0OiBmdW5jdGlvbigpeyByZXR1cm4gdGhpc1tpbnRlcm5hbF07IH19KTtcbn07XG5cbnZhciBnZXQgPSBmdW5jdGlvbih2aWV3LCBieXRlcywgaW5kZXgsIGlzTGl0dGxlRW5kaWFuKXtcbiAgdmFyIG51bUluZGV4ID0gK2luZGV4XG4gICAgLCBpbnRJbmRleCA9IHRvSW50ZWdlcihudW1JbmRleCk7XG4gIGlmKG51bUluZGV4ICE9IGludEluZGV4IHx8IGludEluZGV4IDwgMCB8fCBpbnRJbmRleCArIGJ5dGVzID4gdmlld1skTEVOR1RIXSl0aHJvdyBSYW5nZUVycm9yKFdST05HX0lOREVYKTtcbiAgdmFyIHN0b3JlID0gdmlld1skQlVGRkVSXS5fYlxuICAgICwgc3RhcnQgPSBpbnRJbmRleCArIHZpZXdbJE9GRlNFVF1cbiAgICAsIHBhY2sgID0gc3RvcmUuc2xpY2Uoc3RhcnQsIHN0YXJ0ICsgYnl0ZXMpO1xuICByZXR1cm4gaXNMaXR0bGVFbmRpYW4gPyBwYWNrIDogcGFjay5yZXZlcnNlKCk7XG59O1xudmFyIHNldCA9IGZ1bmN0aW9uKHZpZXcsIGJ5dGVzLCBpbmRleCwgY29udmVyc2lvbiwgdmFsdWUsIGlzTGl0dGxlRW5kaWFuKXtcbiAgdmFyIG51bUluZGV4ID0gK2luZGV4XG4gICAgLCBpbnRJbmRleCA9IHRvSW50ZWdlcihudW1JbmRleCk7XG4gIGlmKG51bUluZGV4ICE9IGludEluZGV4IHx8IGludEluZGV4IDwgMCB8fCBpbnRJbmRleCArIGJ5dGVzID4gdmlld1skTEVOR1RIXSl0aHJvdyBSYW5nZUVycm9yKFdST05HX0lOREVYKTtcbiAgdmFyIHN0b3JlID0gdmlld1skQlVGRkVSXS5fYlxuICAgICwgc3RhcnQgPSBpbnRJbmRleCArIHZpZXdbJE9GRlNFVF1cbiAgICAsIHBhY2sgID0gY29udmVyc2lvbigrdmFsdWUpO1xuICBmb3IodmFyIGkgPSAwOyBpIDwgYnl0ZXM7IGkrKylzdG9yZVtzdGFydCArIGldID0gcGFja1tpc0xpdHRsZUVuZGlhbiA/IGkgOiBieXRlcyAtIGkgLSAxXTtcbn07XG5cbnZhciB2YWxpZGF0ZUFycmF5QnVmZmVyQXJndW1lbnRzID0gZnVuY3Rpb24odGhhdCwgbGVuZ3RoKXtcbiAgYW5JbnN0YW5jZSh0aGF0LCAkQXJyYXlCdWZmZXIsIEFSUkFZX0JVRkZFUik7XG4gIHZhciBudW1iZXJMZW5ndGggPSArbGVuZ3RoXG4gICAgLCBieXRlTGVuZ3RoICAgPSB0b0xlbmd0aChudW1iZXJMZW5ndGgpO1xuICBpZihudW1iZXJMZW5ndGggIT0gYnl0ZUxlbmd0aCl0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gIHJldHVybiBieXRlTGVuZ3RoO1xufTtcblxuaWYoISR0eXBlZC5BQlYpe1xuICAkQXJyYXlCdWZmZXIgPSBmdW5jdGlvbiBBcnJheUJ1ZmZlcihsZW5ndGgpe1xuICAgIHZhciBieXRlTGVuZ3RoID0gdmFsaWRhdGVBcnJheUJ1ZmZlckFyZ3VtZW50cyh0aGlzLCBsZW5ndGgpO1xuICAgIHRoaXMuX2IgICAgICAgPSBhcnJheUZpbGwuY2FsbChBcnJheShieXRlTGVuZ3RoKSwgMCk7XG4gICAgdGhpc1skTEVOR1RIXSA9IGJ5dGVMZW5ndGg7XG4gIH07XG5cbiAgJERhdGFWaWV3ID0gZnVuY3Rpb24gRGF0YVZpZXcoYnVmZmVyLCBieXRlT2Zmc2V0LCBieXRlTGVuZ3RoKXtcbiAgICBhbkluc3RhbmNlKHRoaXMsICREYXRhVmlldywgREFUQV9WSUVXKTtcbiAgICBhbkluc3RhbmNlKGJ1ZmZlciwgJEFycmF5QnVmZmVyLCBEQVRBX1ZJRVcpO1xuICAgIHZhciBidWZmZXJMZW5ndGggPSBidWZmZXJbJExFTkdUSF1cbiAgICAgICwgb2Zmc2V0ICAgICAgID0gdG9JbnRlZ2VyKGJ5dGVPZmZzZXQpO1xuICAgIGlmKG9mZnNldCA8IDAgfHwgb2Zmc2V0ID4gYnVmZmVyTGVuZ3RoKXRocm93IFJhbmdlRXJyb3IoJ1dyb25nIG9mZnNldCEnKTtcbiAgICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCA9PT0gdW5kZWZpbmVkID8gYnVmZmVyTGVuZ3RoIC0gb2Zmc2V0IDogdG9MZW5ndGgoYnl0ZUxlbmd0aCk7XG4gICAgaWYob2Zmc2V0ICsgYnl0ZUxlbmd0aCA+IGJ1ZmZlckxlbmd0aCl0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgdGhpc1skQlVGRkVSXSA9IGJ1ZmZlcjtcbiAgICB0aGlzWyRPRkZTRVRdID0gb2Zmc2V0O1xuICAgIHRoaXNbJExFTkdUSF0gPSBieXRlTGVuZ3RoO1xuICB9O1xuXG4gIGlmKERFU0NSSVBUT1JTKXtcbiAgICBhZGRHZXR0ZXIoJEFycmF5QnVmZmVyLCBCWVRFX0xFTkdUSCwgJ19sJyk7XG4gICAgYWRkR2V0dGVyKCREYXRhVmlldywgQlVGRkVSLCAnX2InKTtcbiAgICBhZGRHZXR0ZXIoJERhdGFWaWV3LCBCWVRFX0xFTkdUSCwgJ19sJyk7XG4gICAgYWRkR2V0dGVyKCREYXRhVmlldywgQllURV9PRkZTRVQsICdfbycpO1xuICB9XG5cbiAgcmVkZWZpbmVBbGwoJERhdGFWaWV3W1BST1RPVFlQRV0sIHtcbiAgICBnZXRJbnQ4OiBmdW5jdGlvbiBnZXRJbnQ4KGJ5dGVPZmZzZXQpe1xuICAgICAgcmV0dXJuIGdldCh0aGlzLCAxLCBieXRlT2Zmc2V0KVswXSA8PCAyNCA+PiAyNDtcbiAgICB9LFxuICAgIGdldFVpbnQ4OiBmdW5jdGlvbiBnZXRVaW50OChieXRlT2Zmc2V0KXtcbiAgICAgIHJldHVybiBnZXQodGhpcywgMSwgYnl0ZU9mZnNldClbMF07XG4gICAgfSxcbiAgICBnZXRJbnQxNjogZnVuY3Rpb24gZ2V0SW50MTYoYnl0ZU9mZnNldCAvKiwgbGl0dGxlRW5kaWFuICovKXtcbiAgICAgIHZhciBieXRlcyA9IGdldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pO1xuICAgICAgcmV0dXJuIChieXRlc1sxXSA8PCA4IHwgYnl0ZXNbMF0pIDw8IDE2ID4+IDE2O1xuICAgIH0sXG4gICAgZ2V0VWludDE2OiBmdW5jdGlvbiBnZXRVaW50MTYoYnl0ZU9mZnNldCAvKiwgbGl0dGxlRW5kaWFuICovKXtcbiAgICAgIHZhciBieXRlcyA9IGdldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pO1xuICAgICAgcmV0dXJuIGJ5dGVzWzFdIDw8IDggfCBieXRlc1swXTtcbiAgICB9LFxuICAgIGdldEludDMyOiBmdW5jdGlvbiBnZXRJbnQzMihieXRlT2Zmc2V0IC8qLCBsaXR0bGVFbmRpYW4gKi8pe1xuICAgICAgcmV0dXJuIHVucGFja0kzMihnZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKSk7XG4gICAgfSxcbiAgICBnZXRVaW50MzI6IGZ1bmN0aW9uIGdldFVpbnQzMihieXRlT2Zmc2V0IC8qLCBsaXR0bGVFbmRpYW4gKi8pe1xuICAgICAgcmV0dXJuIHVucGFja0kzMihnZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKSkgPj4+IDA7XG4gICAgfSxcbiAgICBnZXRGbG9hdDMyOiBmdW5jdGlvbiBnZXRGbG9hdDMyKGJ5dGVPZmZzZXQgLyosIGxpdHRsZUVuZGlhbiAqLyl7XG4gICAgICByZXR1cm4gdW5wYWNrSUVFRTc1NChnZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKSwgMjMsIDQpO1xuICAgIH0sXG4gICAgZ2V0RmxvYXQ2NDogZnVuY3Rpb24gZ2V0RmxvYXQ2NChieXRlT2Zmc2V0IC8qLCBsaXR0bGVFbmRpYW4gKi8pe1xuICAgICAgcmV0dXJuIHVucGFja0lFRUU3NTQoZ2V0KHRoaXMsIDgsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSksIDUyLCA4KTtcbiAgICB9LFxuICAgIHNldEludDg6IGZ1bmN0aW9uIHNldEludDgoYnl0ZU9mZnNldCwgdmFsdWUpe1xuICAgICAgc2V0KHRoaXMsIDEsIGJ5dGVPZmZzZXQsIHBhY2tJOCwgdmFsdWUpO1xuICAgIH0sXG4gICAgc2V0VWludDg6IGZ1bmN0aW9uIHNldFVpbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKXtcbiAgICAgIHNldCh0aGlzLCAxLCBieXRlT2Zmc2V0LCBwYWNrSTgsIHZhbHVlKTtcbiAgICB9LFxuICAgIHNldEludDE2OiBmdW5jdGlvbiBzZXRJbnQxNihieXRlT2Zmc2V0LCB2YWx1ZSAvKiwgbGl0dGxlRW5kaWFuICovKXtcbiAgICAgIHNldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBwYWNrSTE2LCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldFVpbnQxNjogZnVuY3Rpb24gc2V0VWludDE2KGJ5dGVPZmZzZXQsIHZhbHVlIC8qLCBsaXR0bGVFbmRpYW4gKi8pe1xuICAgICAgc2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIHBhY2tJMTYsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH0sXG4gICAgc2V0SW50MzI6IGZ1bmN0aW9uIHNldEludDMyKGJ5dGVPZmZzZXQsIHZhbHVlIC8qLCBsaXR0bGVFbmRpYW4gKi8pe1xuICAgICAgc2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIHBhY2tJMzIsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH0sXG4gICAgc2V0VWludDMyOiBmdW5jdGlvbiBzZXRVaW50MzIoYnl0ZU9mZnNldCwgdmFsdWUgLyosIGxpdHRsZUVuZGlhbiAqLyl7XG4gICAgICBzZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgcGFja0kzMiwgdmFsdWUsIGFyZ3VtZW50c1syXSk7XG4gICAgfSxcbiAgICBzZXRGbG9hdDMyOiBmdW5jdGlvbiBzZXRGbG9hdDMyKGJ5dGVPZmZzZXQsIHZhbHVlIC8qLCBsaXR0bGVFbmRpYW4gKi8pe1xuICAgICAgc2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIHBhY2tGMzIsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH0sXG4gICAgc2V0RmxvYXQ2NDogZnVuY3Rpb24gc2V0RmxvYXQ2NChieXRlT2Zmc2V0LCB2YWx1ZSAvKiwgbGl0dGxlRW5kaWFuICovKXtcbiAgICAgIHNldCh0aGlzLCA4LCBieXRlT2Zmc2V0LCBwYWNrRjY0LCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9XG4gIH0pO1xufSBlbHNlIHtcbiAgaWYoIWZhaWxzKGZ1bmN0aW9uKCl7XG4gICAgbmV3ICRBcnJheUJ1ZmZlcjsgICAgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gIH0pIHx8ICFmYWlscyhmdW5jdGlvbigpe1xuICAgIG5ldyAkQXJyYXlCdWZmZXIoLjUpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICB9KSl7XG4gICAgJEFycmF5QnVmZmVyID0gZnVuY3Rpb24gQXJyYXlCdWZmZXIobGVuZ3RoKXtcbiAgICAgIHJldHVybiBuZXcgQmFzZUJ1ZmZlcih2YWxpZGF0ZUFycmF5QnVmZmVyQXJndW1lbnRzKHRoaXMsIGxlbmd0aCkpO1xuICAgIH07XG4gICAgdmFyIEFycmF5QnVmZmVyUHJvdG8gPSAkQXJyYXlCdWZmZXJbUFJPVE9UWVBFXSA9IEJhc2VCdWZmZXJbUFJPVE9UWVBFXTtcbiAgICBmb3IodmFyIGtleXMgPSBnT1BOKEJhc2VCdWZmZXIpLCBqID0gMCwga2V5OyBrZXlzLmxlbmd0aCA+IGo7ICl7XG4gICAgICBpZighKChrZXkgPSBrZXlzW2orK10pIGluICRBcnJheUJ1ZmZlcikpaGlkZSgkQXJyYXlCdWZmZXIsIGtleSwgQmFzZUJ1ZmZlcltrZXldKTtcbiAgICB9O1xuICAgIGlmKCFMSUJSQVJZKUFycmF5QnVmZmVyUHJvdG8uY29uc3RydWN0b3IgPSAkQXJyYXlCdWZmZXI7XG4gIH1cbiAgLy8gaU9TIFNhZmFyaSA3LnggYnVnXG4gIHZhciB2aWV3ID0gbmV3ICREYXRhVmlldyhuZXcgJEFycmF5QnVmZmVyKDIpKVxuICAgICwgJHNldEludDggPSAkRGF0YVZpZXdbUFJPVE9UWVBFXS5zZXRJbnQ4O1xuICB2aWV3LnNldEludDgoMCwgMjE0NzQ4MzY0OCk7XG4gIHZpZXcuc2V0SW50OCgxLCAyMTQ3NDgzNjQ5KTtcbiAgaWYodmlldy5nZXRJbnQ4KDApIHx8ICF2aWV3LmdldEludDgoMSkpcmVkZWZpbmVBbGwoJERhdGFWaWV3W1BST1RPVFlQRV0sIHtcbiAgICBzZXRJbnQ4OiBmdW5jdGlvbiBzZXRJbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKXtcbiAgICAgICRzZXRJbnQ4LmNhbGwodGhpcywgYnl0ZU9mZnNldCwgdmFsdWUgPDwgMjQgPj4gMjQpO1xuICAgIH0sXG4gICAgc2V0VWludDg6IGZ1bmN0aW9uIHNldFVpbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKXtcbiAgICAgICRzZXRJbnQ4LmNhbGwodGhpcywgYnl0ZU9mZnNldCwgdmFsdWUgPDwgMjQgPj4gMjQpO1xuICAgIH1cbiAgfSwgdHJ1ZSk7XG59XG5zZXRUb1N0cmluZ1RhZygkQXJyYXlCdWZmZXIsIEFSUkFZX0JVRkZFUik7XG5zZXRUb1N0cmluZ1RhZygkRGF0YVZpZXcsIERBVEFfVklFVyk7XG5oaWRlKCREYXRhVmlld1tQUk9UT1RZUEVdLCAkdHlwZWQuVklFVywgdHJ1ZSk7XG5leHBvcnRzW0FSUkFZX0JVRkZFUl0gPSAkQXJyYXlCdWZmZXI7XG5leHBvcnRzW0RBVEFfVklFV10gPSAkRGF0YVZpZXc7IiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpXG4gICwgaGlkZSAgID0gcmVxdWlyZSgnLi9faGlkZScpXG4gICwgdWlkICAgID0gcmVxdWlyZSgnLi9fdWlkJylcbiAgLCBUWVBFRCAgPSB1aWQoJ3R5cGVkX2FycmF5JylcbiAgLCBWSUVXICAgPSB1aWQoJ3ZpZXcnKVxuICAsIEFCViAgICA9ICEhKGdsb2JhbC5BcnJheUJ1ZmZlciAmJiBnbG9iYWwuRGF0YVZpZXcpXG4gICwgQ09OU1RSID0gQUJWXG4gICwgaSA9IDAsIGwgPSA5LCBUeXBlZDtcblxudmFyIFR5cGVkQXJyYXlDb25zdHJ1Y3RvcnMgPSAoXG4gICdJbnQ4QXJyYXksVWludDhBcnJheSxVaW50OENsYW1wZWRBcnJheSxJbnQxNkFycmF5LFVpbnQxNkFycmF5LEludDMyQXJyYXksVWludDMyQXJyYXksRmxvYXQzMkFycmF5LEZsb2F0NjRBcnJheSdcbikuc3BsaXQoJywnKTtcblxud2hpbGUoaSA8IGwpe1xuICBpZihUeXBlZCA9IGdsb2JhbFtUeXBlZEFycmF5Q29uc3RydWN0b3JzW2krK11dKXtcbiAgICBoaWRlKFR5cGVkLnByb3RvdHlwZSwgVFlQRUQsIHRydWUpO1xuICAgIGhpZGUoVHlwZWQucHJvdG90eXBlLCBWSUVXLCB0cnVlKTtcbiAgfSBlbHNlIENPTlNUUiA9IGZhbHNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgQUJWOiAgICBBQlYsXG4gIENPTlNUUjogQ09OU1RSLFxuICBUWVBFRDogIFRZUEVELFxuICBWSUVXOiAgIFZJRVdcbn07IiwidmFyIGlkID0gMFxuICAsIHB4ID0gTWF0aC5yYW5kb20oKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oa2V5KXtcbiAgcmV0dXJuICdTeW1ib2woJy5jb25jYXQoa2V5ID09PSB1bmRlZmluZWQgPyAnJyA6IGtleSwgJylfJywgKCsraWQgKyBweCkudG9TdHJpbmcoMzYpKTtcbn07IiwidmFyIGdsb2JhbCAgICAgICAgID0gcmVxdWlyZSgnLi9fZ2xvYmFsJylcbiAgLCBjb3JlICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2NvcmUnKVxuICAsIExJQlJBUlkgICAgICAgID0gcmVxdWlyZSgnLi9fbGlicmFyeScpXG4gICwgd2tzRXh0ICAgICAgICAgPSByZXF1aXJlKCcuL193a3MtZXh0JylcbiAgLCBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG5hbWUpe1xuICB2YXIgJFN5bWJvbCA9IGNvcmUuU3ltYm9sIHx8IChjb3JlLlN5bWJvbCA9IExJQlJBUlkgPyB7fSA6IGdsb2JhbC5TeW1ib2wgfHwge30pO1xuICBpZihuYW1lLmNoYXJBdCgwKSAhPSAnXycgJiYgIShuYW1lIGluICRTeW1ib2wpKWRlZmluZVByb3BlcnR5KCRTeW1ib2wsIG5hbWUsIHt2YWx1ZTogd2tzRXh0LmYobmFtZSl9KTtcbn07IiwiZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fd2tzJyk7IiwidmFyIHN0b3JlICAgICAgPSByZXF1aXJlKCcuL19zaGFyZWQnKSgnd2tzJylcbiAgLCB1aWQgICAgICAgID0gcmVxdWlyZSgnLi9fdWlkJylcbiAgLCBTeW1ib2wgICAgID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuU3ltYm9sXG4gICwgVVNFX1NZTUJPTCA9IHR5cGVvZiBTeW1ib2wgPT0gJ2Z1bmN0aW9uJztcblxudmFyICRleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihuYW1lKXtcbiAgcmV0dXJuIHN0b3JlW25hbWVdIHx8IChzdG9yZVtuYW1lXSA9XG4gICAgVVNFX1NZTUJPTCAmJiBTeW1ib2xbbmFtZV0gfHwgKFVTRV9TWU1CT0wgPyBTeW1ib2wgOiB1aWQpKCdTeW1ib2wuJyArIG5hbWUpKTtcbn07XG5cbiRleHBvcnRzLnN0b3JlID0gc3RvcmU7IiwidmFyIGNsYXNzb2YgICA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKVxuICAsIElURVJBVE9SICA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpXG4gICwgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2NvcmUnKS5nZXRJdGVyYXRvck1ldGhvZCA9IGZ1bmN0aW9uKGl0KXtcbiAgaWYoaXQgIT0gdW5kZWZpbmVkKXJldHVybiBpdFtJVEVSQVRPUl1cbiAgICB8fCBpdFsnQEBpdGVyYXRvciddXG4gICAgfHwgSXRlcmF0b3JzW2NsYXNzb2YoaXQpXTtcbn07IiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL2JlbmphbWluZ3IvUmV4RXhwLmVzY2FwZVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsICRyZSAgICAgPSByZXF1aXJlKCcuL19yZXBsYWNlcicpKC9bXFxcXF4kKis/LigpfFtcXF17fV0vZywgJ1xcXFwkJicpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZ0V4cCcsIHtlc2NhcGU6IGZ1bmN0aW9uIGVzY2FwZShpdCl7IHJldHVybiAkcmUoaXQpOyB9fSk7XG4iLCIvLyAyMi4xLjMuMyBBcnJheS5wcm90b3R5cGUuY29weVdpdGhpbih0YXJnZXQsIHN0YXJ0LCBlbmQgPSB0aGlzLmxlbmd0aClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnQXJyYXknLCB7Y29weVdpdGhpbjogcmVxdWlyZSgnLi9fYXJyYXktY29weS13aXRoaW4nKX0pO1xuXG5yZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKSgnY29weVdpdGhpbicpOyIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCAkZXZlcnkgID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDQpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10uZXZlcnksIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy41IC8gMTUuNC40LjE2IEFycmF5LnByb3RvdHlwZS5ldmVyeShjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxuICBldmVyeTogZnVuY3Rpb24gZXZlcnkoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pe1xuICAgIHJldHVybiAkZXZlcnkodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7IiwiLy8gMjIuMS4zLjYgQXJyYXkucHJvdG90eXBlLmZpbGwodmFsdWUsIHN0YXJ0ID0gMCwgZW5kID0gdGhpcy5sZW5ndGgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ0FycmF5Jywge2ZpbGw6IHJlcXVpcmUoJy4vX2FycmF5LWZpbGwnKX0pO1xuXG5yZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKSgnZmlsbCcpOyIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCAkZmlsdGVyID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDIpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10uZmlsdGVyLCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuNyAvIDE1LjQuNC4yMCBBcnJheS5wcm90b3R5cGUuZmlsdGVyKGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pXG4gIGZpbHRlcjogZnVuY3Rpb24gZmlsdGVyKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKXtcbiAgICByZXR1cm4gJGZpbHRlcih0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTsiLCIndXNlIHN0cmljdCc7XG4vLyAyMi4xLjMuOSBBcnJheS5wcm90b3R5cGUuZmluZEluZGV4KHByZWRpY2F0ZSwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCAkZmluZCAgID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDYpXG4gICwgS0VZICAgICA9ICdmaW5kSW5kZXgnXG4gICwgZm9yY2VkICA9IHRydWU7XG4vLyBTaG91bGRuJ3Qgc2tpcCBob2xlc1xuaWYoS0VZIGluIFtdKUFycmF5KDEpW0tFWV0oZnVuY3Rpb24oKXsgZm9yY2VkID0gZmFsc2U7IH0pO1xuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBmb3JjZWQsICdBcnJheScsIHtcbiAgZmluZEluZGV4OiBmdW5jdGlvbiBmaW5kSW5kZXgoY2FsbGJhY2tmbi8qLCB0aGF0ID0gdW5kZWZpbmVkICovKXtcbiAgICByZXR1cm4gJGZpbmQodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKEtFWSk7IiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjIuMS4zLjggQXJyYXkucHJvdG90eXBlLmZpbmQocHJlZGljYXRlLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsICRmaW5kICAgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoNSlcbiAgLCBLRVkgICAgID0gJ2ZpbmQnXG4gICwgZm9yY2VkICA9IHRydWU7XG4vLyBTaG91bGRuJ3Qgc2tpcCBob2xlc1xuaWYoS0VZIGluIFtdKUFycmF5KDEpW0tFWV0oZnVuY3Rpb24oKXsgZm9yY2VkID0gZmFsc2U7IH0pO1xuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBmb3JjZWQsICdBcnJheScsIHtcbiAgZmluZDogZnVuY3Rpb24gZmluZChjYWxsYmFja2ZuLyosIHRoYXQgPSB1bmRlZmluZWQgKi8pe1xuICAgIHJldHVybiAkZmluZCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xucmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoS0VZKTsiLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsICRmb3JFYWNoID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDApXG4gICwgU1RSSUNUICAgPSByZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10uZm9yRWFjaCwgdHJ1ZSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIVNUUklDVCwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTAgLyAxNS40LjQuMTggQXJyYXkucHJvdG90eXBlLmZvckVhY2goY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcbiAgZm9yRWFjaDogZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLyl7XG4gICAgcmV0dXJuICRmb3JFYWNoKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pOyIsIid1c2Ugc3RyaWN0JztcbnZhciBjdHggICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2N0eCcpXG4gICwgJGV4cG9ydCAgICAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIHRvT2JqZWN0ICAgICAgID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0JylcbiAgLCBjYWxsICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2l0ZXItY2FsbCcpXG4gICwgaXNBcnJheUl0ZXIgICAgPSByZXF1aXJlKCcuL19pcy1hcnJheS1pdGVyJylcbiAgLCB0b0xlbmd0aCAgICAgICA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpXG4gICwgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuL19jcmVhdGUtcHJvcGVydHknKVxuICAsIGdldEl0ZXJGbiAgICAgID0gcmVxdWlyZSgnLi9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9faXRlci1kZXRlY3QnKShmdW5jdGlvbihpdGVyKXsgQXJyYXkuZnJvbShpdGVyKTsgfSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4yLjEgQXJyYXkuZnJvbShhcnJheUxpa2UsIG1hcGZuID0gdW5kZWZpbmVkLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxuICBmcm9tOiBmdW5jdGlvbiBmcm9tKGFycmF5TGlrZS8qLCBtYXBmbiA9IHVuZGVmaW5lZCwgdGhpc0FyZyA9IHVuZGVmaW5lZCovKXtcbiAgICB2YXIgTyAgICAgICA9IHRvT2JqZWN0KGFycmF5TGlrZSlcbiAgICAgICwgQyAgICAgICA9IHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgPyB0aGlzIDogQXJyYXlcbiAgICAgICwgYUxlbiAgICA9IGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgICwgbWFwZm4gICA9IGFMZW4gPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkXG4gICAgICAsIG1hcHBpbmcgPSBtYXBmbiAhPT0gdW5kZWZpbmVkXG4gICAgICAsIGluZGV4ICAgPSAwXG4gICAgICAsIGl0ZXJGbiAgPSBnZXRJdGVyRm4oTylcbiAgICAgICwgbGVuZ3RoLCByZXN1bHQsIHN0ZXAsIGl0ZXJhdG9yO1xuICAgIGlmKG1hcHBpbmcpbWFwZm4gPSBjdHgobWFwZm4sIGFMZW4gPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkLCAyKTtcbiAgICAvLyBpZiBvYmplY3QgaXNuJ3QgaXRlcmFibGUgb3IgaXQncyBhcnJheSB3aXRoIGRlZmF1bHQgaXRlcmF0b3IgLSB1c2Ugc2ltcGxlIGNhc2VcbiAgICBpZihpdGVyRm4gIT0gdW5kZWZpbmVkICYmICEoQyA9PSBBcnJheSAmJiBpc0FycmF5SXRlcihpdGVyRm4pKSl7XG4gICAgICBmb3IoaXRlcmF0b3IgPSBpdGVyRm4uY2FsbChPKSwgcmVzdWx0ID0gbmV3IEM7ICEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZTsgaW5kZXgrKyl7XG4gICAgICAgIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgaW5kZXgsIG1hcHBpbmcgPyBjYWxsKGl0ZXJhdG9yLCBtYXBmbiwgW3N0ZXAudmFsdWUsIGluZGV4XSwgdHJ1ZSkgOiBzdGVwLnZhbHVlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgICAgZm9yKHJlc3VsdCA9IG5ldyBDKGxlbmd0aCk7IGxlbmd0aCA+IGluZGV4OyBpbmRleCsrKXtcbiAgICAgICAgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgbWFwcGluZyA/IG1hcGZuKE9baW5kZXhdLCBpbmRleCkgOiBPW2luZGV4XSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJlc3VsdC5sZW5ndGggPSBpbmRleDtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ICAgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCAkaW5kZXhPZiAgICAgID0gcmVxdWlyZSgnLi9fYXJyYXktaW5jbHVkZXMnKShmYWxzZSlcbiAgLCAkbmF0aXZlICAgICAgID0gW10uaW5kZXhPZlxuICAsIE5FR0FUSVZFX1pFUk8gPSAhISRuYXRpdmUgJiYgMSAvIFsxXS5pbmRleE9mKDEsIC0wKSA8IDA7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKE5FR0FUSVZFX1pFUk8gfHwgIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKSgkbmF0aXZlKSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjExIC8gMTUuNC40LjE0IEFycmF5LnByb3RvdHlwZS5pbmRleE9mKHNlYXJjaEVsZW1lbnQgWywgZnJvbUluZGV4XSlcbiAgaW5kZXhPZjogZnVuY3Rpb24gaW5kZXhPZihzZWFyY2hFbGVtZW50IC8qLCBmcm9tSW5kZXggPSAwICovKXtcbiAgICByZXR1cm4gTkVHQVRJVkVfWkVST1xuICAgICAgLy8gY29udmVydCAtMCB0byArMFxuICAgICAgPyAkbmF0aXZlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgMFxuICAgICAgOiAkaW5kZXhPZih0aGlzLCBzZWFyY2hFbGVtZW50LCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTsiLCIvLyAyMi4xLjIuMiAvIDE1LjQuMy4yIEFycmF5LmlzQXJyYXkoYXJnKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdBcnJheScsIHtpc0FycmF5OiByZXF1aXJlKCcuL19pcy1hcnJheScpfSk7IiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFkZFRvVW5zY29wYWJsZXMgPSByZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKVxuICAsIHN0ZXAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19pdGVyLXN0ZXAnKVxuICAsIEl0ZXJhdG9ycyAgICAgICAgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKVxuICAsIHRvSU9iamVjdCAgICAgICAgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG5cbi8vIDIyLjEuMy40IEFycmF5LnByb3RvdHlwZS5lbnRyaWVzKClcbi8vIDIyLjEuMy4xMyBBcnJheS5wcm90b3R5cGUua2V5cygpXG4vLyAyMi4xLjMuMjkgQXJyYXkucHJvdG90eXBlLnZhbHVlcygpXG4vLyAyMi4xLjMuMzAgQXJyYXkucHJvdG90eXBlW0BAaXRlcmF0b3JdKClcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9faXRlci1kZWZpbmUnKShBcnJheSwgJ0FycmF5JywgZnVuY3Rpb24oaXRlcmF0ZWQsIGtpbmQpe1xuICB0aGlzLl90ID0gdG9JT2JqZWN0KGl0ZXJhdGVkKTsgLy8gdGFyZ2V0XG4gIHRoaXMuX2kgPSAwOyAgICAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG4gIHRoaXMuX2sgPSBraW5kOyAgICAgICAgICAgICAgICAvLyBraW5kXG4vLyAyMi4xLjUuMi4xICVBcnJheUl0ZXJhdG9yUHJvdG90eXBlJS5uZXh0KClcbn0sIGZ1bmN0aW9uKCl7XG4gIHZhciBPICAgICA9IHRoaXMuX3RcbiAgICAsIGtpbmQgID0gdGhpcy5fa1xuICAgICwgaW5kZXggPSB0aGlzLl9pKys7XG4gIGlmKCFPIHx8IGluZGV4ID49IE8ubGVuZ3RoKXtcbiAgICB0aGlzLl90ID0gdW5kZWZpbmVkO1xuICAgIHJldHVybiBzdGVwKDEpO1xuICB9XG4gIGlmKGtpbmQgPT0gJ2tleXMnICApcmV0dXJuIHN0ZXAoMCwgaW5kZXgpO1xuICBpZihraW5kID09ICd2YWx1ZXMnKXJldHVybiBzdGVwKDAsIE9baW5kZXhdKTtcbiAgcmV0dXJuIHN0ZXAoMCwgW2luZGV4LCBPW2luZGV4XV0pO1xufSwgJ3ZhbHVlcycpO1xuXG4vLyBhcmd1bWVudHNMaXN0W0BAaXRlcmF0b3JdIGlzICVBcnJheVByb3RvX3ZhbHVlcyUgKDkuNC40LjYsIDkuNC40LjcpXG5JdGVyYXRvcnMuQXJndW1lbnRzID0gSXRlcmF0b3JzLkFycmF5O1xuXG5hZGRUb1Vuc2NvcGFibGVzKCdrZXlzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCd2YWx1ZXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ2VudHJpZXMnKTsiLCIndXNlIHN0cmljdCc7XG4vLyAyMi4xLjMuMTMgQXJyYXkucHJvdG90eXBlLmpvaW4oc2VwYXJhdG9yKVxudmFyICRleHBvcnQgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpXG4gICwgYXJyYXlKb2luID0gW10uam9pbjtcblxuLy8gZmFsbGJhY2sgZm9yIG5vdCBhcnJheS1saWtlIHN0cmluZ3NcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKHJlcXVpcmUoJy4vX2lvYmplY3QnKSAhPSBPYmplY3QgfHwgIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShhcnJheUpvaW4pKSwgJ0FycmF5Jywge1xuICBqb2luOiBmdW5jdGlvbiBqb2luKHNlcGFyYXRvcil7XG4gICAgcmV0dXJuIGFycmF5Sm9pbi5jYWxsKHRvSU9iamVjdCh0aGlzKSwgc2VwYXJhdG9yID09PSB1bmRlZmluZWQgPyAnLCcgOiBzZXBhcmF0b3IpO1xuICB9XG59KTsiLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCAgICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgdG9JT2JqZWN0ICAgICA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKVxuICAsIHRvSW50ZWdlciAgICAgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJylcbiAgLCB0b0xlbmd0aCAgICAgID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJylcbiAgLCAkbmF0aXZlICAgICAgID0gW10ubGFzdEluZGV4T2ZcbiAgLCBORUdBVElWRV9aRVJPID0gISEkbmF0aXZlICYmIDEgLyBbMV0ubGFzdEluZGV4T2YoMSwgLTApIDwgMDtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoTkVHQVRJVkVfWkVSTyB8fCAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKCRuYXRpdmUpKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTQgLyAxNS40LjQuMTUgQXJyYXkucHJvdG90eXBlLmxhc3RJbmRleE9mKHNlYXJjaEVsZW1lbnQgWywgZnJvbUluZGV4XSlcbiAgbGFzdEluZGV4T2Y6IGZ1bmN0aW9uIGxhc3RJbmRleE9mKHNlYXJjaEVsZW1lbnQgLyosIGZyb21JbmRleCA9IEBbKi0xXSAqLyl7XG4gICAgLy8gY29udmVydCAtMCB0byArMFxuICAgIGlmKE5FR0FUSVZFX1pFUk8pcmV0dXJuICRuYXRpdmUuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCAwO1xuICAgIHZhciBPICAgICAgPSB0b0lPYmplY3QodGhpcylcbiAgICAgICwgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpXG4gICAgICAsIGluZGV4ICA9IGxlbmd0aCAtIDE7XG4gICAgaWYoYXJndW1lbnRzLmxlbmd0aCA+IDEpaW5kZXggPSBNYXRoLm1pbihpbmRleCwgdG9JbnRlZ2VyKGFyZ3VtZW50c1sxXSkpO1xuICAgIGlmKGluZGV4IDwgMClpbmRleCA9IGxlbmd0aCArIGluZGV4O1xuICAgIGZvcig7aW5kZXggPj0gMDsgaW5kZXgtLSlpZihpbmRleCBpbiBPKWlmKE9baW5kZXhdID09PSBzZWFyY2hFbGVtZW50KXJldHVybiBpbmRleCB8fCAwO1xuICAgIHJldHVybiAtMTtcbiAgfVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsICRtYXAgICAgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoMSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5tYXAsIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xNSAvIDE1LjQuNC4xOSBBcnJheS5wcm90b3R5cGUubWFwKGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pXG4gIG1hcDogZnVuY3Rpb24gbWFwKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKXtcbiAgICByZXR1cm4gJG1hcCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTsiLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCAgICAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fY3JlYXRlLXByb3BlcnR5Jyk7XG5cbi8vIFdlYktpdCBBcnJheS5vZiBpc24ndCBnZW5lcmljXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24oKXtcbiAgZnVuY3Rpb24gRigpe31cbiAgcmV0dXJuICEoQXJyYXkub2YuY2FsbChGKSBpbnN0YW5jZW9mIEYpO1xufSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4yLjMgQXJyYXkub2YoIC4uLml0ZW1zKVxuICBvZjogZnVuY3Rpb24gb2YoLyogLi4uYXJncyAqLyl7XG4gICAgdmFyIGluZGV4ICA9IDBcbiAgICAgICwgYUxlbiAgID0gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgLCByZXN1bHQgPSBuZXcgKHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgPyB0aGlzIDogQXJyYXkpKGFMZW4pO1xuICAgIHdoaWxlKGFMZW4gPiBpbmRleCljcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCBhcmd1bWVudHNbaW5kZXgrK10pO1xuICAgIHJlc3VsdC5sZW5ndGggPSBhTGVuO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn0pOyIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCAkcmVkdWNlID0gcmVxdWlyZSgnLi9fYXJyYXktcmVkdWNlJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5yZWR1Y2VSaWdodCwgdHJ1ZSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjE5IC8gMTUuNC40LjIyIEFycmF5LnByb3RvdHlwZS5yZWR1Y2VSaWdodChjYWxsYmFja2ZuIFssIGluaXRpYWxWYWx1ZV0pXG4gIHJlZHVjZVJpZ2h0OiBmdW5jdGlvbiByZWR1Y2VSaWdodChjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKXtcbiAgICByZXR1cm4gJHJlZHVjZSh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoLCBhcmd1bWVudHNbMV0sIHRydWUpO1xuICB9XG59KTsiLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgJHJlZHVjZSA9IHJlcXVpcmUoJy4vX2FycmF5LXJlZHVjZScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10ucmVkdWNlLCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTggLyAxNS40LjQuMjEgQXJyYXkucHJvdG90eXBlLnJlZHVjZShjYWxsYmFja2ZuIFssIGluaXRpYWxWYWx1ZV0pXG4gIHJlZHVjZTogZnVuY3Rpb24gcmVkdWNlKGNhbGxiYWNrZm4gLyogLCBpbml0aWFsVmFsdWUgKi8pe1xuICAgIHJldHVybiAkcmVkdWNlKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3VtZW50c1sxXSwgZmFsc2UpO1xuICB9XG59KTsiLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgaHRtbCAgICAgICA9IHJlcXVpcmUoJy4vX2h0bWwnKVxuICAsIGNvZiAgICAgICAgPSByZXF1aXJlKCcuL19jb2YnKVxuICAsIHRvSW5kZXggICAgPSByZXF1aXJlKCcuL190by1pbmRleCcpXG4gICwgdG9MZW5ndGggICA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpXG4gICwgYXJyYXlTbGljZSA9IFtdLnNsaWNlO1xuXG4vLyBmYWxsYmFjayBmb3Igbm90IGFycmF5LWxpa2UgRVMzIHN0cmluZ3MgYW5kIERPTSBvYmplY3RzXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24oKXtcbiAgaWYoaHRtbClhcnJheVNsaWNlLmNhbGwoaHRtbCk7XG59KSwgJ0FycmF5Jywge1xuICBzbGljZTogZnVuY3Rpb24gc2xpY2UoYmVnaW4sIGVuZCl7XG4gICAgdmFyIGxlbiAgID0gdG9MZW5ndGgodGhpcy5sZW5ndGgpXG4gICAgICAsIGtsYXNzID0gY29mKHRoaXMpO1xuICAgIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogZW5kO1xuICAgIGlmKGtsYXNzID09ICdBcnJheScpcmV0dXJuIGFycmF5U2xpY2UuY2FsbCh0aGlzLCBiZWdpbiwgZW5kKTtcbiAgICB2YXIgc3RhcnQgID0gdG9JbmRleChiZWdpbiwgbGVuKVxuICAgICAgLCB1cFRvICAgPSB0b0luZGV4KGVuZCwgbGVuKVxuICAgICAgLCBzaXplICAgPSB0b0xlbmd0aCh1cFRvIC0gc3RhcnQpXG4gICAgICAsIGNsb25lZCA9IEFycmF5KHNpemUpXG4gICAgICAsIGkgICAgICA9IDA7XG4gICAgZm9yKDsgaSA8IHNpemU7IGkrKyljbG9uZWRbaV0gPSBrbGFzcyA9PSAnU3RyaW5nJ1xuICAgICAgPyB0aGlzLmNoYXJBdChzdGFydCArIGkpXG4gICAgICA6IHRoaXNbc3RhcnQgKyBpXTtcbiAgICByZXR1cm4gY2xvbmVkO1xuICB9XG59KTsiLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgJHNvbWUgICA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgzKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLnNvbWUsIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4yMyAvIDE1LjQuNC4xNyBBcnJheS5wcm90b3R5cGUuc29tZShjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxuICBzb21lOiBmdW5jdGlvbiBzb21lKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKXtcbiAgICByZXR1cm4gJHNvbWUodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpXG4gICwgdG9PYmplY3QgID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0JylcbiAgLCBmYWlscyAgICAgPSByZXF1aXJlKCcuL19mYWlscycpXG4gICwgJHNvcnQgICAgID0gW10uc29ydFxuICAsIHRlc3QgICAgICA9IFsxLCAyLCAzXTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoZmFpbHMoZnVuY3Rpb24oKXtcbiAgLy8gSUU4LVxuICB0ZXN0LnNvcnQodW5kZWZpbmVkKTtcbn0pIHx8ICFmYWlscyhmdW5jdGlvbigpe1xuICAvLyBWOCBidWdcbiAgdGVzdC5zb3J0KG51bGwpO1xuICAvLyBPbGQgV2ViS2l0XG59KSB8fCAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKCRzb3J0KSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjI1IEFycmF5LnByb3RvdHlwZS5zb3J0KGNvbXBhcmVmbilcbiAgc29ydDogZnVuY3Rpb24gc29ydChjb21wYXJlZm4pe1xuICAgIHJldHVybiBjb21wYXJlZm4gPT09IHVuZGVmaW5lZFxuICAgICAgPyAkc29ydC5jYWxsKHRvT2JqZWN0KHRoaXMpKVxuICAgICAgOiAkc29ydC5jYWxsKHRvT2JqZWN0KHRoaXMpLCBhRnVuY3Rpb24oY29tcGFyZWZuKSk7XG4gIH1cbn0pOyIsInJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJykoJ0FycmF5Jyk7IiwiLy8gMjAuMy4zLjEgLyAxNS45LjQuNCBEYXRlLm5vdygpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ0RhdGUnLCB7bm93OiBmdW5jdGlvbigpeyByZXR1cm4gbmV3IERhdGUoKS5nZXRUaW1lKCk7IH19KTsiLCIndXNlIHN0cmljdCc7XG4vLyAyMC4zLjQuMzYgLyAxNS45LjUuNDMgRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmcoKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIGZhaWxzICAgPSByZXF1aXJlKCcuL19mYWlscycpXG4gICwgZ2V0VGltZSA9IERhdGUucHJvdG90eXBlLmdldFRpbWU7XG5cbnZhciBseiA9IGZ1bmN0aW9uKG51bSl7XG4gIHJldHVybiBudW0gPiA5ID8gbnVtIDogJzAnICsgbnVtO1xufTtcblxuLy8gUGhhbnRvbUpTIC8gb2xkIFdlYktpdCBoYXMgYSBicm9rZW4gaW1wbGVtZW50YXRpb25zXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChmYWlscyhmdW5jdGlvbigpe1xuICByZXR1cm4gbmV3IERhdGUoLTVlMTMgLSAxKS50b0lTT1N0cmluZygpICE9ICcwMzg1LTA3LTI1VDA3OjA2OjM5Ljk5OVonO1xufSkgfHwgIWZhaWxzKGZ1bmN0aW9uKCl7XG4gIG5ldyBEYXRlKE5hTikudG9JU09TdHJpbmcoKTtcbn0pKSwgJ0RhdGUnLCB7XG4gIHRvSVNPU3RyaW5nOiBmdW5jdGlvbiB0b0lTT1N0cmluZygpe1xuICAgIGlmKCFpc0Zpbml0ZShnZXRUaW1lLmNhbGwodGhpcykpKXRocm93IFJhbmdlRXJyb3IoJ0ludmFsaWQgdGltZSB2YWx1ZScpO1xuICAgIHZhciBkID0gdGhpc1xuICAgICAgLCB5ID0gZC5nZXRVVENGdWxsWWVhcigpXG4gICAgICAsIG0gPSBkLmdldFVUQ01pbGxpc2Vjb25kcygpXG4gICAgICAsIHMgPSB5IDwgMCA/ICctJyA6IHkgPiA5OTk5ID8gJysnIDogJyc7XG4gICAgcmV0dXJuIHMgKyAoJzAwMDAwJyArIE1hdGguYWJzKHkpKS5zbGljZShzID8gLTYgOiAtNCkgK1xuICAgICAgJy0nICsgbHooZC5nZXRVVENNb250aCgpICsgMSkgKyAnLScgKyBseihkLmdldFVUQ0RhdGUoKSkgK1xuICAgICAgJ1QnICsgbHooZC5nZXRVVENIb3VycygpKSArICc6JyArIGx6KGQuZ2V0VVRDTWludXRlcygpKSArXG4gICAgICAnOicgKyBseihkLmdldFVUQ1NlY29uZHMoKSkgKyAnLicgKyAobSA+IDk5ID8gbSA6ICcwJyArIGx6KG0pKSArICdaJztcbiAgfVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCB0b09iamVjdCAgICA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpXG4gICwgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uKCl7XG4gIHJldHVybiBuZXcgRGF0ZShOYU4pLnRvSlNPTigpICE9PSBudWxsIHx8IERhdGUucHJvdG90eXBlLnRvSlNPTi5jYWxsKHt0b0lTT1N0cmluZzogZnVuY3Rpb24oKXsgcmV0dXJuIDE7IH19KSAhPT0gMTtcbn0pLCAnRGF0ZScsIHtcbiAgdG9KU09OOiBmdW5jdGlvbiB0b0pTT04oa2V5KXtcbiAgICB2YXIgTyAgPSB0b09iamVjdCh0aGlzKVxuICAgICAgLCBwdiA9IHRvUHJpbWl0aXZlKE8pO1xuICAgIHJldHVybiB0eXBlb2YgcHYgPT0gJ251bWJlcicgJiYgIWlzRmluaXRlKHB2KSA/IG51bGwgOiBPLnRvSVNPU3RyaW5nKCk7XG4gIH1cbn0pOyIsInZhciBUT19QUklNSVRJVkUgPSByZXF1aXJlKCcuL193a3MnKSgndG9QcmltaXRpdmUnKVxuICAsIHByb3RvICAgICAgICA9IERhdGUucHJvdG90eXBlO1xuXG5pZighKFRPX1BSSU1JVElWRSBpbiBwcm90bykpcmVxdWlyZSgnLi9faGlkZScpKHByb3RvLCBUT19QUklNSVRJVkUsIHJlcXVpcmUoJy4vX2RhdGUtdG8tcHJpbWl0aXZlJykpOyIsInZhciBEYXRlUHJvdG8gICAgPSBEYXRlLnByb3RvdHlwZVxuICAsIElOVkFMSURfREFURSA9ICdJbnZhbGlkIERhdGUnXG4gICwgVE9fU1RSSU5HICAgID0gJ3RvU3RyaW5nJ1xuICAsICR0b1N0cmluZyAgICA9IERhdGVQcm90b1tUT19TVFJJTkddXG4gICwgZ2V0VGltZSAgICAgID0gRGF0ZVByb3RvLmdldFRpbWU7XG5pZihuZXcgRGF0ZShOYU4pICsgJycgIT0gSU5WQUxJRF9EQVRFKXtcbiAgcmVxdWlyZSgnLi9fcmVkZWZpbmUnKShEYXRlUHJvdG8sIFRPX1NUUklORywgZnVuY3Rpb24gdG9TdHJpbmcoKXtcbiAgICB2YXIgdmFsdWUgPSBnZXRUaW1lLmNhbGwodGhpcyk7XG4gICAgcmV0dXJuIHZhbHVlID09PSB2YWx1ZSA/ICR0b1N0cmluZy5jYWxsKHRoaXMpIDogSU5WQUxJRF9EQVRFO1xuICB9KTtcbn0iLCIvLyAxOS4yLjMuMiAvIDE1LjMuNC41IEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kKHRoaXNBcmcsIGFyZ3MuLi4pXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ0Z1bmN0aW9uJywge2JpbmQ6IHJlcXVpcmUoJy4vX2JpbmQnKX0pOyIsIid1c2Ugc3RyaWN0JztcbnZhciBpc09iamVjdCAgICAgICA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpXG4gICwgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJylcbiAgLCBIQVNfSU5TVEFOQ0UgICA9IHJlcXVpcmUoJy4vX3drcycpKCdoYXNJbnN0YW5jZScpXG4gICwgRnVuY3Rpb25Qcm90byAgPSBGdW5jdGlvbi5wcm90b3R5cGU7XG4vLyAxOS4yLjMuNiBGdW5jdGlvbi5wcm90b3R5cGVbQEBoYXNJbnN0YW5jZV0oVilcbmlmKCEoSEFTX0lOU1RBTkNFIGluIEZ1bmN0aW9uUHJvdG8pKXJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmYoRnVuY3Rpb25Qcm90bywgSEFTX0lOU1RBTkNFLCB7dmFsdWU6IGZ1bmN0aW9uKE8pe1xuICBpZih0eXBlb2YgdGhpcyAhPSAnZnVuY3Rpb24nIHx8ICFpc09iamVjdChPKSlyZXR1cm4gZmFsc2U7XG4gIGlmKCFpc09iamVjdCh0aGlzLnByb3RvdHlwZSkpcmV0dXJuIE8gaW5zdGFuY2VvZiB0aGlzO1xuICAvLyBmb3IgZW52aXJvbm1lbnQgdy9vIG5hdGl2ZSBgQEBoYXNJbnN0YW5jZWAgbG9naWMgZW5vdWdoIGBpbnN0YW5jZW9mYCwgYnV0IGFkZCB0aGlzOlxuICB3aGlsZShPID0gZ2V0UHJvdG90eXBlT2YoTykpaWYodGhpcy5wcm90b3R5cGUgPT09IE8pcmV0dXJuIHRydWU7XG4gIHJldHVybiBmYWxzZTtcbn19KTsiLCJ2YXIgZFAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmZcbiAgLCBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpXG4gICwgaGFzICAgICAgICA9IHJlcXVpcmUoJy4vX2hhcycpXG4gICwgRlByb3RvICAgICA9IEZ1bmN0aW9uLnByb3RvdHlwZVxuICAsIG5hbWVSRSAgICAgPSAvXlxccypmdW5jdGlvbiAoW14gKF0qKS9cbiAgLCBOQU1FICAgICAgID0gJ25hbWUnO1xuXG52YXIgaXNFeHRlbnNpYmxlID0gT2JqZWN0LmlzRXh0ZW5zaWJsZSB8fCBmdW5jdGlvbigpe1xuICByZXR1cm4gdHJ1ZTtcbn07XG5cbi8vIDE5LjIuNC4yIG5hbWVcbk5BTUUgaW4gRlByb3RvIHx8IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgZFAoRlByb3RvLCBOQU1FLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbigpe1xuICAgIHRyeSB7XG4gICAgICB2YXIgdGhhdCA9IHRoaXNcbiAgICAgICAgLCBuYW1lID0gKCcnICsgdGhhdCkubWF0Y2gobmFtZVJFKVsxXTtcbiAgICAgIGhhcyh0aGF0LCBOQU1FKSB8fCAhaXNFeHRlbnNpYmxlKHRoYXQpIHx8IGRQKHRoYXQsIE5BTUUsIGNyZWF0ZURlc2MoNSwgbmFtZSkpO1xuICAgICAgcmV0dXJuIG5hbWU7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG4gIH1cbn0pOyIsIid1c2Ugc3RyaWN0JztcbnZhciBzdHJvbmcgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXN0cm9uZycpO1xuXG4vLyAyMy4xIE1hcCBPYmplY3RzXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24nKSgnTWFwJywgZnVuY3Rpb24oZ2V0KXtcbiAgcmV0dXJuIGZ1bmN0aW9uIE1hcCgpeyByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTsgfTtcbn0sIHtcbiAgLy8gMjMuMS4zLjYgTWFwLnByb3RvdHlwZS5nZXQoa2V5KVxuICBnZXQ6IGZ1bmN0aW9uIGdldChrZXkpe1xuICAgIHZhciBlbnRyeSA9IHN0cm9uZy5nZXRFbnRyeSh0aGlzLCBrZXkpO1xuICAgIHJldHVybiBlbnRyeSAmJiBlbnRyeS52O1xuICB9LFxuICAvLyAyMy4xLjMuOSBNYXAucHJvdG90eXBlLnNldChrZXksIHZhbHVlKVxuICBzZXQ6IGZ1bmN0aW9uIHNldChrZXksIHZhbHVlKXtcbiAgICByZXR1cm4gc3Ryb25nLmRlZih0aGlzLCBrZXkgPT09IDAgPyAwIDoga2V5LCB2YWx1ZSk7XG4gIH1cbn0sIHN0cm9uZywgdHJ1ZSk7IiwiLy8gMjAuMi4yLjMgTWF0aC5hY29zaCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIGxvZzFwICAgPSByZXF1aXJlKCcuL19tYXRoLWxvZzFwJylcbiAgLCBzcXJ0ICAgID0gTWF0aC5zcXJ0XG4gICwgJGFjb3NoICA9IE1hdGguYWNvc2g7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogISgkYWNvc2hcbiAgLy8gVjggYnVnOiBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzUwOVxuICAmJiBNYXRoLmZsb29yKCRhY29zaChOdW1iZXIuTUFYX1ZBTFVFKSkgPT0gNzEwXG4gIC8vIFRvciBCcm93c2VyIGJ1ZzogTWF0aC5hY29zaChJbmZpbml0eSkgLT4gTmFOIFxuICAmJiAkYWNvc2goSW5maW5pdHkpID09IEluZmluaXR5XG4pLCAnTWF0aCcsIHtcbiAgYWNvc2g6IGZ1bmN0aW9uIGFjb3NoKHgpe1xuICAgIHJldHVybiAoeCA9ICt4KSA8IDEgPyBOYU4gOiB4ID4gOTQ5MDYyNjUuNjI0MjUxNTZcbiAgICAgID8gTWF0aC5sb2coeCkgKyBNYXRoLkxOMlxuICAgICAgOiBsb2cxcCh4IC0gMSArIHNxcnQoeCAtIDEpICogc3FydCh4ICsgMSkpO1xuICB9XG59KTsiLCIvLyAyMC4yLjIuNSBNYXRoLmFzaW5oKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgJGFzaW5oICA9IE1hdGguYXNpbmg7XG5cbmZ1bmN0aW9uIGFzaW5oKHgpe1xuICByZXR1cm4gIWlzRmluaXRlKHggPSAreCkgfHwgeCA9PSAwID8geCA6IHggPCAwID8gLWFzaW5oKC14KSA6IE1hdGgubG9nKHggKyBNYXRoLnNxcnQoeCAqIHggKyAxKSk7XG59XG5cbi8vIFRvciBCcm93c2VyIGJ1ZzogTWF0aC5hc2luaCgwKSAtPiAtMCBcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogISgkYXNpbmggJiYgMSAvICRhc2luaCgwKSA+IDApLCAnTWF0aCcsIHthc2luaDogYXNpbmh9KTsiLCIvLyAyMC4yLjIuNyBNYXRoLmF0YW5oKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgJGF0YW5oICA9IE1hdGguYXRhbmg7XG5cbi8vIFRvciBCcm93c2VyIGJ1ZzogTWF0aC5hdGFuaCgtMCkgLT4gMCBcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogISgkYXRhbmggJiYgMSAvICRhdGFuaCgtMCkgPCAwKSwgJ01hdGgnLCB7XG4gIGF0YW5oOiBmdW5jdGlvbiBhdGFuaCh4KXtcbiAgICByZXR1cm4gKHggPSAreCkgPT0gMCA/IHggOiBNYXRoLmxvZygoMSArIHgpIC8gKDEgLSB4KSkgLyAyO1xuICB9XG59KTsiLCIvLyAyMC4yLjIuOSBNYXRoLmNicnQoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCBzaWduICAgID0gcmVxdWlyZSgnLi9fbWF0aC1zaWduJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgY2JydDogZnVuY3Rpb24gY2JydCh4KXtcbiAgICByZXR1cm4gc2lnbih4ID0gK3gpICogTWF0aC5wb3coTWF0aC5hYnMoeCksIDEgLyAzKTtcbiAgfVxufSk7IiwiLy8gMjAuMi4yLjExIE1hdGguY2x6MzIoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgY2x6MzI6IGZ1bmN0aW9uIGNsejMyKHgpe1xuICAgIHJldHVybiAoeCA+Pj49IDApID8gMzEgLSBNYXRoLmZsb29yKE1hdGgubG9nKHggKyAwLjUpICogTWF0aC5MT0cyRSkgOiAzMjtcbiAgfVxufSk7IiwiLy8gMjAuMi4yLjEyIE1hdGguY29zaCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIGV4cCAgICAgPSBNYXRoLmV4cDtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBjb3NoOiBmdW5jdGlvbiBjb3NoKHgpe1xuICAgIHJldHVybiAoZXhwKHggPSAreCkgKyBleHAoLXgpKSAvIDI7XG4gIH1cbn0pOyIsIi8vIDIwLjIuMi4xNCBNYXRoLmV4cG0xKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgJGV4cG0xICA9IHJlcXVpcmUoJy4vX21hdGgtZXhwbTEnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoJGV4cG0xICE9IE1hdGguZXhwbTEpLCAnTWF0aCcsIHtleHBtMTogJGV4cG0xfSk7IiwiLy8gMjAuMi4yLjE2IE1hdGguZnJvdW5kKHgpXG52YXIgJGV4cG9ydCAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCBzaWduICAgICAgPSByZXF1aXJlKCcuL19tYXRoLXNpZ24nKVxuICAsIHBvdyAgICAgICA9IE1hdGgucG93XG4gICwgRVBTSUxPTiAgID0gcG93KDIsIC01MilcbiAgLCBFUFNJTE9OMzIgPSBwb3coMiwgLTIzKVxuICAsIE1BWDMyICAgICA9IHBvdygyLCAxMjcpICogKDIgLSBFUFNJTE9OMzIpXG4gICwgTUlOMzIgICAgID0gcG93KDIsIC0xMjYpO1xuXG52YXIgcm91bmRUaWVzVG9FdmVuID0gZnVuY3Rpb24obil7XG4gIHJldHVybiBuICsgMSAvIEVQU0lMT04gLSAxIC8gRVBTSUxPTjtcbn07XG5cblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBmcm91bmQ6IGZ1bmN0aW9uIGZyb3VuZCh4KXtcbiAgICB2YXIgJGFicyAgPSBNYXRoLmFicyh4KVxuICAgICAgLCAkc2lnbiA9IHNpZ24oeClcbiAgICAgICwgYSwgcmVzdWx0O1xuICAgIGlmKCRhYnMgPCBNSU4zMilyZXR1cm4gJHNpZ24gKiByb3VuZFRpZXNUb0V2ZW4oJGFicyAvIE1JTjMyIC8gRVBTSUxPTjMyKSAqIE1JTjMyICogRVBTSUxPTjMyO1xuICAgIGEgPSAoMSArIEVQU0lMT04zMiAvIEVQU0lMT04pICogJGFicztcbiAgICByZXN1bHQgPSBhIC0gKGEgLSAkYWJzKTtcbiAgICBpZihyZXN1bHQgPiBNQVgzMiB8fCByZXN1bHQgIT0gcmVzdWx0KXJldHVybiAkc2lnbiAqIEluZmluaXR5O1xuICAgIHJldHVybiAkc2lnbiAqIHJlc3VsdDtcbiAgfVxufSk7IiwiLy8gMjAuMi4yLjE3IE1hdGguaHlwb3QoW3ZhbHVlMVssIHZhbHVlMlssIOKApiBdXV0pXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgYWJzICAgICA9IE1hdGguYWJzO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGh5cG90OiBmdW5jdGlvbiBoeXBvdCh2YWx1ZTEsIHZhbHVlMil7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICB2YXIgc3VtICA9IDBcbiAgICAgICwgaSAgICA9IDBcbiAgICAgICwgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgICwgbGFyZyA9IDBcbiAgICAgICwgYXJnLCBkaXY7XG4gICAgd2hpbGUoaSA8IGFMZW4pe1xuICAgICAgYXJnID0gYWJzKGFyZ3VtZW50c1tpKytdKTtcbiAgICAgIGlmKGxhcmcgPCBhcmcpe1xuICAgICAgICBkaXYgID0gbGFyZyAvIGFyZztcbiAgICAgICAgc3VtICA9IHN1bSAqIGRpdiAqIGRpdiArIDE7XG4gICAgICAgIGxhcmcgPSBhcmc7XG4gICAgICB9IGVsc2UgaWYoYXJnID4gMCl7XG4gICAgICAgIGRpdiAgPSBhcmcgLyBsYXJnO1xuICAgICAgICBzdW0gKz0gZGl2ICogZGl2O1xuICAgICAgfSBlbHNlIHN1bSArPSBhcmc7XG4gICAgfVxuICAgIHJldHVybiBsYXJnID09PSBJbmZpbml0eSA/IEluZmluaXR5IDogbGFyZyAqIE1hdGguc3FydChzdW0pO1xuICB9XG59KTsiLCIvLyAyMC4yLjIuMTggTWF0aC5pbXVsKHgsIHkpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgJGltdWwgICA9IE1hdGguaW11bDtcblxuLy8gc29tZSBXZWJLaXQgdmVyc2lvbnMgZmFpbHMgd2l0aCBiaWcgbnVtYmVycywgc29tZSBoYXMgd3JvbmcgYXJpdHlcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbigpe1xuICByZXR1cm4gJGltdWwoMHhmZmZmZmZmZiwgNSkgIT0gLTUgfHwgJGltdWwubGVuZ3RoICE9IDI7XG59KSwgJ01hdGgnLCB7XG4gIGltdWw6IGZ1bmN0aW9uIGltdWwoeCwgeSl7XG4gICAgdmFyIFVJTlQxNiA9IDB4ZmZmZlxuICAgICAgLCB4biA9ICt4XG4gICAgICAsIHluID0gK3lcbiAgICAgICwgeGwgPSBVSU5UMTYgJiB4blxuICAgICAgLCB5bCA9IFVJTlQxNiAmIHluO1xuICAgIHJldHVybiAwIHwgeGwgKiB5bCArICgoVUlOVDE2ICYgeG4gPj4+IDE2KSAqIHlsICsgeGwgKiAoVUlOVDE2ICYgeW4gPj4+IDE2KSA8PCAxNiA+Pj4gMCk7XG4gIH1cbn0pOyIsIi8vIDIwLjIuMi4yMSBNYXRoLmxvZzEwKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGxvZzEwOiBmdW5jdGlvbiBsb2cxMCh4KXtcbiAgICByZXR1cm4gTWF0aC5sb2coeCkgLyBNYXRoLkxOMTA7XG4gIH1cbn0pOyIsIi8vIDIwLjIuMi4yMCBNYXRoLmxvZzFwKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7bG9nMXA6IHJlcXVpcmUoJy4vX21hdGgtbG9nMXAnKX0pOyIsIi8vIDIwLjIuMi4yMiBNYXRoLmxvZzIoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgbG9nMjogZnVuY3Rpb24gbG9nMih4KXtcbiAgICByZXR1cm4gTWF0aC5sb2coeCkgLyBNYXRoLkxOMjtcbiAgfVxufSk7IiwiLy8gMjAuMi4yLjI4IE1hdGguc2lnbih4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge3NpZ246IHJlcXVpcmUoJy4vX21hdGgtc2lnbicpfSk7IiwiLy8gMjAuMi4yLjMwIE1hdGguc2luaCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIGV4cG0xICAgPSByZXF1aXJlKCcuL19tYXRoLWV4cG0xJylcbiAgLCBleHAgICAgID0gTWF0aC5leHA7XG5cbi8vIFY4IG5lYXIgQ2hyb21pdW0gMzggaGFzIGEgcHJvYmxlbSB3aXRoIHZlcnkgc21hbGwgbnVtYmVyc1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uKCl7XG4gIHJldHVybiAhTWF0aC5zaW5oKC0yZS0xNykgIT0gLTJlLTE3O1xufSksICdNYXRoJywge1xuICBzaW5oOiBmdW5jdGlvbiBzaW5oKHgpe1xuICAgIHJldHVybiBNYXRoLmFicyh4ID0gK3gpIDwgMVxuICAgICAgPyAoZXhwbTEoeCkgLSBleHBtMSgteCkpIC8gMlxuICAgICAgOiAoZXhwKHggLSAxKSAtIGV4cCgteCAtIDEpKSAqIChNYXRoLkUgLyAyKTtcbiAgfVxufSk7IiwiLy8gMjAuMi4yLjMzIE1hdGgudGFuaCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIGV4cG0xICAgPSByZXF1aXJlKCcuL19tYXRoLWV4cG0xJylcbiAgLCBleHAgICAgID0gTWF0aC5leHA7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgdGFuaDogZnVuY3Rpb24gdGFuaCh4KXtcbiAgICB2YXIgYSA9IGV4cG0xKHggPSAreClcbiAgICAgICwgYiA9IGV4cG0xKC14KTtcbiAgICByZXR1cm4gYSA9PSBJbmZpbml0eSA/IDEgOiBiID09IEluZmluaXR5ID8gLTEgOiAoYSAtIGIpIC8gKGV4cCh4KSArIGV4cCgteCkpO1xuICB9XG59KTsiLCIvLyAyMC4yLjIuMzQgTWF0aC50cnVuYyh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICB0cnVuYzogZnVuY3Rpb24gdHJ1bmMoaXQpe1xuICAgIHJldHVybiAoaXQgPiAwID8gTWF0aC5mbG9vciA6IE1hdGguY2VpbCkoaXQpO1xuICB9XG59KTsiLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsICAgICAgICAgICAgPSByZXF1aXJlKCcuL19nbG9iYWwnKVxuICAsIGhhcyAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9faGFzJylcbiAgLCBjb2YgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2NvZicpXG4gICwgaW5oZXJpdElmUmVxdWlyZWQgPSByZXF1aXJlKCcuL19pbmhlcml0LWlmLXJlcXVpcmVkJylcbiAgLCB0b1ByaW1pdGl2ZSAgICAgICA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpXG4gICwgZmFpbHMgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19mYWlscycpXG4gICwgZ09QTiAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmZcbiAgLCBnT1BEICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZlxuICAsIGRQICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZlxuICAsICR0cmltICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKS50cmltXG4gICwgTlVNQkVSICAgICAgICAgICAgPSAnTnVtYmVyJ1xuICAsICROdW1iZXIgICAgICAgICAgID0gZ2xvYmFsW05VTUJFUl1cbiAgLCBCYXNlICAgICAgICAgICAgICA9ICROdW1iZXJcbiAgLCBwcm90byAgICAgICAgICAgICA9ICROdW1iZXIucHJvdG90eXBlXG4gIC8vIE9wZXJhIH4xMiBoYXMgYnJva2VuIE9iamVjdCN0b1N0cmluZ1xuICAsIEJST0tFTl9DT0YgICAgICAgID0gY29mKHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKShwcm90bykpID09IE5VTUJFUlxuICAsIFRSSU0gICAgICAgICAgICAgID0gJ3RyaW0nIGluIFN0cmluZy5wcm90b3R5cGU7XG5cbi8vIDcuMS4zIFRvTnVtYmVyKGFyZ3VtZW50KVxudmFyIHRvTnVtYmVyID0gZnVuY3Rpb24oYXJndW1lbnQpe1xuICB2YXIgaXQgPSB0b1ByaW1pdGl2ZShhcmd1bWVudCwgZmFsc2UpO1xuICBpZih0eXBlb2YgaXQgPT0gJ3N0cmluZycgJiYgaXQubGVuZ3RoID4gMil7XG4gICAgaXQgPSBUUklNID8gaXQudHJpbSgpIDogJHRyaW0oaXQsIDMpO1xuICAgIHZhciBmaXJzdCA9IGl0LmNoYXJDb2RlQXQoMClcbiAgICAgICwgdGhpcmQsIHJhZGl4LCBtYXhDb2RlO1xuICAgIGlmKGZpcnN0ID09PSA0MyB8fCBmaXJzdCA9PT0gNDUpe1xuICAgICAgdGhpcmQgPSBpdC5jaGFyQ29kZUF0KDIpO1xuICAgICAgaWYodGhpcmQgPT09IDg4IHx8IHRoaXJkID09PSAxMjApcmV0dXJuIE5hTjsgLy8gTnVtYmVyKCcrMHgxJykgc2hvdWxkIGJlIE5hTiwgb2xkIFY4IGZpeFxuICAgIH0gZWxzZSBpZihmaXJzdCA9PT0gNDgpe1xuICAgICAgc3dpdGNoKGl0LmNoYXJDb2RlQXQoMSkpe1xuICAgICAgICBjYXNlIDY2IDogY2FzZSA5OCAgOiByYWRpeCA9IDI7IG1heENvZGUgPSA0OTsgYnJlYWs7IC8vIGZhc3QgZXF1YWwgL14wYlswMV0rJC9pXG4gICAgICAgIGNhc2UgNzkgOiBjYXNlIDExMSA6IHJhZGl4ID0gODsgbWF4Q29kZSA9IDU1OyBicmVhazsgLy8gZmFzdCBlcXVhbCAvXjBvWzAtN10rJC9pXG4gICAgICAgIGRlZmF1bHQgOiByZXR1cm4gK2l0O1xuICAgICAgfVxuICAgICAgZm9yKHZhciBkaWdpdHMgPSBpdC5zbGljZSgyKSwgaSA9IDAsIGwgPSBkaWdpdHMubGVuZ3RoLCBjb2RlOyBpIDwgbDsgaSsrKXtcbiAgICAgICAgY29kZSA9IGRpZ2l0cy5jaGFyQ29kZUF0KGkpO1xuICAgICAgICAvLyBwYXJzZUludCBwYXJzZXMgYSBzdHJpbmcgdG8gYSBmaXJzdCB1bmF2YWlsYWJsZSBzeW1ib2xcbiAgICAgICAgLy8gYnV0IFRvTnVtYmVyIHNob3VsZCByZXR1cm4gTmFOIGlmIGEgc3RyaW5nIGNvbnRhaW5zIHVuYXZhaWxhYmxlIHN5bWJvbHNcbiAgICAgICAgaWYoY29kZSA8IDQ4IHx8IGNvZGUgPiBtYXhDb2RlKXJldHVybiBOYU47XG4gICAgICB9IHJldHVybiBwYXJzZUludChkaWdpdHMsIHJhZGl4KTtcbiAgICB9XG4gIH0gcmV0dXJuICtpdDtcbn07XG5cbmlmKCEkTnVtYmVyKCcgMG8xJykgfHwgISROdW1iZXIoJzBiMScpIHx8ICROdW1iZXIoJysweDEnKSl7XG4gICROdW1iZXIgPSBmdW5jdGlvbiBOdW1iZXIodmFsdWUpe1xuICAgIHZhciBpdCA9IGFyZ3VtZW50cy5sZW5ndGggPCAxID8gMCA6IHZhbHVlXG4gICAgICAsIHRoYXQgPSB0aGlzO1xuICAgIHJldHVybiB0aGF0IGluc3RhbmNlb2YgJE51bWJlclxuICAgICAgLy8gY2hlY2sgb24gMS4uY29uc3RydWN0b3IoZm9vKSBjYXNlXG4gICAgICAmJiAoQlJPS0VOX0NPRiA/IGZhaWxzKGZ1bmN0aW9uKCl7IHByb3RvLnZhbHVlT2YuY2FsbCh0aGF0KTsgfSkgOiBjb2YodGhhdCkgIT0gTlVNQkVSKVxuICAgICAgICA/IGluaGVyaXRJZlJlcXVpcmVkKG5ldyBCYXNlKHRvTnVtYmVyKGl0KSksIHRoYXQsICROdW1iZXIpIDogdG9OdW1iZXIoaXQpO1xuICB9O1xuICBmb3IodmFyIGtleXMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gZ09QTihCYXNlKSA6IChcbiAgICAvLyBFUzM6XG4gICAgJ01BWF9WQUxVRSxNSU5fVkFMVUUsTmFOLE5FR0FUSVZFX0lORklOSVRZLFBPU0lUSVZFX0lORklOSVRZLCcgK1xuICAgIC8vIEVTNiAoaW4gY2FzZSwgaWYgbW9kdWxlcyB3aXRoIEVTNiBOdW1iZXIgc3RhdGljcyByZXF1aXJlZCBiZWZvcmUpOlxuICAgICdFUFNJTE9OLGlzRmluaXRlLGlzSW50ZWdlcixpc05hTixpc1NhZmVJbnRlZ2VyLE1BWF9TQUZFX0lOVEVHRVIsJyArXG4gICAgJ01JTl9TQUZFX0lOVEVHRVIscGFyc2VGbG9hdCxwYXJzZUludCxpc0ludGVnZXInXG4gICkuc3BsaXQoJywnKSwgaiA9IDAsIGtleTsga2V5cy5sZW5ndGggPiBqOyBqKyspe1xuICAgIGlmKGhhcyhCYXNlLCBrZXkgPSBrZXlzW2pdKSAmJiAhaGFzKCROdW1iZXIsIGtleSkpe1xuICAgICAgZFAoJE51bWJlciwga2V5LCBnT1BEKEJhc2UsIGtleSkpO1xuICAgIH1cbiAgfVxuICAkTnVtYmVyLnByb3RvdHlwZSA9IHByb3RvO1xuICBwcm90by5jb25zdHJ1Y3RvciA9ICROdW1iZXI7XG4gIHJlcXVpcmUoJy4vX3JlZGVmaW5lJykoZ2xvYmFsLCBOVU1CRVIsICROdW1iZXIpO1xufSIsIi8vIDIwLjEuMi4xIE51bWJlci5FUFNJTE9OXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHtFUFNJTE9OOiBNYXRoLnBvdygyLCAtNTIpfSk7IiwiLy8gMjAuMS4yLjIgTnVtYmVyLmlzRmluaXRlKG51bWJlcilcbnZhciAkZXhwb3J0ICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIF9pc0Zpbml0ZSA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmlzRmluaXRlO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHtcbiAgaXNGaW5pdGU6IGZ1bmN0aW9uIGlzRmluaXRlKGl0KXtcbiAgICByZXR1cm4gdHlwZW9mIGl0ID09ICdudW1iZXInICYmIF9pc0Zpbml0ZShpdCk7XG4gIH1cbn0pOyIsIi8vIDIwLjEuMi4zIE51bWJlci5pc0ludGVnZXIobnVtYmVyKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7aXNJbnRlZ2VyOiByZXF1aXJlKCcuL19pcy1pbnRlZ2VyJyl9KTsiLCIvLyAyMC4xLjIuNCBOdW1iZXIuaXNOYU4obnVtYmVyKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7XG4gIGlzTmFOOiBmdW5jdGlvbiBpc05hTihudW1iZXIpe1xuICAgIHJldHVybiBudW1iZXIgIT0gbnVtYmVyO1xuICB9XG59KTsiLCIvLyAyMC4xLjIuNSBOdW1iZXIuaXNTYWZlSW50ZWdlcihudW1iZXIpXG52YXIgJGV4cG9ydCAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCBpc0ludGVnZXIgPSByZXF1aXJlKCcuL19pcy1pbnRlZ2VyJylcbiAgLCBhYnMgICAgICAgPSBNYXRoLmFicztcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7XG4gIGlzU2FmZUludGVnZXI6IGZ1bmN0aW9uIGlzU2FmZUludGVnZXIobnVtYmVyKXtcbiAgICByZXR1cm4gaXNJbnRlZ2VyKG51bWJlcikgJiYgYWJzKG51bWJlcikgPD0gMHgxZmZmZmZmZmZmZmZmZjtcbiAgfVxufSk7IiwiLy8gMjAuMS4yLjYgTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywge01BWF9TQUZFX0lOVEVHRVI6IDB4MWZmZmZmZmZmZmZmZmZ9KTsiLCIvLyAyMC4xLjIuMTAgTnVtYmVyLk1JTl9TQUZFX0lOVEVHRVJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywge01JTl9TQUZFX0lOVEVHRVI6IC0weDFmZmZmZmZmZmZmZmZmfSk7IiwidmFyICRleHBvcnQgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCAkcGFyc2VGbG9hdCA9IHJlcXVpcmUoJy4vX3BhcnNlLWZsb2F0Jyk7XG4vLyAyMC4xLjIuMTIgTnVtYmVyLnBhcnNlRmxvYXQoc3RyaW5nKVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoTnVtYmVyLnBhcnNlRmxvYXQgIT0gJHBhcnNlRmxvYXQpLCAnTnVtYmVyJywge3BhcnNlRmxvYXQ6ICRwYXJzZUZsb2F0fSk7IiwidmFyICRleHBvcnQgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgJHBhcnNlSW50ID0gcmVxdWlyZSgnLi9fcGFyc2UtaW50Jyk7XG4vLyAyMC4xLjIuMTMgTnVtYmVyLnBhcnNlSW50KHN0cmluZywgcmFkaXgpXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIChOdW1iZXIucGFyc2VJbnQgIT0gJHBhcnNlSW50KSwgJ051bWJlcicsIHtwYXJzZUludDogJHBhcnNlSW50fSk7IiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgdG9JbnRlZ2VyICAgID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpXG4gICwgYU51bWJlclZhbHVlID0gcmVxdWlyZSgnLi9fYS1udW1iZXItdmFsdWUnKVxuICAsIHJlcGVhdCAgICAgICA9IHJlcXVpcmUoJy4vX3N0cmluZy1yZXBlYXQnKVxuICAsICR0b0ZpeGVkICAgICA9IDEuLnRvRml4ZWRcbiAgLCBmbG9vciAgICAgICAgPSBNYXRoLmZsb29yXG4gICwgZGF0YSAgICAgICAgID0gWzAsIDAsIDAsIDAsIDAsIDBdXG4gICwgRVJST1IgICAgICAgID0gJ051bWJlci50b0ZpeGVkOiBpbmNvcnJlY3QgaW52b2NhdGlvbiEnXG4gICwgWkVSTyAgICAgICAgID0gJzAnO1xuXG52YXIgbXVsdGlwbHkgPSBmdW5jdGlvbihuLCBjKXtcbiAgdmFyIGkgID0gLTFcbiAgICAsIGMyID0gYztcbiAgd2hpbGUoKytpIDwgNil7XG4gICAgYzIgKz0gbiAqIGRhdGFbaV07XG4gICAgZGF0YVtpXSA9IGMyICUgMWU3O1xuICAgIGMyID0gZmxvb3IoYzIgLyAxZTcpO1xuICB9XG59O1xudmFyIGRpdmlkZSA9IGZ1bmN0aW9uKG4pe1xuICB2YXIgaSA9IDZcbiAgICAsIGMgPSAwO1xuICB3aGlsZSgtLWkgPj0gMCl7XG4gICAgYyArPSBkYXRhW2ldO1xuICAgIGRhdGFbaV0gPSBmbG9vcihjIC8gbik7XG4gICAgYyA9IChjICUgbikgKiAxZTc7XG4gIH1cbn07XG52YXIgbnVtVG9TdHJpbmcgPSBmdW5jdGlvbigpe1xuICB2YXIgaSA9IDZcbiAgICAsIHMgPSAnJztcbiAgd2hpbGUoLS1pID49IDApe1xuICAgIGlmKHMgIT09ICcnIHx8IGkgPT09IDAgfHwgZGF0YVtpXSAhPT0gMCl7XG4gICAgICB2YXIgdCA9IFN0cmluZyhkYXRhW2ldKTtcbiAgICAgIHMgPSBzID09PSAnJyA/IHQgOiBzICsgcmVwZWF0LmNhbGwoWkVSTywgNyAtIHQubGVuZ3RoKSArIHQ7XG4gICAgfVxuICB9IHJldHVybiBzO1xufTtcbnZhciBwb3cgPSBmdW5jdGlvbih4LCBuLCBhY2Mpe1xuICByZXR1cm4gbiA9PT0gMCA/IGFjYyA6IG4gJSAyID09PSAxID8gcG93KHgsIG4gLSAxLCBhY2MgKiB4KSA6IHBvdyh4ICogeCwgbiAvIDIsIGFjYyk7XG59O1xudmFyIGxvZyA9IGZ1bmN0aW9uKHgpe1xuICB2YXIgbiAgPSAwXG4gICAgLCB4MiA9IHg7XG4gIHdoaWxlKHgyID49IDQwOTYpe1xuICAgIG4gKz0gMTI7XG4gICAgeDIgLz0gNDA5NjtcbiAgfVxuICB3aGlsZSh4MiA+PSAyKXtcbiAgICBuICArPSAxO1xuICAgIHgyIC89IDI7XG4gIH0gcmV0dXJuIG47XG59O1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICghISR0b0ZpeGVkICYmIChcbiAgMC4wMDAwOC50b0ZpeGVkKDMpICE9PSAnMC4wMDAnIHx8XG4gIDAuOS50b0ZpeGVkKDApICE9PSAnMScgfHxcbiAgMS4yNTUudG9GaXhlZCgyKSAhPT0gJzEuMjUnIHx8XG4gIDEwMDAwMDAwMDAwMDAwMDAxMjguLnRvRml4ZWQoMCkgIT09ICcxMDAwMDAwMDAwMDAwMDAwMTI4J1xuKSB8fCAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbigpe1xuICAvLyBWOCB+IEFuZHJvaWQgNC4zLVxuICAkdG9GaXhlZC5jYWxsKHt9KTtcbn0pKSwgJ051bWJlcicsIHtcbiAgdG9GaXhlZDogZnVuY3Rpb24gdG9GaXhlZChmcmFjdGlvbkRpZ2l0cyl7XG4gICAgdmFyIHggPSBhTnVtYmVyVmFsdWUodGhpcywgRVJST1IpXG4gICAgICAsIGYgPSB0b0ludGVnZXIoZnJhY3Rpb25EaWdpdHMpXG4gICAgICAsIHMgPSAnJ1xuICAgICAgLCBtID0gWkVST1xuICAgICAgLCBlLCB6LCBqLCBrO1xuICAgIGlmKGYgPCAwIHx8IGYgPiAyMCl0aHJvdyBSYW5nZUVycm9yKEVSUk9SKTtcbiAgICBpZih4ICE9IHgpcmV0dXJuICdOYU4nO1xuICAgIGlmKHggPD0gLTFlMjEgfHwgeCA+PSAxZTIxKXJldHVybiBTdHJpbmcoeCk7XG4gICAgaWYoeCA8IDApe1xuICAgICAgcyA9ICctJztcbiAgICAgIHggPSAteDtcbiAgICB9XG4gICAgaWYoeCA+IDFlLTIxKXtcbiAgICAgIGUgPSBsb2coeCAqIHBvdygyLCA2OSwgMSkpIC0gNjk7XG4gICAgICB6ID0gZSA8IDAgPyB4ICogcG93KDIsIC1lLCAxKSA6IHggLyBwb3coMiwgZSwgMSk7XG4gICAgICB6ICo9IDB4MTAwMDAwMDAwMDAwMDA7XG4gICAgICBlID0gNTIgLSBlO1xuICAgICAgaWYoZSA+IDApe1xuICAgICAgICBtdWx0aXBseSgwLCB6KTtcbiAgICAgICAgaiA9IGY7XG4gICAgICAgIHdoaWxlKGogPj0gNyl7XG4gICAgICAgICAgbXVsdGlwbHkoMWU3LCAwKTtcbiAgICAgICAgICBqIC09IDc7XG4gICAgICAgIH1cbiAgICAgICAgbXVsdGlwbHkocG93KDEwLCBqLCAxKSwgMCk7XG4gICAgICAgIGogPSBlIC0gMTtcbiAgICAgICAgd2hpbGUoaiA+PSAyMyl7XG4gICAgICAgICAgZGl2aWRlKDEgPDwgMjMpO1xuICAgICAgICAgIGogLT0gMjM7XG4gICAgICAgIH1cbiAgICAgICAgZGl2aWRlKDEgPDwgaik7XG4gICAgICAgIG11bHRpcGx5KDEsIDEpO1xuICAgICAgICBkaXZpZGUoMik7XG4gICAgICAgIG0gPSBudW1Ub1N0cmluZygpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbXVsdGlwbHkoMCwgeik7XG4gICAgICAgIG11bHRpcGx5KDEgPDwgLWUsIDApO1xuICAgICAgICBtID0gbnVtVG9TdHJpbmcoKSArIHJlcGVhdC5jYWxsKFpFUk8sIGYpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZihmID4gMCl7XG4gICAgICBrID0gbS5sZW5ndGg7XG4gICAgICBtID0gcyArIChrIDw9IGYgPyAnMC4nICsgcmVwZWF0LmNhbGwoWkVSTywgZiAtIGspICsgbSA6IG0uc2xpY2UoMCwgayAtIGYpICsgJy4nICsgbS5zbGljZShrIC0gZikpO1xuICAgIH0gZWxzZSB7XG4gICAgICBtID0gcyArIG07XG4gICAgfSByZXR1cm4gbTtcbiAgfVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgJGZhaWxzICAgICAgID0gcmVxdWlyZSgnLi9fZmFpbHMnKVxuICAsIGFOdW1iZXJWYWx1ZSA9IHJlcXVpcmUoJy4vX2EtbnVtYmVyLXZhbHVlJylcbiAgLCAkdG9QcmVjaXNpb24gPSAxLi50b1ByZWNpc2lvbjtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoJGZhaWxzKGZ1bmN0aW9uKCl7XG4gIC8vIElFNy1cbiAgcmV0dXJuICR0b1ByZWNpc2lvbi5jYWxsKDEsIHVuZGVmaW5lZCkgIT09ICcxJztcbn0pIHx8ICEkZmFpbHMoZnVuY3Rpb24oKXtcbiAgLy8gVjggfiBBbmRyb2lkIDQuMy1cbiAgJHRvUHJlY2lzaW9uLmNhbGwoe30pO1xufSkpLCAnTnVtYmVyJywge1xuICB0b1ByZWNpc2lvbjogZnVuY3Rpb24gdG9QcmVjaXNpb24ocHJlY2lzaW9uKXtcbiAgICB2YXIgdGhhdCA9IGFOdW1iZXJWYWx1ZSh0aGlzLCAnTnVtYmVyI3RvUHJlY2lzaW9uOiBpbmNvcnJlY3QgaW52b2NhdGlvbiEnKTtcbiAgICByZXR1cm4gcHJlY2lzaW9uID09PSB1bmRlZmluZWQgPyAkdG9QcmVjaXNpb24uY2FsbCh0aGF0KSA6ICR0b1ByZWNpc2lvbi5jYWxsKHRoYXQsIHByZWNpc2lvbik7IFxuICB9XG59KTsiLCIvLyAxOS4xLjMuMSBPYmplY3QuYXNzaWduKHRhcmdldCwgc291cmNlKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYsICdPYmplY3QnLCB7YXNzaWduOiByZXF1aXJlKCcuL19vYmplY3QtYXNzaWduJyl9KTsiLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4vLyAxOS4xLjIuMiAvIDE1LjIuMy41IE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0Jywge2NyZWF0ZTogcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpfSk7IiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbi8vIDE5LjEuMi4zIC8gMTUuMi4zLjcgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcylcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyksICdPYmplY3QnLCB7ZGVmaW5lUHJvcGVydGllczogcmVxdWlyZSgnLi9fb2JqZWN0LWRwcycpfSk7IiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbi8vIDE5LjEuMi40IC8gMTUuMi4zLjYgT2JqZWN0LmRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpLCAnT2JqZWN0Jywge2RlZmluZVByb3BlcnR5OiByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mfSk7IiwiLy8gMTkuMS4yLjUgT2JqZWN0LmZyZWV6ZShPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0JylcbiAgLCBtZXRhICAgICA9IHJlcXVpcmUoJy4vX21ldGEnKS5vbkZyZWV6ZTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdmcmVlemUnLCBmdW5jdGlvbigkZnJlZXplKXtcbiAgcmV0dXJuIGZ1bmN0aW9uIGZyZWV6ZShpdCl7XG4gICAgcmV0dXJuICRmcmVlemUgJiYgaXNPYmplY3QoaXQpID8gJGZyZWV6ZShtZXRhKGl0KSkgOiBpdDtcbiAgfTtcbn0pOyIsIi8vIDE5LjEuMi42IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUClcbnZhciB0b0lPYmplY3QgICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpXG4gICwgJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZjtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3InLCBmdW5jdGlvbigpe1xuICByZXR1cm4gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpe1xuICAgIHJldHVybiAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRvSU9iamVjdChpdCksIGtleSk7XG4gIH07XG59KTsiLCIvLyAxOS4xLjIuNyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPKVxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdnZXRPd25Qcm9wZXJ0eU5hbWVzJywgZnVuY3Rpb24oKXtcbiAgcmV0dXJuIHJlcXVpcmUoJy4vX29iamVjdC1nb3BuLWV4dCcpLmY7XG59KTsiLCIvLyAxOS4xLjIuOSBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTylcbnZhciB0b09iamVjdCAgICAgICAgPSByZXF1aXJlKCcuL190by1vYmplY3QnKVxuICAsICRnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdnZXRQcm90b3R5cGVPZicsIGZ1bmN0aW9uKCl7XG4gIHJldHVybiBmdW5jdGlvbiBnZXRQcm90b3R5cGVPZihpdCl7XG4gICAgcmV0dXJuICRnZXRQcm90b3R5cGVPZih0b09iamVjdChpdCkpO1xuICB9O1xufSk7IiwiLy8gMTkuMS4yLjExIE9iamVjdC5pc0V4dGVuc2libGUoTylcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2lzRXh0ZW5zaWJsZScsIGZ1bmN0aW9uKCRpc0V4dGVuc2libGUpe1xuICByZXR1cm4gZnVuY3Rpb24gaXNFeHRlbnNpYmxlKGl0KXtcbiAgICByZXR1cm4gaXNPYmplY3QoaXQpID8gJGlzRXh0ZW5zaWJsZSA/ICRpc0V4dGVuc2libGUoaXQpIDogdHJ1ZSA6IGZhbHNlO1xuICB9O1xufSk7IiwiLy8gMTkuMS4yLjEyIE9iamVjdC5pc0Zyb3plbihPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnaXNGcm96ZW4nLCBmdW5jdGlvbigkaXNGcm96ZW4pe1xuICByZXR1cm4gZnVuY3Rpb24gaXNGcm96ZW4oaXQpe1xuICAgIHJldHVybiBpc09iamVjdChpdCkgPyAkaXNGcm96ZW4gPyAkaXNGcm96ZW4oaXQpIDogZmFsc2UgOiB0cnVlO1xuICB9O1xufSk7IiwiLy8gMTkuMS4yLjEzIE9iamVjdC5pc1NlYWxlZChPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnaXNTZWFsZWQnLCBmdW5jdGlvbigkaXNTZWFsZWQpe1xuICByZXR1cm4gZnVuY3Rpb24gaXNTZWFsZWQoaXQpe1xuICAgIHJldHVybiBpc09iamVjdChpdCkgPyAkaXNTZWFsZWQgPyAkaXNTZWFsZWQoaXQpIDogZmFsc2UgOiB0cnVlO1xuICB9O1xufSk7IiwiLy8gMTkuMS4zLjEwIE9iamVjdC5pcyh2YWx1ZTEsIHZhbHVlMilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHtpczogcmVxdWlyZSgnLi9fc2FtZS12YWx1ZScpfSk7IiwiLy8gMTkuMS4yLjE0IE9iamVjdC5rZXlzKE8pXG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKVxuICAsICRrZXlzICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdrZXlzJywgZnVuY3Rpb24oKXtcbiAgcmV0dXJuIGZ1bmN0aW9uIGtleXMoaXQpe1xuICAgIHJldHVybiAka2V5cyh0b09iamVjdChpdCkpO1xuICB9O1xufSk7IiwiLy8gMTkuMS4yLjE1IE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucyhPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0JylcbiAgLCBtZXRhICAgICA9IHJlcXVpcmUoJy4vX21ldGEnKS5vbkZyZWV6ZTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdwcmV2ZW50RXh0ZW5zaW9ucycsIGZ1bmN0aW9uKCRwcmV2ZW50RXh0ZW5zaW9ucyl7XG4gIHJldHVybiBmdW5jdGlvbiBwcmV2ZW50RXh0ZW5zaW9ucyhpdCl7XG4gICAgcmV0dXJuICRwcmV2ZW50RXh0ZW5zaW9ucyAmJiBpc09iamVjdChpdCkgPyAkcHJldmVudEV4dGVuc2lvbnMobWV0YShpdCkpIDogaXQ7XG4gIH07XG59KTsiLCIvLyAxOS4xLjIuMTcgT2JqZWN0LnNlYWwoTylcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpXG4gICwgbWV0YSAgICAgPSByZXF1aXJlKCcuL19tZXRhJykub25GcmVlemU7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnc2VhbCcsIGZ1bmN0aW9uKCRzZWFsKXtcbiAgcmV0dXJuIGZ1bmN0aW9uIHNlYWwoaXQpe1xuICAgIHJldHVybiAkc2VhbCAmJiBpc09iamVjdChpdCkgPyAkc2VhbChtZXRhKGl0KSkgOiBpdDtcbiAgfTtcbn0pOyIsIi8vIDE5LjEuMy4xOSBPYmplY3Quc2V0UHJvdG90eXBlT2YoTywgcHJvdG8pXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7c2V0UHJvdG90eXBlT2Y6IHJlcXVpcmUoJy4vX3NldC1wcm90bycpLnNldH0pOyIsIid1c2Ugc3RyaWN0Jztcbi8vIDE5LjEuMy42IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcoKVxudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJylcbiAgLCB0ZXN0ICAgID0ge307XG50ZXN0W3JlcXVpcmUoJy4vX3drcycpKCd0b1N0cmluZ1RhZycpXSA9ICd6JztcbmlmKHRlc3QgKyAnJyAhPSAnW29iamVjdCB6XScpe1xuICByZXF1aXJlKCcuL19yZWRlZmluZScpKE9iamVjdC5wcm90b3R5cGUsICd0b1N0cmluZycsIGZ1bmN0aW9uIHRvU3RyaW5nKCl7XG4gICAgcmV0dXJuICdbb2JqZWN0ICcgKyBjbGFzc29mKHRoaXMpICsgJ10nO1xuICB9LCB0cnVlKTtcbn0iLCJ2YXIgJGV4cG9ydCAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsICRwYXJzZUZsb2F0ID0gcmVxdWlyZSgnLi9fcGFyc2UtZmxvYXQnKTtcbi8vIDE4LjIuNCBwYXJzZUZsb2F0KHN0cmluZylcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5GICogKHBhcnNlRmxvYXQgIT0gJHBhcnNlRmxvYXQpLCB7cGFyc2VGbG9hdDogJHBhcnNlRmxvYXR9KTsiLCJ2YXIgJGV4cG9ydCAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCAkcGFyc2VJbnQgPSByZXF1aXJlKCcuL19wYXJzZS1pbnQnKTtcbi8vIDE4LjIuNSBwYXJzZUludChzdHJpbmcsIHJhZGl4KVxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LkYgKiAocGFyc2VJbnQgIT0gJHBhcnNlSW50KSwge3BhcnNlSW50OiAkcGFyc2VJbnR9KTsiLCIndXNlIHN0cmljdCc7XG52YXIgTElCUkFSWSAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fbGlicmFyeScpXG4gICwgZ2xvYmFsICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fZ2xvYmFsJylcbiAgLCBjdHggICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19jdHgnKVxuICAsIGNsYXNzb2YgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKVxuICAsICRleHBvcnQgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgaXNPYmplY3QgICAgICAgICAgID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0JylcbiAgLCBhRnVuY3Rpb24gICAgICAgICAgPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJylcbiAgLCBhbkluc3RhbmNlICAgICAgICAgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpXG4gICwgZm9yT2YgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fZm9yLW9mJylcbiAgLCBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19zcGVjaWVzLWNvbnN0cnVjdG9yJylcbiAgLCB0YXNrICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL190YXNrJykuc2V0XG4gICwgbWljcm90YXNrICAgICAgICAgID0gcmVxdWlyZSgnLi9fbWljcm90YXNrJykoKVxuICAsIFBST01JU0UgICAgICAgICAgICA9ICdQcm9taXNlJ1xuICAsIFR5cGVFcnJvciAgICAgICAgICA9IGdsb2JhbC5UeXBlRXJyb3JcbiAgLCBwcm9jZXNzICAgICAgICAgICAgPSBnbG9iYWwucHJvY2Vzc1xuICAsICRQcm9taXNlICAgICAgICAgICA9IGdsb2JhbFtQUk9NSVNFXVxuICAsIHByb2Nlc3MgICAgICAgICAgICA9IGdsb2JhbC5wcm9jZXNzXG4gICwgaXNOb2RlICAgICAgICAgICAgID0gY2xhc3NvZihwcm9jZXNzKSA9PSAncHJvY2VzcydcbiAgLCBlbXB0eSAgICAgICAgICAgICAgPSBmdW5jdGlvbigpeyAvKiBlbXB0eSAqLyB9XG4gICwgSW50ZXJuYWwsIEdlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eSwgV3JhcHBlcjtcblxudmFyIFVTRV9OQVRJVkUgPSAhIWZ1bmN0aW9uKCl7XG4gIHRyeSB7XG4gICAgLy8gY29ycmVjdCBzdWJjbGFzc2luZyB3aXRoIEBAc3BlY2llcyBzdXBwb3J0XG4gICAgdmFyIHByb21pc2UgICAgID0gJFByb21pc2UucmVzb2x2ZSgxKVxuICAgICAgLCBGYWtlUHJvbWlzZSA9IChwcm9taXNlLmNvbnN0cnVjdG9yID0ge30pW3JlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyldID0gZnVuY3Rpb24oZXhlYyl7IGV4ZWMoZW1wdHksIGVtcHR5KTsgfTtcbiAgICAvLyB1bmhhbmRsZWQgcmVqZWN0aW9ucyB0cmFja2luZyBzdXBwb3J0LCBOb2RlSlMgUHJvbWlzZSB3aXRob3V0IGl0IGZhaWxzIEBAc3BlY2llcyB0ZXN0XG4gICAgcmV0dXJuIChpc05vZGUgfHwgdHlwZW9mIFByb21pc2VSZWplY3Rpb25FdmVudCA9PSAnZnVuY3Rpb24nKSAmJiBwcm9taXNlLnRoZW4oZW1wdHkpIGluc3RhbmNlb2YgRmFrZVByb21pc2U7XG4gIH0gY2F0Y2goZSl7IC8qIGVtcHR5ICovIH1cbn0oKTtcblxuLy8gaGVscGVyc1xudmFyIHNhbWVDb25zdHJ1Y3RvciA9IGZ1bmN0aW9uKGEsIGIpe1xuICAvLyB3aXRoIGxpYnJhcnkgd3JhcHBlciBzcGVjaWFsIGNhc2VcbiAgcmV0dXJuIGEgPT09IGIgfHwgYSA9PT0gJFByb21pc2UgJiYgYiA9PT0gV3JhcHBlcjtcbn07XG52YXIgaXNUaGVuYWJsZSA9IGZ1bmN0aW9uKGl0KXtcbiAgdmFyIHRoZW47XG4gIHJldHVybiBpc09iamVjdChpdCkgJiYgdHlwZW9mICh0aGVuID0gaXQudGhlbikgPT0gJ2Z1bmN0aW9uJyA/IHRoZW4gOiBmYWxzZTtcbn07XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSBmdW5jdGlvbihDKXtcbiAgcmV0dXJuIHNhbWVDb25zdHJ1Y3RvcigkUHJvbWlzZSwgQylcbiAgICA/IG5ldyBQcm9taXNlQ2FwYWJpbGl0eShDKVxuICAgIDogbmV3IEdlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eShDKTtcbn07XG52YXIgUHJvbWlzZUNhcGFiaWxpdHkgPSBHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHkgPSBmdW5jdGlvbihDKXtcbiAgdmFyIHJlc29sdmUsIHJlamVjdDtcbiAgdGhpcy5wcm9taXNlID0gbmV3IEMoZnVuY3Rpb24oJCRyZXNvbHZlLCAkJHJlamVjdCl7XG4gICAgaWYocmVzb2x2ZSAhPT0gdW5kZWZpbmVkIHx8IHJlamVjdCAhPT0gdW5kZWZpbmVkKXRocm93IFR5cGVFcnJvcignQmFkIFByb21pc2UgY29uc3RydWN0b3InKTtcbiAgICByZXNvbHZlID0gJCRyZXNvbHZlO1xuICAgIHJlamVjdCAgPSAkJHJlamVjdDtcbiAgfSk7XG4gIHRoaXMucmVzb2x2ZSA9IGFGdW5jdGlvbihyZXNvbHZlKTtcbiAgdGhpcy5yZWplY3QgID0gYUZ1bmN0aW9uKHJlamVjdCk7XG59O1xudmFyIHBlcmZvcm0gPSBmdW5jdGlvbihleGVjKXtcbiAgdHJ5IHtcbiAgICBleGVjKCk7XG4gIH0gY2F0Y2goZSl7XG4gICAgcmV0dXJuIHtlcnJvcjogZX07XG4gIH1cbn07XG52YXIgbm90aWZ5ID0gZnVuY3Rpb24ocHJvbWlzZSwgaXNSZWplY3Qpe1xuICBpZihwcm9taXNlLl9uKXJldHVybjtcbiAgcHJvbWlzZS5fbiA9IHRydWU7XG4gIHZhciBjaGFpbiA9IHByb21pc2UuX2M7XG4gIG1pY3JvdGFzayhmdW5jdGlvbigpe1xuICAgIHZhciB2YWx1ZSA9IHByb21pc2UuX3ZcbiAgICAgICwgb2sgICAgPSBwcm9taXNlLl9zID09IDFcbiAgICAgICwgaSAgICAgPSAwO1xuICAgIHZhciBydW4gPSBmdW5jdGlvbihyZWFjdGlvbil7XG4gICAgICB2YXIgaGFuZGxlciA9IG9rID8gcmVhY3Rpb24ub2sgOiByZWFjdGlvbi5mYWlsXG4gICAgICAgICwgcmVzb2x2ZSA9IHJlYWN0aW9uLnJlc29sdmVcbiAgICAgICAgLCByZWplY3QgID0gcmVhY3Rpb24ucmVqZWN0XG4gICAgICAgICwgZG9tYWluICA9IHJlYWN0aW9uLmRvbWFpblxuICAgICAgICAsIHJlc3VsdCwgdGhlbjtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmKGhhbmRsZXIpe1xuICAgICAgICAgIGlmKCFvayl7XG4gICAgICAgICAgICBpZihwcm9taXNlLl9oID09IDIpb25IYW5kbGVVbmhhbmRsZWQocHJvbWlzZSk7XG4gICAgICAgICAgICBwcm9taXNlLl9oID0gMTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYoaGFuZGxlciA9PT0gdHJ1ZSlyZXN1bHQgPSB2YWx1ZTtcbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmKGRvbWFpbilkb21haW4uZW50ZXIoKTtcbiAgICAgICAgICAgIHJlc3VsdCA9IGhhbmRsZXIodmFsdWUpO1xuICAgICAgICAgICAgaWYoZG9tYWluKWRvbWFpbi5leGl0KCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmKHJlc3VsdCA9PT0gcmVhY3Rpb24ucHJvbWlzZSl7XG4gICAgICAgICAgICByZWplY3QoVHlwZUVycm9yKCdQcm9taXNlLWNoYWluIGN5Y2xlJykpO1xuICAgICAgICAgIH0gZWxzZSBpZih0aGVuID0gaXNUaGVuYWJsZShyZXN1bHQpKXtcbiAgICAgICAgICAgIHRoZW4uY2FsbChyZXN1bHQsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSBlbHNlIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfSBlbHNlIHJlamVjdCh2YWx1ZSk7XG4gICAgICB9IGNhdGNoKGUpe1xuICAgICAgICByZWplY3QoZSk7XG4gICAgICB9XG4gICAgfTtcbiAgICB3aGlsZShjaGFpbi5sZW5ndGggPiBpKXJ1bihjaGFpbltpKytdKTsgLy8gdmFyaWFibGUgbGVuZ3RoIC0gY2FuJ3QgdXNlIGZvckVhY2hcbiAgICBwcm9taXNlLl9jID0gW107XG4gICAgcHJvbWlzZS5fbiA9IGZhbHNlO1xuICAgIGlmKGlzUmVqZWN0ICYmICFwcm9taXNlLl9oKW9uVW5oYW5kbGVkKHByb21pc2UpO1xuICB9KTtcbn07XG52YXIgb25VbmhhbmRsZWQgPSBmdW5jdGlvbihwcm9taXNlKXtcbiAgdGFzay5jYWxsKGdsb2JhbCwgZnVuY3Rpb24oKXtcbiAgICB2YXIgdmFsdWUgPSBwcm9taXNlLl92XG4gICAgICAsIGFicnVwdCwgaGFuZGxlciwgY29uc29sZTtcbiAgICBpZihpc1VuaGFuZGxlZChwcm9taXNlKSl7XG4gICAgICBhYnJ1cHQgPSBwZXJmb3JtKGZ1bmN0aW9uKCl7XG4gICAgICAgIGlmKGlzTm9kZSl7XG4gICAgICAgICAgcHJvY2Vzcy5lbWl0KCd1bmhhbmRsZWRSZWplY3Rpb24nLCB2YWx1ZSwgcHJvbWlzZSk7XG4gICAgICAgIH0gZWxzZSBpZihoYW5kbGVyID0gZ2xvYmFsLm9udW5oYW5kbGVkcmVqZWN0aW9uKXtcbiAgICAgICAgICBoYW5kbGVyKHtwcm9taXNlOiBwcm9taXNlLCByZWFzb246IHZhbHVlfSk7XG4gICAgICAgIH0gZWxzZSBpZigoY29uc29sZSA9IGdsb2JhbC5jb25zb2xlKSAmJiBjb25zb2xlLmVycm9yKXtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdVbmhhbmRsZWQgcHJvbWlzZSByZWplY3Rpb24nLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgLy8gQnJvd3NlcnMgc2hvdWxkIG5vdCB0cmlnZ2VyIGByZWplY3Rpb25IYW5kbGVkYCBldmVudCBpZiBpdCB3YXMgaGFuZGxlZCBoZXJlLCBOb2RlSlMgLSBzaG91bGRcbiAgICAgIHByb21pc2UuX2ggPSBpc05vZGUgfHwgaXNVbmhhbmRsZWQocHJvbWlzZSkgPyAyIDogMTtcbiAgICB9IHByb21pc2UuX2EgPSB1bmRlZmluZWQ7XG4gICAgaWYoYWJydXB0KXRocm93IGFicnVwdC5lcnJvcjtcbiAgfSk7XG59O1xudmFyIGlzVW5oYW5kbGVkID0gZnVuY3Rpb24ocHJvbWlzZSl7XG4gIGlmKHByb21pc2UuX2ggPT0gMSlyZXR1cm4gZmFsc2U7XG4gIHZhciBjaGFpbiA9IHByb21pc2UuX2EgfHwgcHJvbWlzZS5fY1xuICAgICwgaSAgICAgPSAwXG4gICAgLCByZWFjdGlvbjtcbiAgd2hpbGUoY2hhaW4ubGVuZ3RoID4gaSl7XG4gICAgcmVhY3Rpb24gPSBjaGFpbltpKytdO1xuICAgIGlmKHJlYWN0aW9uLmZhaWwgfHwgIWlzVW5oYW5kbGVkKHJlYWN0aW9uLnByb21pc2UpKXJldHVybiBmYWxzZTtcbiAgfSByZXR1cm4gdHJ1ZTtcbn07XG52YXIgb25IYW5kbGVVbmhhbmRsZWQgPSBmdW5jdGlvbihwcm9taXNlKXtcbiAgdGFzay5jYWxsKGdsb2JhbCwgZnVuY3Rpb24oKXtcbiAgICB2YXIgaGFuZGxlcjtcbiAgICBpZihpc05vZGUpe1xuICAgICAgcHJvY2Vzcy5lbWl0KCdyZWplY3Rpb25IYW5kbGVkJywgcHJvbWlzZSk7XG4gICAgfSBlbHNlIGlmKGhhbmRsZXIgPSBnbG9iYWwub25yZWplY3Rpb25oYW5kbGVkKXtcbiAgICAgIGhhbmRsZXIoe3Byb21pc2U6IHByb21pc2UsIHJlYXNvbjogcHJvbWlzZS5fdn0pO1xuICAgIH1cbiAgfSk7XG59O1xudmFyICRyZWplY3QgPSBmdW5jdGlvbih2YWx1ZSl7XG4gIHZhciBwcm9taXNlID0gdGhpcztcbiAgaWYocHJvbWlzZS5fZClyZXR1cm47XG4gIHByb21pc2UuX2QgPSB0cnVlO1xuICBwcm9taXNlID0gcHJvbWlzZS5fdyB8fCBwcm9taXNlOyAvLyB1bndyYXBcbiAgcHJvbWlzZS5fdiA9IHZhbHVlO1xuICBwcm9taXNlLl9zID0gMjtcbiAgaWYoIXByb21pc2UuX2EpcHJvbWlzZS5fYSA9IHByb21pc2UuX2Muc2xpY2UoKTtcbiAgbm90aWZ5KHByb21pc2UsIHRydWUpO1xufTtcbnZhciAkcmVzb2x2ZSA9IGZ1bmN0aW9uKHZhbHVlKXtcbiAgdmFyIHByb21pc2UgPSB0aGlzXG4gICAgLCB0aGVuO1xuICBpZihwcm9taXNlLl9kKXJldHVybjtcbiAgcHJvbWlzZS5fZCA9IHRydWU7XG4gIHByb21pc2UgPSBwcm9taXNlLl93IHx8IHByb21pc2U7IC8vIHVud3JhcFxuICB0cnkge1xuICAgIGlmKHByb21pc2UgPT09IHZhbHVlKXRocm93IFR5cGVFcnJvcihcIlByb21pc2UgY2FuJ3QgYmUgcmVzb2x2ZWQgaXRzZWxmXCIpO1xuICAgIGlmKHRoZW4gPSBpc1RoZW5hYmxlKHZhbHVlKSl7XG4gICAgICBtaWNyb3Rhc2soZnVuY3Rpb24oKXtcbiAgICAgICAgdmFyIHdyYXBwZXIgPSB7X3c6IHByb21pc2UsIF9kOiBmYWxzZX07IC8vIHdyYXBcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB0aGVuLmNhbGwodmFsdWUsIGN0eCgkcmVzb2x2ZSwgd3JhcHBlciwgMSksIGN0eCgkcmVqZWN0LCB3cmFwcGVyLCAxKSk7XG4gICAgICAgIH0gY2F0Y2goZSl7XG4gICAgICAgICAgJHJlamVjdC5jYWxsKHdyYXBwZXIsIGUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJvbWlzZS5fdiA9IHZhbHVlO1xuICAgICAgcHJvbWlzZS5fcyA9IDE7XG4gICAgICBub3RpZnkocHJvbWlzZSwgZmFsc2UpO1xuICAgIH1cbiAgfSBjYXRjaChlKXtcbiAgICAkcmVqZWN0LmNhbGwoe193OiBwcm9taXNlLCBfZDogZmFsc2V9LCBlKTsgLy8gd3JhcFxuICB9XG59O1xuXG4vLyBjb25zdHJ1Y3RvciBwb2x5ZmlsbFxuaWYoIVVTRV9OQVRJVkUpe1xuICAvLyAyNS40LjMuMSBQcm9taXNlKGV4ZWN1dG9yKVxuICAkUHJvbWlzZSA9IGZ1bmN0aW9uIFByb21pc2UoZXhlY3V0b3Ipe1xuICAgIGFuSW5zdGFuY2UodGhpcywgJFByb21pc2UsIFBST01JU0UsICdfaCcpO1xuICAgIGFGdW5jdGlvbihleGVjdXRvcik7XG4gICAgSW50ZXJuYWwuY2FsbCh0aGlzKTtcbiAgICB0cnkge1xuICAgICAgZXhlY3V0b3IoY3R4KCRyZXNvbHZlLCB0aGlzLCAxKSwgY3R4KCRyZWplY3QsIHRoaXMsIDEpKTtcbiAgICB9IGNhdGNoKGVycil7XG4gICAgICAkcmVqZWN0LmNhbGwodGhpcywgZXJyKTtcbiAgICB9XG4gIH07XG4gIEludGVybmFsID0gZnVuY3Rpb24gUHJvbWlzZShleGVjdXRvcil7XG4gICAgdGhpcy5fYyA9IFtdOyAgICAgICAgICAgICAvLyA8LSBhd2FpdGluZyByZWFjdGlvbnNcbiAgICB0aGlzLl9hID0gdW5kZWZpbmVkOyAgICAgIC8vIDwtIGNoZWNrZWQgaW4gaXNVbmhhbmRsZWQgcmVhY3Rpb25zXG4gICAgdGhpcy5fcyA9IDA7ICAgICAgICAgICAgICAvLyA8LSBzdGF0ZVxuICAgIHRoaXMuX2QgPSBmYWxzZTsgICAgICAgICAgLy8gPC0gZG9uZVxuICAgIHRoaXMuX3YgPSB1bmRlZmluZWQ7ICAgICAgLy8gPC0gdmFsdWVcbiAgICB0aGlzLl9oID0gMDsgICAgICAgICAgICAgIC8vIDwtIHJlamVjdGlvbiBzdGF0ZSwgMCAtIGRlZmF1bHQsIDEgLSBoYW5kbGVkLCAyIC0gdW5oYW5kbGVkXG4gICAgdGhpcy5fbiA9IGZhbHNlOyAgICAgICAgICAvLyA8LSBub3RpZnlcbiAgfTtcbiAgSW50ZXJuYWwucHJvdG90eXBlID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJykoJFByb21pc2UucHJvdG90eXBlLCB7XG4gICAgLy8gMjUuNC41LjMgUHJvbWlzZS5wcm90b3R5cGUudGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZClcbiAgICB0aGVuOiBmdW5jdGlvbiB0aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKXtcbiAgICAgIHZhciByZWFjdGlvbiAgICA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KHNwZWNpZXNDb25zdHJ1Y3Rvcih0aGlzLCAkUHJvbWlzZSkpO1xuICAgICAgcmVhY3Rpb24ub2sgICAgID0gdHlwZW9mIG9uRnVsZmlsbGVkID09ICdmdW5jdGlvbicgPyBvbkZ1bGZpbGxlZCA6IHRydWU7XG4gICAgICByZWFjdGlvbi5mYWlsICAgPSB0eXBlb2Ygb25SZWplY3RlZCA9PSAnZnVuY3Rpb24nICYmIG9uUmVqZWN0ZWQ7XG4gICAgICByZWFjdGlvbi5kb21haW4gPSBpc05vZGUgPyBwcm9jZXNzLmRvbWFpbiA6IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuX2MucHVzaChyZWFjdGlvbik7XG4gICAgICBpZih0aGlzLl9hKXRoaXMuX2EucHVzaChyZWFjdGlvbik7XG4gICAgICBpZih0aGlzLl9zKW5vdGlmeSh0aGlzLCBmYWxzZSk7XG4gICAgICByZXR1cm4gcmVhY3Rpb24ucHJvbWlzZTtcbiAgICB9LFxuICAgIC8vIDI1LjQuNS4xIFByb21pc2UucHJvdG90eXBlLmNhdGNoKG9uUmVqZWN0ZWQpXG4gICAgJ2NhdGNoJzogZnVuY3Rpb24ob25SZWplY3RlZCl7XG4gICAgICByZXR1cm4gdGhpcy50aGVuKHVuZGVmaW5lZCwgb25SZWplY3RlZCk7XG4gICAgfVxuICB9KTtcbiAgUHJvbWlzZUNhcGFiaWxpdHkgPSBmdW5jdGlvbigpe1xuICAgIHZhciBwcm9taXNlICA9IG5ldyBJbnRlcm5hbDtcbiAgICB0aGlzLnByb21pc2UgPSBwcm9taXNlO1xuICAgIHRoaXMucmVzb2x2ZSA9IGN0eCgkcmVzb2x2ZSwgcHJvbWlzZSwgMSk7XG4gICAgdGhpcy5yZWplY3QgID0gY3R4KCRyZWplY3QsIHByb21pc2UsIDEpO1xuICB9O1xufVxuXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCB7UHJvbWlzZTogJFByb21pc2V9KTtcbnJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJykoJFByb21pc2UsIFBST01JU0UpO1xucmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKShQUk9NSVNFKTtcbldyYXBwZXIgPSByZXF1aXJlKCcuL19jb3JlJylbUFJPTUlTRV07XG5cbi8vIHN0YXRpY3NcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsIFBST01JU0UsIHtcbiAgLy8gMjUuNC40LjUgUHJvbWlzZS5yZWplY3QocilcbiAgcmVqZWN0OiBmdW5jdGlvbiByZWplY3Qocil7XG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eSh0aGlzKVxuICAgICAgLCAkJHJlamVjdCAgID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgJCRyZWplY3Qocik7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfVxufSk7XG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIChMSUJSQVJZIHx8ICFVU0VfTkFUSVZFKSwgUFJPTUlTRSwge1xuICAvLyAyNS40LjQuNiBQcm9taXNlLnJlc29sdmUoeClcbiAgcmVzb2x2ZTogZnVuY3Rpb24gcmVzb2x2ZSh4KXtcbiAgICAvLyBpbnN0YW5jZW9mIGluc3RlYWQgb2YgaW50ZXJuYWwgc2xvdCBjaGVjayBiZWNhdXNlIHdlIHNob3VsZCBmaXggaXQgd2l0aG91dCByZXBsYWNlbWVudCBuYXRpdmUgUHJvbWlzZSBjb3JlXG4gICAgaWYoeCBpbnN0YW5jZW9mICRQcm9taXNlICYmIHNhbWVDb25zdHJ1Y3Rvcih4LmNvbnN0cnVjdG9yLCB0aGlzKSlyZXR1cm4geDtcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KHRoaXMpXG4gICAgICAsICQkcmVzb2x2ZSAgPSBjYXBhYmlsaXR5LnJlc29sdmU7XG4gICAgJCRyZXNvbHZlKHgpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH1cbn0pO1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhKFVTRV9OQVRJVkUgJiYgcmVxdWlyZSgnLi9faXRlci1kZXRlY3QnKShmdW5jdGlvbihpdGVyKXtcbiAgJFByb21pc2UuYWxsKGl0ZXIpWydjYXRjaCddKGVtcHR5KTtcbn0pKSwgUFJPTUlTRSwge1xuICAvLyAyNS40LjQuMSBQcm9taXNlLmFsbChpdGVyYWJsZSlcbiAgYWxsOiBmdW5jdGlvbiBhbGwoaXRlcmFibGUpe1xuICAgIHZhciBDICAgICAgICAgID0gdGhpc1xuICAgICAgLCBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoQylcbiAgICAgICwgcmVzb2x2ZSAgICA9IGNhcGFiaWxpdHkucmVzb2x2ZVxuICAgICAgLCByZWplY3QgICAgID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgdmFyIGFicnVwdCA9IHBlcmZvcm0oZnVuY3Rpb24oKXtcbiAgICAgIHZhciB2YWx1ZXMgICAgPSBbXVxuICAgICAgICAsIGluZGV4ICAgICA9IDBcbiAgICAgICAgLCByZW1haW5pbmcgPSAxO1xuICAgICAgZm9yT2YoaXRlcmFibGUsIGZhbHNlLCBmdW5jdGlvbihwcm9taXNlKXtcbiAgICAgICAgdmFyICRpbmRleCAgICAgICAgPSBpbmRleCsrXG4gICAgICAgICAgLCBhbHJlYWR5Q2FsbGVkID0gZmFsc2U7XG4gICAgICAgIHZhbHVlcy5wdXNoKHVuZGVmaW5lZCk7XG4gICAgICAgIHJlbWFpbmluZysrO1xuICAgICAgICBDLnJlc29sdmUocHJvbWlzZSkudGhlbihmdW5jdGlvbih2YWx1ZSl7XG4gICAgICAgICAgaWYoYWxyZWFkeUNhbGxlZClyZXR1cm47XG4gICAgICAgICAgYWxyZWFkeUNhbGxlZCAgPSB0cnVlO1xuICAgICAgICAgIHZhbHVlc1skaW5kZXhdID0gdmFsdWU7XG4gICAgICAgICAgLS1yZW1haW5pbmcgfHwgcmVzb2x2ZSh2YWx1ZXMpO1xuICAgICAgICB9LCByZWplY3QpO1xuICAgICAgfSk7XG4gICAgICAtLXJlbWFpbmluZyB8fCByZXNvbHZlKHZhbHVlcyk7XG4gICAgfSk7XG4gICAgaWYoYWJydXB0KXJlamVjdChhYnJ1cHQuZXJyb3IpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH0sXG4gIC8vIDI1LjQuNC40IFByb21pc2UucmFjZShpdGVyYWJsZSlcbiAgcmFjZTogZnVuY3Rpb24gcmFjZShpdGVyYWJsZSl7XG4gICAgdmFyIEMgICAgICAgICAgPSB0aGlzXG4gICAgICAsIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShDKVxuICAgICAgLCByZWplY3QgICAgID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgdmFyIGFicnVwdCA9IHBlcmZvcm0oZnVuY3Rpb24oKXtcbiAgICAgIGZvck9mKGl0ZXJhYmxlLCBmYWxzZSwgZnVuY3Rpb24ocHJvbWlzZSl7XG4gICAgICAgIEMucmVzb2x2ZShwcm9taXNlKS50aGVuKGNhcGFiaWxpdHkucmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIGlmKGFicnVwdClyZWplY3QoYWJydXB0LmVycm9yKTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG59KTsiLCIvLyAyNi4xLjEgUmVmbGVjdC5hcHBseSh0YXJnZXQsIHRoaXNBcmd1bWVudCwgYXJndW1lbnRzTGlzdClcbnZhciAkZXhwb3J0ICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKVxuICAsIGFuT2JqZWN0ICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpXG4gICwgckFwcGx5ICAgID0gKHJlcXVpcmUoJy4vX2dsb2JhbCcpLlJlZmxlY3QgfHwge30pLmFwcGx5XG4gICwgZkFwcGx5ICAgID0gRnVuY3Rpb24uYXBwbHk7XG4vLyBNUyBFZGdlIGFyZ3VtZW50c0xpc3QgYXJndW1lbnQgaXMgb3B0aW9uYWxcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24oKXtcbiAgckFwcGx5KGZ1bmN0aW9uKCl7fSk7XG59KSwgJ1JlZmxlY3QnLCB7XG4gIGFwcGx5OiBmdW5jdGlvbiBhcHBseSh0YXJnZXQsIHRoaXNBcmd1bWVudCwgYXJndW1lbnRzTGlzdCl7XG4gICAgdmFyIFQgPSBhRnVuY3Rpb24odGFyZ2V0KVxuICAgICAgLCBMID0gYW5PYmplY3QoYXJndW1lbnRzTGlzdCk7XG4gICAgcmV0dXJuIHJBcHBseSA/IHJBcHBseShULCB0aGlzQXJndW1lbnQsIEwpIDogZkFwcGx5LmNhbGwoVCwgdGhpc0FyZ3VtZW50LCBMKTtcbiAgfVxufSk7IiwiLy8gMjYuMS4yIFJlZmxlY3QuY29uc3RydWN0KHRhcmdldCwgYXJndW1lbnRzTGlzdCBbLCBuZXdUYXJnZXRdKVxudmFyICRleHBvcnQgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIGNyZWF0ZSAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJylcbiAgLCBhRnVuY3Rpb24gID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpXG4gICwgYW5PYmplY3QgICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpXG4gICwgaXNPYmplY3QgICA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpXG4gICwgZmFpbHMgICAgICA9IHJlcXVpcmUoJy4vX2ZhaWxzJylcbiAgLCBiaW5kICAgICAgID0gcmVxdWlyZSgnLi9fYmluZCcpXG4gICwgckNvbnN0cnVjdCA9IChyZXF1aXJlKCcuL19nbG9iYWwnKS5SZWZsZWN0IHx8IHt9KS5jb25zdHJ1Y3Q7XG5cbi8vIE1TIEVkZ2Ugc3VwcG9ydHMgb25seSAyIGFyZ3VtZW50cyBhbmQgYXJndW1lbnRzTGlzdCBhcmd1bWVudCBpcyBvcHRpb25hbFxuLy8gRkYgTmlnaHRseSBzZXRzIHRoaXJkIGFyZ3VtZW50IGFzIGBuZXcudGFyZ2V0YCwgYnV0IGRvZXMgbm90IGNyZWF0ZSBgdGhpc2AgZnJvbSBpdFxudmFyIE5FV19UQVJHRVRfQlVHID0gZmFpbHMoZnVuY3Rpb24oKXtcbiAgZnVuY3Rpb24gRigpe31cbiAgcmV0dXJuICEockNvbnN0cnVjdChmdW5jdGlvbigpe30sIFtdLCBGKSBpbnN0YW5jZW9mIEYpO1xufSk7XG52YXIgQVJHU19CVUcgPSAhZmFpbHMoZnVuY3Rpb24oKXtcbiAgckNvbnN0cnVjdChmdW5jdGlvbigpe30pO1xufSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKE5FV19UQVJHRVRfQlVHIHx8IEFSR1NfQlVHKSwgJ1JlZmxlY3QnLCB7XG4gIGNvbnN0cnVjdDogZnVuY3Rpb24gY29uc3RydWN0KFRhcmdldCwgYXJncyAvKiwgbmV3VGFyZ2V0Ki8pe1xuICAgIGFGdW5jdGlvbihUYXJnZXQpO1xuICAgIGFuT2JqZWN0KGFyZ3MpO1xuICAgIHZhciBuZXdUYXJnZXQgPSBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IFRhcmdldCA6IGFGdW5jdGlvbihhcmd1bWVudHNbMl0pO1xuICAgIGlmKEFSR1NfQlVHICYmICFORVdfVEFSR0VUX0JVRylyZXR1cm4gckNvbnN0cnVjdChUYXJnZXQsIGFyZ3MsIG5ld1RhcmdldCk7XG4gICAgaWYoVGFyZ2V0ID09IG5ld1RhcmdldCl7XG4gICAgICAvLyB3L28gYWx0ZXJlZCBuZXdUYXJnZXQsIG9wdGltaXphdGlvbiBmb3IgMC00IGFyZ3VtZW50c1xuICAgICAgc3dpdGNoKGFyZ3MubGVuZ3RoKXtcbiAgICAgICAgY2FzZSAwOiByZXR1cm4gbmV3IFRhcmdldDtcbiAgICAgICAgY2FzZSAxOiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdKTtcbiAgICAgICAgY2FzZSAyOiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgICAgY2FzZSAzOiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICAgICAgY2FzZSA0OiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKTtcbiAgICAgIH1cbiAgICAgIC8vIHcvbyBhbHRlcmVkIG5ld1RhcmdldCwgbG90IG9mIGFyZ3VtZW50cyBjYXNlXG4gICAgICB2YXIgJGFyZ3MgPSBbbnVsbF07XG4gICAgICAkYXJncy5wdXNoLmFwcGx5KCRhcmdzLCBhcmdzKTtcbiAgICAgIHJldHVybiBuZXcgKGJpbmQuYXBwbHkoVGFyZ2V0LCAkYXJncykpO1xuICAgIH1cbiAgICAvLyB3aXRoIGFsdGVyZWQgbmV3VGFyZ2V0LCBub3Qgc3VwcG9ydCBidWlsdC1pbiBjb25zdHJ1Y3RvcnNcbiAgICB2YXIgcHJvdG8gICAgPSBuZXdUYXJnZXQucHJvdG90eXBlXG4gICAgICAsIGluc3RhbmNlID0gY3JlYXRlKGlzT2JqZWN0KHByb3RvKSA/IHByb3RvIDogT2JqZWN0LnByb3RvdHlwZSlcbiAgICAgICwgcmVzdWx0ICAgPSBGdW5jdGlvbi5hcHBseS5jYWxsKFRhcmdldCwgaW5zdGFuY2UsIGFyZ3MpO1xuICAgIHJldHVybiBpc09iamVjdChyZXN1bHQpID8gcmVzdWx0IDogaW5zdGFuY2U7XG4gIH1cbn0pOyIsIi8vIDI2LjEuMyBSZWZsZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHlLZXksIGF0dHJpYnV0ZXMpXG52YXIgZFAgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKVxuICAsICRleHBvcnQgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCBhbk9iamVjdCAgICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpXG4gICwgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcblxuLy8gTVMgRWRnZSBoYXMgYnJva2VuIFJlZmxlY3QuZGVmaW5lUHJvcGVydHkgLSB0aHJvd2luZyBpbnN0ZWFkIG9mIHJldHVybmluZyBmYWxzZVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uKCl7XG4gIFJlZmxlY3QuZGVmaW5lUHJvcGVydHkoZFAuZih7fSwgMSwge3ZhbHVlOiAxfSksIDEsIHt2YWx1ZTogMn0pO1xufSksICdSZWZsZWN0Jywge1xuICBkZWZpbmVQcm9wZXJ0eTogZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleSwgYXR0cmlidXRlcyl7XG4gICAgYW5PYmplY3QodGFyZ2V0KTtcbiAgICBwcm9wZXJ0eUtleSA9IHRvUHJpbWl0aXZlKHByb3BlcnR5S2V5LCB0cnVlKTtcbiAgICBhbk9iamVjdChhdHRyaWJ1dGVzKTtcbiAgICB0cnkge1xuICAgICAgZFAuZih0YXJnZXQsIHByb3BlcnR5S2V5LCBhdHRyaWJ1dGVzKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2goZSl7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG59KTsiLCIvLyAyNi4xLjQgUmVmbGVjdC5kZWxldGVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5S2V5KVxudmFyICRleHBvcnQgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCBnT1BEICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZlxuICAsIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgZGVsZXRlUHJvcGVydHk6IGZ1bmN0aW9uIGRlbGV0ZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHlLZXkpe1xuICAgIHZhciBkZXNjID0gZ09QRChhbk9iamVjdCh0YXJnZXQpLCBwcm9wZXJ0eUtleSk7XG4gICAgcmV0dXJuIGRlc2MgJiYgIWRlc2MuY29uZmlndXJhYmxlID8gZmFsc2UgOiBkZWxldGUgdGFyZ2V0W3Byb3BlcnR5S2V5XTtcbiAgfVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjYuMS41IFJlZmxlY3QuZW51bWVyYXRlKHRhcmdldClcbnZhciAkZXhwb3J0ICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBFbnVtZXJhdGUgPSBmdW5jdGlvbihpdGVyYXRlZCl7XG4gIHRoaXMuX3QgPSBhbk9iamVjdChpdGVyYXRlZCk7IC8vIHRhcmdldFxuICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG4gIHZhciBrZXlzID0gdGhpcy5fayA9IFtdICAgICAgIC8vIGtleXNcbiAgICAsIGtleTtcbiAgZm9yKGtleSBpbiBpdGVyYXRlZClrZXlzLnB1c2goa2V5KTtcbn07XG5yZXF1aXJlKCcuL19pdGVyLWNyZWF0ZScpKEVudW1lcmF0ZSwgJ09iamVjdCcsIGZ1bmN0aW9uKCl7XG4gIHZhciB0aGF0ID0gdGhpc1xuICAgICwga2V5cyA9IHRoYXQuX2tcbiAgICAsIGtleTtcbiAgZG8ge1xuICAgIGlmKHRoYXQuX2kgPj0ga2V5cy5sZW5ndGgpcmV0dXJuIHt2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlfTtcbiAgfSB3aGlsZSghKChrZXkgPSBrZXlzW3RoYXQuX2krK10pIGluIHRoYXQuX3QpKTtcbiAgcmV0dXJuIHt2YWx1ZToga2V5LCBkb25lOiBmYWxzZX07XG59KTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBlbnVtZXJhdGU6IGZ1bmN0aW9uIGVudW1lcmF0ZSh0YXJnZXQpe1xuICAgIHJldHVybiBuZXcgRW51bWVyYXRlKHRhcmdldCk7XG4gIH1cbn0pOyIsIi8vIDI2LjEuNyBSZWZsZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIHByb3BlcnR5S2V5KVxudmFyIGdPUEQgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKVxuICAsICRleHBvcnQgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwgcHJvcGVydHlLZXkpe1xuICAgIHJldHVybiBnT1BELmYoYW5PYmplY3QodGFyZ2V0KSwgcHJvcGVydHlLZXkpO1xuICB9XG59KTsiLCIvLyAyNi4xLjggUmVmbGVjdC5nZXRQcm90b3R5cGVPZih0YXJnZXQpXG52YXIgJGV4cG9ydCAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIGdldFByb3RvID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpXG4gICwgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBnZXRQcm90b3R5cGVPZjogZnVuY3Rpb24gZ2V0UHJvdG90eXBlT2YodGFyZ2V0KXtcbiAgICByZXR1cm4gZ2V0UHJvdG8oYW5PYmplY3QodGFyZ2V0KSk7XG4gIH1cbn0pOyIsIi8vIDI2LjEuNiBSZWZsZWN0LmdldCh0YXJnZXQsIHByb3BlcnR5S2V5IFssIHJlY2VpdmVyXSlcbnZhciBnT1BEICAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJylcbiAgLCBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKVxuICAsIGhhcyAgICAgICAgICAgID0gcmVxdWlyZSgnLi9faGFzJylcbiAgLCAkZXhwb3J0ICAgICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgaXNPYmplY3QgICAgICAgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKVxuICAsIGFuT2JqZWN0ICAgICAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5cbmZ1bmN0aW9uIGdldCh0YXJnZXQsIHByb3BlcnR5S2V5LyosIHJlY2VpdmVyKi8pe1xuICB2YXIgcmVjZWl2ZXIgPSBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHRhcmdldCA6IGFyZ3VtZW50c1syXVxuICAgICwgZGVzYywgcHJvdG87XG4gIGlmKGFuT2JqZWN0KHRhcmdldCkgPT09IHJlY2VpdmVyKXJldHVybiB0YXJnZXRbcHJvcGVydHlLZXldO1xuICBpZihkZXNjID0gZ09QRC5mKHRhcmdldCwgcHJvcGVydHlLZXkpKXJldHVybiBoYXMoZGVzYywgJ3ZhbHVlJylcbiAgICA/IGRlc2MudmFsdWVcbiAgICA6IGRlc2MuZ2V0ICE9PSB1bmRlZmluZWRcbiAgICAgID8gZGVzYy5nZXQuY2FsbChyZWNlaXZlcilcbiAgICAgIDogdW5kZWZpbmVkO1xuICBpZihpc09iamVjdChwcm90byA9IGdldFByb3RvdHlwZU9mKHRhcmdldCkpKXJldHVybiBnZXQocHJvdG8sIHByb3BlcnR5S2V5LCByZWNlaXZlcik7XG59XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtnZXQ6IGdldH0pOyIsIi8vIDI2LjEuOSBSZWZsZWN0Lmhhcyh0YXJnZXQsIHByb3BlcnR5S2V5KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBoYXM6IGZ1bmN0aW9uIGhhcyh0YXJnZXQsIHByb3BlcnR5S2V5KXtcbiAgICByZXR1cm4gcHJvcGVydHlLZXkgaW4gdGFyZ2V0O1xuICB9XG59KTsiLCIvLyAyNi4xLjEwIFJlZmxlY3QuaXNFeHRlbnNpYmxlKHRhcmdldClcbnZhciAkZXhwb3J0ICAgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCBhbk9iamVjdCAgICAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JylcbiAgLCAkaXNFeHRlbnNpYmxlID0gT2JqZWN0LmlzRXh0ZW5zaWJsZTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBpc0V4dGVuc2libGU6IGZ1bmN0aW9uIGlzRXh0ZW5zaWJsZSh0YXJnZXQpe1xuICAgIGFuT2JqZWN0KHRhcmdldCk7XG4gICAgcmV0dXJuICRpc0V4dGVuc2libGUgPyAkaXNFeHRlbnNpYmxlKHRhcmdldCkgOiB0cnVlO1xuICB9XG59KTsiLCIvLyAyNi4xLjExIFJlZmxlY3Qub3duS2V5cyh0YXJnZXQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7b3duS2V5czogcmVxdWlyZSgnLi9fb3duLWtleXMnKX0pOyIsIi8vIDI2LjEuMTIgUmVmbGVjdC5wcmV2ZW50RXh0ZW5zaW9ucyh0YXJnZXQpXG52YXIgJGV4cG9ydCAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCBhbk9iamVjdCAgICAgICAgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKVxuICAsICRwcmV2ZW50RXh0ZW5zaW9ucyA9IE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucztcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBwcmV2ZW50RXh0ZW5zaW9uczogZnVuY3Rpb24gcHJldmVudEV4dGVuc2lvbnModGFyZ2V0KXtcbiAgICBhbk9iamVjdCh0YXJnZXQpO1xuICAgIHRyeSB7XG4gICAgICBpZigkcHJldmVudEV4dGVuc2lvbnMpJHByZXZlbnRFeHRlbnNpb25zKHRhcmdldCk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoKGUpe1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxufSk7IiwiLy8gMjYuMS4xNCBSZWZsZWN0LnNldFByb3RvdHlwZU9mKHRhcmdldCwgcHJvdG8pXG52YXIgJGV4cG9ydCAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIHNldFByb3RvID0gcmVxdWlyZSgnLi9fc2V0LXByb3RvJyk7XG5cbmlmKHNldFByb3RvKSRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgc2V0UHJvdG90eXBlT2Y6IGZ1bmN0aW9uIHNldFByb3RvdHlwZU9mKHRhcmdldCwgcHJvdG8pe1xuICAgIHNldFByb3RvLmNoZWNrKHRhcmdldCwgcHJvdG8pO1xuICAgIHRyeSB7XG4gICAgICBzZXRQcm90by5zZXQodGFyZ2V0LCBwcm90byk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoKGUpe1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxufSk7IiwiLy8gMjYuMS4xMyBSZWZsZWN0LnNldCh0YXJnZXQsIHByb3BlcnR5S2V5LCBWIFssIHJlY2VpdmVyXSlcbnZhciBkUCAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpXG4gICwgZ09QRCAgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpXG4gICwgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJylcbiAgLCBoYXMgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2hhcycpXG4gICwgJGV4cG9ydCAgICAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIGNyZWF0ZURlc2MgICAgID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpXG4gICwgYW5PYmplY3QgICAgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKVxuICAsIGlzT2JqZWN0ICAgICAgID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5cbmZ1bmN0aW9uIHNldCh0YXJnZXQsIHByb3BlcnR5S2V5LCBWLyosIHJlY2VpdmVyKi8pe1xuICB2YXIgcmVjZWl2ZXIgPSBhcmd1bWVudHMubGVuZ3RoIDwgNCA/IHRhcmdldCA6IGFyZ3VtZW50c1szXVxuICAgICwgb3duRGVzYyAgPSBnT1BELmYoYW5PYmplY3QodGFyZ2V0KSwgcHJvcGVydHlLZXkpXG4gICAgLCBleGlzdGluZ0Rlc2NyaXB0b3IsIHByb3RvO1xuICBpZighb3duRGVzYyl7XG4gICAgaWYoaXNPYmplY3QocHJvdG8gPSBnZXRQcm90b3R5cGVPZih0YXJnZXQpKSl7XG4gICAgICByZXR1cm4gc2V0KHByb3RvLCBwcm9wZXJ0eUtleSwgViwgcmVjZWl2ZXIpO1xuICAgIH1cbiAgICBvd25EZXNjID0gY3JlYXRlRGVzYygwKTtcbiAgfVxuICBpZihoYXMob3duRGVzYywgJ3ZhbHVlJykpe1xuICAgIGlmKG93bkRlc2Mud3JpdGFibGUgPT09IGZhbHNlIHx8ICFpc09iamVjdChyZWNlaXZlcikpcmV0dXJuIGZhbHNlO1xuICAgIGV4aXN0aW5nRGVzY3JpcHRvciA9IGdPUEQuZihyZWNlaXZlciwgcHJvcGVydHlLZXkpIHx8IGNyZWF0ZURlc2MoMCk7XG4gICAgZXhpc3RpbmdEZXNjcmlwdG9yLnZhbHVlID0gVjtcbiAgICBkUC5mKHJlY2VpdmVyLCBwcm9wZXJ0eUtleSwgZXhpc3RpbmdEZXNjcmlwdG9yKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gb3duRGVzYy5zZXQgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogKG93bkRlc2Muc2V0LmNhbGwocmVjZWl2ZXIsIFYpLCB0cnVlKTtcbn1cblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge3NldDogc2V0fSk7IiwidmFyIGdsb2JhbCAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fZ2xvYmFsJylcbiAgLCBpbmhlcml0SWZSZXF1aXJlZCA9IHJlcXVpcmUoJy4vX2luaGVyaXQtaWYtcmVxdWlyZWQnKVxuICAsIGRQICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZlxuICAsIGdPUE4gICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mXG4gICwgaXNSZWdFeHAgICAgICAgICAgPSByZXF1aXJlKCcuL19pcy1yZWdleHAnKVxuICAsICRmbGFncyAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fZmxhZ3MnKVxuICAsICRSZWdFeHAgICAgICAgICAgID0gZ2xvYmFsLlJlZ0V4cFxuICAsIEJhc2UgICAgICAgICAgICAgID0gJFJlZ0V4cFxuICAsIHByb3RvICAgICAgICAgICAgID0gJFJlZ0V4cC5wcm90b3R5cGVcbiAgLCByZTEgICAgICAgICAgICAgICA9IC9hL2dcbiAgLCByZTIgICAgICAgICAgICAgICA9IC9hL2dcbiAgLy8gXCJuZXdcIiBjcmVhdGVzIGEgbmV3IG9iamVjdCwgb2xkIHdlYmtpdCBidWdneSBoZXJlXG4gICwgQ09SUkVDVF9ORVcgICAgICAgPSBuZXcgJFJlZ0V4cChyZTEpICE9PSByZTE7XG5cbmlmKHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgKCFDT1JSRUNUX05FVyB8fCByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uKCl7XG4gIHJlMltyZXF1aXJlKCcuL193a3MnKSgnbWF0Y2gnKV0gPSBmYWxzZTtcbiAgLy8gUmVnRXhwIGNvbnN0cnVjdG9yIGNhbiBhbHRlciBmbGFncyBhbmQgSXNSZWdFeHAgd29ya3MgY29ycmVjdCB3aXRoIEBAbWF0Y2hcbiAgcmV0dXJuICRSZWdFeHAocmUxKSAhPSByZTEgfHwgJFJlZ0V4cChyZTIpID09IHJlMiB8fCAkUmVnRXhwKHJlMSwgJ2knKSAhPSAnL2EvaSc7XG59KSkpe1xuICAkUmVnRXhwID0gZnVuY3Rpb24gUmVnRXhwKHAsIGYpe1xuICAgIHZhciB0aVJFID0gdGhpcyBpbnN0YW5jZW9mICRSZWdFeHBcbiAgICAgICwgcGlSRSA9IGlzUmVnRXhwKHApXG4gICAgICAsIGZpVSAgPSBmID09PSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuICF0aVJFICYmIHBpUkUgJiYgcC5jb25zdHJ1Y3RvciA9PT0gJFJlZ0V4cCAmJiBmaVUgPyBwXG4gICAgICA6IGluaGVyaXRJZlJlcXVpcmVkKENPUlJFQ1RfTkVXXG4gICAgICAgID8gbmV3IEJhc2UocGlSRSAmJiAhZmlVID8gcC5zb3VyY2UgOiBwLCBmKVxuICAgICAgICA6IEJhc2UoKHBpUkUgPSBwIGluc3RhbmNlb2YgJFJlZ0V4cCkgPyBwLnNvdXJjZSA6IHAsIHBpUkUgJiYgZmlVID8gJGZsYWdzLmNhbGwocCkgOiBmKVxuICAgICAgLCB0aVJFID8gdGhpcyA6IHByb3RvLCAkUmVnRXhwKTtcbiAgfTtcbiAgdmFyIHByb3h5ID0gZnVuY3Rpb24oa2V5KXtcbiAgICBrZXkgaW4gJFJlZ0V4cCB8fCBkUCgkUmVnRXhwLCBrZXksIHtcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIGdldDogZnVuY3Rpb24oKXsgcmV0dXJuIEJhc2Vba2V5XTsgfSxcbiAgICAgIHNldDogZnVuY3Rpb24oaXQpeyBCYXNlW2tleV0gPSBpdDsgfVxuICAgIH0pO1xuICB9O1xuICBmb3IodmFyIGtleXMgPSBnT1BOKEJhc2UpLCBpID0gMDsga2V5cy5sZW5ndGggPiBpOyApcHJveHkoa2V5c1tpKytdKTtcbiAgcHJvdG8uY29uc3RydWN0b3IgPSAkUmVnRXhwO1xuICAkUmVnRXhwLnByb3RvdHlwZSA9IHByb3RvO1xuICByZXF1aXJlKCcuL19yZWRlZmluZScpKGdsb2JhbCwgJ1JlZ0V4cCcsICRSZWdFeHApO1xufVxuXG5yZXF1aXJlKCcuL19zZXQtc3BlY2llcycpKCdSZWdFeHAnKTsiLCIvLyAyMS4yLjUuMyBnZXQgUmVnRXhwLnByb3RvdHlwZS5mbGFncygpXG5pZihyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmIC8uL2cuZmxhZ3MgIT0gJ2cnKXJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmYoUmVnRXhwLnByb3RvdHlwZSwgJ2ZsYWdzJywge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGdldDogcmVxdWlyZSgnLi9fZmxhZ3MnKVxufSk7IiwiLy8gQEBtYXRjaCBsb2dpY1xucmVxdWlyZSgnLi9fZml4LXJlLXdrcycpKCdtYXRjaCcsIDEsIGZ1bmN0aW9uKGRlZmluZWQsIE1BVENILCAkbWF0Y2gpe1xuICAvLyAyMS4xLjMuMTEgU3RyaW5nLnByb3RvdHlwZS5tYXRjaChyZWdleHApXG4gIHJldHVybiBbZnVuY3Rpb24gbWF0Y2gocmVnZXhwKXtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgdmFyIE8gID0gZGVmaW5lZCh0aGlzKVxuICAgICAgLCBmbiA9IHJlZ2V4cCA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiByZWdleHBbTUFUQ0hdO1xuICAgIHJldHVybiBmbiAhPT0gdW5kZWZpbmVkID8gZm4uY2FsbChyZWdleHAsIE8pIDogbmV3IFJlZ0V4cChyZWdleHApW01BVENIXShTdHJpbmcoTykpO1xuICB9LCAkbWF0Y2hdO1xufSk7IiwiLy8gQEByZXBsYWNlIGxvZ2ljXG5yZXF1aXJlKCcuL19maXgtcmUtd2tzJykoJ3JlcGxhY2UnLCAyLCBmdW5jdGlvbihkZWZpbmVkLCBSRVBMQUNFLCAkcmVwbGFjZSl7XG4gIC8vIDIxLjEuMy4xNCBTdHJpbmcucHJvdG90eXBlLnJlcGxhY2Uoc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSlcbiAgcmV0dXJuIFtmdW5jdGlvbiByZXBsYWNlKHNlYXJjaFZhbHVlLCByZXBsYWNlVmFsdWUpe1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICB2YXIgTyAgPSBkZWZpbmVkKHRoaXMpXG4gICAgICAsIGZuID0gc2VhcmNoVmFsdWUgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogc2VhcmNoVmFsdWVbUkVQTEFDRV07XG4gICAgcmV0dXJuIGZuICE9PSB1bmRlZmluZWRcbiAgICAgID8gZm4uY2FsbChzZWFyY2hWYWx1ZSwgTywgcmVwbGFjZVZhbHVlKVxuICAgICAgOiAkcmVwbGFjZS5jYWxsKFN0cmluZyhPKSwgc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSk7XG4gIH0sICRyZXBsYWNlXTtcbn0pOyIsIi8vIEBAc2VhcmNoIGxvZ2ljXG5yZXF1aXJlKCcuL19maXgtcmUtd2tzJykoJ3NlYXJjaCcsIDEsIGZ1bmN0aW9uKGRlZmluZWQsIFNFQVJDSCwgJHNlYXJjaCl7XG4gIC8vIDIxLjEuMy4xNSBTdHJpbmcucHJvdG90eXBlLnNlYXJjaChyZWdleHApXG4gIHJldHVybiBbZnVuY3Rpb24gc2VhcmNoKHJlZ2V4cCl7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHZhciBPICA9IGRlZmluZWQodGhpcylcbiAgICAgICwgZm4gPSByZWdleHAgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogcmVnZXhwW1NFQVJDSF07XG4gICAgcmV0dXJuIGZuICE9PSB1bmRlZmluZWQgPyBmbi5jYWxsKHJlZ2V4cCwgTykgOiBuZXcgUmVnRXhwKHJlZ2V4cClbU0VBUkNIXShTdHJpbmcoTykpO1xuICB9LCAkc2VhcmNoXTtcbn0pOyIsIi8vIEBAc3BsaXQgbG9naWNcbnJlcXVpcmUoJy4vX2ZpeC1yZS13a3MnKSgnc3BsaXQnLCAyLCBmdW5jdGlvbihkZWZpbmVkLCBTUExJVCwgJHNwbGl0KXtcbiAgJ3VzZSBzdHJpY3QnO1xuICB2YXIgaXNSZWdFeHAgICA9IHJlcXVpcmUoJy4vX2lzLXJlZ2V4cCcpXG4gICAgLCBfc3BsaXQgICAgID0gJHNwbGl0XG4gICAgLCAkcHVzaCAgICAgID0gW10ucHVzaFxuICAgICwgJFNQTElUICAgICA9ICdzcGxpdCdcbiAgICAsIExFTkdUSCAgICAgPSAnbGVuZ3RoJ1xuICAgICwgTEFTVF9JTkRFWCA9ICdsYXN0SW5kZXgnO1xuICBpZihcbiAgICAnYWJiYydbJFNQTElUXSgvKGIpKi8pWzFdID09ICdjJyB8fFxuICAgICd0ZXN0J1skU1BMSVRdKC8oPzopLywgLTEpW0xFTkdUSF0gIT0gNCB8fFxuICAgICdhYidbJFNQTElUXSgvKD86YWIpKi8pW0xFTkdUSF0gIT0gMiB8fFxuICAgICcuJ1skU1BMSVRdKC8oLj8pKC4/KS8pW0xFTkdUSF0gIT0gNCB8fFxuICAgICcuJ1skU1BMSVRdKC8oKSgpLylbTEVOR1RIXSA+IDEgfHxcbiAgICAnJ1skU1BMSVRdKC8uPy8pW0xFTkdUSF1cbiAgKXtcbiAgICB2YXIgTlBDRyA9IC8oKT8/Ly5leGVjKCcnKVsxXSA9PT0gdW5kZWZpbmVkOyAvLyBub25wYXJ0aWNpcGF0aW5nIGNhcHR1cmluZyBncm91cFxuICAgIC8vIGJhc2VkIG9uIGVzNS1zaGltIGltcGxlbWVudGF0aW9uLCBuZWVkIHRvIHJld29yayBpdFxuICAgICRzcGxpdCA9IGZ1bmN0aW9uKHNlcGFyYXRvciwgbGltaXQpe1xuICAgICAgdmFyIHN0cmluZyA9IFN0cmluZyh0aGlzKTtcbiAgICAgIGlmKHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkICYmIGxpbWl0ID09PSAwKXJldHVybiBbXTtcbiAgICAgIC8vIElmIGBzZXBhcmF0b3JgIGlzIG5vdCBhIHJlZ2V4LCB1c2UgbmF0aXZlIHNwbGl0XG4gICAgICBpZighaXNSZWdFeHAoc2VwYXJhdG9yKSlyZXR1cm4gX3NwbGl0LmNhbGwoc3RyaW5nLCBzZXBhcmF0b3IsIGxpbWl0KTtcbiAgICAgIHZhciBvdXRwdXQgPSBbXTtcbiAgICAgIHZhciBmbGFncyA9IChzZXBhcmF0b3IuaWdub3JlQ2FzZSA/ICdpJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAoc2VwYXJhdG9yLm11bHRpbGluZSA/ICdtJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAoc2VwYXJhdG9yLnVuaWNvZGUgPyAndScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHNlcGFyYXRvci5zdGlja3kgPyAneScgOiAnJyk7XG4gICAgICB2YXIgbGFzdExhc3RJbmRleCA9IDA7XG4gICAgICB2YXIgc3BsaXRMaW1pdCA9IGxpbWl0ID09PSB1bmRlZmluZWQgPyA0Mjk0OTY3Mjk1IDogbGltaXQgPj4+IDA7XG4gICAgICAvLyBNYWtlIGBnbG9iYWxgIGFuZCBhdm9pZCBgbGFzdEluZGV4YCBpc3N1ZXMgYnkgd29ya2luZyB3aXRoIGEgY29weVxuICAgICAgdmFyIHNlcGFyYXRvckNvcHkgPSBuZXcgUmVnRXhwKHNlcGFyYXRvci5zb3VyY2UsIGZsYWdzICsgJ2cnKTtcbiAgICAgIHZhciBzZXBhcmF0b3IyLCBtYXRjaCwgbGFzdEluZGV4LCBsYXN0TGVuZ3RoLCBpO1xuICAgICAgLy8gRG9lc24ndCBuZWVkIGZsYWdzIGd5LCBidXQgdGhleSBkb24ndCBodXJ0XG4gICAgICBpZighTlBDRylzZXBhcmF0b3IyID0gbmV3IFJlZ0V4cCgnXicgKyBzZXBhcmF0b3JDb3B5LnNvdXJjZSArICckKD8hXFxcXHMpJywgZmxhZ3MpO1xuICAgICAgd2hpbGUobWF0Y2ggPSBzZXBhcmF0b3JDb3B5LmV4ZWMoc3RyaW5nKSl7XG4gICAgICAgIC8vIGBzZXBhcmF0b3JDb3B5Lmxhc3RJbmRleGAgaXMgbm90IHJlbGlhYmxlIGNyb3NzLWJyb3dzZXJcbiAgICAgICAgbGFzdEluZGV4ID0gbWF0Y2guaW5kZXggKyBtYXRjaFswXVtMRU5HVEhdO1xuICAgICAgICBpZihsYXN0SW5kZXggPiBsYXN0TGFzdEluZGV4KXtcbiAgICAgICAgICBvdXRwdXQucHVzaChzdHJpbmcuc2xpY2UobGFzdExhc3RJbmRleCwgbWF0Y2guaW5kZXgpKTtcbiAgICAgICAgICAvLyBGaXggYnJvd3NlcnMgd2hvc2UgYGV4ZWNgIG1ldGhvZHMgZG9uJ3QgY29uc2lzdGVudGx5IHJldHVybiBgdW5kZWZpbmVkYCBmb3IgTlBDR1xuICAgICAgICAgIGlmKCFOUENHICYmIG1hdGNoW0xFTkdUSF0gPiAxKW1hdGNoWzBdLnJlcGxhY2Uoc2VwYXJhdG9yMiwgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIGZvcihpID0gMTsgaSA8IGFyZ3VtZW50c1tMRU5HVEhdIC0gMjsgaSsrKWlmKGFyZ3VtZW50c1tpXSA9PT0gdW5kZWZpbmVkKW1hdGNoW2ldID0gdW5kZWZpbmVkO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGlmKG1hdGNoW0xFTkdUSF0gPiAxICYmIG1hdGNoLmluZGV4IDwgc3RyaW5nW0xFTkdUSF0pJHB1c2guYXBwbHkob3V0cHV0LCBtYXRjaC5zbGljZSgxKSk7XG4gICAgICAgICAgbGFzdExlbmd0aCA9IG1hdGNoWzBdW0xFTkdUSF07XG4gICAgICAgICAgbGFzdExhc3RJbmRleCA9IGxhc3RJbmRleDtcbiAgICAgICAgICBpZihvdXRwdXRbTEVOR1RIXSA+PSBzcGxpdExpbWl0KWJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmKHNlcGFyYXRvckNvcHlbTEFTVF9JTkRFWF0gPT09IG1hdGNoLmluZGV4KXNlcGFyYXRvckNvcHlbTEFTVF9JTkRFWF0rKzsgLy8gQXZvaWQgYW4gaW5maW5pdGUgbG9vcFxuICAgICAgfVxuICAgICAgaWYobGFzdExhc3RJbmRleCA9PT0gc3RyaW5nW0xFTkdUSF0pe1xuICAgICAgICBpZihsYXN0TGVuZ3RoIHx8ICFzZXBhcmF0b3JDb3B5LnRlc3QoJycpKW91dHB1dC5wdXNoKCcnKTtcbiAgICAgIH0gZWxzZSBvdXRwdXQucHVzaChzdHJpbmcuc2xpY2UobGFzdExhc3RJbmRleCkpO1xuICAgICAgcmV0dXJuIG91dHB1dFtMRU5HVEhdID4gc3BsaXRMaW1pdCA/IG91dHB1dC5zbGljZSgwLCBzcGxpdExpbWl0KSA6IG91dHB1dDtcbiAgICB9O1xuICAvLyBDaGFrcmEsIFY4XG4gIH0gZWxzZSBpZignMCdbJFNQTElUXSh1bmRlZmluZWQsIDApW0xFTkdUSF0pe1xuICAgICRzcGxpdCA9IGZ1bmN0aW9uKHNlcGFyYXRvciwgbGltaXQpe1xuICAgICAgcmV0dXJuIHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkICYmIGxpbWl0ID09PSAwID8gW10gOiBfc3BsaXQuY2FsbCh0aGlzLCBzZXBhcmF0b3IsIGxpbWl0KTtcbiAgICB9O1xuICB9XG4gIC8vIDIxLjEuMy4xNyBTdHJpbmcucHJvdG90eXBlLnNwbGl0KHNlcGFyYXRvciwgbGltaXQpXG4gIHJldHVybiBbZnVuY3Rpb24gc3BsaXQoc2VwYXJhdG9yLCBsaW1pdCl7XG4gICAgdmFyIE8gID0gZGVmaW5lZCh0aGlzKVxuICAgICAgLCBmbiA9IHNlcGFyYXRvciA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBzZXBhcmF0b3JbU1BMSVRdO1xuICAgIHJldHVybiBmbiAhPT0gdW5kZWZpbmVkID8gZm4uY2FsbChzZXBhcmF0b3IsIE8sIGxpbWl0KSA6ICRzcGxpdC5jYWxsKFN0cmluZyhPKSwgc2VwYXJhdG9yLCBsaW1pdCk7XG4gIH0sICRzcGxpdF07XG59KTsiLCIndXNlIHN0cmljdCc7XG5yZXF1aXJlKCcuL2VzNi5yZWdleHAuZmxhZ3MnKTtcbnZhciBhbk9iamVjdCAgICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpXG4gICwgJGZsYWdzICAgICAgPSByZXF1aXJlKCcuL19mbGFncycpXG4gICwgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpXG4gICwgVE9fU1RSSU5HICAgPSAndG9TdHJpbmcnXG4gICwgJHRvU3RyaW5nICAgPSAvLi9bVE9fU1RSSU5HXTtcblxudmFyIGRlZmluZSA9IGZ1bmN0aW9uKGZuKXtcbiAgcmVxdWlyZSgnLi9fcmVkZWZpbmUnKShSZWdFeHAucHJvdG90eXBlLCBUT19TVFJJTkcsIGZuLCB0cnVlKTtcbn07XG5cbi8vIDIxLjIuNS4xNCBSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nKClcbmlmKHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24oKXsgcmV0dXJuICR0b1N0cmluZy5jYWxsKHtzb3VyY2U6ICdhJywgZmxhZ3M6ICdiJ30pICE9ICcvYS9iJzsgfSkpe1xuICBkZWZpbmUoZnVuY3Rpb24gdG9TdHJpbmcoKXtcbiAgICB2YXIgUiA9IGFuT2JqZWN0KHRoaXMpO1xuICAgIHJldHVybiAnLycuY29uY2F0KFIuc291cmNlLCAnLycsXG4gICAgICAnZmxhZ3MnIGluIFIgPyBSLmZsYWdzIDogIURFU0NSSVBUT1JTICYmIFIgaW5zdGFuY2VvZiBSZWdFeHAgPyAkZmxhZ3MuY2FsbChSKSA6IHVuZGVmaW5lZCk7XG4gIH0pO1xuLy8gRkY0NC0gUmVnRXhwI3RvU3RyaW5nIGhhcyBhIHdyb25nIG5hbWVcbn0gZWxzZSBpZigkdG9TdHJpbmcubmFtZSAhPSBUT19TVFJJTkcpe1xuICBkZWZpbmUoZnVuY3Rpb24gdG9TdHJpbmcoKXtcbiAgICByZXR1cm4gJHRvU3RyaW5nLmNhbGwodGhpcyk7XG4gIH0pO1xufSIsIid1c2Ugc3RyaWN0JztcbnZhciBzdHJvbmcgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXN0cm9uZycpO1xuXG4vLyAyMy4yIFNldCBPYmplY3RzXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24nKSgnU2V0JywgZnVuY3Rpb24oZ2V0KXtcbiAgcmV0dXJuIGZ1bmN0aW9uIFNldCgpeyByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTsgfTtcbn0sIHtcbiAgLy8gMjMuMi4zLjEgU2V0LnByb3RvdHlwZS5hZGQodmFsdWUpXG4gIGFkZDogZnVuY3Rpb24gYWRkKHZhbHVlKXtcbiAgICByZXR1cm4gc3Ryb25nLmRlZih0aGlzLCB2YWx1ZSA9IHZhbHVlID09PSAwID8gMCA6IHZhbHVlLCB2YWx1ZSk7XG4gIH1cbn0sIHN0cm9uZyk7IiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMiBTdHJpbmcucHJvdG90eXBlLmFuY2hvcihuYW1lKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnYW5jaG9yJywgZnVuY3Rpb24oY3JlYXRlSFRNTCl7XG4gIHJldHVybiBmdW5jdGlvbiBhbmNob3IobmFtZSl7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2EnLCAnbmFtZScsIG5hbWUpO1xuICB9XG59KTsiLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4zIFN0cmluZy5wcm90b3R5cGUuYmlnKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2JpZycsIGZ1bmN0aW9uKGNyZWF0ZUhUTUwpe1xuICByZXR1cm4gZnVuY3Rpb24gYmlnKCl7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2JpZycsICcnLCAnJyk7XG4gIH1cbn0pOyIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjQgU3RyaW5nLnByb3RvdHlwZS5ibGluaygpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdibGluaycsIGZ1bmN0aW9uKGNyZWF0ZUhUTUwpe1xuICByZXR1cm4gZnVuY3Rpb24gYmxpbmsoKXtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYmxpbmsnLCAnJywgJycpO1xuICB9XG59KTsiLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy41IFN0cmluZy5wcm90b3R5cGUuYm9sZCgpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdib2xkJywgZnVuY3Rpb24oY3JlYXRlSFRNTCl7XG4gIHJldHVybiBmdW5jdGlvbiBib2xkKCl7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2InLCAnJywgJycpO1xuICB9XG59KTsiLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgJGF0ICAgICA9IHJlcXVpcmUoJy4vX3N0cmluZy1hdCcpKGZhbHNlKTtcbiRleHBvcnQoJGV4cG9ydC5QLCAnU3RyaW5nJywge1xuICAvLyAyMS4xLjMuMyBTdHJpbmcucHJvdG90eXBlLmNvZGVQb2ludEF0KHBvcylcbiAgY29kZVBvaW50QXQ6IGZ1bmN0aW9uIGNvZGVQb2ludEF0KHBvcyl7XG4gICAgcmV0dXJuICRhdCh0aGlzLCBwb3MpO1xuICB9XG59KTsiLCIvLyAyMS4xLjMuNiBTdHJpbmcucHJvdG90eXBlLmVuZHNXaXRoKHNlYXJjaFN0cmluZyBbLCBlbmRQb3NpdGlvbl0pXG4ndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCB0b0xlbmd0aCAgPSByZXF1aXJlKCcuL190by1sZW5ndGgnKVxuICAsIGNvbnRleHQgICA9IHJlcXVpcmUoJy4vX3N0cmluZy1jb250ZXh0JylcbiAgLCBFTkRTX1dJVEggPSAnZW5kc1dpdGgnXG4gICwgJGVuZHNXaXRoID0gJydbRU5EU19XSVRIXTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscy1pcy1yZWdleHAnKShFTkRTX1dJVEgpLCAnU3RyaW5nJywge1xuICBlbmRzV2l0aDogZnVuY3Rpb24gZW5kc1dpdGgoc2VhcmNoU3RyaW5nIC8qLCBlbmRQb3NpdGlvbiA9IEBsZW5ndGggKi8pe1xuICAgIHZhciB0aGF0ID0gY29udGV4dCh0aGlzLCBzZWFyY2hTdHJpbmcsIEVORFNfV0lUSClcbiAgICAgICwgZW5kUG9zaXRpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZFxuICAgICAgLCBsZW4gICAgPSB0b0xlbmd0aCh0aGF0Lmxlbmd0aClcbiAgICAgICwgZW5kICAgID0gZW5kUG9zaXRpb24gPT09IHVuZGVmaW5lZCA/IGxlbiA6IE1hdGgubWluKHRvTGVuZ3RoKGVuZFBvc2l0aW9uKSwgbGVuKVxuICAgICAgLCBzZWFyY2ggPSBTdHJpbmcoc2VhcmNoU3RyaW5nKTtcbiAgICByZXR1cm4gJGVuZHNXaXRoXG4gICAgICA/ICRlbmRzV2l0aC5jYWxsKHRoYXQsIHNlYXJjaCwgZW5kKVxuICAgICAgOiB0aGF0LnNsaWNlKGVuZCAtIHNlYXJjaC5sZW5ndGgsIGVuZCkgPT09IHNlYXJjaDtcbiAgfVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuNiBTdHJpbmcucHJvdG90eXBlLmZpeGVkKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2ZpeGVkJywgZnVuY3Rpb24oY3JlYXRlSFRNTCl7XG4gIHJldHVybiBmdW5jdGlvbiBmaXhlZCgpe1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICd0dCcsICcnLCAnJyk7XG4gIH1cbn0pOyIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjcgU3RyaW5nLnByb3RvdHlwZS5mb250Y29sb3IoY29sb3IpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdmb250Y29sb3InLCBmdW5jdGlvbihjcmVhdGVIVE1MKXtcbiAgcmV0dXJuIGZ1bmN0aW9uIGZvbnRjb2xvcihjb2xvcil7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2ZvbnQnLCAnY29sb3InLCBjb2xvcik7XG4gIH1cbn0pOyIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjggU3RyaW5nLnByb3RvdHlwZS5mb250c2l6ZShzaXplKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnZm9udHNpemUnLCBmdW5jdGlvbihjcmVhdGVIVE1MKXtcbiAgcmV0dXJuIGZ1bmN0aW9uIGZvbnRzaXplKHNpemUpe1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdmb250JywgJ3NpemUnLCBzaXplKTtcbiAgfVxufSk7IiwidmFyICRleHBvcnQgICAgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCB0b0luZGV4ICAgICAgICA9IHJlcXVpcmUoJy4vX3RvLWluZGV4JylcbiAgLCBmcm9tQ2hhckNvZGUgICA9IFN0cmluZy5mcm9tQ2hhckNvZGVcbiAgLCAkZnJvbUNvZGVQb2ludCA9IFN0cmluZy5mcm9tQ29kZVBvaW50O1xuXG4vLyBsZW5ndGggc2hvdWxkIGJlIDEsIG9sZCBGRiBwcm9ibGVtXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICghISRmcm9tQ29kZVBvaW50ICYmICRmcm9tQ29kZVBvaW50Lmxlbmd0aCAhPSAxKSwgJ1N0cmluZycsIHtcbiAgLy8gMjEuMS4yLjIgU3RyaW5nLmZyb21Db2RlUG9pbnQoLi4uY29kZVBvaW50cylcbiAgZnJvbUNvZGVQb2ludDogZnVuY3Rpb24gZnJvbUNvZGVQb2ludCh4KXsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgIHZhciByZXMgID0gW11cbiAgICAgICwgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgICwgaSAgICA9IDBcbiAgICAgICwgY29kZTtcbiAgICB3aGlsZShhTGVuID4gaSl7XG4gICAgICBjb2RlID0gK2FyZ3VtZW50c1tpKytdO1xuICAgICAgaWYodG9JbmRleChjb2RlLCAweDEwZmZmZikgIT09IGNvZGUpdGhyb3cgUmFuZ2VFcnJvcihjb2RlICsgJyBpcyBub3QgYSB2YWxpZCBjb2RlIHBvaW50Jyk7XG4gICAgICByZXMucHVzaChjb2RlIDwgMHgxMDAwMFxuICAgICAgICA/IGZyb21DaGFyQ29kZShjb2RlKVxuICAgICAgICA6IGZyb21DaGFyQ29kZSgoKGNvZGUgLT0gMHgxMDAwMCkgPj4gMTApICsgMHhkODAwLCBjb2RlICUgMHg0MDAgKyAweGRjMDApXG4gICAgICApO1xuICAgIH0gcmV0dXJuIHJlcy5qb2luKCcnKTtcbiAgfVxufSk7IiwiLy8gMjEuMS4zLjcgU3RyaW5nLnByb3RvdHlwZS5pbmNsdWRlcyhzZWFyY2hTdHJpbmcsIHBvc2l0aW9uID0gMClcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgY29udGV4dCAgPSByZXF1aXJlKCcuL19zdHJpbmctY29udGV4dCcpXG4gICwgSU5DTFVERVMgPSAnaW5jbHVkZXMnO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzLWlzLXJlZ2V4cCcpKElOQ0xVREVTKSwgJ1N0cmluZycsIHtcbiAgaW5jbHVkZXM6IGZ1bmN0aW9uIGluY2x1ZGVzKHNlYXJjaFN0cmluZyAvKiwgcG9zaXRpb24gPSAwICovKXtcbiAgICByZXR1cm4gISF+Y29udGV4dCh0aGlzLCBzZWFyY2hTdHJpbmcsIElOQ0xVREVTKVxuICAgICAgLmluZGV4T2Yoc2VhcmNoU3RyaW5nLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pOyIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjkgU3RyaW5nLnByb3RvdHlwZS5pdGFsaWNzKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2l0YWxpY3MnLCBmdW5jdGlvbihjcmVhdGVIVE1MKXtcbiAgcmV0dXJuIGZ1bmN0aW9uIGl0YWxpY3MoKXtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnaScsICcnLCAnJyk7XG4gIH1cbn0pOyIsIid1c2Ugc3RyaWN0JztcbnZhciAkYXQgID0gcmVxdWlyZSgnLi9fc3RyaW5nLWF0JykodHJ1ZSk7XG5cbi8vIDIxLjEuMy4yNyBTdHJpbmcucHJvdG90eXBlW0BAaXRlcmF0b3JdKClcbnJlcXVpcmUoJy4vX2l0ZXItZGVmaW5lJykoU3RyaW5nLCAnU3RyaW5nJywgZnVuY3Rpb24oaXRlcmF0ZWQpe1xuICB0aGlzLl90ID0gU3RyaW5nKGl0ZXJhdGVkKTsgLy8gdGFyZ2V0XG4gIHRoaXMuX2kgPSAwOyAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG4vLyAyMS4xLjUuMi4xICVTdHJpbmdJdGVyYXRvclByb3RvdHlwZSUubmV4dCgpXG59LCBmdW5jdGlvbigpe1xuICB2YXIgTyAgICAgPSB0aGlzLl90XG4gICAgLCBpbmRleCA9IHRoaXMuX2lcbiAgICAsIHBvaW50O1xuICBpZihpbmRleCA+PSBPLmxlbmd0aClyZXR1cm4ge3ZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWV9O1xuICBwb2ludCA9ICRhdChPLCBpbmRleCk7XG4gIHRoaXMuX2kgKz0gcG9pbnQubGVuZ3RoO1xuICByZXR1cm4ge3ZhbHVlOiBwb2ludCwgZG9uZTogZmFsc2V9O1xufSk7IiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMTAgU3RyaW5nLnByb3RvdHlwZS5saW5rKHVybClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2xpbmsnLCBmdW5jdGlvbihjcmVhdGVIVE1MKXtcbiAgcmV0dXJuIGZ1bmN0aW9uIGxpbmsodXJsKXtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYScsICdocmVmJywgdXJsKTtcbiAgfVxufSk7IiwidmFyICRleHBvcnQgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpXG4gICwgdG9MZW5ndGggID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnU3RyaW5nJywge1xuICAvLyAyMS4xLjIuNCBTdHJpbmcucmF3KGNhbGxTaXRlLCAuLi5zdWJzdGl0dXRpb25zKVxuICByYXc6IGZ1bmN0aW9uIHJhdyhjYWxsU2l0ZSl7XG4gICAgdmFyIHRwbCAgPSB0b0lPYmplY3QoY2FsbFNpdGUucmF3KVxuICAgICAgLCBsZW4gID0gdG9MZW5ndGgodHBsLmxlbmd0aClcbiAgICAgICwgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgICwgcmVzICA9IFtdXG4gICAgICAsIGkgICAgPSAwO1xuICAgIHdoaWxlKGxlbiA+IGkpe1xuICAgICAgcmVzLnB1c2goU3RyaW5nKHRwbFtpKytdKSk7XG4gICAgICBpZihpIDwgYUxlbilyZXMucHVzaChTdHJpbmcoYXJndW1lbnRzW2ldKSk7XG4gICAgfSByZXR1cm4gcmVzLmpvaW4oJycpO1xuICB9XG59KTsiLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ1N0cmluZycsIHtcbiAgLy8gMjEuMS4zLjEzIFN0cmluZy5wcm90b3R5cGUucmVwZWF0KGNvdW50KVxuICByZXBlYXQ6IHJlcXVpcmUoJy4vX3N0cmluZy1yZXBlYXQnKVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMTEgU3RyaW5nLnByb3RvdHlwZS5zbWFsbCgpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdzbWFsbCcsIGZ1bmN0aW9uKGNyZWF0ZUhUTUwpe1xuICByZXR1cm4gZnVuY3Rpb24gc21hbGwoKXtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnc21hbGwnLCAnJywgJycpO1xuICB9XG59KTsiLCIvLyAyMS4xLjMuMTggU3RyaW5nLnByb3RvdHlwZS5zdGFydHNXaXRoKHNlYXJjaFN0cmluZyBbLCBwb3NpdGlvbiBdKVxuJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCB0b0xlbmd0aCAgICA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpXG4gICwgY29udGV4dCAgICAgPSByZXF1aXJlKCcuL19zdHJpbmctY29udGV4dCcpXG4gICwgU1RBUlRTX1dJVEggPSAnc3RhcnRzV2l0aCdcbiAgLCAkc3RhcnRzV2l0aCA9ICcnW1NUQVJUU19XSVRIXTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscy1pcy1yZWdleHAnKShTVEFSVFNfV0lUSCksICdTdHJpbmcnLCB7XG4gIHN0YXJ0c1dpdGg6IGZ1bmN0aW9uIHN0YXJ0c1dpdGgoc2VhcmNoU3RyaW5nIC8qLCBwb3NpdGlvbiA9IDAgKi8pe1xuICAgIHZhciB0aGF0ICAgPSBjb250ZXh0KHRoaXMsIHNlYXJjaFN0cmluZywgU1RBUlRTX1dJVEgpXG4gICAgICAsIGluZGV4ICA9IHRvTGVuZ3RoKE1hdGgubWluKGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCB0aGF0Lmxlbmd0aCkpXG4gICAgICAsIHNlYXJjaCA9IFN0cmluZyhzZWFyY2hTdHJpbmcpO1xuICAgIHJldHVybiAkc3RhcnRzV2l0aFxuICAgICAgPyAkc3RhcnRzV2l0aC5jYWxsKHRoYXQsIHNlYXJjaCwgaW5kZXgpXG4gICAgICA6IHRoYXQuc2xpY2UoaW5kZXgsIGluZGV4ICsgc2VhcmNoLmxlbmd0aCkgPT09IHNlYXJjaDtcbiAgfVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMTIgU3RyaW5nLnByb3RvdHlwZS5zdHJpa2UoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnc3RyaWtlJywgZnVuY3Rpb24oY3JlYXRlSFRNTCl7XG4gIHJldHVybiBmdW5jdGlvbiBzdHJpa2UoKXtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnc3RyaWtlJywgJycsICcnKTtcbiAgfVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMTMgU3RyaW5nLnByb3RvdHlwZS5zdWIoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnc3ViJywgZnVuY3Rpb24oY3JlYXRlSFRNTCl7XG4gIHJldHVybiBmdW5jdGlvbiBzdWIoKXtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnc3ViJywgJycsICcnKTtcbiAgfVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMTQgU3RyaW5nLnByb3RvdHlwZS5zdXAoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnc3VwJywgZnVuY3Rpb24oY3JlYXRlSFRNTCl7XG4gIHJldHVybiBmdW5jdGlvbiBzdXAoKXtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnc3VwJywgJycsICcnKTtcbiAgfVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjEuMS4zLjI1IFN0cmluZy5wcm90b3R5cGUudHJpbSgpXG5yZXF1aXJlKCcuL19zdHJpbmctdHJpbScpKCd0cmltJywgZnVuY3Rpb24oJHRyaW0pe1xuICByZXR1cm4gZnVuY3Rpb24gdHJpbSgpe1xuICAgIHJldHVybiAkdHJpbSh0aGlzLCAzKTtcbiAgfTtcbn0pOyIsIid1c2Ugc3RyaWN0Jztcbi8vIEVDTUFTY3JpcHQgNiBzeW1ib2xzIHNoaW1cbnZhciBnbG9iYWwgICAgICAgICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpXG4gICwgaGFzICAgICAgICAgICAgPSByZXF1aXJlKCcuL19oYXMnKVxuICAsIERFU0NSSVBUT1JTICAgID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKVxuICAsICRleHBvcnQgICAgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCByZWRlZmluZSAgICAgICA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJylcbiAgLCBNRVRBICAgICAgICAgICA9IHJlcXVpcmUoJy4vX21ldGEnKS5LRVlcbiAgLCAkZmFpbHMgICAgICAgICA9IHJlcXVpcmUoJy4vX2ZhaWxzJylcbiAgLCBzaGFyZWQgICAgICAgICA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpXG4gICwgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpXG4gICwgdWlkICAgICAgICAgICAgPSByZXF1aXJlKCcuL191aWQnKVxuICAsIHdrcyAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fd2tzJylcbiAgLCB3a3NFeHQgICAgICAgICA9IHJlcXVpcmUoJy4vX3drcy1leHQnKVxuICAsIHdrc0RlZmluZSAgICAgID0gcmVxdWlyZSgnLi9fd2tzLWRlZmluZScpXG4gICwga2V5T2YgICAgICAgICAgPSByZXF1aXJlKCcuL19rZXlvZicpXG4gICwgZW51bUtleXMgICAgICAgPSByZXF1aXJlKCcuL19lbnVtLWtleXMnKVxuICAsIGlzQXJyYXkgICAgICAgID0gcmVxdWlyZSgnLi9faXMtYXJyYXknKVxuICAsIGFuT2JqZWN0ICAgICAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JylcbiAgLCB0b0lPYmplY3QgICAgICA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKVxuICAsIHRvUHJpbWl0aXZlICAgID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJylcbiAgLCBjcmVhdGVEZXNjICAgICA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKVxuICAsIF9jcmVhdGUgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpXG4gICwgZ09QTkV4dCAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbi1leHQnKVxuICAsICRHT1BEICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKVxuICAsICREUCAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJylcbiAgLCAka2V5cyAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJylcbiAgLCBnT1BEICAgICAgICAgICA9ICRHT1BELmZcbiAgLCBkUCAgICAgICAgICAgICA9ICREUC5mXG4gICwgZ09QTiAgICAgICAgICAgPSBnT1BORXh0LmZcbiAgLCAkU3ltYm9sICAgICAgICA9IGdsb2JhbC5TeW1ib2xcbiAgLCAkSlNPTiAgICAgICAgICA9IGdsb2JhbC5KU09OXG4gICwgX3N0cmluZ2lmeSAgICAgPSAkSlNPTiAmJiAkSlNPTi5zdHJpbmdpZnlcbiAgLCBQUk9UT1RZUEUgICAgICA9ICdwcm90b3R5cGUnXG4gICwgSElEREVOICAgICAgICAgPSB3a3MoJ19oaWRkZW4nKVxuICAsIFRPX1BSSU1JVElWRSAgID0gd2tzKCd0b1ByaW1pdGl2ZScpXG4gICwgaXNFbnVtICAgICAgICAgPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZVxuICAsIFN5bWJvbFJlZ2lzdHJ5ID0gc2hhcmVkKCdzeW1ib2wtcmVnaXN0cnknKVxuICAsIEFsbFN5bWJvbHMgICAgID0gc2hhcmVkKCdzeW1ib2xzJylcbiAgLCBPUFN5bWJvbHMgICAgICA9IHNoYXJlZCgnb3Atc3ltYm9scycpXG4gICwgT2JqZWN0UHJvdG8gICAgPSBPYmplY3RbUFJPVE9UWVBFXVxuICAsIFVTRV9OQVRJVkUgICAgID0gdHlwZW9mICRTeW1ib2wgPT0gJ2Z1bmN0aW9uJ1xuICAsIFFPYmplY3QgICAgICAgID0gZ2xvYmFsLlFPYmplY3Q7XG4vLyBEb24ndCB1c2Ugc2V0dGVycyBpbiBRdCBTY3JpcHQsIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8xNzNcbnZhciBzZXR0ZXIgPSAhUU9iamVjdCB8fCAhUU9iamVjdFtQUk9UT1RZUEVdIHx8ICFRT2JqZWN0W1BST1RPVFlQRV0uZmluZENoaWxkO1xuXG4vLyBmYWxsYmFjayBmb3Igb2xkIEFuZHJvaWQsIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvdjgvaXNzdWVzL2RldGFpbD9pZD02ODdcbnZhciBzZXRTeW1ib2xEZXNjID0gREVTQ1JJUFRPUlMgJiYgJGZhaWxzKGZ1bmN0aW9uKCl7XG4gIHJldHVybiBfY3JlYXRlKGRQKHt9LCAnYScsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uKCl7IHJldHVybiBkUCh0aGlzLCAnYScsIHt2YWx1ZTogN30pLmE7IH1cbiAgfSkpLmEgIT0gNztcbn0pID8gZnVuY3Rpb24oaXQsIGtleSwgRCl7XG4gIHZhciBwcm90b0Rlc2MgPSBnT1BEKE9iamVjdFByb3RvLCBrZXkpO1xuICBpZihwcm90b0Rlc2MpZGVsZXRlIE9iamVjdFByb3RvW2tleV07XG4gIGRQKGl0LCBrZXksIEQpO1xuICBpZihwcm90b0Rlc2MgJiYgaXQgIT09IE9iamVjdFByb3RvKWRQKE9iamVjdFByb3RvLCBrZXksIHByb3RvRGVzYyk7XG59IDogZFA7XG5cbnZhciB3cmFwID0gZnVuY3Rpb24odGFnKXtcbiAgdmFyIHN5bSA9IEFsbFN5bWJvbHNbdGFnXSA9IF9jcmVhdGUoJFN5bWJvbFtQUk9UT1RZUEVdKTtcbiAgc3ltLl9rID0gdGFnO1xuICByZXR1cm4gc3ltO1xufTtcblxudmFyIGlzU3ltYm9sID0gVVNFX05BVElWRSAmJiB0eXBlb2YgJFN5bWJvbC5pdGVyYXRvciA9PSAnc3ltYm9sJyA/IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJztcbn0gOiBmdW5jdGlvbihpdCl7XG4gIHJldHVybiBpdCBpbnN0YW5jZW9mICRTeW1ib2w7XG59O1xuXG52YXIgJGRlZmluZVByb3BlcnR5ID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoaXQsIGtleSwgRCl7XG4gIGlmKGl0ID09PSBPYmplY3RQcm90bykkZGVmaW5lUHJvcGVydHkoT1BTeW1ib2xzLCBrZXksIEQpO1xuICBhbk9iamVjdChpdCk7XG4gIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSk7XG4gIGFuT2JqZWN0KEQpO1xuICBpZihoYXMoQWxsU3ltYm9scywga2V5KSl7XG4gICAgaWYoIUQuZW51bWVyYWJsZSl7XG4gICAgICBpZighaGFzKGl0LCBISURERU4pKWRQKGl0LCBISURERU4sIGNyZWF0ZURlc2MoMSwge30pKTtcbiAgICAgIGl0W0hJRERFTl1ba2V5XSA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmKGhhcyhpdCwgSElEREVOKSAmJiBpdFtISURERU5dW2tleV0paXRbSElEREVOXVtrZXldID0gZmFsc2U7XG4gICAgICBEID0gX2NyZWF0ZShELCB7ZW51bWVyYWJsZTogY3JlYXRlRGVzYygwLCBmYWxzZSl9KTtcbiAgICB9IHJldHVybiBzZXRTeW1ib2xEZXNjKGl0LCBrZXksIEQpO1xuICB9IHJldHVybiBkUChpdCwga2V5LCBEKTtcbn07XG52YXIgJGRlZmluZVByb3BlcnRpZXMgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKGl0LCBQKXtcbiAgYW5PYmplY3QoaXQpO1xuICB2YXIga2V5cyA9IGVudW1LZXlzKFAgPSB0b0lPYmplY3QoUCkpXG4gICAgLCBpICAgID0gMFxuICAgICwgbCA9IGtleXMubGVuZ3RoXG4gICAgLCBrZXk7XG4gIHdoaWxlKGwgPiBpKSRkZWZpbmVQcm9wZXJ0eShpdCwga2V5ID0ga2V5c1tpKytdLCBQW2tleV0pO1xuICByZXR1cm4gaXQ7XG59O1xudmFyICRjcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoaXQsIFApe1xuICByZXR1cm4gUCA9PT0gdW5kZWZpbmVkID8gX2NyZWF0ZShpdCkgOiAkZGVmaW5lUHJvcGVydGllcyhfY3JlYXRlKGl0KSwgUCk7XG59O1xudmFyICRwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IGZ1bmN0aW9uIHByb3BlcnR5SXNFbnVtZXJhYmxlKGtleSl7XG4gIHZhciBFID0gaXNFbnVtLmNhbGwodGhpcywga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKSk7XG4gIGlmKHRoaXMgPT09IE9iamVjdFByb3RvICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICFoYXMoT1BTeW1ib2xzLCBrZXkpKXJldHVybiBmYWxzZTtcbiAgcmV0dXJuIEUgfHwgIWhhcyh0aGlzLCBrZXkpIHx8ICFoYXMoQWxsU3ltYm9scywga2V5KSB8fCBoYXModGhpcywgSElEREVOKSAmJiB0aGlzW0hJRERFTl1ba2V5XSA/IEUgOiB0cnVlO1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpe1xuICBpdCAgPSB0b0lPYmplY3QoaXQpO1xuICBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpO1xuICBpZihpdCA9PT0gT2JqZWN0UHJvdG8gJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIWhhcyhPUFN5bWJvbHMsIGtleSkpcmV0dXJuO1xuICB2YXIgRCA9IGdPUEQoaXQsIGtleSk7XG4gIGlmKEQgJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIShoYXMoaXQsIEhJRERFTikgJiYgaXRbSElEREVOXVtrZXldKSlELmVudW1lcmFibGUgPSB0cnVlO1xuICByZXR1cm4gRDtcbn07XG52YXIgJGdldE93blByb3BlcnR5TmFtZXMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKGl0KXtcbiAgdmFyIG5hbWVzICA9IGdPUE4odG9JT2JqZWN0KGl0KSlcbiAgICAsIHJlc3VsdCA9IFtdXG4gICAgLCBpICAgICAgPSAwXG4gICAgLCBrZXk7XG4gIHdoaWxlKG5hbWVzLmxlbmd0aCA+IGkpe1xuICAgIGlmKCFoYXMoQWxsU3ltYm9scywga2V5ID0gbmFtZXNbaSsrXSkgJiYga2V5ICE9IEhJRERFTiAmJiBrZXkgIT0gTUVUQSlyZXN1bHQucHVzaChrZXkpO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xudmFyICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoaXQpe1xuICB2YXIgSVNfT1AgID0gaXQgPT09IE9iamVjdFByb3RvXG4gICAgLCBuYW1lcyAgPSBnT1BOKElTX09QID8gT1BTeW1ib2xzIDogdG9JT2JqZWN0KGl0KSlcbiAgICAsIHJlc3VsdCA9IFtdXG4gICAgLCBpICAgICAgPSAwXG4gICAgLCBrZXk7XG4gIHdoaWxlKG5hbWVzLmxlbmd0aCA+IGkpe1xuICAgIGlmKGhhcyhBbGxTeW1ib2xzLCBrZXkgPSBuYW1lc1tpKytdKSAmJiAoSVNfT1AgPyBoYXMoT2JqZWN0UHJvdG8sIGtleSkgOiB0cnVlKSlyZXN1bHQucHVzaChBbGxTeW1ib2xzW2tleV0pO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xuXG4vLyAxOS40LjEuMSBTeW1ib2woW2Rlc2NyaXB0aW9uXSlcbmlmKCFVU0VfTkFUSVZFKXtcbiAgJFN5bWJvbCA9IGZ1bmN0aW9uIFN5bWJvbCgpe1xuICAgIGlmKHRoaXMgaW5zdGFuY2VvZiAkU3ltYm9sKXRocm93IFR5cGVFcnJvcignU3ltYm9sIGlzIG5vdCBhIGNvbnN0cnVjdG9yIScpO1xuICAgIHZhciB0YWcgPSB1aWQoYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpO1xuICAgIHZhciAkc2V0ID0gZnVuY3Rpb24odmFsdWUpe1xuICAgICAgaWYodGhpcyA9PT0gT2JqZWN0UHJvdG8pJHNldC5jYWxsKE9QU3ltYm9scywgdmFsdWUpO1xuICAgICAgaWYoaGFzKHRoaXMsIEhJRERFTikgJiYgaGFzKHRoaXNbSElEREVOXSwgdGFnKSl0aGlzW0hJRERFTl1bdGFnXSA9IGZhbHNlO1xuICAgICAgc2V0U3ltYm9sRGVzYyh0aGlzLCB0YWcsIGNyZWF0ZURlc2MoMSwgdmFsdWUpKTtcbiAgICB9O1xuICAgIGlmKERFU0NSSVBUT1JTICYmIHNldHRlcilzZXRTeW1ib2xEZXNjKE9iamVjdFByb3RvLCB0YWcsIHtjb25maWd1cmFibGU6IHRydWUsIHNldDogJHNldH0pO1xuICAgIHJldHVybiB3cmFwKHRhZyk7XG4gIH07XG4gIHJlZGVmaW5lKCRTeW1ib2xbUFJPVE9UWVBFXSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKXtcbiAgICByZXR1cm4gdGhpcy5faztcbiAgfSk7XG5cbiAgJEdPUEQuZiA9ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG4gICREUC5mICAgPSAkZGVmaW5lUHJvcGVydHk7XG4gIHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZiA9IGdPUE5FeHQuZiA9ICRnZXRPd25Qcm9wZXJ0eU5hbWVzO1xuICByZXF1aXJlKCcuL19vYmplY3QtcGllJykuZiAgPSAkcHJvcGVydHlJc0VudW1lcmFibGU7XG4gIHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJykuZiA9ICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG5cbiAgaWYoREVTQ1JJUFRPUlMgJiYgIXJlcXVpcmUoJy4vX2xpYnJhcnknKSl7XG4gICAgcmVkZWZpbmUoT2JqZWN0UHJvdG8sICdwcm9wZXJ0eUlzRW51bWVyYWJsZScsICRwcm9wZXJ0eUlzRW51bWVyYWJsZSwgdHJ1ZSk7XG4gIH1cblxuICB3a3NFeHQuZiA9IGZ1bmN0aW9uKG5hbWUpe1xuICAgIHJldHVybiB3cmFwKHdrcyhuYW1lKSk7XG4gIH1cbn1cblxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwge1N5bWJvbDogJFN5bWJvbH0pO1xuXG5mb3IodmFyIHN5bWJvbHMgPSAoXG4gIC8vIDE5LjQuMi4yLCAxOS40LjIuMywgMTkuNC4yLjQsIDE5LjQuMi42LCAxOS40LjIuOCwgMTkuNC4yLjksIDE5LjQuMi4xMCwgMTkuNC4yLjExLCAxOS40LjIuMTIsIDE5LjQuMi4xMywgMTkuNC4yLjE0XG4gICdoYXNJbnN0YW5jZSxpc0NvbmNhdFNwcmVhZGFibGUsaXRlcmF0b3IsbWF0Y2gscmVwbGFjZSxzZWFyY2gsc3BlY2llcyxzcGxpdCx0b1ByaW1pdGl2ZSx0b1N0cmluZ1RhZyx1bnNjb3BhYmxlcydcbikuc3BsaXQoJywnKSwgaSA9IDA7IHN5bWJvbHMubGVuZ3RoID4gaTsgKXdrcyhzeW1ib2xzW2krK10pO1xuXG5mb3IodmFyIHN5bWJvbHMgPSAka2V5cyh3a3Muc3RvcmUpLCBpID0gMDsgc3ltYm9scy5sZW5ndGggPiBpOyApd2tzRGVmaW5lKHN5bWJvbHNbaSsrXSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsICdTeW1ib2wnLCB7XG4gIC8vIDE5LjQuMi4xIFN5bWJvbC5mb3Ioa2V5KVxuICAnZm9yJzogZnVuY3Rpb24oa2V5KXtcbiAgICByZXR1cm4gaGFzKFN5bWJvbFJlZ2lzdHJ5LCBrZXkgKz0gJycpXG4gICAgICA/IFN5bWJvbFJlZ2lzdHJ5W2tleV1cbiAgICAgIDogU3ltYm9sUmVnaXN0cnlba2V5XSA9ICRTeW1ib2woa2V5KTtcbiAgfSxcbiAgLy8gMTkuNC4yLjUgU3ltYm9sLmtleUZvcihzeW0pXG4gIGtleUZvcjogZnVuY3Rpb24ga2V5Rm9yKGtleSl7XG4gICAgaWYoaXNTeW1ib2woa2V5KSlyZXR1cm4ga2V5T2YoU3ltYm9sUmVnaXN0cnksIGtleSk7XG4gICAgdGhyb3cgVHlwZUVycm9yKGtleSArICcgaXMgbm90IGEgc3ltYm9sIScpO1xuICB9LFxuICB1c2VTZXR0ZXI6IGZ1bmN0aW9uKCl7IHNldHRlciA9IHRydWU7IH0sXG4gIHVzZVNpbXBsZTogZnVuY3Rpb24oKXsgc2V0dGVyID0gZmFsc2U7IH1cbn0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCAnT2JqZWN0Jywge1xuICAvLyAxOS4xLjIuMiBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pXG4gIGNyZWF0ZTogJGNyZWF0ZSxcbiAgLy8gMTkuMS4yLjQgT2JqZWN0LmRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpXG4gIGRlZmluZVByb3BlcnR5OiAkZGVmaW5lUHJvcGVydHksXG4gIC8vIDE5LjEuMi4zIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpXG4gIGRlZmluZVByb3BlcnRpZXM6ICRkZWZpbmVQcm9wZXJ0aWVzLFxuICAvLyAxOS4xLjIuNiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApXG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogJGdldE93blByb3BlcnR5RGVzY3JpcHRvcixcbiAgLy8gMTkuMS4yLjcgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoTylcbiAgZ2V0T3duUHJvcGVydHlOYW1lczogJGdldE93blByb3BlcnR5TmFtZXMsXG4gIC8vIDE5LjEuMi44IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoTylcbiAgZ2V0T3duUHJvcGVydHlTeW1ib2xzOiAkZ2V0T3duUHJvcGVydHlTeW1ib2xzXG59KTtcblxuLy8gMjQuMy4yIEpTT04uc3RyaW5naWZ5KHZhbHVlIFssIHJlcGxhY2VyIFssIHNwYWNlXV0pXG4kSlNPTiAmJiAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICghVVNFX05BVElWRSB8fCAkZmFpbHMoZnVuY3Rpb24oKXtcbiAgdmFyIFMgPSAkU3ltYm9sKCk7XG4gIC8vIE1TIEVkZ2UgY29udmVydHMgc3ltYm9sIHZhbHVlcyB0byBKU09OIGFzIHt9XG4gIC8vIFdlYktpdCBjb252ZXJ0cyBzeW1ib2wgdmFsdWVzIHRvIEpTT04gYXMgbnVsbFxuICAvLyBWOCB0aHJvd3Mgb24gYm94ZWQgc3ltYm9sc1xuICByZXR1cm4gX3N0cmluZ2lmeShbU10pICE9ICdbbnVsbF0nIHx8IF9zdHJpbmdpZnkoe2E6IFN9KSAhPSAne30nIHx8IF9zdHJpbmdpZnkoT2JqZWN0KFMpKSAhPSAne30nO1xufSkpLCAnSlNPTicsIHtcbiAgc3RyaW5naWZ5OiBmdW5jdGlvbiBzdHJpbmdpZnkoaXQpe1xuICAgIGlmKGl0ID09PSB1bmRlZmluZWQgfHwgaXNTeW1ib2woaXQpKXJldHVybjsgLy8gSUU4IHJldHVybnMgc3RyaW5nIG9uIHVuZGVmaW5lZFxuICAgIHZhciBhcmdzID0gW2l0XVxuICAgICAgLCBpICAgID0gMVxuICAgICAgLCByZXBsYWNlciwgJHJlcGxhY2VyO1xuICAgIHdoaWxlKGFyZ3VtZW50cy5sZW5ndGggPiBpKWFyZ3MucHVzaChhcmd1bWVudHNbaSsrXSk7XG4gICAgcmVwbGFjZXIgPSBhcmdzWzFdO1xuICAgIGlmKHR5cGVvZiByZXBsYWNlciA9PSAnZnVuY3Rpb24nKSRyZXBsYWNlciA9IHJlcGxhY2VyO1xuICAgIGlmKCRyZXBsYWNlciB8fCAhaXNBcnJheShyZXBsYWNlcikpcmVwbGFjZXIgPSBmdW5jdGlvbihrZXksIHZhbHVlKXtcbiAgICAgIGlmKCRyZXBsYWNlcil2YWx1ZSA9ICRyZXBsYWNlci5jYWxsKHRoaXMsIGtleSwgdmFsdWUpO1xuICAgICAgaWYoIWlzU3ltYm9sKHZhbHVlKSlyZXR1cm4gdmFsdWU7XG4gICAgfTtcbiAgICBhcmdzWzFdID0gcmVwbGFjZXI7XG4gICAgcmV0dXJuIF9zdHJpbmdpZnkuYXBwbHkoJEpTT04sIGFyZ3MpO1xuICB9XG59KTtcblxuLy8gMTkuNC4zLjQgU3ltYm9sLnByb3RvdHlwZVtAQHRvUHJpbWl0aXZlXShoaW50KVxuJFN5bWJvbFtQUk9UT1RZUEVdW1RPX1BSSU1JVElWRV0gfHwgcmVxdWlyZSgnLi9faGlkZScpKCRTeW1ib2xbUFJPVE9UWVBFXSwgVE9fUFJJTUlUSVZFLCAkU3ltYm9sW1BST1RPVFlQRV0udmFsdWVPZik7XG4vLyAxOS40LjMuNSBTeW1ib2wucHJvdG90eXBlW0BAdG9TdHJpbmdUYWddXG5zZXRUb1N0cmluZ1RhZygkU3ltYm9sLCAnU3ltYm9sJyk7XG4vLyAyMC4yLjEuOSBNYXRoW0BAdG9TdHJpbmdUYWddXG5zZXRUb1N0cmluZ1RhZyhNYXRoLCAnTWF0aCcsIHRydWUpO1xuLy8gMjQuMy4zIEpTT05bQEB0b1N0cmluZ1RhZ11cbnNldFRvU3RyaW5nVGFnKGdsb2JhbC5KU09OLCAnSlNPTicsIHRydWUpOyIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ICAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsICR0eXBlZCAgICAgICA9IHJlcXVpcmUoJy4vX3R5cGVkJylcbiAgLCBidWZmZXIgICAgICAgPSByZXF1aXJlKCcuL190eXBlZC1idWZmZXInKVxuICAsIGFuT2JqZWN0ICAgICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpXG4gICwgdG9JbmRleCAgICAgID0gcmVxdWlyZSgnLi9fdG8taW5kZXgnKVxuICAsIHRvTGVuZ3RoICAgICA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpXG4gICwgaXNPYmplY3QgICAgID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0JylcbiAgLCBBcnJheUJ1ZmZlciAgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5BcnJheUJ1ZmZlclxuICAsIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX3NwZWNpZXMtY29uc3RydWN0b3InKVxuICAsICRBcnJheUJ1ZmZlciA9IGJ1ZmZlci5BcnJheUJ1ZmZlclxuICAsICREYXRhVmlldyAgICA9IGJ1ZmZlci5EYXRhVmlld1xuICAsICRpc1ZpZXcgICAgICA9ICR0eXBlZC5BQlYgJiYgQXJyYXlCdWZmZXIuaXNWaWV3XG4gICwgJHNsaWNlICAgICAgID0gJEFycmF5QnVmZmVyLnByb3RvdHlwZS5zbGljZVxuICAsIFZJRVcgICAgICAgICA9ICR0eXBlZC5WSUVXXG4gICwgQVJSQVlfQlVGRkVSID0gJ0FycmF5QnVmZmVyJztcblxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAoQXJyYXlCdWZmZXIgIT09ICRBcnJheUJ1ZmZlciksIHtBcnJheUJ1ZmZlcjogJEFycmF5QnVmZmVyfSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogISR0eXBlZC5DT05TVFIsIEFSUkFZX0JVRkZFUiwge1xuICAvLyAyNC4xLjMuMSBBcnJheUJ1ZmZlci5pc1ZpZXcoYXJnKVxuICBpc1ZpZXc6IGZ1bmN0aW9uIGlzVmlldyhpdCl7XG4gICAgcmV0dXJuICRpc1ZpZXcgJiYgJGlzVmlldyhpdCkgfHwgaXNPYmplY3QoaXQpICYmIFZJRVcgaW4gaXQ7XG4gIH1cbn0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuVSArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24oKXtcbiAgcmV0dXJuICFuZXcgJEFycmF5QnVmZmVyKDIpLnNsaWNlKDEsIHVuZGVmaW5lZCkuYnl0ZUxlbmd0aDtcbn0pLCBBUlJBWV9CVUZGRVIsIHtcbiAgLy8gMjQuMS40LjMgQXJyYXlCdWZmZXIucHJvdG90eXBlLnNsaWNlKHN0YXJ0LCBlbmQpXG4gIHNsaWNlOiBmdW5jdGlvbiBzbGljZShzdGFydCwgZW5kKXtcbiAgICBpZigkc2xpY2UgIT09IHVuZGVmaW5lZCAmJiBlbmQgPT09IHVuZGVmaW5lZClyZXR1cm4gJHNsaWNlLmNhbGwoYW5PYmplY3QodGhpcyksIHN0YXJ0KTsgLy8gRkYgZml4XG4gICAgdmFyIGxlbiAgICA9IGFuT2JqZWN0KHRoaXMpLmJ5dGVMZW5ndGhcbiAgICAgICwgZmlyc3QgID0gdG9JbmRleChzdGFydCwgbGVuKVxuICAgICAgLCBmaW5hbCAgPSB0b0luZGV4KGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogZW5kLCBsZW4pXG4gICAgICAsIHJlc3VsdCA9IG5ldyAoc3BlY2llc0NvbnN0cnVjdG9yKHRoaXMsICRBcnJheUJ1ZmZlcikpKHRvTGVuZ3RoKGZpbmFsIC0gZmlyc3QpKVxuICAgICAgLCB2aWV3UyAgPSBuZXcgJERhdGFWaWV3KHRoaXMpXG4gICAgICAsIHZpZXdUICA9IG5ldyAkRGF0YVZpZXcocmVzdWx0KVxuICAgICAgLCBpbmRleCAgPSAwO1xuICAgIHdoaWxlKGZpcnN0IDwgZmluYWwpe1xuICAgICAgdmlld1Quc2V0VWludDgoaW5kZXgrKywgdmlld1MuZ2V0VWludDgoZmlyc3QrKykpO1xuICAgIH0gcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG5cbnJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJykoQVJSQVlfQlVGRkVSKTsiLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fdHlwZWQnKS5BQlYsIHtcbiAgRGF0YVZpZXc6IHJlcXVpcmUoJy4vX3R5cGVkLWJ1ZmZlcicpLkRhdGFWaWV3XG59KTsiLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdGbG9hdDMyJywgNCwgZnVuY3Rpb24oaW5pdCl7XG4gIHJldHVybiBmdW5jdGlvbiBGbG9hdDMyQXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKXtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7IiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnRmxvYXQ2NCcsIDgsIGZ1bmN0aW9uKGluaXQpe1xuICByZXR1cm4gZnVuY3Rpb24gRmxvYXQ2NEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCl7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pOyIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ0ludDE2JywgMiwgZnVuY3Rpb24oaW5pdCl7XG4gIHJldHVybiBmdW5jdGlvbiBJbnQxNkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCl7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pOyIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ0ludDMyJywgNCwgZnVuY3Rpb24oaW5pdCl7XG4gIHJldHVybiBmdW5jdGlvbiBJbnQzMkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCl7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pOyIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ0ludDgnLCAxLCBmdW5jdGlvbihpbml0KXtcbiAgcmV0dXJuIGZ1bmN0aW9uIEludDhBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpe1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTsiLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdVaW50MTYnLCAyLCBmdW5jdGlvbihpbml0KXtcbiAgcmV0dXJuIGZ1bmN0aW9uIFVpbnQxNkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCl7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pOyIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ1VpbnQzMicsIDQsIGZ1bmN0aW9uKGluaXQpe1xuICByZXR1cm4gZnVuY3Rpb24gVWludDMyQXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKXtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7IiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnVWludDgnLCAxLCBmdW5jdGlvbihpbml0KXtcbiAgcmV0dXJuIGZ1bmN0aW9uIFVpbnQ4QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKXtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7IiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnVWludDgnLCAxLCBmdW5jdGlvbihpbml0KXtcbiAgcmV0dXJuIGZ1bmN0aW9uIFVpbnQ4Q2xhbXBlZEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCl7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0sIHRydWUpOyIsIid1c2Ugc3RyaWN0JztcbnZhciBlYWNoICAgICAgICAgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoMClcbiAgLCByZWRlZmluZSAgICAgPSByZXF1aXJlKCcuL19yZWRlZmluZScpXG4gICwgbWV0YSAgICAgICAgID0gcmVxdWlyZSgnLi9fbWV0YScpXG4gICwgYXNzaWduICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWFzc2lnbicpXG4gICwgd2VhayAgICAgICAgID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbi13ZWFrJylcbiAgLCBpc09iamVjdCAgICAgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKVxuICAsIGdldFdlYWsgICAgICA9IG1ldGEuZ2V0V2Vha1xuICAsIGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGVcbiAgLCB1bmNhdWdodEZyb3plblN0b3JlID0gd2Vhay51ZnN0b3JlXG4gICwgdG1wICAgICAgICAgID0ge31cbiAgLCBJbnRlcm5hbE1hcDtcblxudmFyIHdyYXBwZXIgPSBmdW5jdGlvbihnZXQpe1xuICByZXR1cm4gZnVuY3Rpb24gV2Vha01hcCgpe1xuICAgIHJldHVybiBnZXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpO1xuICB9O1xufTtcblxudmFyIG1ldGhvZHMgPSB7XG4gIC8vIDIzLjMuMy4zIFdlYWtNYXAucHJvdG90eXBlLmdldChrZXkpXG4gIGdldDogZnVuY3Rpb24gZ2V0KGtleSl7XG4gICAgaWYoaXNPYmplY3Qoa2V5KSl7XG4gICAgICB2YXIgZGF0YSA9IGdldFdlYWsoa2V5KTtcbiAgICAgIGlmKGRhdGEgPT09IHRydWUpcmV0dXJuIHVuY2F1Z2h0RnJvemVuU3RvcmUodGhpcykuZ2V0KGtleSk7XG4gICAgICByZXR1cm4gZGF0YSA/IGRhdGFbdGhpcy5faV0gOiB1bmRlZmluZWQ7XG4gICAgfVxuICB9LFxuICAvLyAyMy4zLjMuNSBXZWFrTWFwLnByb3RvdHlwZS5zZXQoa2V5LCB2YWx1ZSlcbiAgc2V0OiBmdW5jdGlvbiBzZXQoa2V5LCB2YWx1ZSl7XG4gICAgcmV0dXJuIHdlYWsuZGVmKHRoaXMsIGtleSwgdmFsdWUpO1xuICB9XG59O1xuXG4vLyAyMy4zIFdlYWtNYXAgT2JqZWN0c1xudmFyICRXZWFrTWFwID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uJykoJ1dlYWtNYXAnLCB3cmFwcGVyLCBtZXRob2RzLCB3ZWFrLCB0cnVlLCB0cnVlKTtcblxuLy8gSUUxMSBXZWFrTWFwIGZyb3plbiBrZXlzIGZpeFxuaWYobmV3ICRXZWFrTWFwKCkuc2V0KChPYmplY3QuZnJlZXplIHx8IE9iamVjdCkodG1wKSwgNykuZ2V0KHRtcCkgIT0gNyl7XG4gIEludGVybmFsTWFwID0gd2Vhay5nZXRDb25zdHJ1Y3Rvcih3cmFwcGVyKTtcbiAgYXNzaWduKEludGVybmFsTWFwLnByb3RvdHlwZSwgbWV0aG9kcyk7XG4gIG1ldGEuTkVFRCA9IHRydWU7XG4gIGVhY2goWydkZWxldGUnLCAnaGFzJywgJ2dldCcsICdzZXQnXSwgZnVuY3Rpb24oa2V5KXtcbiAgICB2YXIgcHJvdG8gID0gJFdlYWtNYXAucHJvdG90eXBlXG4gICAgICAsIG1ldGhvZCA9IHByb3RvW2tleV07XG4gICAgcmVkZWZpbmUocHJvdG8sIGtleSwgZnVuY3Rpb24oYSwgYil7XG4gICAgICAvLyBzdG9yZSBmcm96ZW4gb2JqZWN0cyBvbiBpbnRlcm5hbCB3ZWFrbWFwIHNoaW1cbiAgICAgIGlmKGlzT2JqZWN0KGEpICYmICFpc0V4dGVuc2libGUoYSkpe1xuICAgICAgICBpZighdGhpcy5fZil0aGlzLl9mID0gbmV3IEludGVybmFsTWFwO1xuICAgICAgICB2YXIgcmVzdWx0ID0gdGhpcy5fZltrZXldKGEsIGIpO1xuICAgICAgICByZXR1cm4ga2V5ID09ICdzZXQnID8gdGhpcyA6IHJlc3VsdDtcbiAgICAgIC8vIHN0b3JlIGFsbCB0aGUgcmVzdCBvbiBuYXRpdmUgd2Vha21hcFxuICAgICAgfSByZXR1cm4gbWV0aG9kLmNhbGwodGhpcywgYSwgYik7XG4gICAgfSk7XG4gIH0pO1xufSIsIid1c2Ugc3RyaWN0JztcbnZhciB3ZWFrID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbi13ZWFrJyk7XG5cbi8vIDIzLjQgV2Vha1NldCBPYmplY3RzXG5yZXF1aXJlKCcuL19jb2xsZWN0aW9uJykoJ1dlYWtTZXQnLCBmdW5jdGlvbihnZXQpe1xuICByZXR1cm4gZnVuY3Rpb24gV2Vha1NldCgpeyByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTsgfTtcbn0sIHtcbiAgLy8gMjMuNC4zLjEgV2Vha1NldC5wcm90b3R5cGUuYWRkKHZhbHVlKVxuICBhZGQ6IGZ1bmN0aW9uIGFkZCh2YWx1ZSl7XG4gICAgcmV0dXJuIHdlYWsuZGVmKHRoaXMsIHZhbHVlLCB0cnVlKTtcbiAgfVxufSwgd2VhaywgZmFsc2UsIHRydWUpOyIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L0FycmF5LnByb3RvdHlwZS5pbmNsdWRlc1xudmFyICRleHBvcnQgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgJGluY2x1ZGVzID0gcmVxdWlyZSgnLi9fYXJyYXktaW5jbHVkZXMnKSh0cnVlKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdBcnJheScsIHtcbiAgaW5jbHVkZXM6IGZ1bmN0aW9uIGluY2x1ZGVzKGVsIC8qLCBmcm9tSW5kZXggPSAwICovKXtcbiAgICByZXR1cm4gJGluY2x1ZGVzKHRoaXMsIGVsLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuXG5yZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKSgnaW5jbHVkZXMnKTsiLCIvLyBodHRwczovL2dpdGh1Yi5jb20vcndhbGRyb24vdGMzOS1ub3Rlcy9ibG9iL21hc3Rlci9lczYvMjAxNC0wOS9zZXB0LTI1Lm1kIzUxMC1nbG9iYWxhc2FwLWZvci1lbnF1ZXVpbmctYS1taWNyb3Rhc2tcbnZhciAkZXhwb3J0ICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIG1pY3JvdGFzayA9IHJlcXVpcmUoJy4vX21pY3JvdGFzaycpKClcbiAgLCBwcm9jZXNzICAgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5wcm9jZXNzXG4gICwgaXNOb2RlICAgID0gcmVxdWlyZSgnLi9fY29mJykocHJvY2VzcykgPT0gJ3Byb2Nlc3MnO1xuXG4kZXhwb3J0KCRleHBvcnQuRywge1xuICBhc2FwOiBmdW5jdGlvbiBhc2FwKGZuKXtcbiAgICB2YXIgZG9tYWluID0gaXNOb2RlICYmIHByb2Nlc3MuZG9tYWluO1xuICAgIG1pY3JvdGFzayhkb21haW4gPyBkb21haW4uYmluZChmbikgOiBmbik7XG4gIH1cbn0pOyIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9samhhcmIvcHJvcG9zYWwtaXMtZXJyb3JcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCBjb2YgICAgID0gcmVxdWlyZSgnLi9fY29mJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnRXJyb3InLCB7XG4gIGlzRXJyb3I6IGZ1bmN0aW9uIGlzRXJyb3IoaXQpe1xuICAgIHJldHVybiBjb2YoaXQpID09PSAnRXJyb3InO1xuICB9XG59KTsiLCIvLyBodHRwczovL2dpdGh1Yi5jb20vRGF2aWRCcnVhbnQvTWFwLVNldC5wcm90b3R5cGUudG9KU09OXG52YXIgJGV4cG9ydCAgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LlIsICdNYXAnLCB7dG9KU09OOiByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXRvLWpzb24nKSgnTWFwJyl9KTsiLCIvLyBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9CcmVuZGFuRWljaC80Mjk0ZDVjMjEyYTZkMjI1NDcwM1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBpYWRkaDogZnVuY3Rpb24gaWFkZGgoeDAsIHgxLCB5MCwgeTEpe1xuICAgIHZhciAkeDAgPSB4MCA+Pj4gMFxuICAgICAgLCAkeDEgPSB4MSA+Pj4gMFxuICAgICAgLCAkeTAgPSB5MCA+Pj4gMDtcbiAgICByZXR1cm4gJHgxICsgKHkxID4+PiAwKSArICgoJHgwICYgJHkwIHwgKCR4MCB8ICR5MCkgJiB+KCR4MCArICR5MCA+Pj4gMCkpID4+PiAzMSkgfCAwO1xuICB9XG59KTsiLCIvLyBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9CcmVuZGFuRWljaC80Mjk0ZDVjMjEyYTZkMjI1NDcwM1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBpbXVsaDogZnVuY3Rpb24gaW11bGgodSwgdil7XG4gICAgdmFyIFVJTlQxNiA9IDB4ZmZmZlxuICAgICAgLCAkdSA9ICt1XG4gICAgICAsICR2ID0gK3ZcbiAgICAgICwgdTAgPSAkdSAmIFVJTlQxNlxuICAgICAgLCB2MCA9ICR2ICYgVUlOVDE2XG4gICAgICAsIHUxID0gJHUgPj4gMTZcbiAgICAgICwgdjEgPSAkdiA+PiAxNlxuICAgICAgLCB0ICA9ICh1MSAqIHYwID4+PiAwKSArICh1MCAqIHYwID4+PiAxNik7XG4gICAgcmV0dXJuIHUxICogdjEgKyAodCA+PiAxNikgKyAoKHUwICogdjEgPj4+IDApICsgKHQgJiBVSU5UMTYpID4+IDE2KTtcbiAgfVxufSk7IiwiLy8gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vQnJlbmRhbkVpY2gvNDI5NGQ1YzIxMmE2ZDIyNTQ3MDNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgaXN1Ymg6IGZ1bmN0aW9uIGlzdWJoKHgwLCB4MSwgeTAsIHkxKXtcbiAgICB2YXIgJHgwID0geDAgPj4+IDBcbiAgICAgICwgJHgxID0geDEgPj4+IDBcbiAgICAgICwgJHkwID0geTAgPj4+IDA7XG4gICAgcmV0dXJuICR4MSAtICh5MSA+Pj4gMCkgLSAoKH4keDAgJiAkeTAgfCB+KCR4MCBeICR5MCkgJiAkeDAgLSAkeTAgPj4+IDApID4+PiAzMSkgfCAwO1xuICB9XG59KTsiLCIvLyBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9CcmVuZGFuRWljaC80Mjk0ZDVjMjEyYTZkMjI1NDcwM1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICB1bXVsaDogZnVuY3Rpb24gdW11bGgodSwgdil7XG4gICAgdmFyIFVJTlQxNiA9IDB4ZmZmZlxuICAgICAgLCAkdSA9ICt1XG4gICAgICAsICR2ID0gK3ZcbiAgICAgICwgdTAgPSAkdSAmIFVJTlQxNlxuICAgICAgLCB2MCA9ICR2ICYgVUlOVDE2XG4gICAgICAsIHUxID0gJHUgPj4+IDE2XG4gICAgICAsIHYxID0gJHYgPj4+IDE2XG4gICAgICAsIHQgID0gKHUxICogdjAgPj4+IDApICsgKHUwICogdjAgPj4+IDE2KTtcbiAgICByZXR1cm4gdTEgKiB2MSArICh0ID4+PiAxNikgKyAoKHUwICogdjEgPj4+IDApICsgKHQgJiBVSU5UMTYpID4+PiAxNik7XG4gIH1cbn0pOyIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ICAgICAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIHRvT2JqZWN0ICAgICAgICA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpXG4gICwgYUZ1bmN0aW9uICAgICAgID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpXG4gICwgJGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG5cbi8vIEIuMi4yLjIgT2JqZWN0LnByb3RvdHlwZS5fX2RlZmluZUdldHRlcl9fKFAsIGdldHRlcilcbnJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgJGV4cG9ydCgkZXhwb3J0LlAgKyByZXF1aXJlKCcuL19vYmplY3QtZm9yY2VkLXBhbScpLCAnT2JqZWN0Jywge1xuICBfX2RlZmluZUdldHRlcl9fOiBmdW5jdGlvbiBfX2RlZmluZUdldHRlcl9fKFAsIGdldHRlcil7XG4gICAgJGRlZmluZVByb3BlcnR5LmYodG9PYmplY3QodGhpcyksIFAsIHtnZXQ6IGFGdW5jdGlvbihnZXR0ZXIpLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWV9KTtcbiAgfVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgICAgICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgdG9PYmplY3QgICAgICAgID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0JylcbiAgLCBhRnVuY3Rpb24gICAgICAgPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJylcbiAgLCAkZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcblxuLy8gQi4yLjIuMyBPYmplY3QucHJvdG90eXBlLl9fZGVmaW5lU2V0dGVyX18oUCwgc2V0dGVyKVxucmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAkZXhwb3J0KCRleHBvcnQuUCArIHJlcXVpcmUoJy4vX29iamVjdC1mb3JjZWQtcGFtJyksICdPYmplY3QnLCB7XG4gIF9fZGVmaW5lU2V0dGVyX186IGZ1bmN0aW9uIF9fZGVmaW5lU2V0dGVyX18oUCwgc2V0dGVyKXtcbiAgICAkZGVmaW5lUHJvcGVydHkuZih0b09iamVjdCh0aGlzKSwgUCwge3NldDogYUZ1bmN0aW9uKHNldHRlciksIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZX0pO1xuICB9XG59KTsiLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vYmplY3QtdmFsdWVzLWVudHJpZXNcbnZhciAkZXhwb3J0ICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgJGVudHJpZXMgPSByZXF1aXJlKCcuL19vYmplY3QtdG8tYXJyYXknKSh0cnVlKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7XG4gIGVudHJpZXM6IGZ1bmN0aW9uIGVudHJpZXMoaXQpe1xuICAgIHJldHVybiAkZW50cmllcyhpdCk7XG4gIH1cbn0pOyIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLW9iamVjdC1nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3JzXG52YXIgJGV4cG9ydCAgICAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIG93bktleXMgICAgICAgID0gcmVxdWlyZSgnLi9fb3duLWtleXMnKVxuICAsIHRvSU9iamVjdCAgICAgID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpXG4gICwgZ09QRCAgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpXG4gICwgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuL19jcmVhdGUtcHJvcGVydHknKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7XG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcnM6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcnMob2JqZWN0KXtcbiAgICB2YXIgTyAgICAgICA9IHRvSU9iamVjdChvYmplY3QpXG4gICAgICAsIGdldERlc2MgPSBnT1BELmZcbiAgICAgICwga2V5cyAgICA9IG93bktleXMoTylcbiAgICAgICwgcmVzdWx0ICA9IHt9XG4gICAgICAsIGkgICAgICAgPSAwXG4gICAgICAsIGtleTtcbiAgICB3aGlsZShrZXlzLmxlbmd0aCA+IGkpY3JlYXRlUHJvcGVydHkocmVzdWx0LCBrZXkgPSBrZXlzW2krK10sIGdldERlc2MoTywga2V5KSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgICAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgdG9PYmplY3QgICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0JylcbiAgLCB0b1ByaW1pdGl2ZSAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKVxuICAsIGdldFByb3RvdHlwZU9mICAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKVxuICAsIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZjtcblxuLy8gQi4yLjIuNCBPYmplY3QucHJvdG90eXBlLl9fbG9va3VwR2V0dGVyX18oUClcbnJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgJGV4cG9ydCgkZXhwb3J0LlAgKyByZXF1aXJlKCcuL19vYmplY3QtZm9yY2VkLXBhbScpLCAnT2JqZWN0Jywge1xuICBfX2xvb2t1cEdldHRlcl9fOiBmdW5jdGlvbiBfX2xvb2t1cEdldHRlcl9fKFApe1xuICAgIHZhciBPID0gdG9PYmplY3QodGhpcylcbiAgICAgICwgSyA9IHRvUHJpbWl0aXZlKFAsIHRydWUpXG4gICAgICAsIEQ7XG4gICAgZG8ge1xuICAgICAgaWYoRCA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBLKSlyZXR1cm4gRC5nZXQ7XG4gICAgfSB3aGlsZShPID0gZ2V0UHJvdG90eXBlT2YoTykpO1xuICB9XG59KTsiLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCAgICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCB0b09iamVjdCAgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL190by1vYmplY3QnKVxuICAsIHRvUHJpbWl0aXZlICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpXG4gICwgZ2V0UHJvdG90eXBlT2YgICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpXG4gICwgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mO1xuXG4vLyBCLjIuMi41IE9iamVjdC5wcm90b3R5cGUuX19sb29rdXBTZXR0ZXJfXyhQKVxucmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAkZXhwb3J0KCRleHBvcnQuUCArIHJlcXVpcmUoJy4vX29iamVjdC1mb3JjZWQtcGFtJyksICdPYmplY3QnLCB7XG4gIF9fbG9va3VwU2V0dGVyX186IGZ1bmN0aW9uIF9fbG9va3VwU2V0dGVyX18oUCl7XG4gICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKVxuICAgICAgLCBLID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSlcbiAgICAgICwgRDtcbiAgICBkbyB7XG4gICAgICBpZihEID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIEspKXJldHVybiBELnNldDtcbiAgICB9IHdoaWxlKE8gPSBnZXRQcm90b3R5cGVPZihPKSk7XG4gIH1cbn0pOyIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLW9iamVjdC12YWx1ZXMtZW50cmllc1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsICR2YWx1ZXMgPSByZXF1aXJlKCcuL19vYmplY3QtdG8tYXJyYXknKShmYWxzZSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0Jywge1xuICB2YWx1ZXM6IGZ1bmN0aW9uIHZhbHVlcyhpdCl7XG4gICAgcmV0dXJuICR2YWx1ZXMoaXQpO1xuICB9XG59KTsiLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vemVucGFyc2luZy9lcy1vYnNlcnZhYmxlXG52YXIgJGV4cG9ydCAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIGdsb2JhbCAgICAgID0gcmVxdWlyZSgnLi9fZ2xvYmFsJylcbiAgLCBjb3JlICAgICAgICA9IHJlcXVpcmUoJy4vX2NvcmUnKVxuICAsIG1pY3JvdGFzayAgID0gcmVxdWlyZSgnLi9fbWljcm90YXNrJykoKVxuICAsIE9CU0VSVkFCTEUgID0gcmVxdWlyZSgnLi9fd2tzJykoJ29ic2VydmFibGUnKVxuICAsIGFGdW5jdGlvbiAgID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpXG4gICwgYW5PYmplY3QgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKVxuICAsIGFuSW5zdGFuY2UgID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKVxuICAsIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJylcbiAgLCBoaWRlICAgICAgICA9IHJlcXVpcmUoJy4vX2hpZGUnKVxuICAsIGZvck9mICAgICAgID0gcmVxdWlyZSgnLi9fZm9yLW9mJylcbiAgLCBSRVRVUk4gICAgICA9IGZvck9mLlJFVFVSTjtcblxudmFyIGdldE1ldGhvZCA9IGZ1bmN0aW9uKGZuKXtcbiAgcmV0dXJuIGZuID09IG51bGwgPyB1bmRlZmluZWQgOiBhRnVuY3Rpb24oZm4pO1xufTtcblxudmFyIGNsZWFudXBTdWJzY3JpcHRpb24gPSBmdW5jdGlvbihzdWJzY3JpcHRpb24pe1xuICB2YXIgY2xlYW51cCA9IHN1YnNjcmlwdGlvbi5fYztcbiAgaWYoY2xlYW51cCl7XG4gICAgc3Vic2NyaXB0aW9uLl9jID0gdW5kZWZpbmVkO1xuICAgIGNsZWFudXAoKTtcbiAgfVxufTtcblxudmFyIHN1YnNjcmlwdGlvbkNsb3NlZCA9IGZ1bmN0aW9uKHN1YnNjcmlwdGlvbil7XG4gIHJldHVybiBzdWJzY3JpcHRpb24uX28gPT09IHVuZGVmaW5lZDtcbn07XG5cbnZhciBjbG9zZVN1YnNjcmlwdGlvbiA9IGZ1bmN0aW9uKHN1YnNjcmlwdGlvbil7XG4gIGlmKCFzdWJzY3JpcHRpb25DbG9zZWQoc3Vic2NyaXB0aW9uKSl7XG4gICAgc3Vic2NyaXB0aW9uLl9vID0gdW5kZWZpbmVkO1xuICAgIGNsZWFudXBTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKTtcbiAgfVxufTtcblxudmFyIFN1YnNjcmlwdGlvbiA9IGZ1bmN0aW9uKG9ic2VydmVyLCBzdWJzY3JpYmVyKXtcbiAgYW5PYmplY3Qob2JzZXJ2ZXIpO1xuICB0aGlzLl9jID0gdW5kZWZpbmVkO1xuICB0aGlzLl9vID0gb2JzZXJ2ZXI7XG4gIG9ic2VydmVyID0gbmV3IFN1YnNjcmlwdGlvbk9ic2VydmVyKHRoaXMpO1xuICB0cnkge1xuICAgIHZhciBjbGVhbnVwICAgICAgPSBzdWJzY3JpYmVyKG9ic2VydmVyKVxuICAgICAgLCBzdWJzY3JpcHRpb24gPSBjbGVhbnVwO1xuICAgIGlmKGNsZWFudXAgIT0gbnVsbCl7XG4gICAgICBpZih0eXBlb2YgY2xlYW51cC51bnN1YnNjcmliZSA9PT0gJ2Z1bmN0aW9uJyljbGVhbnVwID0gZnVuY3Rpb24oKXsgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7IH07XG4gICAgICBlbHNlIGFGdW5jdGlvbihjbGVhbnVwKTtcbiAgICAgIHRoaXMuX2MgPSBjbGVhbnVwO1xuICAgIH1cbiAgfSBjYXRjaChlKXtcbiAgICBvYnNlcnZlci5lcnJvcihlKTtcbiAgICByZXR1cm47XG4gIH0gaWYoc3Vic2NyaXB0aW9uQ2xvc2VkKHRoaXMpKWNsZWFudXBTdWJzY3JpcHRpb24odGhpcyk7XG59O1xuXG5TdWJzY3JpcHRpb24ucHJvdG90eXBlID0gcmVkZWZpbmVBbGwoe30sIHtcbiAgdW5zdWJzY3JpYmU6IGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCl7IGNsb3NlU3Vic2NyaXB0aW9uKHRoaXMpOyB9XG59KTtcblxudmFyIFN1YnNjcmlwdGlvbk9ic2VydmVyID0gZnVuY3Rpb24oc3Vic2NyaXB0aW9uKXtcbiAgdGhpcy5fcyA9IHN1YnNjcmlwdGlvbjtcbn07XG5cblN1YnNjcmlwdGlvbk9ic2VydmVyLnByb3RvdHlwZSA9IHJlZGVmaW5lQWxsKHt9LCB7XG4gIG5leHQ6IGZ1bmN0aW9uIG5leHQodmFsdWUpe1xuICAgIHZhciBzdWJzY3JpcHRpb24gPSB0aGlzLl9zO1xuICAgIGlmKCFzdWJzY3JpcHRpb25DbG9zZWQoc3Vic2NyaXB0aW9uKSl7XG4gICAgICB2YXIgb2JzZXJ2ZXIgPSBzdWJzY3JpcHRpb24uX287XG4gICAgICB0cnkge1xuICAgICAgICB2YXIgbSA9IGdldE1ldGhvZChvYnNlcnZlci5uZXh0KTtcbiAgICAgICAgaWYobSlyZXR1cm4gbS5jYWxsKG9ic2VydmVyLCB2YWx1ZSk7XG4gICAgICB9IGNhdGNoKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNsb3NlU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgZXJyb3I6IGZ1bmN0aW9uIGVycm9yKHZhbHVlKXtcbiAgICB2YXIgc3Vic2NyaXB0aW9uID0gdGhpcy5fcztcbiAgICBpZihzdWJzY3JpcHRpb25DbG9zZWQoc3Vic2NyaXB0aW9uKSl0aHJvdyB2YWx1ZTtcbiAgICB2YXIgb2JzZXJ2ZXIgPSBzdWJzY3JpcHRpb24uX287XG4gICAgc3Vic2NyaXB0aW9uLl9vID0gdW5kZWZpbmVkO1xuICAgIHRyeSB7XG4gICAgICB2YXIgbSA9IGdldE1ldGhvZChvYnNlcnZlci5lcnJvcik7XG4gICAgICBpZighbSl0aHJvdyB2YWx1ZTtcbiAgICAgIHZhbHVlID0gbS5jYWxsKG9ic2VydmVyLCB2YWx1ZSk7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNsZWFudXBTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIHRocm93IGU7XG4gICAgICB9XG4gICAgfSBjbGVhbnVwU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9LFxuICBjb21wbGV0ZTogZnVuY3Rpb24gY29tcGxldGUodmFsdWUpe1xuICAgIHZhciBzdWJzY3JpcHRpb24gPSB0aGlzLl9zO1xuICAgIGlmKCFzdWJzY3JpcHRpb25DbG9zZWQoc3Vic2NyaXB0aW9uKSl7XG4gICAgICB2YXIgb2JzZXJ2ZXIgPSBzdWJzY3JpcHRpb24uX287XG4gICAgICBzdWJzY3JpcHRpb24uX28gPSB1bmRlZmluZWQ7XG4gICAgICB0cnkge1xuICAgICAgICB2YXIgbSA9IGdldE1ldGhvZChvYnNlcnZlci5jb21wbGV0ZSk7XG4gICAgICAgIHZhbHVlID0gbSA/IG0uY2FsbChvYnNlcnZlciwgdmFsdWUpIDogdW5kZWZpbmVkO1xuICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjbGVhbnVwU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgfSBjbGVhbnVwU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICB9XG59KTtcblxudmFyICRPYnNlcnZhYmxlID0gZnVuY3Rpb24gT2JzZXJ2YWJsZShzdWJzY3JpYmVyKXtcbiAgYW5JbnN0YW5jZSh0aGlzLCAkT2JzZXJ2YWJsZSwgJ09ic2VydmFibGUnLCAnX2YnKS5fZiA9IGFGdW5jdGlvbihzdWJzY3JpYmVyKTtcbn07XG5cbnJlZGVmaW5lQWxsKCRPYnNlcnZhYmxlLnByb3RvdHlwZSwge1xuICBzdWJzY3JpYmU6IGZ1bmN0aW9uIHN1YnNjcmliZShvYnNlcnZlcil7XG4gICAgcmV0dXJuIG5ldyBTdWJzY3JpcHRpb24ob2JzZXJ2ZXIsIHRoaXMuX2YpO1xuICB9LFxuICBmb3JFYWNoOiBmdW5jdGlvbiBmb3JFYWNoKGZuKXtcbiAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgcmV0dXJuIG5ldyAoY29yZS5Qcm9taXNlIHx8IGdsb2JhbC5Qcm9taXNlKShmdW5jdGlvbihyZXNvbHZlLCByZWplY3Qpe1xuICAgICAgYUZ1bmN0aW9uKGZuKTtcbiAgICAgIHZhciBzdWJzY3JpcHRpb24gPSB0aGF0LnN1YnNjcmliZSh7XG4gICAgICAgIG5leHQgOiBmdW5jdGlvbih2YWx1ZSl7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBmbih2YWx1ZSk7XG4gICAgICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgICAgIHJlamVjdChlKTtcbiAgICAgICAgICAgIHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZXJyb3I6IHJlamVjdCxcbiAgICAgICAgY29tcGxldGU6IHJlc29sdmVcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG59KTtcblxucmVkZWZpbmVBbGwoJE9ic2VydmFibGUsIHtcbiAgZnJvbTogZnVuY3Rpb24gZnJvbSh4KXtcbiAgICB2YXIgQyA9IHR5cGVvZiB0aGlzID09PSAnZnVuY3Rpb24nID8gdGhpcyA6ICRPYnNlcnZhYmxlO1xuICAgIHZhciBtZXRob2QgPSBnZXRNZXRob2QoYW5PYmplY3QoeClbT0JTRVJWQUJMRV0pO1xuICAgIGlmKG1ldGhvZCl7XG4gICAgICB2YXIgb2JzZXJ2YWJsZSA9IGFuT2JqZWN0KG1ldGhvZC5jYWxsKHgpKTtcbiAgICAgIHJldHVybiBvYnNlcnZhYmxlLmNvbnN0cnVjdG9yID09PSBDID8gb2JzZXJ2YWJsZSA6IG5ldyBDKGZ1bmN0aW9uKG9ic2VydmVyKXtcbiAgICAgICAgcmV0dXJuIG9ic2VydmFibGUuc3Vic2NyaWJlKG9ic2VydmVyKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IEMoZnVuY3Rpb24ob2JzZXJ2ZXIpe1xuICAgICAgdmFyIGRvbmUgPSBmYWxzZTtcbiAgICAgIG1pY3JvdGFzayhmdW5jdGlvbigpe1xuICAgICAgICBpZighZG9uZSl7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmKGZvck9mKHgsIGZhbHNlLCBmdW5jdGlvbihpdCl7XG4gICAgICAgICAgICAgIG9ic2VydmVyLm5leHQoaXQpO1xuICAgICAgICAgICAgICBpZihkb25lKXJldHVybiBSRVRVUk47XG4gICAgICAgICAgICB9KSA9PT0gUkVUVVJOKXJldHVybjtcbiAgICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICAgaWYoZG9uZSl0aHJvdyBlO1xuICAgICAgICAgICAgb2JzZXJ2ZXIuZXJyb3IoZSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfSBvYnNlcnZlci5jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpeyBkb25lID0gdHJ1ZTsgfTtcbiAgICB9KTtcbiAgfSxcbiAgb2Y6IGZ1bmN0aW9uIG9mKCl7XG4gICAgZm9yKHZhciBpID0gMCwgbCA9IGFyZ3VtZW50cy5sZW5ndGgsIGl0ZW1zID0gQXJyYXkobCk7IGkgPCBsOylpdGVtc1tpXSA9IGFyZ3VtZW50c1tpKytdO1xuICAgIHJldHVybiBuZXcgKHR5cGVvZiB0aGlzID09PSAnZnVuY3Rpb24nID8gdGhpcyA6ICRPYnNlcnZhYmxlKShmdW5jdGlvbihvYnNlcnZlcil7XG4gICAgICB2YXIgZG9uZSA9IGZhbHNlO1xuICAgICAgbWljcm90YXNrKGZ1bmN0aW9uKCl7XG4gICAgICAgIGlmKCFkb25lKXtcbiAgICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgaXRlbXMubGVuZ3RoOyArK2kpe1xuICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dChpdGVtc1tpXSk7XG4gICAgICAgICAgICBpZihkb25lKXJldHVybjtcbiAgICAgICAgICB9IG9ic2VydmVyLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCl7IGRvbmUgPSB0cnVlOyB9O1xuICAgIH0pO1xuICB9XG59KTtcblxuaGlkZSgkT2JzZXJ2YWJsZS5wcm90b3R5cGUsIE9CU0VSVkFCTEUsIGZ1bmN0aW9uKCl7IHJldHVybiB0aGlzOyB9KTtcblxuJGV4cG9ydCgkZXhwb3J0LkcsIHtPYnNlcnZhYmxlOiAkT2JzZXJ2YWJsZX0pO1xuXG5yZXF1aXJlKCcuL19zZXQtc3BlY2llcycpKCdPYnNlcnZhYmxlJyk7IiwidmFyIG1ldGFkYXRhICAgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpXG4gICwgYW5PYmplY3QgICAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpXG4gICwgdG9NZXRhS2V5ICAgICAgICAgICAgICAgICA9IG1ldGFkYXRhLmtleVxuICAsIG9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEgPSBtZXRhZGF0YS5zZXQ7XG5cbm1ldGFkYXRhLmV4cCh7ZGVmaW5lTWV0YWRhdGE6IGZ1bmN0aW9uIGRlZmluZU1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlLCB0YXJnZXQsIHRhcmdldEtleSl7XG4gIG9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUsIGFuT2JqZWN0KHRhcmdldCksIHRvTWV0YUtleSh0YXJnZXRLZXkpKTtcbn19KTsiLCJ2YXIgbWV0YWRhdGEgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJylcbiAgLCBhbk9iamVjdCAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JylcbiAgLCB0b01ldGFLZXkgICAgICAgICAgICAgID0gbWV0YWRhdGEua2V5XG4gICwgZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcCA9IG1ldGFkYXRhLm1hcFxuICAsIHN0b3JlICAgICAgICAgICAgICAgICAgPSBtZXRhZGF0YS5zdG9yZTtcblxubWV0YWRhdGEuZXhwKHtkZWxldGVNZXRhZGF0YTogZnVuY3Rpb24gZGVsZXRlTWV0YWRhdGEobWV0YWRhdGFLZXksIHRhcmdldCAvKiwgdGFyZ2V0S2V5ICovKXtcbiAgdmFyIHRhcmdldEtleSAgID0gYXJndW1lbnRzLmxlbmd0aCA8IDMgPyB1bmRlZmluZWQgOiB0b01ldGFLZXkoYXJndW1lbnRzWzJdKVxuICAgICwgbWV0YWRhdGFNYXAgPSBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwKGFuT2JqZWN0KHRhcmdldCksIHRhcmdldEtleSwgZmFsc2UpO1xuICBpZihtZXRhZGF0YU1hcCA9PT0gdW5kZWZpbmVkIHx8ICFtZXRhZGF0YU1hcFsnZGVsZXRlJ10obWV0YWRhdGFLZXkpKXJldHVybiBmYWxzZTtcbiAgaWYobWV0YWRhdGFNYXAuc2l6ZSlyZXR1cm4gdHJ1ZTtcbiAgdmFyIHRhcmdldE1ldGFkYXRhID0gc3RvcmUuZ2V0KHRhcmdldCk7XG4gIHRhcmdldE1ldGFkYXRhWydkZWxldGUnXSh0YXJnZXRLZXkpO1xuICByZXR1cm4gISF0YXJnZXRNZXRhZGF0YS5zaXplIHx8IHN0b3JlWydkZWxldGUnXSh0YXJnZXQpO1xufX0pOyIsInZhciBTZXQgICAgICAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vZXM2LnNldCcpXG4gICwgZnJvbSAgICAgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19hcnJheS1mcm9tLWl0ZXJhYmxlJylcbiAgLCBtZXRhZGF0YSAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJylcbiAgLCBhbk9iamVjdCAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpXG4gICwgZ2V0UHJvdG90eXBlT2YgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJylcbiAgLCBvcmRpbmFyeU93bk1ldGFkYXRhS2V5cyA9IG1ldGFkYXRhLmtleXNcbiAgLCB0b01ldGFLZXkgICAgICAgICAgICAgICA9IG1ldGFkYXRhLmtleTtcblxudmFyIG9yZGluYXJ5TWV0YWRhdGFLZXlzID0gZnVuY3Rpb24oTywgUCl7XG4gIHZhciBvS2V5cyAgPSBvcmRpbmFyeU93bk1ldGFkYXRhS2V5cyhPLCBQKVxuICAgICwgcGFyZW50ID0gZ2V0UHJvdG90eXBlT2YoTyk7XG4gIGlmKHBhcmVudCA9PT0gbnVsbClyZXR1cm4gb0tleXM7XG4gIHZhciBwS2V5cyAgPSBvcmRpbmFyeU1ldGFkYXRhS2V5cyhwYXJlbnQsIFApO1xuICByZXR1cm4gcEtleXMubGVuZ3RoID8gb0tleXMubGVuZ3RoID8gZnJvbShuZXcgU2V0KG9LZXlzLmNvbmNhdChwS2V5cykpKSA6IHBLZXlzIDogb0tleXM7XG59O1xuXG5tZXRhZGF0YS5leHAoe2dldE1ldGFkYXRhS2V5czogZnVuY3Rpb24gZ2V0TWV0YWRhdGFLZXlzKHRhcmdldCAvKiwgdGFyZ2V0S2V5ICovKXtcbiAgcmV0dXJuIG9yZGluYXJ5TWV0YWRhdGFLZXlzKGFuT2JqZWN0KHRhcmdldCksIGFyZ3VtZW50cy5sZW5ndGggPCAyID8gdW5kZWZpbmVkIDogdG9NZXRhS2V5KGFyZ3VtZW50c1sxXSkpO1xufX0pOyIsInZhciBtZXRhZGF0YSAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fbWV0YWRhdGEnKVxuICAsIGFuT2JqZWN0ICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKVxuICAsIGdldFByb3RvdHlwZU9mICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJylcbiAgLCBvcmRpbmFyeUhhc093bk1ldGFkYXRhID0gbWV0YWRhdGEuaGFzXG4gICwgb3JkaW5hcnlHZXRPd25NZXRhZGF0YSA9IG1ldGFkYXRhLmdldFxuICAsIHRvTWV0YUtleSAgICAgICAgICAgICAgPSBtZXRhZGF0YS5rZXk7XG5cbnZhciBvcmRpbmFyeUdldE1ldGFkYXRhID0gZnVuY3Rpb24oTWV0YWRhdGFLZXksIE8sIFApe1xuICB2YXIgaGFzT3duID0gb3JkaW5hcnlIYXNPd25NZXRhZGF0YShNZXRhZGF0YUtleSwgTywgUCk7XG4gIGlmKGhhc093bilyZXR1cm4gb3JkaW5hcnlHZXRPd25NZXRhZGF0YShNZXRhZGF0YUtleSwgTywgUCk7XG4gIHZhciBwYXJlbnQgPSBnZXRQcm90b3R5cGVPZihPKTtcbiAgcmV0dXJuIHBhcmVudCAhPT0gbnVsbCA/IG9yZGluYXJ5R2V0TWV0YWRhdGEoTWV0YWRhdGFLZXksIHBhcmVudCwgUCkgOiB1bmRlZmluZWQ7XG59O1xuXG5tZXRhZGF0YS5leHAoe2dldE1ldGFkYXRhOiBmdW5jdGlvbiBnZXRNZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0IC8qLCB0YXJnZXRLZXkgKi8pe1xuICByZXR1cm4gb3JkaW5hcnlHZXRNZXRhZGF0YShtZXRhZGF0YUtleSwgYW5PYmplY3QodGFyZ2V0KSwgYXJndW1lbnRzLmxlbmd0aCA8IDMgPyB1bmRlZmluZWQgOiB0b01ldGFLZXkoYXJndW1lbnRzWzJdKSk7XG59fSk7IiwidmFyIG1ldGFkYXRhICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fbWV0YWRhdGEnKVxuICAsIGFuT2JqZWN0ICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JylcbiAgLCBvcmRpbmFyeU93bk1ldGFkYXRhS2V5cyA9IG1ldGFkYXRhLmtleXNcbiAgLCB0b01ldGFLZXkgICAgICAgICAgICAgICA9IG1ldGFkYXRhLmtleTtcblxubWV0YWRhdGEuZXhwKHtnZXRPd25NZXRhZGF0YUtleXM6IGZ1bmN0aW9uIGdldE93bk1ldGFkYXRhS2V5cyh0YXJnZXQgLyosIHRhcmdldEtleSAqLyl7XG4gIHJldHVybiBvcmRpbmFyeU93bk1ldGFkYXRhS2V5cyhhbk9iamVjdCh0YXJnZXQpLCBhcmd1bWVudHMubGVuZ3RoIDwgMiA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMV0pKTtcbn19KTsiLCJ2YXIgbWV0YWRhdGEgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJylcbiAgLCBhbk9iamVjdCAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JylcbiAgLCBvcmRpbmFyeUdldE93bk1ldGFkYXRhID0gbWV0YWRhdGEuZ2V0XG4gICwgdG9NZXRhS2V5ICAgICAgICAgICAgICA9IG1ldGFkYXRhLmtleTtcblxubWV0YWRhdGEuZXhwKHtnZXRPd25NZXRhZGF0YTogZnVuY3Rpb24gZ2V0T3duTWV0YWRhdGEobWV0YWRhdGFLZXksIHRhcmdldCAvKiwgdGFyZ2V0S2V5ICovKXtcbiAgcmV0dXJuIG9yZGluYXJ5R2V0T3duTWV0YWRhdGEobWV0YWRhdGFLZXksIGFuT2JqZWN0KHRhcmdldClcbiAgICAsIGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdW5kZWZpbmVkIDogdG9NZXRhS2V5KGFyZ3VtZW50c1syXSkpO1xufX0pOyIsInZhciBtZXRhZGF0YSAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fbWV0YWRhdGEnKVxuICAsIGFuT2JqZWN0ICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKVxuICAsIGdldFByb3RvdHlwZU9mICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJylcbiAgLCBvcmRpbmFyeUhhc093bk1ldGFkYXRhID0gbWV0YWRhdGEuaGFzXG4gICwgdG9NZXRhS2V5ICAgICAgICAgICAgICA9IG1ldGFkYXRhLmtleTtcblxudmFyIG9yZGluYXJ5SGFzTWV0YWRhdGEgPSBmdW5jdGlvbihNZXRhZGF0YUtleSwgTywgUCl7XG4gIHZhciBoYXNPd24gPSBvcmRpbmFyeUhhc093bk1ldGFkYXRhKE1ldGFkYXRhS2V5LCBPLCBQKTtcbiAgaWYoaGFzT3duKXJldHVybiB0cnVlO1xuICB2YXIgcGFyZW50ID0gZ2V0UHJvdG90eXBlT2YoTyk7XG4gIHJldHVybiBwYXJlbnQgIT09IG51bGwgPyBvcmRpbmFyeUhhc01ldGFkYXRhKE1ldGFkYXRhS2V5LCBwYXJlbnQsIFApIDogZmFsc2U7XG59O1xuXG5tZXRhZGF0YS5leHAoe2hhc01ldGFkYXRhOiBmdW5jdGlvbiBoYXNNZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0IC8qLCB0YXJnZXRLZXkgKi8pe1xuICByZXR1cm4gb3JkaW5hcnlIYXNNZXRhZGF0YShtZXRhZGF0YUtleSwgYW5PYmplY3QodGFyZ2V0KSwgYXJndW1lbnRzLmxlbmd0aCA8IDMgPyB1bmRlZmluZWQgOiB0b01ldGFLZXkoYXJndW1lbnRzWzJdKSk7XG59fSk7IiwidmFyIG1ldGFkYXRhICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpXG4gICwgYW5PYmplY3QgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpXG4gICwgb3JkaW5hcnlIYXNPd25NZXRhZGF0YSA9IG1ldGFkYXRhLmhhc1xuICAsIHRvTWV0YUtleSAgICAgICAgICAgICAgPSBtZXRhZGF0YS5rZXk7XG5cbm1ldGFkYXRhLmV4cCh7aGFzT3duTWV0YWRhdGE6IGZ1bmN0aW9uIGhhc093bk1ldGFkYXRhKG1ldGFkYXRhS2V5LCB0YXJnZXQgLyosIHRhcmdldEtleSAqLyl7XG4gIHJldHVybiBvcmRpbmFyeUhhc093bk1ldGFkYXRhKG1ldGFkYXRhS2V5LCBhbk9iamVjdCh0YXJnZXQpXG4gICAgLCBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMl0pKTtcbn19KTsiLCJ2YXIgbWV0YWRhdGEgICAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJylcbiAgLCBhbk9iamVjdCAgICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JylcbiAgLCBhRnVuY3Rpb24gICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpXG4gICwgdG9NZXRhS2V5ICAgICAgICAgICAgICAgICA9IG1ldGFkYXRhLmtleVxuICAsIG9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEgPSBtZXRhZGF0YS5zZXQ7XG5cbm1ldGFkYXRhLmV4cCh7bWV0YWRhdGE6IGZ1bmN0aW9uIG1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKXtcbiAgcmV0dXJuIGZ1bmN0aW9uIGRlY29yYXRvcih0YXJnZXQsIHRhcmdldEtleSl7XG4gICAgb3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YShcbiAgICAgIG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlLFxuICAgICAgKHRhcmdldEtleSAhPT0gdW5kZWZpbmVkID8gYW5PYmplY3QgOiBhRnVuY3Rpb24pKHRhcmdldCksXG4gICAgICB0b01ldGFLZXkodGFyZ2V0S2V5KVxuICAgICk7XG4gIH07XG59fSk7IiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL0RhdmlkQnJ1YW50L01hcC1TZXQucHJvdG90eXBlLnRvSlNPTlxudmFyICRleHBvcnQgID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5SLCAnU2V0Jywge3RvSlNPTjogcmVxdWlyZSgnLi9fY29sbGVjdGlvbi10by1qc29uJykoJ1NldCcpfSk7IiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL21hdGhpYXNieW5lbnMvU3RyaW5nLnByb3RvdHlwZS5hdFxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsICRhdCAgICAgPSByZXF1aXJlKCcuL19zdHJpbmctYXQnKSh0cnVlKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdTdHJpbmcnLCB7XG4gIGF0OiBmdW5jdGlvbiBhdChwb3Mpe1xuICAgIHJldHVybiAkYXQodGhpcywgcG9zKTtcbiAgfVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9TdHJpbmcucHJvdG90eXBlLm1hdGNoQWxsL1xudmFyICRleHBvcnQgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCBkZWZpbmVkICAgICA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKVxuICAsIHRvTGVuZ3RoICAgID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJylcbiAgLCBpc1JlZ0V4cCAgICA9IHJlcXVpcmUoJy4vX2lzLXJlZ2V4cCcpXG4gICwgZ2V0RmxhZ3MgICAgPSByZXF1aXJlKCcuL19mbGFncycpXG4gICwgUmVnRXhwUHJvdG8gPSBSZWdFeHAucHJvdG90eXBlO1xuXG52YXIgJFJlZ0V4cFN0cmluZ0l0ZXJhdG9yID0gZnVuY3Rpb24ocmVnZXhwLCBzdHJpbmcpe1xuICB0aGlzLl9yID0gcmVnZXhwO1xuICB0aGlzLl9zID0gc3RyaW5nO1xufTtcblxucmVxdWlyZSgnLi9faXRlci1jcmVhdGUnKSgkUmVnRXhwU3RyaW5nSXRlcmF0b3IsICdSZWdFeHAgU3RyaW5nJywgZnVuY3Rpb24gbmV4dCgpe1xuICB2YXIgbWF0Y2ggPSB0aGlzLl9yLmV4ZWModGhpcy5fcyk7XG4gIHJldHVybiB7dmFsdWU6IG1hdGNoLCBkb25lOiBtYXRjaCA9PT0gbnVsbH07XG59KTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdTdHJpbmcnLCB7XG4gIG1hdGNoQWxsOiBmdW5jdGlvbiBtYXRjaEFsbChyZWdleHApe1xuICAgIGRlZmluZWQodGhpcyk7XG4gICAgaWYoIWlzUmVnRXhwKHJlZ2V4cCkpdGhyb3cgVHlwZUVycm9yKHJlZ2V4cCArICcgaXMgbm90IGEgcmVnZXhwIScpO1xuICAgIHZhciBTICAgICA9IFN0cmluZyh0aGlzKVxuICAgICAgLCBmbGFncyA9ICdmbGFncycgaW4gUmVnRXhwUHJvdG8gPyBTdHJpbmcocmVnZXhwLmZsYWdzKSA6IGdldEZsYWdzLmNhbGwocmVnZXhwKVxuICAgICAgLCByeCAgICA9IG5ldyBSZWdFeHAocmVnZXhwLnNvdXJjZSwgfmZsYWdzLmluZGV4T2YoJ2cnKSA/IGZsYWdzIDogJ2cnICsgZmxhZ3MpO1xuICAgIHJ4Lmxhc3RJbmRleCA9IHRvTGVuZ3RoKHJlZ2V4cC5sYXN0SW5kZXgpO1xuICAgIHJldHVybiBuZXcgJFJlZ0V4cFN0cmluZ0l0ZXJhdG9yKHJ4LCBTKTtcbiAgfVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtc3RyaW5nLXBhZC1zdGFydC1lbmRcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCAkcGFkICAgID0gcmVxdWlyZSgnLi9fc3RyaW5nLXBhZCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ1N0cmluZycsIHtcbiAgcGFkRW5kOiBmdW5jdGlvbiBwYWRFbmQobWF4TGVuZ3RoIC8qLCBmaWxsU3RyaW5nID0gJyAnICovKXtcbiAgICByZXR1cm4gJHBhZCh0aGlzLCBtYXhMZW5ndGgsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCBmYWxzZSk7XG4gIH1cbn0pOyIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXN0cmluZy1wYWQtc3RhcnQtZW5kXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgJHBhZCAgICA9IHJlcXVpcmUoJy4vX3N0cmluZy1wYWQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdTdHJpbmcnLCB7XG4gIHBhZFN0YXJ0OiBmdW5jdGlvbiBwYWRTdGFydChtYXhMZW5ndGggLyosIGZpbGxTdHJpbmcgPSAnICcgKi8pe1xuICAgIHJldHVybiAkcGFkKHRoaXMsIG1heExlbmd0aCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIHRydWUpO1xuICB9XG59KTsiLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vc2VibWFya2JhZ2UvZWNtYXNjcmlwdC1zdHJpbmctbGVmdC1yaWdodC10cmltXG5yZXF1aXJlKCcuL19zdHJpbmctdHJpbScpKCd0cmltTGVmdCcsIGZ1bmN0aW9uKCR0cmltKXtcbiAgcmV0dXJuIGZ1bmN0aW9uIHRyaW1MZWZ0KCl7XG4gICAgcmV0dXJuICR0cmltKHRoaXMsIDEpO1xuICB9O1xufSwgJ3RyaW1TdGFydCcpOyIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9zZWJtYXJrYmFnZS9lY21hc2NyaXB0LXN0cmluZy1sZWZ0LXJpZ2h0LXRyaW1cbnJlcXVpcmUoJy4vX3N0cmluZy10cmltJykoJ3RyaW1SaWdodCcsIGZ1bmN0aW9uKCR0cmltKXtcbiAgcmV0dXJuIGZ1bmN0aW9uIHRyaW1SaWdodCgpe1xuICAgIHJldHVybiAkdHJpbSh0aGlzLCAyKTtcbiAgfTtcbn0sICd0cmltRW5kJyk7IiwicmVxdWlyZSgnLi9fd2tzLWRlZmluZScpKCdhc3luY0l0ZXJhdG9yJyk7IiwicmVxdWlyZSgnLi9fd2tzLWRlZmluZScpKCdvYnNlcnZhYmxlJyk7IiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL2xqaGFyYi9wcm9wb3NhbC1nbG9iYWxcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnU3lzdGVtJywge2dsb2JhbDogcmVxdWlyZSgnLi9fZ2xvYmFsJyl9KTsiLCJ2YXIgJGl0ZXJhdG9ycyAgICA9IHJlcXVpcmUoJy4vZXM2LmFycmF5Lml0ZXJhdG9yJylcbiAgLCByZWRlZmluZSAgICAgID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKVxuICAsIGdsb2JhbCAgICAgICAgPSByZXF1aXJlKCcuL19nbG9iYWwnKVxuICAsIGhpZGUgICAgICAgICAgPSByZXF1aXJlKCcuL19oaWRlJylcbiAgLCBJdGVyYXRvcnMgICAgID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJylcbiAgLCB3a3MgICAgICAgICAgID0gcmVxdWlyZSgnLi9fd2tzJylcbiAgLCBJVEVSQVRPUiAgICAgID0gd2tzKCdpdGVyYXRvcicpXG4gICwgVE9fU1RSSU5HX1RBRyA9IHdrcygndG9TdHJpbmdUYWcnKVxuICAsIEFycmF5VmFsdWVzICAgPSBJdGVyYXRvcnMuQXJyYXk7XG5cbmZvcih2YXIgY29sbGVjdGlvbnMgPSBbJ05vZGVMaXN0JywgJ0RPTVRva2VuTGlzdCcsICdNZWRpYUxpc3QnLCAnU3R5bGVTaGVldExpc3QnLCAnQ1NTUnVsZUxpc3QnXSwgaSA9IDA7IGkgPCA1OyBpKyspe1xuICB2YXIgTkFNRSAgICAgICA9IGNvbGxlY3Rpb25zW2ldXG4gICAgLCBDb2xsZWN0aW9uID0gZ2xvYmFsW05BTUVdXG4gICAgLCBwcm90byAgICAgID0gQ29sbGVjdGlvbiAmJiBDb2xsZWN0aW9uLnByb3RvdHlwZVxuICAgICwga2V5O1xuICBpZihwcm90byl7XG4gICAgaWYoIXByb3RvW0lURVJBVE9SXSloaWRlKHByb3RvLCBJVEVSQVRPUiwgQXJyYXlWYWx1ZXMpO1xuICAgIGlmKCFwcm90b1tUT19TVFJJTkdfVEFHXSloaWRlKHByb3RvLCBUT19TVFJJTkdfVEFHLCBOQU1FKTtcbiAgICBJdGVyYXRvcnNbTkFNRV0gPSBBcnJheVZhbHVlcztcbiAgICBmb3Ioa2V5IGluICRpdGVyYXRvcnMpaWYoIXByb3RvW2tleV0pcmVkZWZpbmUocHJvdG8sIGtleSwgJGl0ZXJhdG9yc1trZXldLCB0cnVlKTtcbiAgfVxufSIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCAkdGFzayAgID0gcmVxdWlyZSgnLi9fdGFzaycpO1xuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LkIsIHtcbiAgc2V0SW1tZWRpYXRlOiAgICR0YXNrLnNldCxcbiAgY2xlYXJJbW1lZGlhdGU6ICR0YXNrLmNsZWFyXG59KTsiLCIvLyBpZTktIHNldFRpbWVvdXQgJiBzZXRJbnRlcnZhbCBhZGRpdGlvbmFsIHBhcmFtZXRlcnMgZml4XG52YXIgZ2xvYmFsICAgICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpXG4gICwgJGV4cG9ydCAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgaW52b2tlICAgICA9IHJlcXVpcmUoJy4vX2ludm9rZScpXG4gICwgcGFydGlhbCAgICA9IHJlcXVpcmUoJy4vX3BhcnRpYWwnKVxuICAsIG5hdmlnYXRvciAgPSBnbG9iYWwubmF2aWdhdG9yXG4gICwgTVNJRSAgICAgICA9ICEhbmF2aWdhdG9yICYmIC9NU0lFIC5cXC4vLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7IC8vIDwtIGRpcnR5IGllOS0gY2hlY2tcbnZhciB3cmFwID0gZnVuY3Rpb24oc2V0KXtcbiAgcmV0dXJuIE1TSUUgPyBmdW5jdGlvbihmbiwgdGltZSAvKiwgLi4uYXJncyAqLyl7XG4gICAgcmV0dXJuIHNldChpbnZva2UoXG4gICAgICBwYXJ0aWFsLFxuICAgICAgW10uc2xpY2UuY2FsbChhcmd1bWVudHMsIDIpLFxuICAgICAgdHlwZW9mIGZuID09ICdmdW5jdGlvbicgPyBmbiA6IEZ1bmN0aW9uKGZuKVxuICAgICksIHRpbWUpO1xuICB9IDogc2V0O1xufTtcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5CICsgJGV4cG9ydC5GICogTVNJRSwge1xuICBzZXRUaW1lb3V0OiAgd3JhcChnbG9iYWwuc2V0VGltZW91dCksXG4gIHNldEludGVydmFsOiB3cmFwKGdsb2JhbC5zZXRJbnRlcnZhbClcbn0pOyIsInJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3ltYm9sJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5jcmVhdGUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0eScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnRpZXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LXByb3RvdHlwZS1vZicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3Qua2V5cycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuZnJlZXplJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5zZWFsJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5wcmV2ZW50LWV4dGVuc2lvbnMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmlzLWZyb3plbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuaXMtc2VhbGVkJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1leHRlbnNpYmxlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5hc3NpZ24nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmlzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5zZXQtcHJvdG90eXBlLW9mJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC50by1zdHJpbmcnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuZnVuY3Rpb24uYmluZCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5mdW5jdGlvbi5uYW1lJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmZ1bmN0aW9uLmhhcy1pbnN0YW5jZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5wYXJzZS1pbnQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucGFyc2UtZmxvYXQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLmNvbnN0cnVjdG9yJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci50by1maXhlZCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIudG8tcHJlY2lzaW9uJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5lcHNpbG9uJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5pcy1maW5pdGUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLmlzLWludGVnZXInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLmlzLW5hbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIuaXMtc2FmZS1pbnRlZ2VyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5tYXgtc2FmZS1pbnRlZ2VyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5taW4tc2FmZS1pbnRlZ2VyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5wYXJzZS1mbG9hdCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIucGFyc2UtaW50Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguYWNvc2gnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5hc2luaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmF0YW5oJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguY2JydCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmNsejMyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguY29zaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmV4cG0xJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguZnJvdW5kJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguaHlwb3QnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5pbXVsJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGgubG9nMTAnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5sb2cxcCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmxvZzInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5zaWduJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguc2luaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLnRhbmgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC50cnVuYycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuZnJvbS1jb2RlLXBvaW50Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5yYXcnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnRyaW0nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5jb2RlLXBvaW50LWF0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5lbmRzLXdpdGgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmluY2x1ZGVzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5yZXBlYXQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnN0YXJ0cy13aXRoJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5hbmNob3InKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmJpZycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuYmxpbmsnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmJvbGQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmZpeGVkJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5mb250Y29sb3InKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmZvbnRzaXplJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5pdGFsaWNzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5saW5rJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5zbWFsbCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuc3RyaWtlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5zdWInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnN1cCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5kYXRlLm5vdycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5kYXRlLnRvLWpzb24nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuZGF0ZS50by1pc28tc3RyaW5nJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmRhdGUudG8tc3RyaW5nJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmRhdGUudG8tcHJpbWl0aXZlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmlzLWFycmF5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmZyb20nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkub2YnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuam9pbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5zbGljZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5zb3J0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmZvci1lYWNoJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5Lm1hcCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5maWx0ZXInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuc29tZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5ldmVyeScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5yZWR1Y2UnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkucmVkdWNlLXJpZ2h0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmluZGV4LW9mJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5Lmxhc3QtaW5kZXgtb2YnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuY29weS13aXRoaW4nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuZmlsbCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5maW5kJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmZpbmQtaW5kZXgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuc3BlY2llcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5pdGVyYXRvcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWdleHAuY29uc3RydWN0b3InKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVnZXhwLnRvLXN0cmluZycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWdleHAuZmxhZ3MnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVnZXhwLm1hdGNoJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZ2V4cC5yZXBsYWNlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZ2V4cC5zZWFyY2gnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVnZXhwLnNwbGl0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnByb21pc2UnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWFwJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnNldCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi53ZWFrLW1hcCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi53ZWFrLXNldCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC5hcnJheS1idWZmZXInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQuZGF0YS12aWV3Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLmludDgtYXJyYXknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQudWludDgtYXJyYXknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQudWludDgtY2xhbXBlZC1hcnJheScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC5pbnQxNi1hcnJheScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC51aW50MTYtYXJyYXknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQuaW50MzItYXJyYXknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQudWludDMyLWFycmF5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLmZsb2F0MzItYXJyYXknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQuZmxvYXQ2NC1hcnJheScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmFwcGx5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuY29uc3RydWN0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuZGVmaW5lLXByb3BlcnR5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuZGVsZXRlLXByb3BlcnR5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuZW51bWVyYXRlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0LXByb3RvdHlwZS1vZicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmhhcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmlzLWV4dGVuc2libGUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5vd24ta2V5cycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LnByZXZlbnQtZXh0ZW5zaW9ucycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LnNldCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LnNldC1wcm90b3R5cGUtb2YnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuYXJyYXkuaW5jbHVkZXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3RyaW5nLmF0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnN0cmluZy5wYWQtc3RhcnQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3RyaW5nLnBhZC1lbmQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3RyaW5nLnRyaW0tbGVmdCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zdHJpbmcudHJpbS1yaWdodCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zdHJpbmcubWF0Y2gtYWxsJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnN5bWJvbC5hc3luYy1pdGVyYXRvcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zeW1ib2wub2JzZXJ2YWJsZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9ycycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5vYmplY3QudmFsdWVzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm9iamVjdC5lbnRyaWVzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm9iamVjdC5kZWZpbmUtZ2V0dGVyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm9iamVjdC5kZWZpbmUtc2V0dGVyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm9iamVjdC5sb29rdXAtZ2V0dGVyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm9iamVjdC5sb29rdXAtc2V0dGVyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hcC50by1qc29uJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnNldC50by1qc29uJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnN5c3RlbS5nbG9iYWwnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuZXJyb3IuaXMtZXJyb3InKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC5pYWRkaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLmlzdWJoJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGguaW11bGgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC51bXVsaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWZsZWN0LmRlZmluZS1tZXRhZGF0YScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWZsZWN0LmRlbGV0ZS1tZXRhZGF0YScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWZsZWN0LmdldC1tZXRhZGF0YScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWZsZWN0LmdldC1tZXRhZGF0YS1rZXlzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW93bi1tZXRhZGF0YScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWZsZWN0LmdldC1vd24tbWV0YWRhdGEta2V5cycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWZsZWN0Lmhhcy1tZXRhZGF0YScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWZsZWN0Lmhhcy1vd24tbWV0YWRhdGEnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcucmVmbGVjdC5tZXRhZGF0YScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5hc2FwJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm9ic2VydmFibGUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy93ZWIudGltZXJzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvd2ViLmltbWVkaWF0ZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGUnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9tb2R1bGVzL19jb3JlJyk7IiwiZXhwb3J0cy5yZWFkID0gZnVuY3Rpb24gKGJ1ZmZlciwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGUsIG1cbiAgdmFyIGVMZW4gPSBuQnl0ZXMgKiA4IC0gbUxlbiAtIDFcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDFcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxXG4gIHZhciBuQml0cyA9IC03XG4gIHZhciBpID0gaXNMRSA/IChuQnl0ZXMgLSAxKSA6IDBcbiAgdmFyIGQgPSBpc0xFID8gLTEgOiAxXG4gIHZhciBzID0gYnVmZmVyW29mZnNldCArIGldXG5cbiAgaSArPSBkXG5cbiAgZSA9IHMgJiAoKDEgPDwgKC1uQml0cykpIC0gMSlcbiAgcyA+Pj0gKC1uQml0cylcbiAgbkJpdHMgKz0gZUxlblxuICBmb3IgKDsgbkJpdHMgPiAwOyBlID0gZSAqIDI1NiArIGJ1ZmZlcltvZmZzZXQgKyBpXSwgaSArPSBkLCBuQml0cyAtPSA4KSB7fVxuXG4gIG0gPSBlICYgKCgxIDw8ICgtbkJpdHMpKSAtIDEpXG4gIGUgPj49ICgtbkJpdHMpXG4gIG5CaXRzICs9IG1MZW5cbiAgZm9yICg7IG5CaXRzID4gMDsgbSA9IG0gKiAyNTYgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBpZiAoZSA9PT0gMCkge1xuICAgIGUgPSAxIC0gZUJpYXNcbiAgfSBlbHNlIGlmIChlID09PSBlTWF4KSB7XG4gICAgcmV0dXJuIG0gPyBOYU4gOiAoKHMgPyAtMSA6IDEpICogSW5maW5pdHkpXG4gIH0gZWxzZSB7XG4gICAgbSA9IG0gKyBNYXRoLnBvdygyLCBtTGVuKVxuICAgIGUgPSBlIC0gZUJpYXNcbiAgfVxuICByZXR1cm4gKHMgPyAtMSA6IDEpICogbSAqIE1hdGgucG93KDIsIGUgLSBtTGVuKVxufVxuXG5leHBvcnRzLndyaXRlID0gZnVuY3Rpb24gKGJ1ZmZlciwgdmFsdWUsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlLCBtLCBjXG4gIHZhciBlTGVuID0gbkJ5dGVzICogOCAtIG1MZW4gLSAxXG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxXG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMVxuICB2YXIgcnQgPSAobUxlbiA9PT0gMjMgPyBNYXRoLnBvdygyLCAtMjQpIC0gTWF0aC5wb3coMiwgLTc3KSA6IDApXG4gIHZhciBpID0gaXNMRSA/IDAgOiAobkJ5dGVzIC0gMSlcbiAgdmFyIGQgPSBpc0xFID8gMSA6IC0xXG4gIHZhciBzID0gdmFsdWUgPCAwIHx8ICh2YWx1ZSA9PT0gMCAmJiAxIC8gdmFsdWUgPCAwKSA/IDEgOiAwXG5cbiAgdmFsdWUgPSBNYXRoLmFicyh2YWx1ZSlcblxuICBpZiAoaXNOYU4odmFsdWUpIHx8IHZhbHVlID09PSBJbmZpbml0eSkge1xuICAgIG0gPSBpc05hTih2YWx1ZSkgPyAxIDogMFxuICAgIGUgPSBlTWF4XG4gIH0gZWxzZSB7XG4gICAgZSA9IE1hdGguZmxvb3IoTWF0aC5sb2codmFsdWUpIC8gTWF0aC5MTjIpXG4gICAgaWYgKHZhbHVlICogKGMgPSBNYXRoLnBvdygyLCAtZSkpIDwgMSkge1xuICAgICAgZS0tXG4gICAgICBjICo9IDJcbiAgICB9XG4gICAgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICB2YWx1ZSArPSBydCAvIGNcbiAgICB9IGVsc2Uge1xuICAgICAgdmFsdWUgKz0gcnQgKiBNYXRoLnBvdygyLCAxIC0gZUJpYXMpXG4gICAgfVxuICAgIGlmICh2YWx1ZSAqIGMgPj0gMikge1xuICAgICAgZSsrXG4gICAgICBjIC89IDJcbiAgICB9XG5cbiAgICBpZiAoZSArIGVCaWFzID49IGVNYXgpIHtcbiAgICAgIG0gPSAwXG4gICAgICBlID0gZU1heFxuICAgIH0gZWxzZSBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIG0gPSAodmFsdWUgKiBjIC0gMSkgKiBNYXRoLnBvdygyLCBtTGVuKVxuICAgICAgZSA9IGUgKyBlQmlhc1xuICAgIH0gZWxzZSB7XG4gICAgICBtID0gdmFsdWUgKiBNYXRoLnBvdygyLCBlQmlhcyAtIDEpICogTWF0aC5wb3coMiwgbUxlbilcbiAgICAgIGUgPSAwXG4gICAgfVxuICB9XG5cbiAgZm9yICg7IG1MZW4gPj0gODsgYnVmZmVyW29mZnNldCArIGldID0gbSAmIDB4ZmYsIGkgKz0gZCwgbSAvPSAyNTYsIG1MZW4gLT0gOCkge31cblxuICBlID0gKGUgPDwgbUxlbikgfCBtXG4gIGVMZW4gKz0gbUxlblxuICBmb3IgKDsgZUxlbiA+IDA7IGJ1ZmZlcltvZmZzZXQgKyBpXSA9IGUgJiAweGZmLCBpICs9IGQsIGUgLz0gMjU2LCBlTGVuIC09IDgpIHt9XG5cbiAgYnVmZmVyW29mZnNldCArIGkgLSBkXSB8PSBzICogMTI4XG59XG4iLCIvKiFcbiAqIERldGVybWluZSBpZiBhbiBvYmplY3QgaXMgYSBCdWZmZXJcbiAqXG4gKiBAYXV0aG9yICAgRmVyb3NzIEFib3VraGFkaWplaCA8ZmVyb3NzQGZlcm9zcy5vcmc+IDxodHRwOi8vZmVyb3NzLm9yZz5cbiAqIEBsaWNlbnNlICBNSVRcbiAqL1xuXG4vLyBUaGUgX2lzQnVmZmVyIGNoZWNrIGlzIGZvciBTYWZhcmkgNS03IHN1cHBvcnQsIGJlY2F1c2UgaXQncyBtaXNzaW5nXG4vLyBPYmplY3QucHJvdG90eXBlLmNvbnN0cnVjdG9yLiBSZW1vdmUgdGhpcyBldmVudHVhbGx5XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIG9iaiAhPSBudWxsICYmIChpc0J1ZmZlcihvYmopIHx8IGlzU2xvd0J1ZmZlcihvYmopIHx8ICEhb2JqLl9pc0J1ZmZlcilcbn1cblxuZnVuY3Rpb24gaXNCdWZmZXIgKG9iaikge1xuICByZXR1cm4gISFvYmouY29uc3RydWN0b3IgJiYgdHlwZW9mIG9iai5jb25zdHJ1Y3Rvci5pc0J1ZmZlciA9PT0gJ2Z1bmN0aW9uJyAmJiBvYmouY29uc3RydWN0b3IuaXNCdWZmZXIob2JqKVxufVxuXG4vLyBGb3IgTm9kZSB2MC4xMCBzdXBwb3J0LiBSZW1vdmUgdGhpcyBldmVudHVhbGx5LlxuZnVuY3Rpb24gaXNTbG93QnVmZmVyIChvYmopIHtcbiAgcmV0dXJuIHR5cGVvZiBvYmoucmVhZEZsb2F0TEUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIG9iai5zbGljZSA9PT0gJ2Z1bmN0aW9uJyAmJiBpc0J1ZmZlcihvYmouc2xpY2UoMCwgMCkpXG59XG4iLCJ2YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIChhcnIpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoYXJyKSA9PSAnW29iamVjdCBBcnJheV0nO1xufTtcbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4vLyByZXNvbHZlcyAuIGFuZCAuLiBlbGVtZW50cyBpbiBhIHBhdGggYXJyYXkgd2l0aCBkaXJlY3RvcnkgbmFtZXMgdGhlcmVcbi8vIG11c3QgYmUgbm8gc2xhc2hlcywgZW1wdHkgZWxlbWVudHMsIG9yIGRldmljZSBuYW1lcyAoYzpcXCkgaW4gdGhlIGFycmF5XG4vLyAoc28gYWxzbyBubyBsZWFkaW5nIGFuZCB0cmFpbGluZyBzbGFzaGVzIC0gaXQgZG9lcyBub3QgZGlzdGluZ3Vpc2hcbi8vIHJlbGF0aXZlIGFuZCBhYnNvbHV0ZSBwYXRocylcbmZ1bmN0aW9uIG5vcm1hbGl6ZUFycmF5KHBhcnRzLCBhbGxvd0Fib3ZlUm9vdCkge1xuICAvLyBpZiB0aGUgcGF0aCB0cmllcyB0byBnbyBhYm92ZSB0aGUgcm9vdCwgYHVwYCBlbmRzIHVwID4gMFxuICB2YXIgdXAgPSAwO1xuICBmb3IgKHZhciBpID0gcGFydHMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICB2YXIgbGFzdCA9IHBhcnRzW2ldO1xuICAgIGlmIChsYXN0ID09PSAnLicpIHtcbiAgICAgIHBhcnRzLnNwbGljZShpLCAxKTtcbiAgICB9IGVsc2UgaWYgKGxhc3QgPT09ICcuLicpIHtcbiAgICAgIHBhcnRzLnNwbGljZShpLCAxKTtcbiAgICAgIHVwKys7XG4gICAgfSBlbHNlIGlmICh1cCkge1xuICAgICAgcGFydHMuc3BsaWNlKGksIDEpO1xuICAgICAgdXAtLTtcbiAgICB9XG4gIH1cblxuICAvLyBpZiB0aGUgcGF0aCBpcyBhbGxvd2VkIHRvIGdvIGFib3ZlIHRoZSByb290LCByZXN0b3JlIGxlYWRpbmcgLi5zXG4gIGlmIChhbGxvd0Fib3ZlUm9vdCkge1xuICAgIGZvciAoOyB1cC0tOyB1cCkge1xuICAgICAgcGFydHMudW5zaGlmdCgnLi4nKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcGFydHM7XG59XG5cbi8vIFNwbGl0IGEgZmlsZW5hbWUgaW50byBbcm9vdCwgZGlyLCBiYXNlbmFtZSwgZXh0XSwgdW5peCB2ZXJzaW9uXG4vLyAncm9vdCcgaXMganVzdCBhIHNsYXNoLCBvciBub3RoaW5nLlxudmFyIHNwbGl0UGF0aFJlID1cbiAgICAvXihcXC8/fCkoW1xcc1xcU10qPykoKD86XFwuezEsMn18W15cXC9dKz98KShcXC5bXi5cXC9dKnwpKSg/OltcXC9dKikkLztcbnZhciBzcGxpdFBhdGggPSBmdW5jdGlvbihmaWxlbmFtZSkge1xuICByZXR1cm4gc3BsaXRQYXRoUmUuZXhlYyhmaWxlbmFtZSkuc2xpY2UoMSk7XG59O1xuXG4vLyBwYXRoLnJlc29sdmUoW2Zyb20gLi4uXSwgdG8pXG4vLyBwb3NpeCB2ZXJzaW9uXG5leHBvcnRzLnJlc29sdmUgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHJlc29sdmVkUGF0aCA9ICcnLFxuICAgICAgcmVzb2x2ZWRBYnNvbHV0ZSA9IGZhbHNlO1xuXG4gIGZvciAodmFyIGkgPSBhcmd1bWVudHMubGVuZ3RoIC0gMTsgaSA+PSAtMSAmJiAhcmVzb2x2ZWRBYnNvbHV0ZTsgaS0tKSB7XG4gICAgdmFyIHBhdGggPSAoaSA+PSAwKSA/IGFyZ3VtZW50c1tpXSA6IHByb2Nlc3MuY3dkKCk7XG5cbiAgICAvLyBTa2lwIGVtcHR5IGFuZCBpbnZhbGlkIGVudHJpZXNcbiAgICBpZiAodHlwZW9mIHBhdGggIT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudHMgdG8gcGF0aC5yZXNvbHZlIG11c3QgYmUgc3RyaW5ncycpO1xuICAgIH0gZWxzZSBpZiAoIXBhdGgpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIHJlc29sdmVkUGF0aCA9IHBhdGggKyAnLycgKyByZXNvbHZlZFBhdGg7XG4gICAgcmVzb2x2ZWRBYnNvbHV0ZSA9IHBhdGguY2hhckF0KDApID09PSAnLyc7XG4gIH1cblxuICAvLyBBdCB0aGlzIHBvaW50IHRoZSBwYXRoIHNob3VsZCBiZSByZXNvbHZlZCB0byBhIGZ1bGwgYWJzb2x1dGUgcGF0aCwgYnV0XG4gIC8vIGhhbmRsZSByZWxhdGl2ZSBwYXRocyB0byBiZSBzYWZlIChtaWdodCBoYXBwZW4gd2hlbiBwcm9jZXNzLmN3ZCgpIGZhaWxzKVxuXG4gIC8vIE5vcm1hbGl6ZSB0aGUgcGF0aFxuICByZXNvbHZlZFBhdGggPSBub3JtYWxpemVBcnJheShmaWx0ZXIocmVzb2x2ZWRQYXRoLnNwbGl0KCcvJyksIGZ1bmN0aW9uKHApIHtcbiAgICByZXR1cm4gISFwO1xuICB9KSwgIXJlc29sdmVkQWJzb2x1dGUpLmpvaW4oJy8nKTtcblxuICByZXR1cm4gKChyZXNvbHZlZEFic29sdXRlID8gJy8nIDogJycpICsgcmVzb2x2ZWRQYXRoKSB8fCAnLic7XG59O1xuXG4vLyBwYXRoLm5vcm1hbGl6ZShwYXRoKVxuLy8gcG9zaXggdmVyc2lvblxuZXhwb3J0cy5ub3JtYWxpemUgPSBmdW5jdGlvbihwYXRoKSB7XG4gIHZhciBpc0Fic29sdXRlID0gZXhwb3J0cy5pc0Fic29sdXRlKHBhdGgpLFxuICAgICAgdHJhaWxpbmdTbGFzaCA9IHN1YnN0cihwYXRoLCAtMSkgPT09ICcvJztcblxuICAvLyBOb3JtYWxpemUgdGhlIHBhdGhcbiAgcGF0aCA9IG5vcm1hbGl6ZUFycmF5KGZpbHRlcihwYXRoLnNwbGl0KCcvJyksIGZ1bmN0aW9uKHApIHtcbiAgICByZXR1cm4gISFwO1xuICB9KSwgIWlzQWJzb2x1dGUpLmpvaW4oJy8nKTtcblxuICBpZiAoIXBhdGggJiYgIWlzQWJzb2x1dGUpIHtcbiAgICBwYXRoID0gJy4nO1xuICB9XG4gIGlmIChwYXRoICYmIHRyYWlsaW5nU2xhc2gpIHtcbiAgICBwYXRoICs9ICcvJztcbiAgfVxuXG4gIHJldHVybiAoaXNBYnNvbHV0ZSA/ICcvJyA6ICcnKSArIHBhdGg7XG59O1xuXG4vLyBwb3NpeCB2ZXJzaW9uXG5leHBvcnRzLmlzQWJzb2x1dGUgPSBmdW5jdGlvbihwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJy8nO1xufTtcblxuLy8gcG9zaXggdmVyc2lvblxuZXhwb3J0cy5qb2luID0gZnVuY3Rpb24oKSB7XG4gIHZhciBwYXRocyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMCk7XG4gIHJldHVybiBleHBvcnRzLm5vcm1hbGl6ZShmaWx0ZXIocGF0aHMsIGZ1bmN0aW9uKHAsIGluZGV4KSB7XG4gICAgaWYgKHR5cGVvZiBwICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnRzIHRvIHBhdGguam9pbiBtdXN0IGJlIHN0cmluZ3MnKTtcbiAgICB9XG4gICAgcmV0dXJuIHA7XG4gIH0pLmpvaW4oJy8nKSk7XG59O1xuXG5cbi8vIHBhdGgucmVsYXRpdmUoZnJvbSwgdG8pXG4vLyBwb3NpeCB2ZXJzaW9uXG5leHBvcnRzLnJlbGF0aXZlID0gZnVuY3Rpb24oZnJvbSwgdG8pIHtcbiAgZnJvbSA9IGV4cG9ydHMucmVzb2x2ZShmcm9tKS5zdWJzdHIoMSk7XG4gIHRvID0gZXhwb3J0cy5yZXNvbHZlKHRvKS5zdWJzdHIoMSk7XG5cbiAgZnVuY3Rpb24gdHJpbShhcnIpIHtcbiAgICB2YXIgc3RhcnQgPSAwO1xuICAgIGZvciAoOyBzdGFydCA8IGFyci5sZW5ndGg7IHN0YXJ0KyspIHtcbiAgICAgIGlmIChhcnJbc3RhcnRdICE9PSAnJykgYnJlYWs7XG4gICAgfVxuXG4gICAgdmFyIGVuZCA9IGFyci5sZW5ndGggLSAxO1xuICAgIGZvciAoOyBlbmQgPj0gMDsgZW5kLS0pIHtcbiAgICAgIGlmIChhcnJbZW5kXSAhPT0gJycpIGJyZWFrO1xuICAgIH1cblxuICAgIGlmIChzdGFydCA+IGVuZCkgcmV0dXJuIFtdO1xuICAgIHJldHVybiBhcnIuc2xpY2Uoc3RhcnQsIGVuZCAtIHN0YXJ0ICsgMSk7XG4gIH1cblxuICB2YXIgZnJvbVBhcnRzID0gdHJpbShmcm9tLnNwbGl0KCcvJykpO1xuICB2YXIgdG9QYXJ0cyA9IHRyaW0odG8uc3BsaXQoJy8nKSk7XG5cbiAgdmFyIGxlbmd0aCA9IE1hdGgubWluKGZyb21QYXJ0cy5sZW5ndGgsIHRvUGFydHMubGVuZ3RoKTtcbiAgdmFyIHNhbWVQYXJ0c0xlbmd0aCA9IGxlbmd0aDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgIGlmIChmcm9tUGFydHNbaV0gIT09IHRvUGFydHNbaV0pIHtcbiAgICAgIHNhbWVQYXJ0c0xlbmd0aCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICB2YXIgb3V0cHV0UGFydHMgPSBbXTtcbiAgZm9yICh2YXIgaSA9IHNhbWVQYXJ0c0xlbmd0aDsgaSA8IGZyb21QYXJ0cy5sZW5ndGg7IGkrKykge1xuICAgIG91dHB1dFBhcnRzLnB1c2goJy4uJyk7XG4gIH1cblxuICBvdXRwdXRQYXJ0cyA9IG91dHB1dFBhcnRzLmNvbmNhdCh0b1BhcnRzLnNsaWNlKHNhbWVQYXJ0c0xlbmd0aCkpO1xuXG4gIHJldHVybiBvdXRwdXRQYXJ0cy5qb2luKCcvJyk7XG59O1xuXG5leHBvcnRzLnNlcCA9ICcvJztcbmV4cG9ydHMuZGVsaW1pdGVyID0gJzonO1xuXG5leHBvcnRzLmRpcm5hbWUgPSBmdW5jdGlvbihwYXRoKSB7XG4gIHZhciByZXN1bHQgPSBzcGxpdFBhdGgocGF0aCksXG4gICAgICByb290ID0gcmVzdWx0WzBdLFxuICAgICAgZGlyID0gcmVzdWx0WzFdO1xuXG4gIGlmICghcm9vdCAmJiAhZGlyKSB7XG4gICAgLy8gTm8gZGlybmFtZSB3aGF0c29ldmVyXG4gICAgcmV0dXJuICcuJztcbiAgfVxuXG4gIGlmIChkaXIpIHtcbiAgICAvLyBJdCBoYXMgYSBkaXJuYW1lLCBzdHJpcCB0cmFpbGluZyBzbGFzaFxuICAgIGRpciA9IGRpci5zdWJzdHIoMCwgZGlyLmxlbmd0aCAtIDEpO1xuICB9XG5cbiAgcmV0dXJuIHJvb3QgKyBkaXI7XG59O1xuXG5cbmV4cG9ydHMuYmFzZW5hbWUgPSBmdW5jdGlvbihwYXRoLCBleHQpIHtcbiAgdmFyIGYgPSBzcGxpdFBhdGgocGF0aClbMl07XG4gIC8vIFRPRE86IG1ha2UgdGhpcyBjb21wYXJpc29uIGNhc2UtaW5zZW5zaXRpdmUgb24gd2luZG93cz9cbiAgaWYgKGV4dCAmJiBmLnN1YnN0cigtMSAqIGV4dC5sZW5ndGgpID09PSBleHQpIHtcbiAgICBmID0gZi5zdWJzdHIoMCwgZi5sZW5ndGggLSBleHQubGVuZ3RoKTtcbiAgfVxuICByZXR1cm4gZjtcbn07XG5cblxuZXhwb3J0cy5leHRuYW1lID0gZnVuY3Rpb24ocGF0aCkge1xuICByZXR1cm4gc3BsaXRQYXRoKHBhdGgpWzNdO1xufTtcblxuZnVuY3Rpb24gZmlsdGVyICh4cywgZikge1xuICAgIGlmICh4cy5maWx0ZXIpIHJldHVybiB4cy5maWx0ZXIoZik7XG4gICAgdmFyIHJlcyA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgeHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGYoeHNbaV0sIGksIHhzKSkgcmVzLnB1c2goeHNbaV0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xufVxuXG4vLyBTdHJpbmcucHJvdG90eXBlLnN1YnN0ciAtIG5lZ2F0aXZlIGluZGV4IGRvbid0IHdvcmsgaW4gSUU4XG52YXIgc3Vic3RyID0gJ2FiJy5zdWJzdHIoLTEpID09PSAnYidcbiAgICA/IGZ1bmN0aW9uIChzdHIsIHN0YXJ0LCBsZW4pIHsgcmV0dXJuIHN0ci5zdWJzdHIoc3RhcnQsIGxlbikgfVxuICAgIDogZnVuY3Rpb24gKHN0ciwgc3RhcnQsIGxlbikge1xuICAgICAgICBpZiAoc3RhcnQgPCAwKSBzdGFydCA9IHN0ci5sZW5ndGggKyBzdGFydDtcbiAgICAgICAgcmV0dXJuIHN0ci5zdWJzdHIoc3RhcnQsIGxlbik7XG4gICAgfVxuO1xuIiwiLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG52YXIgcHJvY2VzcyA9IG1vZHVsZS5leHBvcnRzID0ge307XG5cbi8vIGNhY2hlZCBmcm9tIHdoYXRldmVyIGdsb2JhbCBpcyBwcmVzZW50IHNvIHRoYXQgdGVzdCBydW5uZXJzIHRoYXQgc3R1YiBpdFxuLy8gZG9uJ3QgYnJlYWsgdGhpbmdzLiAgQnV0IHdlIG5lZWQgdG8gd3JhcCBpdCBpbiBhIHRyeSBjYXRjaCBpbiBjYXNlIGl0IGlzXG4vLyB3cmFwcGVkIGluIHN0cmljdCBtb2RlIGNvZGUgd2hpY2ggZG9lc24ndCBkZWZpbmUgYW55IGdsb2JhbHMuICBJdCdzIGluc2lkZSBhXG4vLyBmdW5jdGlvbiBiZWNhdXNlIHRyeS9jYXRjaGVzIGRlb3B0aW1pemUgaW4gY2VydGFpbiBlbmdpbmVzLlxuXG52YXIgY2FjaGVkU2V0VGltZW91dDtcbnZhciBjYWNoZWRDbGVhclRpbWVvdXQ7XG5cbmZ1bmN0aW9uIGRlZmF1bHRTZXRUaW1vdXQoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdzZXRUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG5mdW5jdGlvbiBkZWZhdWx0Q2xlYXJUaW1lb3V0ICgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NsZWFyVGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuKGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIGNsZWFyVGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICB9XG59ICgpKVxuZnVuY3Rpb24gcnVuVGltZW91dChmdW4pIHtcbiAgICBpZiAoY2FjaGVkU2V0VGltZW91dCA9PT0gc2V0VGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgLy8gaWYgc2V0VGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZFNldFRpbWVvdXQgPT09IGRlZmF1bHRTZXRUaW1vdXQgfHwgIWNhY2hlZFNldFRpbWVvdXQpICYmIHNldFRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9IGNhdGNoKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0IHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKG51bGwsIGZ1biwgMCk7XG4gICAgICAgIH0gY2F0Y2goZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvclxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbCh0aGlzLCBmdW4sIDApO1xuICAgICAgICB9XG4gICAgfVxuXG5cbn1cbmZ1bmN0aW9uIHJ1bkNsZWFyVGltZW91dChtYXJrZXIpIHtcbiAgICBpZiAoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgLy8gaWYgY2xlYXJUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBkZWZhdWx0Q2xlYXJUaW1lb3V0IHx8ICFjYWNoZWRDbGVhclRpbWVvdXQpICYmIGNsZWFyVGltZW91dCkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfSBjYXRjaCAoZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgIHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwobnVsbCwgbWFya2VyKTtcbiAgICAgICAgfSBjYXRjaCAoZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvci5cbiAgICAgICAgICAgIC8vIFNvbWUgdmVyc2lvbnMgb2YgSS5FLiBoYXZlIGRpZmZlcmVudCBydWxlcyBmb3IgY2xlYXJUaW1lb3V0IHZzIHNldFRpbWVvdXRcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbCh0aGlzLCBtYXJrZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG5cblxufVxudmFyIHF1ZXVlID0gW107XG52YXIgZHJhaW5pbmcgPSBmYWxzZTtcbnZhciBjdXJyZW50UXVldWU7XG52YXIgcXVldWVJbmRleCA9IC0xO1xuXG5mdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKSB7XG4gICAgaWYgKCFkcmFpbmluZyB8fCAhY3VycmVudFF1ZXVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBpZiAoY3VycmVudFF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBxdWV1ZSA9IGN1cnJlbnRRdWV1ZS5jb25jYXQocXVldWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICB9XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBkcmFpblF1ZXVlKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkcmFpblF1ZXVlKCkge1xuICAgIGlmIChkcmFpbmluZykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciB0aW1lb3V0ID0gcnVuVGltZW91dChjbGVhblVwTmV4dFRpY2spO1xuICAgIGRyYWluaW5nID0gdHJ1ZTtcblxuICAgIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgd2hpbGUobGVuKSB7XG4gICAgICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlO1xuICAgICAgICBxdWV1ZSA9IFtdO1xuICAgICAgICB3aGlsZSAoKytxdWV1ZUluZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudFF1ZXVlKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFF1ZXVlW3F1ZXVlSW5kZXhdLnJ1bigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICAgICAgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIH1cbiAgICBjdXJyZW50UXVldWUgPSBudWxsO1xuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgcnVuQ2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xufVxuXG5wcm9jZXNzLm5leHRUaWNrID0gZnVuY3Rpb24gKGZ1bikge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLCBhcmdzKSk7XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCA9PT0gMSAmJiAhZHJhaW5pbmcpIHtcbiAgICAgICAgcnVuVGltZW91dChkcmFpblF1ZXVlKTtcbiAgICB9XG59O1xuXG4vLyB2OCBsaWtlcyBwcmVkaWN0aWJsZSBvYmplY3RzXG5mdW5jdGlvbiBJdGVtKGZ1biwgYXJyYXkpIHtcbiAgICB0aGlzLmZ1biA9IGZ1bjtcbiAgICB0aGlzLmFycmF5ID0gYXJyYXk7XG59XG5JdGVtLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5mdW4uYXBwbHkobnVsbCwgdGhpcy5hcnJheSk7XG59O1xucHJvY2Vzcy50aXRsZSA9ICdicm93c2VyJztcbnByb2Nlc3MuYnJvd3NlciA9IHRydWU7XG5wcm9jZXNzLmVudiA9IHt9O1xucHJvY2Vzcy5hcmd2ID0gW107XG5wcm9jZXNzLnZlcnNpb24gPSAnJzsgLy8gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHJlZ2V4cCBpc3N1ZXNcbnByb2Nlc3MudmVyc2lvbnMgPSB7fTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnByb2Nlc3Mub24gPSBub29wO1xucHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLm9uY2UgPSBub29wO1xucHJvY2Vzcy5vZmYgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XG5wcm9jZXNzLmVtaXQgPSBub29wO1xuXG5wcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5cbnByb2Nlc3MuY3dkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJy8nIH07XG5wcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xucHJvY2Vzcy51bWFzayA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gMDsgfTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIGh0dHBzOi8vcmF3LmdpdGh1Yi5jb20vZmFjZWJvb2svcmVnZW5lcmF0b3IvbWFzdGVyL0xJQ0VOU0UgZmlsZS4gQW5cbiAqIGFkZGl0aW9uYWwgZ3JhbnQgb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpblxuICogdGhlIHNhbWUgZGlyZWN0b3J5LlxuICovXG5cbiEoZnVuY3Rpb24oZ2xvYmFsKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIHZhciBPcCA9IE9iamVjdC5wcm90b3R5cGU7XG4gIHZhciBoYXNPd24gPSBPcC5oYXNPd25Qcm9wZXJ0eTtcbiAgdmFyIHVuZGVmaW5lZDsgLy8gTW9yZSBjb21wcmVzc2libGUgdGhhbiB2b2lkIDAuXG4gIHZhciAkU3ltYm9sID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiID8gU3ltYm9sIDoge307XG4gIHZhciBpdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuaXRlcmF0b3IgfHwgXCJAQGl0ZXJhdG9yXCI7XG4gIHZhciB0b1N0cmluZ1RhZ1N5bWJvbCA9ICRTeW1ib2wudG9TdHJpbmdUYWcgfHwgXCJAQHRvU3RyaW5nVGFnXCI7XG5cbiAgdmFyIGluTW9kdWxlID0gdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIjtcbiAgdmFyIHJ1bnRpbWUgPSBnbG9iYWwucmVnZW5lcmF0b3JSdW50aW1lO1xuICBpZiAocnVudGltZSkge1xuICAgIGlmIChpbk1vZHVsZSkge1xuICAgICAgLy8gSWYgcmVnZW5lcmF0b3JSdW50aW1lIGlzIGRlZmluZWQgZ2xvYmFsbHkgYW5kIHdlJ3JlIGluIGEgbW9kdWxlLFxuICAgICAgLy8gbWFrZSB0aGUgZXhwb3J0cyBvYmplY3QgaWRlbnRpY2FsIHRvIHJlZ2VuZXJhdG9yUnVudGltZS5cbiAgICAgIG1vZHVsZS5leHBvcnRzID0gcnVudGltZTtcbiAgICB9XG4gICAgLy8gRG9uJ3QgYm90aGVyIGV2YWx1YXRpbmcgdGhlIHJlc3Qgb2YgdGhpcyBmaWxlIGlmIHRoZSBydW50aW1lIHdhc1xuICAgIC8vIGFscmVhZHkgZGVmaW5lZCBnbG9iYWxseS5cbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBEZWZpbmUgdGhlIHJ1bnRpbWUgZ2xvYmFsbHkgKGFzIGV4cGVjdGVkIGJ5IGdlbmVyYXRlZCBjb2RlKSBhcyBlaXRoZXJcbiAgLy8gbW9kdWxlLmV4cG9ydHMgKGlmIHdlJ3JlIGluIGEgbW9kdWxlKSBvciBhIG5ldywgZW1wdHkgb2JqZWN0LlxuICBydW50aW1lID0gZ2xvYmFsLnJlZ2VuZXJhdG9yUnVudGltZSA9IGluTW9kdWxlID8gbW9kdWxlLmV4cG9ydHMgOiB7fTtcblxuICBmdW5jdGlvbiB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gSWYgb3V0ZXJGbiBwcm92aWRlZCBhbmQgb3V0ZXJGbi5wcm90b3R5cGUgaXMgYSBHZW5lcmF0b3IsIHRoZW4gb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IuXG4gICAgdmFyIHByb3RvR2VuZXJhdG9yID0gb3V0ZXJGbiAmJiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvciA/IG91dGVyRm4gOiBHZW5lcmF0b3I7XG4gICAgdmFyIGdlbmVyYXRvciA9IE9iamVjdC5jcmVhdGUocHJvdG9HZW5lcmF0b3IucHJvdG90eXBlKTtcbiAgICB2YXIgY29udGV4dCA9IG5ldyBDb250ZXh0KHRyeUxvY3NMaXN0IHx8IFtdKTtcblxuICAgIC8vIFRoZSAuX2ludm9rZSBtZXRob2QgdW5pZmllcyB0aGUgaW1wbGVtZW50YXRpb25zIG9mIHRoZSAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMuXG4gICAgZ2VuZXJhdG9yLl9pbnZva2UgPSBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuXG4gICAgcmV0dXJuIGdlbmVyYXRvcjtcbiAgfVxuICBydW50aW1lLndyYXAgPSB3cmFwO1xuXG4gIC8vIFRyeS9jYXRjaCBoZWxwZXIgdG8gbWluaW1pemUgZGVvcHRpbWl6YXRpb25zLiBSZXR1cm5zIGEgY29tcGxldGlvblxuICAvLyByZWNvcmQgbGlrZSBjb250ZXh0LnRyeUVudHJpZXNbaV0uY29tcGxldGlvbi4gVGhpcyBpbnRlcmZhY2UgY291bGRcbiAgLy8gaGF2ZSBiZWVuIChhbmQgd2FzIHByZXZpb3VzbHkpIGRlc2lnbmVkIHRvIHRha2UgYSBjbG9zdXJlIHRvIGJlXG4gIC8vIGludm9rZWQgd2l0aG91dCBhcmd1bWVudHMsIGJ1dCBpbiBhbGwgdGhlIGNhc2VzIHdlIGNhcmUgYWJvdXQgd2VcbiAgLy8gYWxyZWFkeSBoYXZlIGFuIGV4aXN0aW5nIG1ldGhvZCB3ZSB3YW50IHRvIGNhbGwsIHNvIHRoZXJlJ3Mgbm8gbmVlZFxuICAvLyB0byBjcmVhdGUgYSBuZXcgZnVuY3Rpb24gb2JqZWN0LiBXZSBjYW4gZXZlbiBnZXQgYXdheSB3aXRoIGFzc3VtaW5nXG4gIC8vIHRoZSBtZXRob2QgdGFrZXMgZXhhY3RseSBvbmUgYXJndW1lbnQsIHNpbmNlIHRoYXQgaGFwcGVucyB0byBiZSB0cnVlXG4gIC8vIGluIGV2ZXJ5IGNhc2UsIHNvIHdlIGRvbid0IGhhdmUgdG8gdG91Y2ggdGhlIGFyZ3VtZW50cyBvYmplY3QuIFRoZVxuICAvLyBvbmx5IGFkZGl0aW9uYWwgYWxsb2NhdGlvbiByZXF1aXJlZCBpcyB0aGUgY29tcGxldGlvbiByZWNvcmQsIHdoaWNoXG4gIC8vIGhhcyBhIHN0YWJsZSBzaGFwZSBhbmQgc28gaG9wZWZ1bGx5IHNob3VsZCBiZSBjaGVhcCB0byBhbGxvY2F0ZS5cbiAgZnVuY3Rpb24gdHJ5Q2F0Y2goZm4sIG9iaiwgYXJnKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwibm9ybWFsXCIsIGFyZzogZm4uY2FsbChvYmosIGFyZykgfTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwidGhyb3dcIiwgYXJnOiBlcnIgfTtcbiAgICB9XG4gIH1cblxuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRTdGFydCA9IFwic3VzcGVuZGVkU3RhcnRcIjtcbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkWWllbGQgPSBcInN1c3BlbmRlZFlpZWxkXCI7XG4gIHZhciBHZW5TdGF0ZUV4ZWN1dGluZyA9IFwiZXhlY3V0aW5nXCI7XG4gIHZhciBHZW5TdGF0ZUNvbXBsZXRlZCA9IFwiY29tcGxldGVkXCI7XG5cbiAgLy8gUmV0dXJuaW5nIHRoaXMgb2JqZWN0IGZyb20gdGhlIGlubmVyRm4gaGFzIHRoZSBzYW1lIGVmZmVjdCBhc1xuICAvLyBicmVha2luZyBvdXQgb2YgdGhlIGRpc3BhdGNoIHN3aXRjaCBzdGF0ZW1lbnQuXG4gIHZhciBDb250aW51ZVNlbnRpbmVsID0ge307XG5cbiAgLy8gRHVtbXkgY29uc3RydWN0b3IgZnVuY3Rpb25zIHRoYXQgd2UgdXNlIGFzIHRoZSAuY29uc3RydWN0b3IgYW5kXG4gIC8vIC5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgcHJvcGVydGllcyBmb3IgZnVuY3Rpb25zIHRoYXQgcmV0dXJuIEdlbmVyYXRvclxuICAvLyBvYmplY3RzLiBGb3IgZnVsbCBzcGVjIGNvbXBsaWFuY2UsIHlvdSBtYXkgd2lzaCB0byBjb25maWd1cmUgeW91clxuICAvLyBtaW5pZmllciBub3QgdG8gbWFuZ2xlIHRoZSBuYW1lcyBvZiB0aGVzZSB0d28gZnVuY3Rpb25zLlxuICBmdW5jdGlvbiBHZW5lcmF0b3IoKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvbigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKCkge31cblxuICAvLyBUaGlzIGlzIGEgcG9seWZpbGwgZm9yICVJdGVyYXRvclByb3RvdHlwZSUgZm9yIGVudmlyb25tZW50cyB0aGF0XG4gIC8vIGRvbid0IG5hdGl2ZWx5IHN1cHBvcnQgaXQuXG4gIHZhciBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuICBJdGVyYXRvclByb3RvdHlwZVtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgdmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuICB2YXIgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90byAmJiBnZXRQcm90byhnZXRQcm90byh2YWx1ZXMoW10pKSk7XG4gIGlmIChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAmJlxuICAgICAgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgIT09IE9wICYmXG4gICAgICBoYXNPd24uY2FsbChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSwgaXRlcmF0b3JTeW1ib2wpKSB7XG4gICAgLy8gVGhpcyBlbnZpcm9ubWVudCBoYXMgYSBuYXRpdmUgJUl0ZXJhdG9yUHJvdG90eXBlJTsgdXNlIGl0IGluc3RlYWRcbiAgICAvLyBvZiB0aGUgcG9seWZpbGwuXG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBOYXRpdmVJdGVyYXRvclByb3RvdHlwZTtcbiAgfVxuXG4gIHZhciBHcCA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLnByb3RvdHlwZSA9XG4gICAgR2VuZXJhdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUpO1xuICBHZW5lcmF0b3JGdW5jdGlvbi5wcm90b3R5cGUgPSBHcC5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uO1xuICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZVt0b1N0cmluZ1RhZ1N5bWJvbF0gPVxuICAgIEdlbmVyYXRvckZ1bmN0aW9uLmRpc3BsYXlOYW1lID0gXCJHZW5lcmF0b3JGdW5jdGlvblwiO1xuXG4gIC8vIEhlbHBlciBmb3IgZGVmaW5pbmcgdGhlIC5uZXh0LCAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMgb2YgdGhlXG4gIC8vIEl0ZXJhdG9yIGludGVyZmFjZSBpbiB0ZXJtcyBvZiBhIHNpbmdsZSAuX2ludm9rZSBtZXRob2QuXG4gIGZ1bmN0aW9uIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhwcm90b3R5cGUpIHtcbiAgICBbXCJuZXh0XCIsIFwidGhyb3dcIiwgXCJyZXR1cm5cIl0uZm9yRWFjaChmdW5jdGlvbihtZXRob2QpIHtcbiAgICAgIHByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24oYXJnKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbnZva2UobWV0aG9kLCBhcmcpO1xuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuXG4gIHJ1bnRpbWUuaXNHZW5lcmF0b3JGdW5jdGlvbiA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIHZhciBjdG9yID0gdHlwZW9mIGdlbkZ1biA9PT0gXCJmdW5jdGlvblwiICYmIGdlbkZ1bi5jb25zdHJ1Y3RvcjtcbiAgICByZXR1cm4gY3RvclxuICAgICAgPyBjdG9yID09PSBHZW5lcmF0b3JGdW5jdGlvbiB8fFxuICAgICAgICAvLyBGb3IgdGhlIG5hdGl2ZSBHZW5lcmF0b3JGdW5jdGlvbiBjb25zdHJ1Y3RvciwgdGhlIGJlc3Qgd2UgY2FuXG4gICAgICAgIC8vIGRvIGlzIHRvIGNoZWNrIGl0cyAubmFtZSBwcm9wZXJ0eS5cbiAgICAgICAgKGN0b3IuZGlzcGxheU5hbWUgfHwgY3Rvci5uYW1lKSA9PT0gXCJHZW5lcmF0b3JGdW5jdGlvblwiXG4gICAgICA6IGZhbHNlO1xuICB9O1xuXG4gIHJ1bnRpbWUubWFyayA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIGlmIChPYmplY3Quc2V0UHJvdG90eXBlT2YpIHtcbiAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihnZW5GdW4sIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ2VuRnVuLl9fcHJvdG9fXyA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICAgICAgaWYgKCEodG9TdHJpbmdUYWdTeW1ib2wgaW4gZ2VuRnVuKSkge1xuICAgICAgICBnZW5GdW5bdG9TdHJpbmdUYWdTeW1ib2xdID0gXCJHZW5lcmF0b3JGdW5jdGlvblwiO1xuICAgICAgfVxuICAgIH1cbiAgICBnZW5GdW4ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShHcCk7XG4gICAgcmV0dXJuIGdlbkZ1bjtcbiAgfTtcblxuICAvLyBXaXRoaW4gdGhlIGJvZHkgb2YgYW55IGFzeW5jIGZ1bmN0aW9uLCBgYXdhaXQgeGAgaXMgdHJhbnNmb3JtZWQgdG9cbiAgLy8gYHlpZWxkIHJlZ2VuZXJhdG9yUnVudGltZS5hd3JhcCh4KWAsIHNvIHRoYXQgdGhlIHJ1bnRpbWUgY2FuIHRlc3RcbiAgLy8gYGhhc093bi5jYWxsKHZhbHVlLCBcIl9fYXdhaXRcIilgIHRvIGRldGVybWluZSBpZiB0aGUgeWllbGRlZCB2YWx1ZSBpc1xuICAvLyBtZWFudCB0byBiZSBhd2FpdGVkLlxuICBydW50aW1lLmF3cmFwID0gZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIHsgX19hd2FpdDogYXJnIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gQXN5bmNJdGVyYXRvcihnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGdlbmVyYXRvclttZXRob2RdLCBnZW5lcmF0b3IsIGFyZyk7XG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICByZWplY3QocmVjb3JkLmFyZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgcmVzdWx0ID0gcmVjb3JkLmFyZztcbiAgICAgICAgdmFyIHZhbHVlID0gcmVzdWx0LnZhbHVlO1xuICAgICAgICBpZiAodmFsdWUgJiZcbiAgICAgICAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgICAgICAgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKSkge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodmFsdWUuX19hd2FpdCkudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgaW52b2tlKFwibmV4dFwiLCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgIGludm9rZShcInRocm93XCIsIGVyciwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4oZnVuY3Rpb24odW53cmFwcGVkKSB7XG4gICAgICAgICAgLy8gV2hlbiBhIHlpZWxkZWQgUHJvbWlzZSBpcyByZXNvbHZlZCwgaXRzIGZpbmFsIHZhbHVlIGJlY29tZXNcbiAgICAgICAgICAvLyB0aGUgLnZhbHVlIG9mIHRoZSBQcm9taXNlPHt2YWx1ZSxkb25lfT4gcmVzdWx0IGZvciB0aGVcbiAgICAgICAgICAvLyBjdXJyZW50IGl0ZXJhdGlvbi4gSWYgdGhlIFByb21pc2UgaXMgcmVqZWN0ZWQsIGhvd2V2ZXIsIHRoZVxuICAgICAgICAgIC8vIHJlc3VsdCBmb3IgdGhpcyBpdGVyYXRpb24gd2lsbCBiZSByZWplY3RlZCB3aXRoIHRoZSBzYW1lXG4gICAgICAgICAgLy8gcmVhc29uLiBOb3RlIHRoYXQgcmVqZWN0aW9ucyBvZiB5aWVsZGVkIFByb21pc2VzIGFyZSBub3RcbiAgICAgICAgICAvLyB0aHJvd24gYmFjayBpbnRvIHRoZSBnZW5lcmF0b3IgZnVuY3Rpb24sIGFzIGlzIHRoZSBjYXNlXG4gICAgICAgICAgLy8gd2hlbiBhbiBhd2FpdGVkIFByb21pc2UgaXMgcmVqZWN0ZWQuIFRoaXMgZGlmZmVyZW5jZSBpblxuICAgICAgICAgIC8vIGJlaGF2aW9yIGJldHdlZW4geWllbGQgYW5kIGF3YWl0IGlzIGltcG9ydGFudCwgYmVjYXVzZSBpdFxuICAgICAgICAgIC8vIGFsbG93cyB0aGUgY29uc3VtZXIgdG8gZGVjaWRlIHdoYXQgdG8gZG8gd2l0aCB0aGUgeWllbGRlZFxuICAgICAgICAgIC8vIHJlamVjdGlvbiAoc3dhbGxvdyBpdCBhbmQgY29udGludWUsIG1hbnVhbGx5IC50aHJvdyBpdCBiYWNrXG4gICAgICAgICAgLy8gaW50byB0aGUgZ2VuZXJhdG9yLCBhYmFuZG9uIGl0ZXJhdGlvbiwgd2hhdGV2ZXIpLiBXaXRoXG4gICAgICAgICAgLy8gYXdhaXQsIGJ5IGNvbnRyYXN0LCB0aGVyZSBpcyBubyBvcHBvcnR1bml0eSB0byBleGFtaW5lIHRoZVxuICAgICAgICAgIC8vIHJlamVjdGlvbiByZWFzb24gb3V0c2lkZSB0aGUgZ2VuZXJhdG9yIGZ1bmN0aW9uLCBzbyB0aGVcbiAgICAgICAgICAvLyBvbmx5IG9wdGlvbiBpcyB0byB0aHJvdyBpdCBmcm9tIHRoZSBhd2FpdCBleHByZXNzaW9uLCBhbmRcbiAgICAgICAgICAvLyBsZXQgdGhlIGdlbmVyYXRvciBmdW5jdGlvbiBoYW5kbGUgdGhlIGV4Y2VwdGlvbi5cbiAgICAgICAgICByZXN1bHQudmFsdWUgPSB1bndyYXBwZWQ7XG4gICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9LCByZWplY3QpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0eXBlb2YgcHJvY2VzcyA9PT0gXCJvYmplY3RcIiAmJiBwcm9jZXNzLmRvbWFpbikge1xuICAgICAgaW52b2tlID0gcHJvY2Vzcy5kb21haW4uYmluZChpbnZva2UpO1xuICAgIH1cblxuICAgIHZhciBwcmV2aW91c1Byb21pc2U7XG5cbiAgICBmdW5jdGlvbiBlbnF1ZXVlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBmdW5jdGlvbiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwcmV2aW91c1Byb21pc2UgPVxuICAgICAgICAvLyBJZiBlbnF1ZXVlIGhhcyBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gd2Ugd2FudCB0byB3YWl0IHVudGlsXG4gICAgICAgIC8vIGFsbCBwcmV2aW91cyBQcm9taXNlcyBoYXZlIGJlZW4gcmVzb2x2ZWQgYmVmb3JlIGNhbGxpbmcgaW52b2tlLFxuICAgICAgICAvLyBzbyB0aGF0IHJlc3VsdHMgYXJlIGFsd2F5cyBkZWxpdmVyZWQgaW4gdGhlIGNvcnJlY3Qgb3JkZXIuIElmXG4gICAgICAgIC8vIGVucXVldWUgaGFzIG5vdCBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gaXQgaXMgaW1wb3J0YW50IHRvXG4gICAgICAgIC8vIGNhbGwgaW52b2tlIGltbWVkaWF0ZWx5LCB3aXRob3V0IHdhaXRpbmcgb24gYSBjYWxsYmFjayB0byBmaXJlLFxuICAgICAgICAvLyBzbyB0aGF0IHRoZSBhc3luYyBnZW5lcmF0b3IgZnVuY3Rpb24gaGFzIHRoZSBvcHBvcnR1bml0eSB0byBkb1xuICAgICAgICAvLyBhbnkgbmVjZXNzYXJ5IHNldHVwIGluIGEgcHJlZGljdGFibGUgd2F5LiBUaGlzIHByZWRpY3RhYmlsaXR5XG4gICAgICAgIC8vIGlzIHdoeSB0aGUgUHJvbWlzZSBjb25zdHJ1Y3RvciBzeW5jaHJvbm91c2x5IGludm9rZXMgaXRzXG4gICAgICAgIC8vIGV4ZWN1dG9yIGNhbGxiYWNrLCBhbmQgd2h5IGFzeW5jIGZ1bmN0aW9ucyBzeW5jaHJvbm91c2x5XG4gICAgICAgIC8vIGV4ZWN1dGUgY29kZSBiZWZvcmUgdGhlIGZpcnN0IGF3YWl0LiBTaW5jZSB3ZSBpbXBsZW1lbnQgc2ltcGxlXG4gICAgICAgIC8vIGFzeW5jIGZ1bmN0aW9ucyBpbiB0ZXJtcyBvZiBhc3luYyBnZW5lcmF0b3JzLCBpdCBpcyBlc3BlY2lhbGx5XG4gICAgICAgIC8vIGltcG9ydGFudCB0byBnZXQgdGhpcyByaWdodCwgZXZlbiB0aG91Z2ggaXQgcmVxdWlyZXMgY2FyZS5cbiAgICAgICAgcHJldmlvdXNQcm9taXNlID8gcHJldmlvdXNQcm9taXNlLnRoZW4oXG4gICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcsXG4gICAgICAgICAgLy8gQXZvaWQgcHJvcGFnYXRpbmcgZmFpbHVyZXMgdG8gUHJvbWlzZXMgcmV0dXJuZWQgYnkgbGF0ZXJcbiAgICAgICAgICAvLyBpbnZvY2F0aW9ucyBvZiB0aGUgaXRlcmF0b3IuXG4gICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmdcbiAgICAgICAgKSA6IGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCk7XG4gICAgfVxuXG4gICAgLy8gRGVmaW5lIHRoZSB1bmlmaWVkIGhlbHBlciBtZXRob2QgdGhhdCBpcyB1c2VkIHRvIGltcGxlbWVudCAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIChzZWUgZGVmaW5lSXRlcmF0b3JNZXRob2RzKS5cbiAgICB0aGlzLl9pbnZva2UgPSBlbnF1ZXVlO1xuICB9XG5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEFzeW5jSXRlcmF0b3IucHJvdG90eXBlKTtcbiAgcnVudGltZS5Bc3luY0l0ZXJhdG9yID0gQXN5bmNJdGVyYXRvcjtcblxuICAvLyBOb3RlIHRoYXQgc2ltcGxlIGFzeW5jIGZ1bmN0aW9ucyBhcmUgaW1wbGVtZW50ZWQgb24gdG9wIG9mXG4gIC8vIEFzeW5jSXRlcmF0b3Igb2JqZWN0czsgdGhleSBqdXN0IHJldHVybiBhIFByb21pc2UgZm9yIHRoZSB2YWx1ZSBvZlxuICAvLyB0aGUgZmluYWwgcmVzdWx0IHByb2R1Y2VkIGJ5IHRoZSBpdGVyYXRvci5cbiAgcnVudGltZS5hc3luYyA9IGZ1bmN0aW9uKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7XG4gICAgdmFyIGl0ZXIgPSBuZXcgQXN5bmNJdGVyYXRvcihcbiAgICAgIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpXG4gICAgKTtcblxuICAgIHJldHVybiBydW50aW1lLmlzR2VuZXJhdG9yRnVuY3Rpb24ob3V0ZXJGbilcbiAgICAgID8gaXRlciAvLyBJZiBvdXRlckZuIGlzIGEgZ2VuZXJhdG9yLCByZXR1cm4gdGhlIGZ1bGwgaXRlcmF0b3IuXG4gICAgICA6IGl0ZXIubmV4dCgpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdC5kb25lID8gcmVzdWx0LnZhbHVlIDogaXRlci5uZXh0KCk7XG4gICAgICAgIH0pO1xuICB9O1xuXG4gIGZ1bmN0aW9uIG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCkge1xuICAgIHZhciBzdGF0ZSA9IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQ7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlRXhlY3V0aW5nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IHJ1bm5pbmdcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVDb21wbGV0ZWQpIHtcbiAgICAgICAgaWYgKG1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgdGhyb3cgYXJnO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQmUgZm9yZ2l2aW5nLCBwZXIgMjUuMy4zLjMuMyBvZiB0aGUgc3BlYzpcbiAgICAgICAgLy8gaHR0cHM6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLWdlbmVyYXRvcnJlc3VtZVxuICAgICAgICByZXR1cm4gZG9uZVJlc3VsdCgpO1xuICAgICAgfVxuXG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICB2YXIgZGVsZWdhdGUgPSBjb250ZXh0LmRlbGVnYXRlO1xuICAgICAgICBpZiAoZGVsZWdhdGUpIHtcbiAgICAgICAgICBpZiAobWV0aG9kID09PSBcInJldHVyblwiIHx8XG4gICAgICAgICAgICAgIChtZXRob2QgPT09IFwidGhyb3dcIiAmJiBkZWxlZ2F0ZS5pdGVyYXRvclttZXRob2RdID09PSB1bmRlZmluZWQpKSB7XG4gICAgICAgICAgICAvLyBBIHJldHVybiBvciB0aHJvdyAod2hlbiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIG5vIHRocm93XG4gICAgICAgICAgICAvLyBtZXRob2QpIGFsd2F5cyB0ZXJtaW5hdGVzIHRoZSB5aWVsZCogbG9vcC5cbiAgICAgICAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICAgICAgICAvLyBJZiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIGEgcmV0dXJuIG1ldGhvZCwgZ2l2ZSBpdCBhXG4gICAgICAgICAgICAvLyBjaGFuY2UgdG8gY2xlYW4gdXAuXG4gICAgICAgICAgICB2YXIgcmV0dXJuTWV0aG9kID0gZGVsZWdhdGUuaXRlcmF0b3JbXCJyZXR1cm5cIl07XG4gICAgICAgICAgICBpZiAocmV0dXJuTWV0aG9kKSB7XG4gICAgICAgICAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChyZXR1cm5NZXRob2QsIGRlbGVnYXRlLml0ZXJhdG9yLCBhcmcpO1xuICAgICAgICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgICAgIC8vIElmIHRoZSByZXR1cm4gbWV0aG9kIHRocmV3IGFuIGV4Y2VwdGlvbiwgbGV0IHRoYXRcbiAgICAgICAgICAgICAgICAvLyBleGNlcHRpb24gcHJldmFpbCBvdmVyIHRoZSBvcmlnaW5hbCByZXR1cm4gb3IgdGhyb3cuXG4gICAgICAgICAgICAgICAgbWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgICAgICAgICAgIGFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKG1ldGhvZCA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICAgICAgICAvLyBDb250aW51ZSB3aXRoIHRoZSBvdXRlciByZXR1cm4sIG5vdyB0aGF0IHRoZSBkZWxlZ2F0ZVxuICAgICAgICAgICAgICAvLyBpdGVyYXRvciBoYXMgYmVlbiB0ZXJtaW5hdGVkLlxuICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goXG4gICAgICAgICAgICBkZWxlZ2F0ZS5pdGVyYXRvclttZXRob2RdLFxuICAgICAgICAgICAgZGVsZWdhdGUuaXRlcmF0b3IsXG4gICAgICAgICAgICBhcmdcbiAgICAgICAgICApO1xuXG4gICAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICAgICAgICAvLyBMaWtlIHJldHVybmluZyBnZW5lcmF0b3IudGhyb3codW5jYXVnaHQpLCBidXQgd2l0aG91dCB0aGVcbiAgICAgICAgICAgIC8vIG92ZXJoZWFkIG9mIGFuIGV4dHJhIGZ1bmN0aW9uIGNhbGwuXG4gICAgICAgICAgICBtZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgICAgICBhcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gRGVsZWdhdGUgZ2VuZXJhdG9yIHJhbiBhbmQgaGFuZGxlZCBpdHMgb3duIGV4Y2VwdGlvbnMgc29cbiAgICAgICAgICAvLyByZWdhcmRsZXNzIG9mIHdoYXQgdGhlIG1ldGhvZCB3YXMsIHdlIGNvbnRpbnVlIGFzIGlmIGl0IGlzXG4gICAgICAgICAgLy8gXCJuZXh0XCIgd2l0aCBhbiB1bmRlZmluZWQgYXJnLlxuICAgICAgICAgIG1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICAgIGFyZyA9IHVuZGVmaW5lZDtcblxuICAgICAgICAgIHZhciBpbmZvID0gcmVjb3JkLmFyZztcbiAgICAgICAgICBpZiAoaW5mby5kb25lKSB7XG4gICAgICAgICAgICBjb250ZXh0W2RlbGVnYXRlLnJlc3VsdE5hbWVdID0gaW5mby52YWx1ZTtcbiAgICAgICAgICAgIGNvbnRleHQubmV4dCA9IGRlbGVnYXRlLm5leHRMb2M7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVTdXNwZW5kZWRZaWVsZDtcbiAgICAgICAgICAgIHJldHVybiBpbmZvO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG1ldGhvZCA9PT0gXCJuZXh0XCIpIHtcbiAgICAgICAgICAvLyBTZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3NcbiAgICAgICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgICAgIGNvbnRleHQuc2VudCA9IGNvbnRleHQuX3NlbnQgPSBhcmc7XG5cbiAgICAgICAgfSBlbHNlIGlmIChtZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydCkge1xuICAgICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAgIHRocm93IGFyZztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihhcmcpKSB7XG4gICAgICAgICAgICAvLyBJZiB0aGUgZGlzcGF0Y2hlZCBleGNlcHRpb24gd2FzIGNhdWdodCBieSBhIGNhdGNoIGJsb2NrLFxuICAgICAgICAgICAgLy8gdGhlbiBsZXQgdGhhdCBjYXRjaCBibG9jayBoYW5kbGUgdGhlIGV4Y2VwdGlvbiBub3JtYWxseS5cbiAgICAgICAgICAgIG1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICAgICAgYXJnID0gdW5kZWZpbmVkO1xuICAgICAgICAgIH1cblxuICAgICAgICB9IGVsc2UgaWYgKG1ldGhvZCA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICAgIGNvbnRleHQuYWJydXB0KFwicmV0dXJuXCIsIGFyZyk7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0ZSA9IEdlblN0YXRlRXhlY3V0aW5nO1xuXG4gICAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiKSB7XG4gICAgICAgICAgLy8gSWYgYW4gZXhjZXB0aW9uIGlzIHRocm93biBmcm9tIGlubmVyRm4sIHdlIGxlYXZlIHN0YXRlID09PVxuICAgICAgICAgIC8vIEdlblN0YXRlRXhlY3V0aW5nIGFuZCBsb29wIGJhY2sgZm9yIGFub3RoZXIgaW52b2NhdGlvbi5cbiAgICAgICAgICBzdGF0ZSA9IGNvbnRleHQuZG9uZVxuICAgICAgICAgICAgPyBHZW5TdGF0ZUNvbXBsZXRlZFxuICAgICAgICAgICAgOiBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkO1xuXG4gICAgICAgICAgdmFyIGluZm8gPSB7XG4gICAgICAgICAgICB2YWx1ZTogcmVjb3JkLmFyZyxcbiAgICAgICAgICAgIGRvbmU6IGNvbnRleHQuZG9uZVxuICAgICAgICAgIH07XG5cbiAgICAgICAgICBpZiAocmVjb3JkLmFyZyA9PT0gQ29udGludWVTZW50aW5lbCkge1xuICAgICAgICAgICAgaWYgKGNvbnRleHQuZGVsZWdhdGUgJiYgbWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAgICAgICAvLyBEZWxpYmVyYXRlbHkgZm9yZ2V0IHRoZSBsYXN0IHNlbnQgdmFsdWUgc28gdGhhdCB3ZSBkb24ndFxuICAgICAgICAgICAgICAvLyBhY2NpZGVudGFsbHkgcGFzcyBpdCBvbiB0byB0aGUgZGVsZWdhdGUuXG4gICAgICAgICAgICAgIGFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGluZm87XG4gICAgICAgICAgfVxuXG4gICAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgLy8gRGlzcGF0Y2ggdGhlIGV4Y2VwdGlvbiBieSBsb29waW5nIGJhY2sgYXJvdW5kIHRvIHRoZVxuICAgICAgICAgIC8vIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oYXJnKSBjYWxsIGFib3ZlLlxuICAgICAgICAgIG1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgICBhcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIC8vIERlZmluZSBHZW5lcmF0b3IucHJvdG90eXBlLntuZXh0LHRocm93LHJldHVybn0gaW4gdGVybXMgb2YgdGhlXG4gIC8vIHVuaWZpZWQgLl9pbnZva2UgaGVscGVyIG1ldGhvZC5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEdwKTtcblxuICBHcFt0b1N0cmluZ1RhZ1N5bWJvbF0gPSBcIkdlbmVyYXRvclwiO1xuXG4gIEdwLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFwiW29iamVjdCBHZW5lcmF0b3JdXCI7XG4gIH07XG5cbiAgZnVuY3Rpb24gcHVzaFRyeUVudHJ5KGxvY3MpIHtcbiAgICB2YXIgZW50cnkgPSB7IHRyeUxvYzogbG9jc1swXSB9O1xuXG4gICAgaWYgKDEgaW4gbG9jcykge1xuICAgICAgZW50cnkuY2F0Y2hMb2MgPSBsb2NzWzFdO1xuICAgIH1cblxuICAgIGlmICgyIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmZpbmFsbHlMb2MgPSBsb2NzWzJdO1xuICAgICAgZW50cnkuYWZ0ZXJMb2MgPSBsb2NzWzNdO1xuICAgIH1cblxuICAgIHRoaXMudHJ5RW50cmllcy5wdXNoKGVudHJ5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc2V0VHJ5RW50cnkoZW50cnkpIHtcbiAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbiB8fCB7fTtcbiAgICByZWNvcmQudHlwZSA9IFwibm9ybWFsXCI7XG4gICAgZGVsZXRlIHJlY29yZC5hcmc7XG4gICAgZW50cnkuY29tcGxldGlvbiA9IHJlY29yZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIENvbnRleHQodHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBUaGUgcm9vdCBlbnRyeSBvYmplY3QgKGVmZmVjdGl2ZWx5IGEgdHJ5IHN0YXRlbWVudCB3aXRob3V0IGEgY2F0Y2hcbiAgICAvLyBvciBhIGZpbmFsbHkgYmxvY2spIGdpdmVzIHVzIGEgcGxhY2UgdG8gc3RvcmUgdmFsdWVzIHRocm93biBmcm9tXG4gICAgLy8gbG9jYXRpb25zIHdoZXJlIHRoZXJlIGlzIG5vIGVuY2xvc2luZyB0cnkgc3RhdGVtZW50LlxuICAgIHRoaXMudHJ5RW50cmllcyA9IFt7IHRyeUxvYzogXCJyb290XCIgfV07XG4gICAgdHJ5TG9jc0xpc3QuZm9yRWFjaChwdXNoVHJ5RW50cnksIHRoaXMpO1xuICAgIHRoaXMucmVzZXQodHJ1ZSk7XG4gIH1cblxuICBydW50aW1lLmtleXMgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICAgIGtleXMucHVzaChrZXkpO1xuICAgIH1cbiAgICBrZXlzLnJldmVyc2UoKTtcblxuICAgIC8vIFJhdGhlciB0aGFuIHJldHVybmluZyBhbiBvYmplY3Qgd2l0aCBhIG5leHQgbWV0aG9kLCB3ZSBrZWVwXG4gICAgLy8gdGhpbmdzIHNpbXBsZSBhbmQgcmV0dXJuIHRoZSBuZXh0IGZ1bmN0aW9uIGl0c2VsZi5cbiAgICByZXR1cm4gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgIHdoaWxlIChrZXlzLmxlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0ga2V5cy5wb3AoKTtcbiAgICAgICAgaWYgKGtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgICBuZXh0LnZhbHVlID0ga2V5O1xuICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRvIGF2b2lkIGNyZWF0aW5nIGFuIGFkZGl0aW9uYWwgb2JqZWN0LCB3ZSBqdXN0IGhhbmcgdGhlIC52YWx1ZVxuICAgICAgLy8gYW5kIC5kb25lIHByb3BlcnRpZXMgb2ZmIHRoZSBuZXh0IGZ1bmN0aW9uIG9iamVjdCBpdHNlbGYuIFRoaXNcbiAgICAgIC8vIGFsc28gZW5zdXJlcyB0aGF0IHRoZSBtaW5pZmllciB3aWxsIG5vdCBhbm9ueW1pemUgdGhlIGZ1bmN0aW9uLlxuICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcbiAgICAgIHJldHVybiBuZXh0O1xuICAgIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gdmFsdWVzKGl0ZXJhYmxlKSB7XG4gICAgaWYgKGl0ZXJhYmxlKSB7XG4gICAgICB2YXIgaXRlcmF0b3JNZXRob2QgPSBpdGVyYWJsZVtpdGVyYXRvclN5bWJvbF07XG4gICAgICBpZiAoaXRlcmF0b3JNZXRob2QpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yTWV0aG9kLmNhbGwoaXRlcmFibGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGl0ZXJhYmxlLm5leHQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gaXRlcmFibGU7XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNOYU4oaXRlcmFibGUubGVuZ3RoKSkge1xuICAgICAgICB2YXIgaSA9IC0xLCBuZXh0ID0gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgICAgICB3aGlsZSAoKytpIDwgaXRlcmFibGUubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duLmNhbGwoaXRlcmFibGUsIGkpKSB7XG4gICAgICAgICAgICAgIG5leHQudmFsdWUgPSBpdGVyYWJsZVtpXTtcbiAgICAgICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIG5leHQudmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcblxuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBuZXh0Lm5leHQgPSBuZXh0O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJldHVybiBhbiBpdGVyYXRvciB3aXRoIG5vIHZhbHVlcy5cbiAgICByZXR1cm4geyBuZXh0OiBkb25lUmVzdWx0IH07XG4gIH1cbiAgcnVudGltZS52YWx1ZXMgPSB2YWx1ZXM7XG5cbiAgZnVuY3Rpb24gZG9uZVJlc3VsdCgpIHtcbiAgICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIH1cblxuICBDb250ZXh0LnByb3RvdHlwZSA9IHtcbiAgICBjb25zdHJ1Y3RvcjogQ29udGV4dCxcblxuICAgIHJlc2V0OiBmdW5jdGlvbihza2lwVGVtcFJlc2V0KSB7XG4gICAgICB0aGlzLnByZXYgPSAwO1xuICAgICAgdGhpcy5uZXh0ID0gMDtcbiAgICAgIC8vIFJlc2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgdGhpcy5zZW50ID0gdGhpcy5fc2VudCA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuZG9uZSA9IGZhbHNlO1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIHRoaXMudHJ5RW50cmllcy5mb3JFYWNoKHJlc2V0VHJ5RW50cnkpO1xuXG4gICAgICBpZiAoIXNraXBUZW1wUmVzZXQpIHtcbiAgICAgICAgZm9yICh2YXIgbmFtZSBpbiB0aGlzKSB7XG4gICAgICAgICAgLy8gTm90IHN1cmUgYWJvdXQgdGhlIG9wdGltYWwgb3JkZXIgb2YgdGhlc2UgY29uZGl0aW9uczpcbiAgICAgICAgICBpZiAobmFtZS5jaGFyQXQoMCkgPT09IFwidFwiICYmXG4gICAgICAgICAgICAgIGhhc093bi5jYWxsKHRoaXMsIG5hbWUpICYmXG4gICAgICAgICAgICAgICFpc05hTigrbmFtZS5zbGljZSgxKSkpIHtcbiAgICAgICAgICAgIHRoaXNbbmFtZV0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIHN0b3A6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5kb25lID0gdHJ1ZTtcblxuICAgICAgdmFyIHJvb3RFbnRyeSA9IHRoaXMudHJ5RW50cmllc1swXTtcbiAgICAgIHZhciByb290UmVjb3JkID0gcm9vdEVudHJ5LmNvbXBsZXRpb247XG4gICAgICBpZiAocm9vdFJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcm9vdFJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLnJ2YWw7XG4gICAgfSxcblxuICAgIGRpc3BhdGNoRXhjZXB0aW9uOiBmdW5jdGlvbihleGNlcHRpb24pIHtcbiAgICAgIGlmICh0aGlzLmRvbmUpIHtcbiAgICAgICAgdGhyb3cgZXhjZXB0aW9uO1xuICAgICAgfVxuXG4gICAgICB2YXIgY29udGV4dCA9IHRoaXM7XG4gICAgICBmdW5jdGlvbiBoYW5kbGUobG9jLCBjYXVnaHQpIHtcbiAgICAgICAgcmVjb3JkLnR5cGUgPSBcInRocm93XCI7XG4gICAgICAgIHJlY29yZC5hcmcgPSBleGNlcHRpb247XG4gICAgICAgIGNvbnRleHQubmV4dCA9IGxvYztcbiAgICAgICAgcmV0dXJuICEhY2F1Z2h0O1xuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gXCJyb290XCIpIHtcbiAgICAgICAgICAvLyBFeGNlcHRpb24gdGhyb3duIG91dHNpZGUgb2YgYW55IHRyeSBibG9jayB0aGF0IGNvdWxkIGhhbmRsZVxuICAgICAgICAgIC8vIGl0LCBzbyBzZXQgdGhlIGNvbXBsZXRpb24gdmFsdWUgb2YgdGhlIGVudGlyZSBmdW5jdGlvbiB0b1xuICAgICAgICAgIC8vIHRocm93IHRoZSBleGNlcHRpb24uXG4gICAgICAgICAgcmV0dXJuIGhhbmRsZShcImVuZFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2KSB7XG4gICAgICAgICAgdmFyIGhhc0NhdGNoID0gaGFzT3duLmNhbGwoZW50cnksIFwiY2F0Y2hMb2NcIik7XG4gICAgICAgICAgdmFyIGhhc0ZpbmFsbHkgPSBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpO1xuXG4gICAgICAgICAgaWYgKGhhc0NhdGNoICYmIGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNDYXRjaCkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNGaW5hbGx5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInRyeSBzdGF0ZW1lbnQgd2l0aG91dCBjYXRjaCBvciBmaW5hbGx5XCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBhYnJ1cHQ6IGZ1bmN0aW9uKHR5cGUsIGFyZykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2ICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpICYmXG4gICAgICAgICAgICB0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgdmFyIGZpbmFsbHlFbnRyeSA9IGVudHJ5O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkgJiZcbiAgICAgICAgICAodHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgIHR5cGUgPT09IFwiY29udGludWVcIikgJiZcbiAgICAgICAgICBmaW5hbGx5RW50cnkudHJ5TG9jIDw9IGFyZyAmJlxuICAgICAgICAgIGFyZyA8PSBmaW5hbGx5RW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAvLyBJZ25vcmUgdGhlIGZpbmFsbHkgZW50cnkgaWYgY29udHJvbCBpcyBub3QganVtcGluZyB0byBhXG4gICAgICAgIC8vIGxvY2F0aW9uIG91dHNpZGUgdGhlIHRyeS9jYXRjaCBibG9jay5cbiAgICAgICAgZmluYWxseUVudHJ5ID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlY29yZCA9IGZpbmFsbHlFbnRyeSA/IGZpbmFsbHlFbnRyeS5jb21wbGV0aW9uIDoge307XG4gICAgICByZWNvcmQudHlwZSA9IHR5cGU7XG4gICAgICByZWNvcmQuYXJnID0gYXJnO1xuXG4gICAgICBpZiAoZmluYWxseUVudHJ5KSB7XG4gICAgICAgIHRoaXMubmV4dCA9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5jb21wbGV0ZShyZWNvcmQpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9LFxuXG4gICAgY29tcGxldGU6IGZ1bmN0aW9uKHJlY29yZCwgYWZ0ZXJMb2MpIHtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHRocm93IHJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgcmVjb3JkLnR5cGUgPT09IFwiY29udGludWVcIikge1xuICAgICAgICB0aGlzLm5leHQgPSByZWNvcmQuYXJnO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICB0aGlzLnJ2YWwgPSByZWNvcmQuYXJnO1xuICAgICAgICB0aGlzLm5leHQgPSBcImVuZFwiO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIiAmJiBhZnRlckxvYykge1xuICAgICAgICB0aGlzLm5leHQgPSBhZnRlckxvYztcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgZmluaXNoOiBmdW5jdGlvbihmaW5hbGx5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LmZpbmFsbHlMb2MgPT09IGZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB0aGlzLmNvbXBsZXRlKGVudHJ5LmNvbXBsZXRpb24sIGVudHJ5LmFmdGVyTG9jKTtcbiAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBcImNhdGNoXCI6IGZ1bmN0aW9uKHRyeUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09IHRyeUxvYykge1xuICAgICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uO1xuICAgICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICB2YXIgdGhyb3duID0gcmVjb3JkLmFyZztcbiAgICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdGhyb3duO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRoZSBjb250ZXh0LmNhdGNoIG1ldGhvZCBtdXN0IG9ubHkgYmUgY2FsbGVkIHdpdGggYSBsb2NhdGlvblxuICAgICAgLy8gYXJndW1lbnQgdGhhdCBjb3JyZXNwb25kcyB0byBhIGtub3duIGNhdGNoIGJsb2NrLlxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaWxsZWdhbCBjYXRjaCBhdHRlbXB0XCIpO1xuICAgIH0sXG5cbiAgICBkZWxlZ2F0ZVlpZWxkOiBmdW5jdGlvbihpdGVyYWJsZSwgcmVzdWx0TmFtZSwgbmV4dExvYykge1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IHtcbiAgICAgICAgaXRlcmF0b3I6IHZhbHVlcyhpdGVyYWJsZSksXG4gICAgICAgIHJlc3VsdE5hbWU6IHJlc3VsdE5hbWUsXG4gICAgICAgIG5leHRMb2M6IG5leHRMb2NcbiAgICAgIH07XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cbiAgfTtcbn0pKFxuICAvLyBBbW9uZyB0aGUgdmFyaW91cyB0cmlja3MgZm9yIG9idGFpbmluZyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsXG4gIC8vIG9iamVjdCwgdGhpcyBzZWVtcyB0byBiZSB0aGUgbW9zdCByZWxpYWJsZSB0ZWNobmlxdWUgdGhhdCBkb2VzIG5vdFxuICAvLyB1c2UgaW5kaXJlY3QgZXZhbCAod2hpY2ggdmlvbGF0ZXMgQ29udGVudCBTZWN1cml0eSBQb2xpY3kpLlxuICB0eXBlb2YgZ2xvYmFsID09PSBcIm9iamVjdFwiID8gZ2xvYmFsIDpcbiAgdHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIiA/IHdpbmRvdyA6XG4gIHR5cGVvZiBzZWxmID09PSBcIm9iamVjdFwiID8gc2VsZiA6IHRoaXNcbik7XG4iLCIvKipcbiAqIEJpdGNvaW4gQWRkcmVzc1xuICogPT09PT09PT09PT09PT09XG4gKlxuICogQSBiaXRjb2luIGFkZHJlc3MuIE5vcm1hbCB1c2UgY2FzZXM6XG4gKiBsZXQgYWRkcmVzcyA9IG5ldyBBZGRyZXNzKCkuZnJvbVB1YktleShwdWJLZXkpXG4gKiBsZXQgYWRkcmVzcyA9IG5ldyBBZGRyZXNzKCkuZnJvbVJlZGVlbVNjcmlwdChzY3JpcHQpXG4gKiBsZXQgYWRkcmVzcyA9IG5ldyBBZGRyZXNzKCkuZnJvbVN0cmluZyhzdHJpbmcpXG4gKiBsZXQgc3RyaW5nID0gYWRkcmVzcy50b1N0cmluZygpXG4gKiBsZXQgc2NyaXB0ID0gYWRkcmVzcy50b1NjcmlwdCgpXG4gKiBsZXQgaXNWYWxpZCA9IEFkZHJlc3MuaXNWYWxpZChzdHJpbmcpXG4gKlxuICogQ2FuIGFsc28gZG8gdGVzdG5ldDpcbiAqIGxldCBhZGRyZXNzID0gQWRkcmVzcy5UZXN0bmV0KClcbiAqXG4gKiBOb3RlIHRoYXQgYW4gQWRkcmVzcyBhbmQgYW4gQWRkciBhcmUgdHdvIGNvbXBsZXRlbHkgZGlmZmVyZW50IHRoaW5ncy4gQW5cbiAqIEFkZHJlc3MgaXMgd2hhdCB5b3Ugc2VuZCBiaXRjb2luIHRvLiBBbiBBZGRyIGlzIGFuIGlwIGFkZHJlc3MgYW5kIHBvcnQgdGhhdFxuICogeW91IGNvbm5lY3QgdG8gb3ZlciB0aGUgaW50ZXJuZXQuXG4gKi9cbid1c2Ugc3RyaWN0J1xubGV0IGRlcGVuZGVuY2llcyA9IHtcbiAgQmFzZTU4Q2hlY2s6IHJlcXVpcmUoJy4vYmFzZS01OC1jaGVjaycpLFxuICBDb25zdGFudHM6IHJlcXVpcmUoJy4vY29uc3RhbnRzJykuRGVmYXVsdC5BZGRyZXNzLFxuICBIYXNoOiByZXF1aXJlKCcuL2hhc2gnKSxcbiAgT3BDb2RlOiByZXF1aXJlKCcuL29wLWNvZGUnKSxcbiAgUHViS2V5OiByZXF1aXJlKCcuL3B1Yi1rZXknKSxcbiAgU2NyaXB0OiByZXF1aXJlKCcuL3NjcmlwdCcpLFxuICBTdHJ1Y3Q6IHJlcXVpcmUoJy4vc3RydWN0JyksXG4gIFdvcmtlcnM6IHJlcXVpcmUoJy4vd29ya2VycycpLFxuICBhc2luazogcmVxdWlyZSgnYXNpbmsnKVxufVxuXG5sZXQgaW5qZWN0ID0gZnVuY3Rpb24gKGRlcHMpIHtcbiAgbGV0IEJhc2U1OENoZWNrID0gZGVwcy5CYXNlNThDaGVja1xuICBsZXQgQ29uc3RhbnRzID0gZGVwcy5Db25zdGFudHNcbiAgbGV0IEhhc2ggPSBkZXBzLkhhc2hcbiAgbGV0IE9wQ29kZSA9IGRlcHMuT3BDb2RlXG4gIGxldCBQdWJLZXkgPSBkZXBzLlB1YktleVxuICBsZXQgU2NyaXB0ID0gZGVwcy5TY3JpcHRcbiAgbGV0IFN0cnVjdCA9IGRlcHMuU3RydWN0XG4gIGxldCBXb3JrZXJzID0gZGVwcy5Xb3JrZXJzXG4gIGxldCBhc2luayA9IGRlcHMuYXNpbmtcblxuICBjbGFzcyBBZGRyZXNzIGV4dGVuZHMgU3RydWN0IHtcbiAgICBjb25zdHJ1Y3RvciAodmVyc2lvbkJ5dGVOdW0sIGhhc2hCdWYpIHtcbiAgICAgIHN1cGVyKHt2ZXJzaW9uQnl0ZU51bSwgaGFzaEJ1Zn0pXG4gICAgfVxuXG4gICAgZnJvbUJ1ZmZlciAoYnVmKSB7XG4gICAgICBpZiAoYnVmLmxlbmd0aCAhPT0gMSArIDIwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignYWRkcmVzcyBidWZmZXJzIG11c3QgYmUgZXhhY3RseSAyMSBieXRlcycpXG4gICAgICB9XG4gICAgICBpZiAoYnVmWzBdICE9PSBDb25zdGFudHMucHViS2V5SGFzaCAmJiBidWZbMF0gIT09IENvbnN0YW50cy5zY3JpcHRIYXNoKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignYWRkcmVzczogaW52YWxpZCB2ZXJzaW9uQnl0ZU51bSBieXRlJylcbiAgICAgIH1cbiAgICAgIHRoaXMudmVyc2lvbkJ5dGVOdW0gPSBidWZbMF1cbiAgICAgIHRoaXMuaGFzaEJ1ZiA9IGJ1Zi5zbGljZSgxKVxuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG5cbiAgICBmcm9tUHViS2V5SGFzaEJ1ZiAoaGFzaEJ1Zikge1xuICAgICAgdGhpcy5oYXNoQnVmID0gaGFzaEJ1ZlxuICAgICAgdGhpcy52ZXJzaW9uQnl0ZU51bSA9IENvbnN0YW50c1sncHViS2V5SGFzaCddXG4gICAgICByZXR1cm4gdGhpc1xuICAgIH1cblxuICAgIHN0YXRpYyBmcm9tUHViS2V5SGFzaEJ1ZiAoaGFzaEJ1Zikge1xuICAgICAgcmV0dXJuIG5ldyB0aGlzKCkuZnJvbVB1YktleUhhc2hCdWYoaGFzaEJ1ZilcbiAgICB9XG5cbiAgICBmcm9tUHViS2V5IChwdWJLZXkpIHtcbiAgICAgIGxldCBoYXNoQnVmID0gSGFzaC5zaGEyNTZSaXBlbWQxNjAocHViS2V5LnRvQnVmZmVyKCkpXG4gICAgICByZXR1cm4gdGhpcy5mcm9tUHViS2V5SGFzaEJ1ZihoYXNoQnVmKVxuICAgIH1cblxuICAgIHN0YXRpYyBmcm9tUHViS2V5IChwdWJLZXkpIHtcbiAgICAgIHJldHVybiBuZXcgdGhpcygpLmZyb21QdWJLZXkocHViS2V5KVxuICAgIH1cblxuICAgIGFzeW5jRnJvbVB1YktleSAocHViS2V5KSB7XG4gICAgICByZXR1cm4gYXNpbmsoZnVuY3Rpb24gKiAoKSB7XG4gICAgICAgIGxldCBhcmdzID0gW3B1YktleV1cbiAgICAgICAgbGV0IHdvcmtlcnNSZXN1bHQgPSB5aWVsZCBXb3JrZXJzLmFzeW5jT2JqZWN0TWV0aG9kKHRoaXMsICdmcm9tUHViS2V5JywgYXJncylcbiAgICAgICAgcmV0dXJuIHRoaXMuZnJvbUZhc3RCdWZmZXIod29ya2Vyc1Jlc3VsdC5yZXNidWYpXG4gICAgICB9LCB0aGlzKVxuICAgIH1cblxuICAgIHN0YXRpYyBhc3luY0Zyb21QdWJLZXkgKHB1YktleSkge1xuICAgICAgcmV0dXJuIG5ldyB0aGlzKCkuYXN5bmNGcm9tUHViS2V5KHB1YktleSlcbiAgICB9XG5cbiAgICBmcm9tUHJpdktleSAocHJpdktleSkge1xuICAgICAgbGV0IHB1YktleSA9IG5ldyBQdWJLZXkoKS5mcm9tUHJpdktleShwcml2S2V5KVxuICAgICAgbGV0IGhhc2hCdWYgPSBIYXNoLnNoYTI1NlJpcGVtZDE2MChwdWJLZXkudG9CdWZmZXIoKSlcbiAgICAgIHJldHVybiB0aGlzLmZyb21QdWJLZXlIYXNoQnVmKGhhc2hCdWYpXG4gICAgfVxuXG4gICAgc3RhdGljIGZyb21Qcml2S2V5IChwcml2S2V5KSB7XG4gICAgICByZXR1cm4gbmV3IHRoaXMoKS5mcm9tUHJpdktleShwcml2S2V5KVxuICAgIH1cblxuICAgIGFzeW5jRnJvbVByaXZLZXkgKHByaXZLZXkpIHtcbiAgICAgIHJldHVybiBhc2luayhmdW5jdGlvbiAqICgpIHtcbiAgICAgICAgbGV0IGFyZ3MgPSBbcHJpdktleV1cbiAgICAgICAgbGV0IHdvcmtlcnNSZXN1bHQgPSB5aWVsZCBXb3JrZXJzLmFzeW5jT2JqZWN0TWV0aG9kKHRoaXMsICdmcm9tUHJpdktleScsIGFyZ3MpXG4gICAgICAgIHJldHVybiB0aGlzLmZyb21GYXN0QnVmZmVyKHdvcmtlcnNSZXN1bHQucmVzYnVmKVxuICAgICAgfSwgdGhpcylcbiAgICB9XG5cbiAgICBzdGF0aWMgYXN5bmNGcm9tUHJpdktleSAocHJpdktleSkge1xuICAgICAgcmV0dXJuIG5ldyB0aGlzKCkuZnJvbVByaXZLZXkocHJpdktleSlcbiAgICB9XG5cbiAgICBmcm9tUmVkZWVtU2NyaXB0SGFzaEJ1ZiAoaGFzaEJ1Zikge1xuICAgICAgdGhpcy5oYXNoQnVmID0gaGFzaEJ1ZlxuICAgICAgbGV0IHR5cGVTdHIgPSAnc2NyaXB0SGFzaCdcbiAgICAgIHRoaXMudmVyc2lvbkJ5dGVOdW0gPSBDb25zdGFudHNbdHlwZVN0cl1cbiAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuXG4gICAgc3RhdGljIGZyb21SZWRlZW1TY3JpcHRIYXNoQnVmIChoYXNoQnVmKSB7XG4gICAgICByZXR1cm4gbmV3IHRoaXMoKS5mcm9tUmVkZWVtU2NyaXB0SGFzaEJ1ZihoYXNoQnVmKVxuICAgIH1cblxuICAgIGZyb21SZWRlZW1TY3JpcHQgKHNjcmlwdCkge1xuICAgICAgbGV0IGhhc2hCdWYgPSBIYXNoLnNoYTI1NlJpcGVtZDE2MChzY3JpcHQudG9CdWZmZXIoKSlcbiAgICAgIHJldHVybiB0aGlzLmZyb21SZWRlZW1TY3JpcHRIYXNoQnVmKGhhc2hCdWYpXG4gICAgfVxuXG4gICAgc3RhdGljIGZyb21SZWRlZW1TY3JpcHQgKHNjcmlwdCkge1xuICAgICAgcmV0dXJuIG5ldyB0aGlzKCkuZnJvbVJlZGVlbVNjcmlwdChzY3JpcHQpXG4gICAgfVxuXG4gICAgYXN5bmNGcm9tUmVkZWVtU2NyaXB0IChzY3JpcHQpIHtcbiAgICAgIHJldHVybiBhc2luayhmdW5jdGlvbiAqICgpIHtcbiAgICAgICAgbGV0IGFyZ3MgPSBbc2NyaXB0XVxuICAgICAgICBsZXQgd29ya2Vyc1Jlc3VsdCA9IHlpZWxkIFdvcmtlcnMuYXN5bmNPYmplY3RNZXRob2QodGhpcywgJ2Zyb21SZWRlZW1TY3JpcHQnLCBhcmdzKVxuICAgICAgICByZXR1cm4gdGhpcy5mcm9tRmFzdEJ1ZmZlcih3b3JrZXJzUmVzdWx0LnJlc2J1ZilcbiAgICAgIH0sIHRoaXMpXG4gICAgfVxuXG4gICAgc3RhdGljIGFzeW5jRnJvbVJlZGVlbVNjcmlwdCAoc2NyaXB0KSB7XG4gICAgICByZXR1cm4gbmV3IHRoaXMoKS5hc3luY0Zyb21SZWRlZW1TY3JpcHQoc2NyaXB0KVxuICAgIH1cblxuICAgIGZyb21TdHJpbmcgKHN0cikge1xuICAgICAgbGV0IGJ1ZiA9IEJhc2U1OENoZWNrLmRlY29kZShzdHIpXG4gICAgICByZXR1cm4gdGhpcy5mcm9tQnVmZmVyKGJ1ZilcbiAgICB9XG5cbiAgICBhc3luY0Zyb21TdHJpbmcgKHN0cikge1xuICAgICAgcmV0dXJuIGFzaW5rKGZ1bmN0aW9uICogKCkge1xuICAgICAgICBsZXQgYXJncyA9IFtzdHJdXG4gICAgICAgIGxldCB3b3JrZXJzUmVzdWx0ID0geWllbGQgV29ya2Vycy5hc3luY09iamVjdE1ldGhvZCh0aGlzLCAnZnJvbVN0cmluZycsIGFyZ3MpXG4gICAgICAgIHJldHVybiB0aGlzLmZyb21GYXN0QnVmZmVyKHdvcmtlcnNSZXN1bHQucmVzYnVmKVxuICAgICAgfSwgdGhpcylcbiAgICB9XG5cbiAgICBzdGF0aWMgYXN5bmNGcm9tU3RyaW5nIChzdHIpIHtcbiAgICAgIHJldHVybiBuZXcgdGhpcygpLmFzeW5jRnJvbVN0cmluZyhzdHIpXG4gICAgfVxuXG4gICAgc3RhdGljIGlzVmFsaWQgKGFkZHJzdHIpIHtcbiAgICAgIGxldCBhZGRyZXNzXG4gICAgICB0cnkge1xuICAgICAgICBhZGRyZXNzID0gbmV3IEFkZHJlc3MoKS5mcm9tU3RyaW5nKGFkZHJzdHIpXG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgICAgcmV0dXJuIGFkZHJlc3MuaXNWYWxpZCgpXG4gICAgfVxuXG4gICAgaXNWYWxpZCAoKSB7XG4gICAgICB0cnkge1xuICAgICAgICB0aGlzLnZhbGlkYXRlKClcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgfVxuXG4gICAgdHlwZSAoKSB7XG4gICAgICBpZiAodGhpcy52ZXJzaW9uQnl0ZU51bSA9PT0gQ29uc3RhbnRzWydwdWJLZXlIYXNoJ10pIHtcbiAgICAgICAgcmV0dXJuICdwdWJLZXlIYXNoJ1xuICAgICAgfSBlbHNlIGlmICh0aGlzLnZlcnNpb25CeXRlTnVtID09PSBDb25zdGFudHNbJ3NjcmlwdEhhc2gnXSkge1xuICAgICAgICByZXR1cm4gJ3NjcmlwdEhhc2gnXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gJ3Vua25vd24nXG4gICAgICB9XG4gICAgfVxuXG4gICAgdG9TY3JpcHQgKCkge1xuICAgICAgbGV0IHR5cGUgPSB0aGlzLnR5cGUoKVxuICAgICAgbGV0IHNjcmlwdFxuICAgICAgaWYgKHR5cGUgPT09ICdwdWJLZXlIYXNoJykge1xuICAgICAgICBzY3JpcHQgPSBuZXcgU2NyaXB0KClcbiAgICAgICAgc2NyaXB0LndyaXRlT3BDb2RlKE9wQ29kZS5PUF9EVVApXG4gICAgICAgIHNjcmlwdC53cml0ZU9wQ29kZShPcENvZGUuT1BfSEFTSDE2MClcbiAgICAgICAgc2NyaXB0LndyaXRlQnVmZmVyKHRoaXMuaGFzaEJ1ZilcbiAgICAgICAgc2NyaXB0LndyaXRlT3BDb2RlKE9wQ29kZS5PUF9FUVVBTFZFUklGWSlcbiAgICAgICAgc2NyaXB0LndyaXRlT3BDb2RlKE9wQ29kZS5PUF9DSEVDS1NJRylcbiAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ3NjcmlwdEhhc2gnKSB7XG4gICAgICAgIHNjcmlwdCA9IG5ldyBTY3JpcHQoKVxuICAgICAgICBzY3JpcHQud3JpdGVPcENvZGUoT3BDb2RlLk9QX0hBU0gxNjApXG4gICAgICAgIHNjcmlwdC53cml0ZUJ1ZmZlcih0aGlzLmhhc2hCdWYpXG4gICAgICAgIHNjcmlwdC53cml0ZU9wQ29kZShPcENvZGUuT1BfRVFVQUwpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3NjcmlwdCBtdXN0IGJlIGVpdGhlciBwdWJLZXlIYXNoIG9yIHNjcmlwdEhhc2gnKVxuICAgICAgfVxuICAgICAgcmV0dXJuIHNjcmlwdFxuICAgIH1cblxuICAgIHRvQnVmZmVyICgpIHtcbiAgICAgIGxldCB2ZXJzaW9uQnl0ZUJ1ZiA9IG5ldyBCdWZmZXIoW3RoaXMudmVyc2lvbkJ5dGVOdW1dKVxuICAgICAgbGV0IGJ1ZiA9IEJ1ZmZlci5jb25jYXQoW3ZlcnNpb25CeXRlQnVmLCB0aGlzLmhhc2hCdWZdKVxuICAgICAgcmV0dXJuIGJ1ZlxuICAgIH1cblxuICAgIHRvSlNPTiAoKSB7XG4gICAgICBsZXQganNvbiA9IHt9XG4gICAgICBpZiAodGhpcy5oYXNoQnVmKSB7XG4gICAgICAgIGpzb24uaGFzaEJ1ZiA9IHRoaXMuaGFzaEJ1Zi50b1N0cmluZygnaGV4JylcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgdGhpcy52ZXJzaW9uQnl0ZU51bSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGpzb24udmVyc2lvbkJ5dGVOdW0gPSB0aGlzLnZlcnNpb25CeXRlTnVtXG4gICAgICB9XG4gICAgICByZXR1cm4ganNvblxuICAgIH1cblxuICAgIGZyb21KU09OIChqc29uKSB7XG4gICAgICBpZiAoanNvbi5oYXNoQnVmKSB7XG4gICAgICAgIHRoaXMuaGFzaEJ1ZiA9IG5ldyBCdWZmZXIoanNvbi5oYXNoQnVmLCAnaGV4JylcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YganNvbi52ZXJzaW9uQnl0ZU51bSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRoaXMudmVyc2lvbkJ5dGVOdW0gPSBqc29uLnZlcnNpb25CeXRlTnVtXG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpc1xuICAgIH1cblxuICAgIHRvU3RyaW5nICgpIHtcbiAgICAgIHJldHVybiBCYXNlNThDaGVjay5lbmNvZGUodGhpcy50b0J1ZmZlcigpKVxuICAgIH1cblxuICAgIGFzeW5jVG9TdHJpbmcgKCkge1xuICAgICAgcmV0dXJuIGFzaW5rKGZ1bmN0aW9uICogKCkge1xuICAgICAgICBsZXQgYXJncyA9IFtdXG4gICAgICAgIGxldCB3b3JrZXJzUmVzdWx0ID0geWllbGQgV29ya2Vycy5hc3luY09iamVjdE1ldGhvZCh0aGlzLCAndG9TdHJpbmcnLCBhcmdzKVxuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZSh3b3JrZXJzUmVzdWx0LnJlc2J1Zi50b1N0cmluZygpKVxuICAgICAgfSwgdGhpcylcbiAgICB9XG5cbiAgICB2YWxpZGF0ZSAoKSB7XG4gICAgICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcih0aGlzLmhhc2hCdWYpIHx8IHRoaXMuaGFzaEJ1Zi5sZW5ndGggIT09IDIwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignaGFzaEJ1ZiBtdXN0IGJlIGEgYnVmZmVyIG9mIDIwIGJ5dGVzJylcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnZlcnNpb25CeXRlTnVtICE9PSBDb25zdGFudHNbJ3B1YktleUhhc2gnXSAmJlxuICAgICAgICB0aGlzLnZlcnNpb25CeXRlTnVtICE9PSBDb25zdGFudHNbJ3NjcmlwdEhhc2gnXSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgdmVyc2lvbkJ5dGVOdW0nKVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG4gIH1cblxuICByZXR1cm4gQWRkcmVzc1xufVxuXG5pbmplY3QgPSByZXF1aXJlKCdpbmplY3RlcicpKGluamVjdCwgZGVwZW5kZW5jaWVzKVxubGV0IEFkZHJlc3MgPSBpbmplY3QoKVxuQWRkcmVzcy5NYWlubmV0ID0gaW5qZWN0KHtcbiAgQ29uc3RhbnRzOiByZXF1aXJlKCcuL2NvbnN0YW50cycpLk1haW5uZXQuQWRkcmVzc1xufSlcbkFkZHJlc3MuVGVzdG5ldCA9IGluamVjdCh7XG4gIENvbnN0YW50czogcmVxdWlyZSgnLi9jb25zdGFudHMnKS5UZXN0bmV0LkFkZHJlc3Ncbn0pXG5tb2R1bGUuZXhwb3J0cyA9IEFkZHJlc3NcbiIsIi8qKlxuICogQmFzZTU4IENoZWNrIEVuY29kaW5nXG4gKiA9PT09PT09PT09PT09PT09PT09PT1cbiAqXG4gKiBCYXNlNTggY2hlY2sgZW5jb2RpbmcuIFRoZSB1c3VhbCB3YXkgdG8gdXNlIGl0IGlzXG4gKiBuZXcgQmFzZTU4Q2hlY2soYnVmKS50b1N0cmluZygpIG9yIG5ldyBCYXNlNThDaGVjayhzdHIpLnRvQnVmZmVyKCkuXG4gKi9cbid1c2Ugc3RyaWN0J1xubGV0IGRlcGVuZGVuY2llcyA9IHtcbiAgQmFzZTU4OiByZXF1aXJlKCcuL2Jhc2UtNTgnKSxcbiAgY21wOiByZXF1aXJlKCcuL2NtcCcpLFxuICBIYXNoOiByZXF1aXJlKCcuL2hhc2gnKSxcbiAgU3RydWN0OiByZXF1aXJlKCcuL3N0cnVjdCcpXG59XG5cbmxldCBpbmplY3QgPSBmdW5jdGlvbiAoZGVwcykge1xuICBsZXQgQmFzZTU4ID0gZGVwcy5CYXNlNThcbiAgbGV0IGNtcCA9IGRlcHMuY21wXG4gIGxldCBIYXNoID0gZGVwcy5IYXNoXG4gIGxldCBTdHJ1Y3QgPSBkZXBzLlN0cnVjdFxuXG4gIGNsYXNzIEJhc2U1OENoZWNrIGV4dGVuZHMgU3RydWN0IHtcbiAgICBjb25zdHJ1Y3RvciAoYnVmKSB7XG4gICAgICBzdXBlcih7YnVmfSlcbiAgICB9XG5cbiAgICBmcm9tSGV4IChoZXgpIHtcbiAgICAgIHJldHVybiB0aGlzLmZyb21CdWZmZXIobmV3IEJ1ZmZlcihoZXgsICdoZXgnKSlcbiAgICB9XG5cbiAgICB0b0hleCAoKSB7XG4gICAgICByZXR1cm4gdGhpcy50b0J1ZmZlcigpLnRvU3RyaW5nKCdoZXgnKVxuICAgIH1cblxuICAgIHN0YXRpYyBkZWNvZGUgKHMpIHtcbiAgICAgIGlmICh0eXBlb2YgcyAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnB1dCBtdXN0IGJlIGEgc3RyaW5nJylcbiAgICAgIH1cblxuICAgICAgbGV0IGJ1ZiA9IEJhc2U1OC5kZWNvZGUocylcblxuICAgICAgaWYgKGJ1Zi5sZW5ndGggPCA0KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSW5wdXQgc3RyaW5nIHRvbyBzaG9ydCcpXG4gICAgICB9XG5cbiAgICAgIGxldCBkYXRhID0gYnVmLnNsaWNlKDAsIC00KVxuICAgICAgbGV0IGNzdW0gPSBidWYuc2xpY2UoLTQpXG5cbiAgICAgIGxldCBoYXNoID0gSGFzaC5zaGEyNTZTaGEyNTYoZGF0YSlcbiAgICAgIGxldCBoYXNoNCA9IGhhc2guc2xpY2UoMCwgNClcblxuICAgICAgaWYgKCFjbXAoY3N1bSwgaGFzaDQpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQ2hlY2tzdW0gbWlzbWF0Y2gnKVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gZGF0YVxuICAgIH1cblxuICAgIHN0YXRpYyBlbmNvZGUgKGJ1Zikge1xuICAgICAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0lucHV0IG11c3QgYmUgYSBidWZmZXInKVxuICAgICAgfVxuICAgICAgbGV0IGNoZWNrZWRCdWYgPSBuZXcgQnVmZmVyKGJ1Zi5sZW5ndGggKyA0KVxuICAgICAgbGV0IGhhc2ggPSBIYXNoLnNoYTI1NlNoYTI1NihidWYpXG4gICAgICBidWYuY29weShjaGVja2VkQnVmKVxuICAgICAgaGFzaC5jb3B5KGNoZWNrZWRCdWYsIGJ1Zi5sZW5ndGgpXG4gICAgICByZXR1cm4gQmFzZTU4LmVuY29kZShjaGVja2VkQnVmKVxuICAgIH1cblxuICAgIGZyb21CdWZmZXIgKGJ1Zikge1xuICAgICAgdGhpcy5idWYgPSBidWZcbiAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuXG4gICAgZnJvbVN0cmluZyAoc3RyKSB7XG4gICAgICBsZXQgYnVmID0gQmFzZTU4Q2hlY2suZGVjb2RlKHN0cilcbiAgICAgIHRoaXMuYnVmID0gYnVmXG4gICAgICByZXR1cm4gdGhpc1xuICAgIH1cblxuICAgIHRvQnVmZmVyICgpIHtcbiAgICAgIHJldHVybiB0aGlzLmJ1ZlxuICAgIH1cblxuICAgIHRvU3RyaW5nICgpIHtcbiAgICAgIHJldHVybiBCYXNlNThDaGVjay5lbmNvZGUodGhpcy5idWYpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIEJhc2U1OENoZWNrXG59XG5cbmluamVjdCA9IHJlcXVpcmUoJ2luamVjdGVyJykoaW5qZWN0LCBkZXBlbmRlbmNpZXMpXG5sZXQgQmFzZTU4Q2hlY2sgPSBpbmplY3QoKVxubW9kdWxlLmV4cG9ydHMgPSBCYXNlNThDaGVja1xuIiwiLyoqXG4gKiBCYXNlNTggRW5jb2RpbmdcbiAqID09PT09PT09PT09PT09PVxuICpcbiAqIEJhc2U1OCAobm8gY2hlY2spXG4gKi9cbid1c2Ugc3RyaWN0J1xubGV0IGRlcGVuZGVuY2llcyA9IHtcbiAgYnM1ODogcmVxdWlyZSgnYnM1OCcpLFxuICBTdHJ1Y3Q6IHJlcXVpcmUoJy4vc3RydWN0Jylcbn1cblxubGV0IGluamVjdCA9IGZ1bmN0aW9uIChkZXBzKSB7XG4gIGxldCBiczU4ID0gZGVwcy5iczU4XG4gIGxldCBTdHJ1Y3QgPSBkZXBzLlN0cnVjdFxuXG4gIGNsYXNzIEJhc2U1OCBleHRlbmRzIFN0cnVjdCB7XG4gICAgY29uc3RydWN0b3IgKGJ1Zikge1xuICAgICAgc3VwZXIoe2J1Zn0pXG4gICAgfVxuXG4gICAgZnJvbUhleCAoaGV4KSB7XG4gICAgICByZXR1cm4gdGhpcy5mcm9tQnVmZmVyKG5ldyBCdWZmZXIoaGV4LCAnaGV4JykpXG4gICAgfVxuXG4gICAgdG9IZXggKCkge1xuICAgICAgcmV0dXJuIHRoaXMudG9CdWZmZXIoKS50b1N0cmluZygnaGV4JylcbiAgICB9XG5cbiAgICBzdGF0aWMgZW5jb2RlIChidWYpIHtcbiAgICAgIGlmICghQnVmZmVyLmlzQnVmZmVyKGJ1ZikpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnB1dCBzaG91bGQgYmUgYSBidWZmZXInKVxuICAgICAgfVxuICAgICAgcmV0dXJuIGJzNTguZW5jb2RlKGJ1ZilcbiAgICB9XG5cbiAgICBzdGF0aWMgZGVjb2RlIChzdHIpIHtcbiAgICAgIGlmICh0eXBlb2Ygc3RyICE9PSAnc3RyaW5nJykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0lucHV0IHNob3VsZCBiZSBhIHN0cmluZycpXG4gICAgICB9XG4gICAgICByZXR1cm4gbmV3IEJ1ZmZlcihiczU4LmRlY29kZShzdHIpKVxuICAgIH1cblxuICAgIGZyb21CdWZmZXIgKGJ1Zikge1xuICAgICAgdGhpcy5idWYgPSBidWZcbiAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuXG4gICAgZnJvbVN0cmluZyAoc3RyKSB7XG4gICAgICBsZXQgYnVmID0gQmFzZTU4LmRlY29kZShzdHIpXG4gICAgICB0aGlzLmJ1ZiA9IGJ1ZlxuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG5cbiAgICB0b0J1ZmZlciAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5idWZcbiAgICB9XG5cbiAgICB0b1N0cmluZyAoKSB7XG4gICAgICByZXR1cm4gQmFzZTU4LmVuY29kZSh0aGlzLmJ1ZilcbiAgICB9XG4gIH1cblxuICByZXR1cm4gQmFzZTU4XG59XG5cbmluamVjdCA9IHJlcXVpcmUoJ2luamVjdGVyJykoaW5qZWN0LCBkZXBlbmRlbmNpZXMpXG5sZXQgQmFzZTU4ID0gaW5qZWN0KClcbm1vZHVsZS5leHBvcnRzID0gQmFzZTU4XG4iLCIvKipcbiAqIEJpZyBOdW1iZXJcbiAqID09PT09PT09PT1cbiAqXG4gKiBTaW5jZSBqYXZhc2NyaXB0IG51bWJlcnMgYXJlIG9ubHkgcHJlY2lzZSB1cCB0byA1MyBiaXRzLCBhbmQgYml0Y29pbiBpc1xuICogYmFzZWQgb24gY3J5cHRvZ3JhcGh5IHRoYXQgdXNlcyAyNTYgYml0IG51bWJlcnMsIHdlIG11c3QgdXNlIGEgYmlnIG51bWJlclxuICogbGlicmFyeS4gVGhlIGxpYnJhcnkgd2UgdXNlIGF0IHRoZSBtb21lbnQgaXMgRmVkb3IgSW5kdXRueSdzIGJuLmpzIGxpYnJhcnkuXG4gKiBTaW5jZSBiaWcgbnVtYmVycyBhcmUgZXh0cmVtZWx5IHVzZWZ1bCwgd2UgcHJvdmlkZSBzb21lIHZlcnkgYmFzaWMgd3JhcHBlcnNcbiAqIGZvciBoaXMgYmlnIG51bWJlciBjbGFzcyBhbmQgZXhwb3NlIGl0LiBUaGUgd3JhcHBlcnMgbWVyZWx5IGFsbG93IHlvdSB0byBkbyxcbiAqIHNheSwgYm4uY21wKG51bSkgaW5zdGVhZCBvZiBqdXN0IGJuLmNtcChibiksIHdoaWNoIGlzIG5pY2UuIFRoZSBwcmltYXJ5IHdheVxuICogdG8gdXNlIHRoaXMgaXM6XG4gKiBsZXQgYm4gPSBCTihzdHIpIC8vIHN0ciBpcyBiYXNlIDEwXG4gKiBsZXQgYm4gPSBCTihudW0pXG4gKiBsZXQgYm4gPSBCTigpLmZyb21CdWZmZXIoYnVmKVxuICogbGV0IGJuID0gQk4oKS5mcm9tU20oYnVmKTsgLy8gc2lnbittYWduaXR1ZGUgZm9ybWF0LCBmaXJzdCBiaXQgaXMgc2lnblxuICpcbiAqIEZvciBsaXR0bGUgZW5kaWFuLCBwYXNzIGluIGFuIG9wdGlvbnMgdmFsdWU6XG4gKiBsZXQgYm4gPSBCTigpLmZyb21CdWZmZXIoYnVmLCB7ZW5kaWFuOiAnbGl0dGxlJ30pXG4gKiBsZXQgYm4gPSBCTigpLmZyb21TbShidWYsIHtlbmRpYW46ICdsaXR0bGUnfSlcbiAqXG4gKiBHZXR0aW5nIG91dHB1dDpcbiAqIGxldCBzdHIgPSBCTigpLnRvU3RyaW5nKCkgLy8gcHJvZHVjZXMgYmFzZSAxMCBzdHJpbmdcbiAqIGxldCBidWYgPSBCTigpLnRvQnVmZmVyKCkgLy8gcHJvZHVjZXMgYnVmZmVyIHJlcHJlc2VudGF0aW9uXG4gKiBsZXQgYnVmID0gQk4oKS50b0J1ZmZlcih7c2l6ZTogMzJ9KSAvL3Byb2R1Y2VkIDMyIGJ5dGUgYnVmZmVyXG4gKi9cbid1c2Ugc3RyaWN0J1xubGV0IGRlcGVuZGVuY2llcyA9IHtcbiAgX0JOOiByZXF1aXJlKCdibi5qcycpXG59XG5cbmxldCBpbmplY3QgPSBmdW5jdGlvbiAoZGVwcykge1xuICBsZXQgX0JOID0gZGVwcy5fQk5cblxuICBmdW5jdGlvbiBCTiAobiwgYmFzZSwgLi4ucmVzdCkge1xuICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBCTikpIHtcbiAgICAgIHJldHVybiBuZXcgQk4obiwgYmFzZSwgLi4ucmVzdClcbiAgICB9XG4gICAgX0JOLmNhbGwodGhpcywgbiwgYmFzZSwgLi4ucmVzdClcbiAgfVxuXG4gIE9iamVjdC5rZXlzKF9CTikuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgQk5ba2V5XSA9IF9CTltrZXldXG4gIH0pXG4gIEJOLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoX0JOLnByb3RvdHlwZSlcbiAgQk4ucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQk5cblxuICBmdW5jdGlvbiByZXZlcnNlQnVmIChidWYpIHtcbiAgICBsZXQgYnVmMiA9IG5ldyBCdWZmZXIoYnVmLmxlbmd0aClcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJ1Zi5sZW5ndGg7IGkrKykge1xuICAgICAgYnVmMltpXSA9IGJ1ZltidWYubGVuZ3RoIC0gMSAtIGldXG4gICAgfVxuICAgIHJldHVybiBidWYyXG4gIH1cblxuICBCTi5wcm90b3R5cGUuZnJvbUhleCA9IGZ1bmN0aW9uIChoZXgsIG9wdHMpIHtcbiAgICByZXR1cm4gdGhpcy5mcm9tQnVmZmVyKG5ldyBCdWZmZXIoaGV4LCAnaGV4JyksIG9wdHMpXG4gIH1cblxuICBCTi5wcm90b3R5cGUudG9IZXggPSBmdW5jdGlvbiAob3B0cykge1xuICAgIHJldHVybiB0aGlzLnRvQnVmZmVyKG9wdHMpLnRvU3RyaW5nKCdoZXgnKVxuICB9XG5cbiAgQk4ucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy50b1N0cmluZygpXG4gIH1cblxuICBCTi5wcm90b3R5cGUuZnJvbUpTT04gPSBmdW5jdGlvbiAoc3RyKSB7XG4gICAgbGV0IGJuID0gQk4oc3RyKVxuICAgIGJuLmNvcHkodGhpcylcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgQk4ucHJvdG90eXBlLmZyb21OdW1iZXIgPSBmdW5jdGlvbiAobikge1xuICAgIGxldCBibiA9IEJOKG4pXG4gICAgYm4uY29weSh0aGlzKVxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICBCTi5wcm90b3R5cGUudG9OdW1iZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHBhcnNlSW50KHRoaXNbJ3RvU3RyaW5nJ10oMTApLCAxMClcbiAgfVxuXG4gIEJOLnByb3RvdHlwZS5mcm9tU3RyaW5nID0gZnVuY3Rpb24gKHN0ciwgYmFzZSkge1xuICAgIGxldCBibiA9IEJOKHN0ciwgYmFzZSlcbiAgICBibi5jb3B5KHRoaXMpXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIEJOLmZyb21CdWZmZXIgPSBmdW5jdGlvbiAoYnVmLCBvcHRzID0ge2VuZGlhbjogJ2JpZyd9KSB7XG4gICAgaWYgKG9wdHMuZW5kaWFuID09PSAnbGl0dGxlJykge1xuICAgICAgYnVmID0gcmV2ZXJzZUJ1ZihidWYpXG4gICAgfVxuICAgIGxldCBoZXggPSBidWYudG9TdHJpbmcoJ2hleCcpXG4gICAgbGV0IGJuID0gbmV3IEJOKGhleCwgMTYpXG4gICAgcmV0dXJuIGJuXG4gIH1cblxuICBCTi5wcm90b3R5cGUuZnJvbUJ1ZmZlciA9IGZ1bmN0aW9uIChidWYsIG9wdHMpIHtcbiAgICBsZXQgYm4gPSBCTi5mcm9tQnVmZmVyKGJ1Ziwgb3B0cylcbiAgICBibi5jb3B5KHRoaXMpXG5cbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgQk4ucHJvdG90eXBlLnRvQnVmZmVyID0gZnVuY3Rpb24gKG9wdHMgPSB7c2l6ZTogdW5kZWZpbmVkLCBlbmRpYW46ICdiaWcnfSkge1xuICAgIGxldCBidWZcbiAgICBpZiAob3B0cy5zaXplKSB7XG4gICAgICBsZXQgaGV4ID0gdGhpcy50b1N0cmluZygxNiwgMilcbiAgICAgIGxldCBuYXRsZW4gPSBoZXgubGVuZ3RoIC8gMlxuICAgICAgYnVmID0gbmV3IEJ1ZmZlcihoZXgsICdoZXgnKVxuXG4gICAgICBpZiAobmF0bGVuID09PSBvcHRzLnNpemUpIHtcbiAgICAgICAgLy8gcGFzc1xuICAgICAgfSBlbHNlIGlmIChuYXRsZW4gPiBvcHRzLnNpemUpIHtcbiAgICAgICAgYnVmID0gYnVmLnNsaWNlKG5hdGxlbiAtIGJ1Zi5sZW5ndGgsIGJ1Zi5sZW5ndGgpXG4gICAgICB9IGVsc2UgaWYgKG5hdGxlbiA8IG9wdHMuc2l6ZSkge1xuICAgICAgICBsZXQgcmJ1ZiA9IG5ldyBCdWZmZXIob3B0cy5zaXplKVxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJ1Zi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHJidWZbcmJ1Zi5sZW5ndGggLSAxIC0gaV0gPSBidWZbYnVmLmxlbmd0aCAtIDEgLSBpXVxuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb3B0cy5zaXplIC0gbmF0bGVuOyBpKyspIHtcbiAgICAgICAgICByYnVmW2ldID0gMFxuICAgICAgICB9XG4gICAgICAgIGJ1ZiA9IHJidWZcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IGhleCA9IHRoaXMudG9TdHJpbmcoMTYsIDIpXG4gICAgICBidWYgPSBuZXcgQnVmZmVyKGhleCwgJ2hleCcpXG4gICAgfVxuXG4gICAgaWYgKG9wdHMuZW5kaWFuID09PSAnbGl0dGxlJykge1xuICAgICAgYnVmID0gcmV2ZXJzZUJ1ZihidWYpXG4gICAgfVxuICAgIGxldCBsb25nemVybyA9IG5ldyBCdWZmZXIoWzBdKVxuICAgIGlmIChCdWZmZXIuY29tcGFyZShidWYsIGxvbmd6ZXJvKSA9PT0gMCkge1xuICAgICAgcmV0dXJuIG5ldyBCdWZmZXIoW10pXG4gICAgfVxuICAgIHJldHVybiBidWZcbiAgfVxuXG4gIC8qKlxuICAgKiBTaWduZWQgbWFnbml0dWRlIGJ1ZmZlci4gTW9zdCBzaWduaWZpY2FudCBiaXQgcmVwcmVzZW50cyBzaWduICgwID0gcG9zaXRpdmUsXG4gICAqIDEgPSBuZWdhdGl2ZSkuXG4gICAqL1xuICBCTi5wcm90b3R5cGUuZnJvbVNtID0gZnVuY3Rpb24gKGJ1Ziwgb3B0cyA9IHtlbmRpYW46ICdiaWcnfSkge1xuICAgIGlmIChidWYubGVuZ3RoID09PSAwKSB7XG4gICAgICB0aGlzLmZyb21CdWZmZXIobmV3IEJ1ZmZlcihbMF0pKVxuICAgIH1cblxuICAgIGxldCBlbmRpYW4gPSBvcHRzLmVuZGlhblxuICAgIGlmIChlbmRpYW4gPT09ICdsaXR0bGUnKSB7XG4gICAgICBidWYgPSByZXZlcnNlQnVmKGJ1ZilcbiAgICB9XG5cbiAgICBpZiAoYnVmWzBdICYgMHg4MCkge1xuICAgICAgYnVmWzBdID0gYnVmWzBdICYgMHg3ZlxuICAgICAgdGhpcy5mcm9tQnVmZmVyKGJ1ZilcbiAgICAgIHRoaXMubmVnKCkuY29weSh0aGlzKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmZyb21CdWZmZXIoYnVmKVxuICAgIH1cbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgQk4ucHJvdG90eXBlLnRvU20gPSBmdW5jdGlvbiAob3B0cyA9IHtlbmRpYW46ICdiaWcnfSkge1xuICAgIGxldCBlbmRpYW4gPSBvcHRzLmVuZGlhblxuXG4gICAgbGV0IGJ1ZlxuICAgIGlmICh0aGlzLmNtcCgwKSA9PT0gLTEpIHtcbiAgICAgIGJ1ZiA9IHRoaXMubmVnKCkudG9CdWZmZXIoKVxuICAgICAgaWYgKGJ1ZlswXSAmIDB4ODApIHtcbiAgICAgICAgYnVmID0gQnVmZmVyLmNvbmNhdChbbmV3IEJ1ZmZlcihbMHg4MF0pLCBidWZdKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYnVmWzBdID0gYnVmWzBdIHwgMHg4MFxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBidWYgPSB0aGlzLnRvQnVmZmVyKClcbiAgICAgIGlmIChidWZbMF0gJiAweDgwKSB7XG4gICAgICAgIGJ1ZiA9IEJ1ZmZlci5jb25jYXQoW25ldyBCdWZmZXIoWzB4MDBdKSwgYnVmXSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoYnVmLmxlbmd0aCA9PT0gMSAmIGJ1ZlswXSA9PT0gMCkge1xuICAgICAgYnVmID0gbmV3IEJ1ZmZlcihbXSlcbiAgICB9XG5cbiAgICBpZiAoZW5kaWFuID09PSAnbGl0dGxlJykge1xuICAgICAgYnVmID0gcmV2ZXJzZUJ1ZihidWYpXG4gICAgfVxuXG4gICAgcmV0dXJuIGJ1ZlxuICB9XG5cbiAgLyoqXG4gICAqIFByb2R1Y2UgYSBCTiBmcm9tIHRoZSBcImJpdHNcIiB2YWx1ZSBpbiBhIGJsb2NraGVhZGVyLiBBbmFsYWdvdXMgdG8gQml0Y29pblxuICAgKiBDb3JlJ3MgdWludDI1NiBTZXRDb21wYWN0IG1ldGhvZC4gYml0cyBpcyBhc3N1bWVkIHRvIGJlIFVJbnQzMi5cbiAgICovXG4gIEJOLnByb3RvdHlwZS5mcm9tQml0cyA9IGZ1bmN0aW9uIChiaXRzLCBvcHRzID0ge3N0cmljdDogZmFsc2V9KSB7XG4gICAgLy8gVG8gcGVyZm9ybWVkIGJpdHdpc2Ugb3BlcmF0aW9ucyBpbiBqYXZhc2NyaXB0LCB3ZSBuZWVkIHRvIGNvbnZlcnQgdG8gYVxuICAgIC8vIHNpZ25lZCAzMiBiaXQgdmFsdWUuXG4gICAgbGV0IGJ1ZiA9IG5ldyBCdWZmZXIoNClcbiAgICBidWYud3JpdGVVSW50MzJCRShiaXRzLCAwKVxuICAgIGJpdHMgPSBidWYucmVhZEludDMyQkUoMClcbiAgICBpZiAob3B0cy5zdHJpY3QgJiYgKGJpdHMgJiAweDAwODAwMDAwKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCduZWdhdGl2ZSBiaXQgc2V0JylcbiAgICB9XG4gICAgbGV0IG5zaXplID0gYml0cyA+PiAyNFxuICAgIGxldCBud29yZCA9IGJpdHMgJiAweDAwN2ZmZmZmXG4gICAgYnVmID0gbmV3IEJ1ZmZlcig0KVxuICAgIGJ1Zi53cml0ZUludDMyQkUobndvcmQpXG4gICAgaWYgKG5zaXplIDw9IDMpIHtcbiAgICAgIGJ1ZiA9IGJ1Zi5zbGljZSgxLCBuc2l6ZSArIDEpXG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCBmaWxsID0gbmV3IEJ1ZmZlcihuc2l6ZSAtIDMpXG4gICAgICBmaWxsLmZpbGwoMClcbiAgICAgIGJ1ZiA9IEJ1ZmZlci5jb25jYXQoW2J1ZiwgZmlsbF0pXG4gICAgfVxuICAgIHRoaXMuZnJvbUJ1ZmZlcihidWYpXG4gICAgaWYgKGJpdHMgJiAweDAwODAwMDAwKSB7XG4gICAgICBCTigwKS5zdWIodGhpcykuY29weSh0aGlzKVxuICAgIH1cbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnQgQk4gdG8gdGhlIFwiYml0c1wiIHZhbHVlIGluIGEgYmxvY2toZWFkZXIuIEFuYWxhZ291cyB0byBCaXRjb2luXG4gICAqIENvcmUncyB1aW50MjU2IEdldENvbXBhY3QgbWV0aG9kLiBiaXRzIGlzIGEgVUludDMyLlxuICAgKi9cbiAgQk4ucHJvdG90eXBlLnRvQml0cyA9IGZ1bmN0aW9uICgpIHtcbiAgICBsZXQgYnVmXG4gICAgaWYgKHRoaXMubHQoMCkpIHtcbiAgICAgIGJ1ZiA9IHRoaXMubmVnKCkudG9CdWZmZXIoKVxuICAgIH0gZWxzZSB7XG4gICAgICBidWYgPSB0aGlzLnRvQnVmZmVyKClcbiAgICB9XG4gICAgbGV0IG5zaXplID0gYnVmLmxlbmd0aFxuICAgIGxldCBud29yZFxuICAgIGlmIChuc2l6ZSA+IDMpIHtcbiAgICAgIG53b3JkID0gQnVmZmVyLmNvbmNhdChbbmV3IEJ1ZmZlcihbMF0pLCBidWYuc2xpY2UoMCwgMyldKS5yZWFkVUludDMyQkUoMClcbiAgICB9IGVsc2UgaWYgKG5zaXplIDw9IDMpIHtcbiAgICAgIGxldCBibGFuayA9IG5ldyBCdWZmZXIoMyAtIG5zaXplICsgMSlcbiAgICAgIGJsYW5rLmZpbGwoMClcbiAgICAgIG53b3JkID0gQnVmZmVyLmNvbmNhdChbYmxhbmssIGJ1Zi5zbGljZSgwLCBuc2l6ZSldKS5yZWFkVUludDMyQkUoMClcbiAgICB9XG4gICAgaWYgKG53b3JkICYgMHgwMDgwMDAwMCkge1xuICAgICAgLy8gVGhlIG1vc3Qgc2lnbmlmaWNhbnQgYml0IGRlbm90ZXMgc2lnbi4gRG8gbm90IHdhbnQgdW5sZXNzIG51bWJlciBpc1xuICAgICAgLy8gYWN0dWFsbHkgbmVnYXRpdmUuXG4gICAgICBud29yZCA+Pj0gOFxuICAgICAgbnNpemUrK1xuICAgIH1cbiAgICBpZiAodGhpcy5sdCgwKSkge1xuICAgICAgbndvcmQgfD0gMHgwMDgwMDAwMFxuICAgIH1cbiAgICBsZXQgYml0cyA9IChuc2l6ZSA8PCAyNCkgfCBud29yZFxuICAgIC8vIGNvbnZlcnQgYml0cyB0byBVSW50MzIgYmVmb3JlIHJldHVybkluZ1xuICAgIGJ1ZiA9IG5ldyBCdWZmZXIoNClcbiAgICBidWYud3JpdGVJbnQzMkJFKGJpdHMsIDApXG4gICAgcmV0dXJuIGJ1Zi5yZWFkVUludDMyQkUoMClcbiAgfVxuXG4gIC8vIFRoaXMgaXMgYW5hbG9nb3VzIHRvIHRoZSBjb25zdHJ1Y3RvciBmb3IgQ1NjcmlwdE51bSBpbiBiaXRjb2luZC4gTWFueSBvcHNcbiAgLy8gaW4gYml0Y29pbmQncyBzY3JpcHQgaW50ZXJwcmV0ZXIgdXNlIENTY3JpcHROdW0sIHdoaWNoIGlzIG5vdCByZWFsbHkgYVxuICAvLyBwcm9wZXIgYmlnbnVtLiBJbnN0ZWFkLCBhbiBlcnJvciBpcyB0aHJvd24gaWYgdHJ5aW5nIHRvIGlucHV0IGEgbnVtYmVyXG4gIC8vIGJpZ2dlciB0aGFuIDQgYnl0ZXMuIFdlIGNvcHkgdGhhdCBiZWhhdmlvciBoZXJlLiBUaGVyZSBpcyBvbmUgZXhjZXB0aW9uIC1cbiAgLy8gaW4gQ0hFQ0tMT0NLVElNRVZFUklGWSwgdGhlIG51bWJlcnMgYXJlIGFsbG93ZWQgdG8gYmUgdXAgdG8gNSBieXRlcyBsb25nLlxuICAvLyBXZSBhbGxvdyBmb3Igc2V0dGluZyB0aGF0IHZhcmlhYmxlIGhlcmUgZm9yIHVzZSBpbiBDSEVDS0xPQ0tUSU1FVkVSSUZZLlxuICBCTi5wcm90b3R5cGUuZnJvbVNjcmlwdE51bUJ1ZmZlciA9IGZ1bmN0aW9uIChidWYsIGZSZXF1aXJlTWluaW1hbCwgbk1heE51bVNpemUpIHtcbiAgICBpZiAobk1heE51bVNpemUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgbk1heE51bVNpemUgPSA0XG4gICAgfVxuICAgIGlmIChidWYubGVuZ3RoID4gbk1heE51bVNpemUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignc2NyaXB0IG51bWJlciBvdmVyZmxvdycpXG4gICAgfVxuICAgIGlmIChmUmVxdWlyZU1pbmltYWwgJiYgYnVmLmxlbmd0aCA+IDApIHtcbiAgICAgIC8vIENoZWNrIHRoYXQgdGhlIG51bWJlciBpcyBlbmNvZGVkIHdpdGggdGhlIG1pbmltdW0gcG9zc2libGVcbiAgICAgIC8vIG51bWJlciBvZiBieXRlcy5cbiAgICAgIC8vXG4gICAgICAvLyBJZiB0aGUgbW9zdC1zaWduaWZpY2FudC1ieXRlIC0gZXhjbHVkaW5nIHRoZSBzaWduIGJpdCAtIGlzIHplcm9cbiAgICAgIC8vIHRoZW4gd2UncmUgbm90IG1pbmltYWwuIE5vdGUgaG93IHRoaXMgdGVzdCBhbHNvIHJlamVjdHMgdGhlXG4gICAgICAvLyBuZWdhdGl2ZS16ZXJvIGVuY29kaW5nLCAweDgwLlxuICAgICAgaWYgKChidWZbYnVmLmxlbmd0aCAtIDFdICYgMHg3ZikgPT09IDApIHtcbiAgICAgICAgLy8gT25lIGV4Y2VwdGlvbjogaWYgdGhlcmUncyBtb3JlIHRoYW4gb25lIGJ5dGUgYW5kIHRoZSBtb3N0XG4gICAgICAgIC8vIHNpZ25pZmljYW50IGJpdCBvZiB0aGUgc2Vjb25kLW1vc3Qtc2lnbmlmaWNhbnQtYnl0ZSBpcyBzZXRcbiAgICAgICAgLy8gaXQgd291bGQgY29uZmxpY3Qgd2l0aCB0aGUgc2lnbiBiaXQuIEFuIGV4YW1wbGUgb2YgdGhpcyBjYXNlXG4gICAgICAgIC8vIGlzICstMjU1LCB3aGljaCBlbmNvZGUgdG8gMHhmZjAwIGFuZCAweGZmODAgcmVzcGVjdGl2ZWx5LlxuICAgICAgICAvLyAoYmlnLWVuZGlhbikuXG4gICAgICAgIGlmIChidWYubGVuZ3RoIDw9IDEgfHwgKGJ1ZltidWYubGVuZ3RoIC0gMl0gJiAweDgwKSA9PT0gMCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignbm9uLW1pbmltYWxseSBlbmNvZGVkIHNjcmlwdCBudW1iZXInKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmZyb21TbShidWYsIHtlbmRpYW46ICdsaXR0bGUnfSlcbiAgfVxuXG4gIC8vIFRoZSBjb3JvbGxhcnkgdG8gdGhlIGFib3ZlLCB3aXRoIHRoZSBub3RhYmxlIGV4Y2VwdGlvbiB0aGF0IHdlIGRvIG5vdCB0aHJvd1xuICAvLyBhbiBlcnJvciBpZiB0aGUgb3V0cHV0IGlzIGxhcmdlciB0aGFuIGZvdXIgYnl0ZXMuIChXaGljaCBjYW4gaGFwcGVuIGlmXG4gIC8vIHBlcmZvcm1pbmcgYSBudW1lcmljYWwgb3BlcmF0aW9uIHRoYXQgcmVzdWx0cyBpbiBhbiBvdmVyZmxvdyB0byBtb3JlIHRoYW4gNFxuICAvLyBieXRlcykuXG4gIEJOLnByb3RvdHlwZS50b1NjcmlwdE51bUJ1ZmZlciA9IGZ1bmN0aW9uIChidWYpIHtcbiAgICByZXR1cm4gdGhpcy50b1NtKHtlbmRpYW46ICdsaXR0bGUnfSlcbiAgfVxuXG4gIEJOLnByb3RvdHlwZS5uZWcgPSBmdW5jdGlvbiAoKSB7XG4gICAgbGV0IF9uZWcgPSBfQk4ucHJvdG90eXBlLm5lZy5jYWxsKHRoaXMpXG4gICAgbGV0IG5lZyA9IE9iamVjdC5jcmVhdGUoQk4ucHJvdG90eXBlKVxuICAgIF9uZWcuY29weShuZWcpXG4gICAgcmV0dXJuIG5lZ1xuICB9XG5cbiAgQk4ucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIChibikge1xuICAgIGxldCBfYm4gPSBfQk4ucHJvdG90eXBlLmFkZC5jYWxsKHRoaXMsIGJuKVxuICAgIGJuID0gT2JqZWN0LmNyZWF0ZShCTi5wcm90b3R5cGUpXG4gICAgX2JuLmNvcHkoYm4pXG4gICAgcmV0dXJuIGJuXG4gIH1cblxuICBCTi5wcm90b3R5cGUuc3ViID0gZnVuY3Rpb24gKGJuKSB7XG4gICAgbGV0IF9ibiA9IF9CTi5wcm90b3R5cGUuc3ViLmNhbGwodGhpcywgYm4pXG4gICAgYm4gPSBPYmplY3QuY3JlYXRlKEJOLnByb3RvdHlwZSlcbiAgICBfYm4uY29weShibilcbiAgICByZXR1cm4gYm5cbiAgfVxuXG4gIEJOLnByb3RvdHlwZS5tdWwgPSBmdW5jdGlvbiAoYm4pIHtcbiAgICBsZXQgX2JuID0gX0JOLnByb3RvdHlwZS5tdWwuY2FsbCh0aGlzLCBibilcbiAgICBibiA9IE9iamVjdC5jcmVhdGUoQk4ucHJvdG90eXBlKVxuICAgIF9ibi5jb3B5KGJuKVxuICAgIHJldHVybiBiblxuICB9XG5cbiAgLyoqXG4gICAqIHRvIGJlIHVzZWQgaWYgdGhpcyBpcyBwb3NpdGl2ZS5cbiAgICovXG4gIEJOLnByb3RvdHlwZS5tb2QgPSBmdW5jdGlvbiAoYm4pIHtcbiAgICBsZXQgX2JuID0gX0JOLnByb3RvdHlwZS5tb2QuY2FsbCh0aGlzLCBibilcbiAgICBibiA9IE9iamVjdC5jcmVhdGUoQk4ucHJvdG90eXBlKVxuICAgIF9ibi5jb3B5KGJuKVxuICAgIHJldHVybiBiblxuICB9XG5cbiAgLyoqXG4gICAqIHRvIGJlIHVzZWQgaWYgdGhpcyBpcyBuZWdhdGl2ZS5cbiAgICovXG4gIEJOLnByb3RvdHlwZS51bW9kID0gZnVuY3Rpb24gKGJuKSB7XG4gICAgbGV0IF9ibiA9IF9CTi5wcm90b3R5cGUudW1vZC5jYWxsKHRoaXMsIGJuKVxuICAgIGJuID0gT2JqZWN0LmNyZWF0ZShCTi5wcm90b3R5cGUpXG4gICAgX2JuLmNvcHkoYm4pXG4gICAgcmV0dXJuIGJuXG4gIH1cblxuICBCTi5wcm90b3R5cGUuaW52bSA9IGZ1bmN0aW9uIChibikge1xuICAgIGxldCBfYm4gPSBfQk4ucHJvdG90eXBlLmludm0uY2FsbCh0aGlzLCBibilcbiAgICBibiA9IE9iamVjdC5jcmVhdGUoQk4ucHJvdG90eXBlKVxuICAgIF9ibi5jb3B5KGJuKVxuICAgIHJldHVybiBiblxuICB9XG5cbiAgQk4ucHJvdG90eXBlLmRpdiA9IGZ1bmN0aW9uIChibikge1xuICAgIGxldCBfYm4gPSBfQk4ucHJvdG90eXBlLmRpdi5jYWxsKHRoaXMsIGJuKVxuICAgIGJuID0gT2JqZWN0LmNyZWF0ZShCTi5wcm90b3R5cGUpXG4gICAgX2JuLmNvcHkoYm4pXG4gICAgcmV0dXJuIGJuXG4gIH1cblxuICBCTi5wcm90b3R5cGUuY21wID0gZnVuY3Rpb24gKGJuKSB7XG4gICAgcmV0dXJuIF9CTi5wcm90b3R5cGUuY21wLmNhbGwodGhpcywgYm4pXG4gIH1cblxuICAvKipcbiAgICogQWxsIHRoZSBzdGFuZGFyZCBiaWcgbnVtYmVyIG9wZXJhdGlvbnMgb3BlcmF0ZSBvbiBvdGhlciBiaWcgbnVtYmVycy4gZS5nLixcbiAgICogYm4xLmFkZChibjIpLiBCdXQgaXQgaXMgZnJlcXVlbmx5IHZhbHVibGUgdG8gYWRkIG51bWJlcnMgb3Igc3RyaW5ncywgZS5nLlxuICAgKiBibi5hZGQoNSkgb3IgYm4uYWRkKCc1JykuIFRoZSBkZWNvcmF0b3Igd3JhcHMgYWxsIG1ldGhvZHMgd2hlcmUgdGhpcyB3b3VsZFxuICAgKiBiZSBjb252ZW5pZW50IGFuZCBtYWtlcyB0aGF0IHBvc3NpYmxlLlxuICAgKi9cbiAgZnVuY3Rpb24gZGVjb3JhdGUgKG5hbWUpIHtcbiAgICBCTi5wcm90b3R5cGVbJ18nICsgbmFtZV0gPSBCTi5wcm90b3R5cGVbbmFtZV1cbiAgICBsZXQgZiA9IGZ1bmN0aW9uIChiKSB7XG4gICAgICBpZiAodHlwZW9mIGIgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGIgPSBuZXcgQk4oYilcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGIgPT09ICdudW1iZXInKSB7XG4gICAgICAgIGIgPSBuZXcgQk4oYi50b1N0cmluZygpKVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXNbJ18nICsgbmFtZV0oYilcbiAgICB9XG4gICAgQk4ucHJvdG90eXBlW25hbWVdID0gZlxuICB9XG5cbiAgQk4ucHJvdG90eXBlLmVxID0gZnVuY3Rpb24gKGIpIHtcbiAgICByZXR1cm4gdGhpcy5jbXAoYikgPT09IDBcbiAgfVxuXG4gIEJOLnByb3RvdHlwZS5uZXEgPSBmdW5jdGlvbiAoYikge1xuICAgIHJldHVybiB0aGlzLmNtcChiKSAhPT0gMFxuICB9XG5cbiAgQk4ucHJvdG90eXBlLmd0ID0gZnVuY3Rpb24gKGIpIHtcbiAgICByZXR1cm4gdGhpcy5jbXAoYikgPiAwXG4gIH1cblxuICBCTi5wcm90b3R5cGUuZ2VxID0gZnVuY3Rpb24gKGIpIHtcbiAgICByZXR1cm4gdGhpcy5jbXAoYikgPj0gMFxuICB9XG5cbiAgQk4ucHJvdG90eXBlLmx0ID0gZnVuY3Rpb24gKGIpIHtcbiAgICByZXR1cm4gdGhpcy5jbXAoYikgPCAwXG4gIH1cblxuICBCTi5wcm90b3R5cGUubGVxID0gZnVuY3Rpb24gKGIpIHtcbiAgICByZXR1cm4gdGhpcy5jbXAoYikgPD0gMFxuICB9XG5cbiAgZGVjb3JhdGUoJ2FkZCcpXG4gIGRlY29yYXRlKCdzdWInKVxuICBkZWNvcmF0ZSgnbXVsJylcbiAgZGVjb3JhdGUoJ21vZCcpXG4gIGRlY29yYXRlKCdpbnZtJylcbiAgZGVjb3JhdGUoJ2RpdicpXG4gIGRlY29yYXRlKCdjbXAnKVxuICBkZWNvcmF0ZSgnZ3QnKVxuICBkZWNvcmF0ZSgnZ2VxJylcbiAgZGVjb3JhdGUoJ2x0JylcbiAgZGVjb3JhdGUoJ2xlcScpXG5cbiAgcmV0dXJuIEJOXG59XG5cbmluamVjdCA9IHJlcXVpcmUoJ2luamVjdGVyJykoaW5qZWN0LCBkZXBlbmRlbmNpZXMpXG5sZXQgQk4gPSBpbmplY3QoKVxubW9kdWxlLmV4cG9ydHMgPSBCTlxuIiwiLyoqXG4gKiBCdWZmZXIgUmVhZGVyXG4gKiA9PT09PT09PT09PT09XG4gKlxuICogVGhpcyBpcyBhIGNvbnZlbmllbmNlIGNsYXNzIGZvciByZWFkaW5nIFZhckludHMgYW5kIG90aGVyIGJhc2ljIHR5cGVzIGZyb20gYVxuICogYnVmZmVyLiBUaGlzIGNsYXNzIGlzIG1vc3QgdXNlZnVsIGZvciByZWFkaW5nIFZhckludHMsIGFuZCBhbHNvIGZvciBzaWduZWRcbiAqIG9yIHVuc2lnbmVkIGludGVnZXJzIG9mIHZhcmlvdXMgdHlwZXMuIEl0IGNhbiBhbHNvIHJlYWQgYSBidWZmZXIgaW4gcmV2ZXJzZVxuICogb3JkZXIsIHdoaWNoIGlzIHVzZWZ1bCBpbiBiaXRjb2luIHdoaWNoIHVzZXMgbGl0dGxlIGVuZGlhbiBudW1iZXJzIGEgbG90IHNvXG4gKiB5b3UgZmluZCB0aGF0IHlvdSBtdXN0IHJldmVyc2UgdGhpbmdzLiBZb3UgcHJvYmFibHkgd2FudCB0byB1c2UgaXQgbGlrZTpcbiAqIHZhckludCA9IG5ldyBCcihidWYpLnJlYWRuZXcgVmFySW50KClcbiAqL1xuJ3VzZSBzdHJpY3QnXG5sZXQgZGVwZW5kZW5jaWVzID0ge1xuICBCbjogcmVxdWlyZSgnLi9ibicpXG59XG5cbmxldCBpbmplY3QgPSBmdW5jdGlvbiAoZGVwcykge1xuICBsZXQgQm4gPSBkZXBzLkJuXG5cbiAgY2xhc3MgQnIge1xuICAgIGNvbnN0cnVjdG9yIChidWYpIHtcbiAgICAgIHRoaXMuZnJvbU9iamVjdCh7YnVmfSlcbiAgICB9XG5cbiAgICBmcm9tT2JqZWN0IChvYmopIHtcbiAgICAgIHRoaXMuYnVmID0gb2JqLmJ1ZiB8fCB0aGlzLmJ1ZiB8fCB1bmRlZmluZWRcbiAgICAgIHRoaXMucG9zID0gb2JqLnBvcyB8fCB0aGlzLnBvcyB8fCAwXG4gICAgICByZXR1cm4gdGhpc1xuICAgIH1cblxuICAgIGVvZiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5wb3MgPj0gdGhpcy5idWYubGVuZ3RoXG4gICAgfVxuXG4gICAgcmVhZCAobGVuID0gdGhpcy5idWYubGVuZ3RoKSB7XG4gICAgICBsZXQgYnVmID0gdGhpcy5idWYuc2xpY2UodGhpcy5wb3MsIHRoaXMucG9zICsgbGVuKVxuICAgICAgdGhpcy5wb3MgPSB0aGlzLnBvcyArIGxlblxuICAgICAgcmV0dXJuIGJ1ZlxuICAgIH1cblxuICAgIHJlYWRSZXZlcnNlIChsZW4gPSB0aGlzLmJ1Zi5sZW5ndGgpIHtcbiAgICAgIGxldCBidWYgPSB0aGlzLmJ1Zi5zbGljZSh0aGlzLnBvcywgdGhpcy5wb3MgKyBsZW4pXG4gICAgICB0aGlzLnBvcyA9IHRoaXMucG9zICsgbGVuXG4gICAgICBsZXQgYnVmMiA9IG5ldyBCdWZmZXIoYnVmLmxlbmd0aClcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYnVmMi5sZW5ndGg7IGkrKykge1xuICAgICAgICBidWYyW2ldID0gYnVmW2J1Zi5sZW5ndGggLSAxIC0gaV1cbiAgICAgIH1cbiAgICAgIHJldHVybiBidWYyXG4gICAgfVxuXG4gICAgcmVhZFVJbnQ4ICgpIHtcbiAgICAgIGxldCB2YWwgPSB0aGlzLmJ1Zi5yZWFkVUludDgodGhpcy5wb3MpXG4gICAgICB0aGlzLnBvcyA9IHRoaXMucG9zICsgMVxuICAgICAgcmV0dXJuIHZhbFxuICAgIH1cblxuICAgIHJlYWRJbnQ4ICgpIHtcbiAgICAgIGxldCB2YWwgPSB0aGlzLmJ1Zi5yZWFkSW50OCh0aGlzLnBvcylcbiAgICAgIHRoaXMucG9zID0gdGhpcy5wb3MgKyAxXG4gICAgICByZXR1cm4gdmFsXG4gICAgfVxuXG4gICAgcmVhZFVJbnQxNkJFICgpIHtcbiAgICAgIGxldCB2YWwgPSB0aGlzLmJ1Zi5yZWFkVUludDE2QkUodGhpcy5wb3MpXG4gICAgICB0aGlzLnBvcyA9IHRoaXMucG9zICsgMlxuICAgICAgcmV0dXJuIHZhbFxuICAgIH1cblxuICAgIHJlYWRJbnQxNkJFICgpIHtcbiAgICAgIGxldCB2YWwgPSB0aGlzLmJ1Zi5yZWFkSW50MTZCRSh0aGlzLnBvcylcbiAgICAgIHRoaXMucG9zID0gdGhpcy5wb3MgKyAyXG4gICAgICByZXR1cm4gdmFsXG4gICAgfVxuXG4gICAgcmVhZFVJbnQxNkxFICgpIHtcbiAgICAgIGxldCB2YWwgPSB0aGlzLmJ1Zi5yZWFkVUludDE2TEUodGhpcy5wb3MpXG4gICAgICB0aGlzLnBvcyA9IHRoaXMucG9zICsgMlxuICAgICAgcmV0dXJuIHZhbFxuICAgIH1cblxuICAgIHJlYWRJbnQxNkxFICgpIHtcbiAgICAgIGxldCB2YWwgPSB0aGlzLmJ1Zi5yZWFkSW50MTZMRSh0aGlzLnBvcylcbiAgICAgIHRoaXMucG9zID0gdGhpcy5wb3MgKyAyXG4gICAgICByZXR1cm4gdmFsXG4gICAgfVxuXG4gICAgcmVhZFVJbnQzMkJFICgpIHtcbiAgICAgIGxldCB2YWwgPSB0aGlzLmJ1Zi5yZWFkVUludDMyQkUodGhpcy5wb3MpXG4gICAgICB0aGlzLnBvcyA9IHRoaXMucG9zICsgNFxuICAgICAgcmV0dXJuIHZhbFxuICAgIH1cblxuICAgIHJlYWRJbnQzMkJFICgpIHtcbiAgICAgIGxldCB2YWwgPSB0aGlzLmJ1Zi5yZWFkSW50MzJCRSh0aGlzLnBvcylcbiAgICAgIHRoaXMucG9zID0gdGhpcy5wb3MgKyA0XG4gICAgICByZXR1cm4gdmFsXG4gICAgfVxuXG4gICAgcmVhZFVJbnQzMkxFICgpIHtcbiAgICAgIGxldCB2YWwgPSB0aGlzLmJ1Zi5yZWFkVUludDMyTEUodGhpcy5wb3MpXG4gICAgICB0aGlzLnBvcyA9IHRoaXMucG9zICsgNFxuICAgICAgcmV0dXJuIHZhbFxuICAgIH1cblxuICAgIHJlYWRJbnQzMkxFICgpIHtcbiAgICAgIGxldCB2YWwgPSB0aGlzLmJ1Zi5yZWFkSW50MzJMRSh0aGlzLnBvcylcbiAgICAgIHRoaXMucG9zID0gdGhpcy5wb3MgKyA0XG4gICAgICByZXR1cm4gdmFsXG4gICAgfVxuXG4gICAgcmVhZFVJbnQ2NEJFQm4gKCkge1xuICAgICAgbGV0IGJ1ZiA9IHRoaXMuYnVmLnNsaWNlKHRoaXMucG9zLCB0aGlzLnBvcyArIDgpXG4gICAgICBsZXQgYm4gPSBuZXcgQm4oKS5mcm9tQnVmZmVyKGJ1ZilcbiAgICAgIHRoaXMucG9zID0gdGhpcy5wb3MgKyA4XG4gICAgICByZXR1cm4gYm5cbiAgICB9XG5cbiAgICByZWFkVUludDY0TEVCbiAoKSB7XG4gICAgICBsZXQgYnVmID0gdGhpcy5yZWFkUmV2ZXJzZSg4KVxuICAgICAgbGV0IGJuID0gbmV3IEJuKCkuZnJvbUJ1ZmZlcihidWYpXG4gICAgICByZXR1cm4gYm5cbiAgICB9XG5cbiAgICByZWFkVmFySW50TnVtICgpIHtcbiAgICAgIGxldCBmaXJzdCA9IHRoaXMucmVhZFVJbnQ4KClcbiAgICAgIGxldCBibiwgblxuICAgICAgc3dpdGNoIChmaXJzdCkge1xuICAgICAgICBjYXNlIDB4RkQ6XG4gICAgICAgICAgcmV0dXJuIHRoaXMucmVhZFVJbnQxNkxFKClcbiAgICAgICAgY2FzZSAweEZFOlxuICAgICAgICAgIHJldHVybiB0aGlzLnJlYWRVSW50MzJMRSgpXG4gICAgICAgIGNhc2UgMHhGRjpcbiAgICAgICAgICBibiA9IHRoaXMucmVhZFVJbnQ2NExFQm4oKVxuICAgICAgICAgIG4gPSBibi50b051bWJlcigpXG4gICAgICAgICAgaWYgKG4gPD0gTWF0aC5wb3coMiwgNTMpKSB7XG4gICAgICAgICAgICByZXR1cm4gblxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ251bWJlciB0b28gbGFyZ2UgdG8gcmV0YWluIHByZWNpc2lvbiAtIHVzZSByZWFkVmFySW50Qm4nKVxuICAgICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gZmlyc3RcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZWFkVmFySW50QnVmICgpIHtcbiAgICAgIGxldCBmaXJzdCA9IHRoaXMuYnVmLnJlYWRVSW50OCh0aGlzLnBvcylcbiAgICAgIHN3aXRjaCAoZmlyc3QpIHtcbiAgICAgICAgY2FzZSAweEZEOlxuICAgICAgICAgIHJldHVybiB0aGlzLnJlYWQoMSArIDIpXG4gICAgICAgIGNhc2UgMHhGRTpcbiAgICAgICAgICByZXR1cm4gdGhpcy5yZWFkKDEgKyA0KVxuICAgICAgICBjYXNlIDB4RkY6XG4gICAgICAgICAgcmV0dXJuIHRoaXMucmVhZCgxICsgOClcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gdGhpcy5yZWFkKDEpXG4gICAgICB9XG4gICAgfVxuXG4gICAgcmVhZFZhckludEJuICgpIHtcbiAgICAgIGxldCBmaXJzdCA9IHRoaXMucmVhZFVJbnQ4KClcbiAgICAgIHN3aXRjaCAoZmlyc3QpIHtcbiAgICAgICAgY2FzZSAweEZEOlxuICAgICAgICAgIHJldHVybiBuZXcgQm4odGhpcy5yZWFkVUludDE2TEUoKSlcbiAgICAgICAgY2FzZSAweEZFOlxuICAgICAgICAgIHJldHVybiBuZXcgQm4odGhpcy5yZWFkVUludDMyTEUoKSlcbiAgICAgICAgY2FzZSAweEZGOlxuICAgICAgICAgIHJldHVybiB0aGlzLnJlYWRVSW50NjRMRUJuKClcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gbmV3IEJuKGZpcnN0KVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBCclxufVxuXG5pbmplY3QgPSByZXF1aXJlKCdpbmplY3RlcicpKGluamVjdCwgZGVwZW5kZW5jaWVzKVxubGV0IEJyID0gaW5qZWN0KClcbm1vZHVsZS5leHBvcnRzID0gQnJcbiIsIi8qKlxuICogQnVmZmVyIFdyaXRlclxuICogPT09PT09PT09PT09PVxuICpcbiAqIFRoaXMgaXMgdGhlIHdyaXRpbmcgY29tcGxlbWVudCBvZiB0aGUgQnIuIFlvdSBjYW4gZWFzaWx5IHdyaXRlXG4gKiBWYXJJbnRzIGFuZCBvdGhlciBiYXNpYyBudW1iZXIgdHlwZXMuIFRoZSB3YXkgdG8gdXNlIGl0IGlzOiBidWYgPVxuICogbmV3IEJ3KCkud3JpdGUoYnVmMSkud3JpdGUoYnVmMikudG9CdWZmZXIoKVxuICovXG4ndXNlIHN0cmljdCdcbmxldCBkZXBlbmRlbmNpZXMgPSB7XG59XG5cbmxldCBpbmplY3QgPSBmdW5jdGlvbiAoZGVwcykge1xuICBjbGFzcyBCdyB7XG4gICAgY29uc3RydWN0b3IgKGJ1ZnMpIHtcbiAgICAgIHRoaXMuZnJvbU9iamVjdCh7YnVmc30pXG4gICAgfVxuXG4gICAgZnJvbU9iamVjdCAob2JqKSB7XG4gICAgICB0aGlzLmJ1ZnMgPSBvYmouYnVmcyB8fCB0aGlzLmJ1ZnMgfHwgW11cbiAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuXG4gICAgZ2V0TGVuZ3RoICgpIHtcbiAgICAgIGxldCBsZW4gPSAwXG4gICAgICBmb3IgKGxldCBpIGluIHRoaXMuYnVmcykge1xuICAgICAgICBsZXQgYnVmID0gdGhpcy5idWZzW2ldXG4gICAgICAgIGxlbiA9IGxlbiArIGJ1Zi5sZW5ndGhcbiAgICAgIH1cbiAgICAgIHJldHVybiBsZW5cbiAgICB9XG5cbiAgICB0b0J1ZmZlciAoKSB7XG4gICAgICByZXR1cm4gQnVmZmVyLmNvbmNhdCh0aGlzLmJ1ZnMpXG4gICAgfVxuXG4gICAgd3JpdGUgKGJ1Zikge1xuICAgICAgdGhpcy5idWZzLnB1c2goYnVmKVxuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG5cbiAgICB3cml0ZVJldmVyc2UgKGJ1Zikge1xuICAgICAgbGV0IGJ1ZjIgPSBuZXcgQnVmZmVyKGJ1Zi5sZW5ndGgpXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJ1ZjIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgYnVmMltpXSA9IGJ1ZltidWYubGVuZ3RoIC0gMSAtIGldXG4gICAgICB9XG4gICAgICB0aGlzLmJ1ZnMucHVzaChidWYyKVxuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG5cbiAgICB3cml0ZVVJbnQ4IChuKSB7XG4gICAgICBsZXQgYnVmID0gbmV3IEJ1ZmZlcigxKVxuICAgICAgYnVmLndyaXRlVUludDgobiwgMClcbiAgICAgIHRoaXMud3JpdGUoYnVmKVxuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG5cbiAgICB3cml0ZUludDggKG4pIHtcbiAgICAgIGxldCBidWYgPSBuZXcgQnVmZmVyKDEpXG4gICAgICBidWYud3JpdGVJbnQ4KG4sIDApXG4gICAgICB0aGlzLndyaXRlKGJ1ZilcbiAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuXG4gICAgd3JpdGVVSW50MTZCRSAobikge1xuICAgICAgbGV0IGJ1ZiA9IG5ldyBCdWZmZXIoMilcbiAgICAgIGJ1Zi53cml0ZVVJbnQxNkJFKG4sIDApXG4gICAgICB0aGlzLndyaXRlKGJ1ZilcbiAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuXG4gICAgd3JpdGVJbnQxNkJFIChuKSB7XG4gICAgICBsZXQgYnVmID0gbmV3IEJ1ZmZlcigyKVxuICAgICAgYnVmLndyaXRlSW50MTZCRShuLCAwKVxuICAgICAgdGhpcy53cml0ZShidWYpXG4gICAgICByZXR1cm4gdGhpc1xuICAgIH1cblxuICAgIHdyaXRlVUludDE2TEUgKG4pIHtcbiAgICAgIGxldCBidWYgPSBuZXcgQnVmZmVyKDIpXG4gICAgICBidWYud3JpdGVVSW50MTZMRShuLCAwKVxuICAgICAgdGhpcy53cml0ZShidWYpXG4gICAgICByZXR1cm4gdGhpc1xuICAgIH1cblxuICAgIHdyaXRlSW50MTZMRSAobikge1xuICAgICAgbGV0IGJ1ZiA9IG5ldyBCdWZmZXIoMilcbiAgICAgIGJ1Zi53cml0ZUludDE2TEUobiwgMClcbiAgICAgIHRoaXMud3JpdGUoYnVmKVxuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG5cbiAgICB3cml0ZVVJbnQzMkJFIChuKSB7XG4gICAgICBsZXQgYnVmID0gbmV3IEJ1ZmZlcig0KVxuICAgICAgYnVmLndyaXRlVUludDMyQkUobiwgMClcbiAgICAgIHRoaXMud3JpdGUoYnVmKVxuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG5cbiAgICB3cml0ZUludDMyQkUgKG4pIHtcbiAgICAgIGxldCBidWYgPSBuZXcgQnVmZmVyKDQpXG4gICAgICBidWYud3JpdGVJbnQzMkJFKG4sIDApXG4gICAgICB0aGlzLndyaXRlKGJ1ZilcbiAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuXG4gICAgd3JpdGVVSW50MzJMRSAobikge1xuICAgICAgbGV0IGJ1ZiA9IG5ldyBCdWZmZXIoNClcbiAgICAgIGJ1Zi53cml0ZVVJbnQzMkxFKG4sIDApXG4gICAgICB0aGlzLndyaXRlKGJ1ZilcbiAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuXG4gICAgd3JpdGVJbnQzMkxFIChuKSB7XG4gICAgICBsZXQgYnVmID0gbmV3IEJ1ZmZlcig0KVxuICAgICAgYnVmLndyaXRlSW50MzJMRShuLCAwKVxuICAgICAgdGhpcy53cml0ZShidWYpXG4gICAgICByZXR1cm4gdGhpc1xuICAgIH1cblxuICAgIHdyaXRlVUludDY0QkVCbiAoYm4pIHtcbiAgICAgIGxldCBidWYgPSBibi50b0J1ZmZlcih7c2l6ZTogOH0pXG4gICAgICB0aGlzLndyaXRlKGJ1ZilcbiAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuXG4gICAgd3JpdGVVSW50NjRMRUJuIChibikge1xuICAgICAgbGV0IGJ1ZiA9IGJuLnRvQnVmZmVyKHtzaXplOiA4fSlcbiAgICAgIHRoaXMud3JpdGVSZXZlcnNlKGJ1ZilcbiAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuXG4gICAgd3JpdGVWYXJJbnROdW0gKG4pIHtcbiAgICAgIGxldCBidWYgPSBCdy52YXJJbnRCdWZOdW0obilcbiAgICAgIHRoaXMud3JpdGUoYnVmKVxuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG5cbiAgICB3cml0ZVZhckludEJuIChibikge1xuICAgICAgbGV0IGJ1ZiA9IEJ3LnZhckludEJ1ZkJuKGJuKVxuICAgICAgdGhpcy53cml0ZShidWYpXG4gICAgICByZXR1cm4gdGhpc1xuICAgIH1cblxuICAgIHN0YXRpYyB2YXJJbnRCdWZOdW0gKG4pIHtcbiAgICAgIGxldCBidWZcbiAgICAgIGlmIChuIDwgMjUzKSB7XG4gICAgICAgIGJ1ZiA9IG5ldyBCdWZmZXIoMSlcbiAgICAgICAgYnVmLndyaXRlVUludDgobiwgMClcbiAgICAgIH0gZWxzZSBpZiAobiA8IDB4MTAwMDApIHtcbiAgICAgICAgYnVmID0gbmV3IEJ1ZmZlcigxICsgMilcbiAgICAgICAgYnVmLndyaXRlVUludDgoMjUzLCAwKVxuICAgICAgICBidWYud3JpdGVVSW50MTZMRShuLCAxKVxuICAgICAgfSBlbHNlIGlmIChuIDwgMHgxMDAwMDAwMDApIHtcbiAgICAgICAgYnVmID0gbmV3IEJ1ZmZlcigxICsgNClcbiAgICAgICAgYnVmLndyaXRlVUludDgoMjU0LCAwKVxuICAgICAgICBidWYud3JpdGVVSW50MzJMRShuLCAxKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYnVmID0gbmV3IEJ1ZmZlcigxICsgOClcbiAgICAgICAgYnVmLndyaXRlVUludDgoMjU1LCAwKVxuICAgICAgICBidWYud3JpdGVJbnQzMkxFKG4gJiAtMSwgMSlcbiAgICAgICAgYnVmLndyaXRlVUludDMyTEUoTWF0aC5mbG9vcihuIC8gMHgxMDAwMDAwMDApLCA1KVxuICAgICAgfVxuICAgICAgcmV0dXJuIGJ1ZlxuICAgIH1cblxuICAgIHN0YXRpYyB2YXJJbnRCdWZCbiAoYm4pIHtcbiAgICAgIGxldCBidWZcbiAgICAgIGxldCBuID0gYm4udG9OdW1iZXIoKVxuICAgICAgaWYgKG4gPCAyNTMpIHtcbiAgICAgICAgYnVmID0gbmV3IEJ1ZmZlcigxKVxuICAgICAgICBidWYud3JpdGVVSW50OChuLCAwKVxuICAgICAgfSBlbHNlIGlmIChuIDwgMHgxMDAwMCkge1xuICAgICAgICBidWYgPSBuZXcgQnVmZmVyKDEgKyAyKVxuICAgICAgICBidWYud3JpdGVVSW50OCgyNTMsIDApXG4gICAgICAgIGJ1Zi53cml0ZVVJbnQxNkxFKG4sIDEpXG4gICAgICB9IGVsc2UgaWYgKG4gPCAweDEwMDAwMDAwMCkge1xuICAgICAgICBidWYgPSBuZXcgQnVmZmVyKDEgKyA0KVxuICAgICAgICBidWYud3JpdGVVSW50OCgyNTQsIDApXG4gICAgICAgIGJ1Zi53cml0ZVVJbnQzMkxFKG4sIDEpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZXQgYncgPSBuZXcgQncoKVxuICAgICAgICBidy53cml0ZVVJbnQ4KDI1NSlcbiAgICAgICAgYncud3JpdGVVSW50NjRMRUJuKGJuKVxuICAgICAgICBidWYgPSBidy50b0J1ZmZlcigpXG4gICAgICB9XG4gICAgICByZXR1cm4gYnVmXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIEJ3XG59XG5cbmluamVjdCA9IHJlcXVpcmUoJ2luamVjdGVyJykoaW5qZWN0LCBkZXBlbmRlbmNpZXMpXG5sZXQgQncgPSBpbmplY3QoKVxubW9kdWxlLmV4cG9ydHMgPSBCd1xuIiwiLyoqXG4gKiBDb25zdGFudC1UaW1lIEJ1ZmZlciBDb21wYXJlXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKlxuICogQSBjb25zdGFudC10aW1lIGNvbXBhcmlzb24gZnVuY3Rpb24uIFRoaXMgc2hvdWxkIGJlIHVzZWQgaW4gYW55IHNlY3VyaXR5XG4gKiBzZW5zaXRpdmUgY29kZSB3aGVyZSBsZWFraW5nIHRpbWluZyBpbmZvcm1hdGlvbiBtYXkgbGVhZCB0byBsZXNzZW5lZFxuICogc2VjdXJpdHkuIE5vdGUgdGhhdCBpZiB0aGUgYnVmZmVycyBhcmUgbm90IGVxdWFsIGluIGxlbmd0aCwgdGhpcyBmdW5jdGlvblxuICogbG9vcHMgZm9yIHRoZSBsb25nZXN0IGJ1ZmZlciwgd2hpY2ggbWF5IG5vdCBiZSBuZWNlc3NhcnkuIFVzdWFsbHkgdGhpc1xuICogZnVuY3Rpb24gc2hvdWxkIGJlIHVzZWQgZm9yIGJ1ZmZlcnMgdGhhdCB3b3VsZCBvdGhlcndpc2UgYmUgZXF1YWwgbGVuZ3RoLFxuICogc3VjaCBhcyBhIGhhc2gsIHBhcnRpY3VsYXJseSBIbWFjcy5cbiAqXG4gKiBUaGUgYWxnb3JpdGhtIGhlcmUsIHdoaWNoIGlzIFhPUnMgZWFjaCBieXRlIChvciwgaWYgdW5kZWZpbmVkLCAwKSB3aXRoIHRoZVxuICogY29ycmVzcG9uZGluZyBvdGhlciBieXRlLCBhbmQgdGhlbiBPUnMgdGhhdCB3aXRoIGEgcnVubmluZyB0b3RhbCAoZCksIGlzXG4gKiBhZGFwdGVkIGZyb20gaGVyZTpcbiAqXG4gKiBodHRwczovL2dyb3Vwcy5nb29nbGUuY29tL2ZvcnVtLyMhdG9waWMva2V5Y3phci1kaXNjdXNzL1ZYSHNvSlNMS2hNXG4gKi9cbid1c2Ugc3RyaWN0J1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjbXAgKGJ1ZjEsIGJ1ZjIpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmMSkgfHwgIUJ1ZmZlci5pc0J1ZmZlcihidWYyKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignYnVmMSBhbmQgYnVmMiBtdXN0IGJlIGJ1ZmZlcnMnKVxuICB9XG4gIGlmIChidWYxLmxlbmd0aCAhPT0gYnVmMi5sZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIGxldCBkID0gMFxuICBmb3IgKGxldCBpID0gMDsgaSA8IGJ1ZjEubGVuZ3RoOyBpKyspIHtcbiAgICBsZXQgeCA9IGJ1ZjFbaV1cbiAgICBsZXQgeSA9IGJ1ZjJbaV1cbiAgICBkIHw9ICh4IF4geSlcbiAgfVxuXG4gIHJldHVybiBkID09PSAwXG59XG4iLCIvKipcbiAqIENvbnN0YW50c1xuICogPT09PT09PT09XG4gKlxuICogQ29uc3RhbnRzIHVzZWQgdG8gZGlzdGluZ3Vpc2ggbWFpbm5ldCBmcm9tIHRlc3RuZXQuXG4gKi9cbid1c2Ugc3RyaWN0J1xuXG5sZXQgQ29uc3RhbnRzID0gbW9kdWxlLmV4cG9ydHNcblxuQ29uc3RhbnRzLk1haW5uZXQgPSB7XG4gIG1heHNpemU6IDB4MDIwMDAwMDAsIC8vIE1BWF9TSVpFXG4gIEFkZHJlc3M6IHtcbiAgICBwdWJLZXlIYXNoOiAweDAwLFxuICAgIHNjcmlwdEhhc2g6IDB4MDVcbiAgfSxcbiAgQmlwMzI6IHtcbiAgICBwdWJLZXk6IDB4MDQ4OGIyMWUsXG4gICAgcHJpdktleTogMHgwNDg4YWRlNFxuICB9LFxuICBCbG9jazoge1xuICAgIG1heE5CaXRzOiAweDFkMDBmZmZmLFxuICAgIG1hZ2ljTnVtOiAweGY5YmViNGQ5XG4gIH0sXG4gIE1zZzoge1xuICAgIG1hZ2ljTnVtOiAweGY5YmViNGQ5LFxuICAgIHZlcnNpb25CeXRlc051bTogNzAwMTIgLy8gYXMgb2YgQml0Y29pbiBDb3JlIHYwLjEyLjBcbiAgfSxcbiAgUHJpdktleToge1xuICAgIHZlcnNpb25CeXRlTnVtOiAweDgwXG4gIH0sXG4gIFN0ZWFsdGhBZGRyZXNzOiB7XG4gICAgdmVyc2lvbkJ5dGVOdW06IDQyXG4gIH0sXG4gIFR4QnVpbGRlcjoge1xuICAgIGZlZVBlcktiTnVtOiAwLjAwMDFlOCxcbiAgICBkdXN0TnVtOiA1NDZcbiAgfVxufVxuXG5Db25zdGFudHMuVGVzdG5ldCA9IE9iamVjdC5hc3NpZ24oe30sIENvbnN0YW50cy5NYWlubmV0LCB7XG4gIEFkZHJlc3M6IHtcbiAgICBwdWJLZXlIYXNoOiAweDZmLFxuICAgIHNjcmlwdEhhc2g6IDB4YzRcbiAgfSxcbiAgQmlwMzI6IHtcbiAgICBwdWJLZXk6IDB4MDQzNTg3Y2YsXG4gICAgcHJpdktleTogMHgwNDM1ODM5NFxuICB9LFxuICBCbG9jazoge1xuICAgIG1heE5CaXRzOiAweDFkMDBmZmZmLFxuICAgIG1hZ2ljTnVtOiAweDBiMTEwOTA3XG4gIH0sXG4gIE1zZzoge1xuICAgIG1hZ2ljTnVtOiAweDBiMTEwOTA3LFxuICAgIHZlcnNpb25CeXRlc051bTogNzAwMTIgLy8gYXMgb2YgQml0Y29pbiBDb3JlIHYwLjEyLjBcbiAgfSxcbiAgTmV0d29yazoge1xuICAgIG1heGNvbm5lY3Rpb25zOiAyMCxcbiAgICBtaW5jb25uZWN0aW9uczogOCxcbiAgICBwb3J0OiA4MzMzLFxuICAgIHJlbmRlenZvdXM6IHtcbiAgICAgIGhvc3Q6ICdsb2NhbGhvc3QnLFxuICAgICAgcG9ydDogMzAwMCxcbiAgICAgIHBhdGg6ICcvJ1xuICAgIH1cbiAgfSxcbiAgUHJpdktleToge1xuICAgIHZlcnNpb25CeXRlTnVtOiAweGVmXG4gIH0sXG4gIFN0ZWFsdGhBZGRyZXNzOiB7XG4gICAgdmVyc2lvbkJ5dGVOdW06IDQzXG4gIH1cbn0pXG5cbkNvbnN0YW50cy5SZWd0ZXN0ID0gT2JqZWN0LmFzc2lnbih7fSwgQ29uc3RhbnRzLk1haW5uZXQsIHtcbiAgTmV0d29yazoge1xuICAgIG1heGNvbm5lY3Rpb25zOiAyMCxcbiAgICBtaW5jb25uZWN0aW9uczogOCxcbiAgICBwb3J0OiAxODQ0NCxcbiAgICByZW5kZXp2b3VzOiB7XG4gICAgICBob3N0OiAnbG9jYWxob3N0JyxcbiAgICAgIHBvcnQ6IDMwMDAsXG4gICAgICBwYXRoOiAnLydcbiAgICB9XG4gIH1cbn0pXG5cbi8qKlxuICogWW91cnMgQml0Y29pbiBjYW4gYmUgZ2xvYmFsbHkgY29uZmlndXJlZCB0byBtYWlubmV0LCB0ZXN0bmV0LCBvciByZWd0ZXN0LiBWaWEgdGhlXG4gKiBpbmplY3QgcGF0dGVybiwgeW91IGFsd2F5cyBoYXZlIGFjY2VzcyB0byB0aGUgb3RoZXIgbmV0d29ya3MgYXQgYW55IHRpbWUuXG4gKiBIb3dldmVyLCBpdCBpcyB2ZXJ5IGNvbnZlbmllbnQgdG8gYmUgYWJsZSB0byBjaGFuZ2UgdGhlIGRlZmF1bHRcbiAqIGNvbmZpZ3VyYXRpb24uIFRoZSBkZWZhdWx0IGlzIG1haW5uZXQsIHdoaWNoIGNhbiBiZSBjaGFuZ2VkIHRvIHRlc3RuZXQgb3JcbiAqIHJlZ3Rlc3QuXG4gKi9cbmlmIChwcm9jZXNzLmVudi5ZT1VSU19CSVRDT0lOX05FVFdPUksgPT09ICd0ZXN0bmV0Jykge1xuICBDb25zdGFudHMuRGVmYXVsdCA9IE9iamVjdC5hc3NpZ24oe30sIENvbnN0YW50cy5UZXN0bmV0KVxufSBlbHNlIGlmIChwcm9jZXNzLmVudi5ZT1VSU19CSVRDT0lOX05FVFdPUksgPT09ICdyZWd0ZXN0Jykge1xuICBDb25zdGFudHMuRGVmYXVsdCA9IE9iamVjdC5hc3NpZ24oe30sIENvbnN0YW50cy5SZWd0ZXN0KVxufSBlbHNlIHtcbiAgcHJvY2Vzcy5lbnYuWU9VUlNfQklUQ09JTl9ORVRXT1JLID0gJ21haW5uZXQnXG4gIENvbnN0YW50cy5EZWZhdWx0ID0gT2JqZWN0LmFzc2lnbih7fSwgQ29uc3RhbnRzLk1haW5uZXQpXG59XG4iLCIvKipcbiAqIEVjZHNhXG4gKiA9PT09PVxuICpcbiAqIEVjZHNhIGlzIHRoZSBzaWduYXR1cmUgYWxnb3JpdGhtIHVzZWQgYnkgYml0Y29pbi4gVGhlIHdheSB5b3UgcHJvYmFibHkgd2FudFxuICogdG8gdXNlIHRoaXMgaXMgd2l0aCB0aGUgc3RhdGljIEVjZHNhLnNpZ24oIC4uLiApIGFuZCBFY2RzYS52ZXJpZnkoIC4uLiApXG4gKiBmdW5jdGlvbnMuIE5vdGUgdGhhdCBpbiBiaXRjb2luLCB0aGUgaGFzaEJ1ZiBpcyBsaXR0bGUgZW5kaWFuLCBzbyBpZiB5b3UgYXJlXG4gKiBzaWduSW5nIG9yIHZlcmlmeWluZyBzb21ldGhpbmcgdGhhdCBoYXMgdG8gZG8gd2l0aCBhIHRyYW5zYWN0aW9uLCB5b3Ugc2hvdWxkXG4gKiBleHBsaWNpdGx5IHBsdWcgaW4gdGhhdCBpdCBpcyBsaXR0bGUgZW5kaWFuIGFzIGFuIG9wdGlvbiB0byB0aGUgc2lnbiBhbmRcbiAqIHZlcmlmeSBmdW5jdGlvbnMuXG4gKlxuICogVGhpcyBpbXBsZW1lbnRhdGlvbiBvZiBFY2RzYSB1c2VzIGRldGVybWluaXN0aWMgc2lnbmF0dXJlcyBhcyBkZWZpbmVkIGluIFJGQ1xuICogNjk3OSBhcyB0aGUgZGVmYXVsdCwgd2hpY2ggaGFzIGJlY29tZSBhIGRlZmFjdG8gc3RhbmRhcmQgaW4gYml0Y29pbiB3YWxsZXRzXG4gKiBkdWUgdG8gcmVjdXJyaW5nIHNlY3VyaXR5IGlzc3VlcyBhcm91bmQgdXNpbmcgYSB2YWx1ZSBvZiBrIHB1bGxlZCBmcm9tIGFcbiAqIHBvc3NpYmx5IGZhdWx0eSBlbnRyb3B5IHBvb2wuIElmIHlvdSB1c2UgdGhlIHNhbWUgdmFsdWUgb2YgayB0d2ljZSwgc29tZW9uZVxuICogY2FuIGRlcml2ZSB5b3VyIHByaXZhdGUga2V5LiBEZXRlcm1pbmlzdGljIGsgcHJldmVudHMgdGhpcyB3aXRob3V0IG5lZWRpbmdcbiAqIGFuIGVudHJvcHkgcG9vbC5cbiAqL1xuJ3VzZSBzdHJpY3QnXG5sZXQgZGVwZW5kZW5jaWVzID0ge1xuICBCbjogcmVxdWlyZSgnLi9ibicpLFxuICBIYXNoOiByZXF1aXJlKCcuL2hhc2gnKSxcbiAgS2V5UGFpcjogcmVxdWlyZSgnLi9rZXktcGFpcicpLFxuICBQb2ludDogcmVxdWlyZSgnLi9wb2ludCcpLFxuICBQdWJLZXk6IHJlcXVpcmUoJy4vcHViLWtleScpLFxuICBSYW5kb206IHJlcXVpcmUoJy4vcmFuZG9tJyksXG4gIFNpZzogcmVxdWlyZSgnLi9zaWcnKSxcbiAgU3RydWN0OiByZXF1aXJlKCcuL3N0cnVjdCcpLFxuICBXb3JrZXJzOiByZXF1aXJlKCcuL3dvcmtlcnMnKSxcbiAgYXNpbms6IHJlcXVpcmUoJ2FzaW5rJylcbn1cblxubGV0IGluamVjdCA9IGZ1bmN0aW9uIChkZXBzKSB7XG4gIGxldCBCbiA9IGRlcHMuQm5cbiAgbGV0IEhhc2ggPSBkZXBzLkhhc2hcbiAgbGV0IEtleVBhaXIgPSBkZXBzLktleVBhaXJcbiAgbGV0IFBvaW50ID0gZGVwcy5Qb2ludFxuICBsZXQgUHViS2V5ID0gZGVwcy5QdWJLZXlcbiAgbGV0IFJhbmRvbSA9IGRlcHMuUmFuZG9tXG4gIGxldCBTaWcgPSBkZXBzLlNpZ1xuICBsZXQgU3RydWN0ID0gZGVwcy5TdHJ1Y3RcbiAgbGV0IFdvcmtlcnMgPSBkZXBzLldvcmtlcnNcbiAgbGV0IGFzaW5rID0gZGVwcy5hc2lua1xuXG4gIGNsYXNzIEVjZHNhIGV4dGVuZHMgU3RydWN0IHtcbiAgICBjb25zdHJ1Y3RvciAoc2lnLCBrZXlQYWlyLCBoYXNoQnVmLCBrLCBlbmRpYW4sIHZlcmlmaWVkKSB7XG4gICAgICBzdXBlcih7c2lnLCBrZXlQYWlyLCBoYXNoQnVmLCBrLCBlbmRpYW4sIHZlcmlmaWVkfSlcbiAgICB9XG5cbiAgICB0b0pTT04gKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc2lnOiB0aGlzLnNpZyA/IHRoaXMuc2lnLnRvU3RyaW5nKCkgOiB1bmRlZmluZWQsXG4gICAgICAgIGtleVBhaXI6IHRoaXMua2V5UGFpciA/IHRoaXMua2V5UGFpci50b0J1ZmZlcigpLnRvU3RyaW5nKCdoZXgnKSA6IHVuZGVmaW5lZCxcbiAgICAgICAgaGFzaEJ1ZjogdGhpcy5oYXNoQnVmID8gdGhpcy5oYXNoQnVmLnRvU3RyaW5nKCdoZXgnKSA6IHVuZGVmaW5lZCxcbiAgICAgICAgazogdGhpcy5rID8gdGhpcy5rLnRvU3RyaW5nKCkgOiB1bmRlZmluZWQsXG4gICAgICAgIGVuZGlhbjogdGhpcy5lbmRpYW4sXG4gICAgICAgIHZlcmlmaWVkOiB0aGlzLnZlcmlmaWVkXG4gICAgICB9XG4gICAgfVxuXG4gICAgZnJvbUpTT04gKGpzb24pIHtcbiAgICAgIHRoaXMuc2lnID0ganNvbi5zaWcgPyBuZXcgU2lnKCkuZnJvbVN0cmluZyhqc29uLnNpZykgOiB1bmRlZmluZWRcbiAgICAgIHRoaXMua2V5UGFpciA9IGpzb24ua2V5UGFpciA/IG5ldyBLZXlQYWlyKCkuZnJvbUJ1ZmZlcihuZXcgQnVmZmVyKGpzb24ua2V5UGFpciwgJ2hleCcpKSA6IHVuZGVmaW5lZFxuICAgICAgdGhpcy5oYXNoQnVmID0ganNvbi5oYXNoQnVmID8gbmV3IEJ1ZmZlcihqc29uLmhhc2hCdWYsICdoZXgnKSA6IHVuZGVmaW5lZFxuICAgICAgdGhpcy5rID0ganNvbi5rID8gbmV3IEJuKCkuZnJvbVN0cmluZyhqc29uLmspIDogdW5kZWZpbmVkXG4gICAgICB0aGlzLmVuZGlhbiA9IGpzb24uZW5kaWFuXG4gICAgICB0aGlzLnZlcmlmaWVkID0ganNvbi52ZXJpZmllZFxuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG5cbiAgICB0b0J1ZmZlciAoKSB7XG4gICAgICBsZXQgc3RyID0gSlNPTi5zdHJpbmdpZnkodGhpcy50b0pTT04oKSlcbiAgICAgIHJldHVybiBuZXcgQnVmZmVyKHN0cilcbiAgICB9XG5cbiAgICBmcm9tQnVmZmVyIChidWYpIHtcbiAgICAgIGxldCBqc29uID0gSlNPTi5wYXJzZShidWYudG9TdHJpbmcoKSlcbiAgICAgIHJldHVybiB0aGlzLmZyb21KU09OKGpzb24pXG4gICAgfVxuXG4gICAgY2FsY3JlY292ZXJ5ICgpIHtcbiAgICAgIGZvciAobGV0IHJlY292ZXJ5ID0gMDsgcmVjb3ZlcnkgPCA0OyByZWNvdmVyeSsrKSB7XG4gICAgICAgIGxldCBRcHJpbWVcbiAgICAgICAgdGhpcy5zaWcucmVjb3ZlcnkgPSByZWNvdmVyeVxuICAgICAgICB0cnkge1xuICAgICAgICAgIFFwcmltZSA9IHRoaXMuc2lnMlB1YktleSgpXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKFFwcmltZS5wb2ludC5lcSh0aGlzLmtleVBhaXIucHViS2V5LnBvaW50KSkge1xuICAgICAgICAgIGxldCBjb21wcmVzc2VkID0gdGhpcy5rZXlQYWlyLnB1YktleS5jb21wcmVzc2VkXG4gICAgICAgICAgdGhpcy5zaWcuY29tcHJlc3NlZCA9IHRoaXMua2V5UGFpci5wdWJLZXkuY29tcHJlc3NlZCA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IGNvbXByZXNzZWRcbiAgICAgICAgICByZXR1cm4gdGhpc1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuc2lnLnJlY292ZXJ5ID0gdW5kZWZpbmVkXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VuYWJsZSB0byBmaW5kIHZhbGlkIHJlY292ZXJ5IGZhY3RvcicpXG4gICAgfVxuXG4gICAgYXN5bmNDYWxjcmVjb3ZlcnkgKCkge1xuICAgICAgcmV0dXJuIGFzaW5rKGZ1bmN0aW9uICogKCkge1xuICAgICAgICBsZXQgd29ya2Vyc1Jlc3VsdCA9IHlpZWxkIFdvcmtlcnMuYXN5bmNPYmplY3RNZXRob2QodGhpcywgJ2NhbGNyZWNvdmVyeScsIFtdKVxuICAgICAgICByZXR1cm4gdGhpcy5mcm9tRmFzdEJ1ZmZlcih3b3JrZXJzUmVzdWx0LnJlc2J1ZilcbiAgICAgIH0sIHRoaXMpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2FsY3VsYXRlcyB0aGUgcmVjb3ZlcnkgZmFjdG9yLCBhbmQgbXV0YXRlcyBzaWcgc28gdGhhdCBpdCBub3cgY29udGFpbnNcbiAgICAgKiB0aGUgcmVjb3ZlcnkgZmFjdG9yIGFuZCB0aGUgXCJjb21wcmVzc2VkXCIgdmFyaWFibGUuIFRocm93cyBhbiBleGNlcHRpb24gb25cbiAgICAgKiBmYWlsdXJlLlxuICAgICAqL1xuICAgIHN0YXRpYyBjYWxjcmVjb3ZlcnkgKHNpZywgcHViS2V5LCBoYXNoQnVmKSB7XG4gICAgICBsZXQgZWNkc2EgPSBuZXcgRWNkc2EoKS5mcm9tT2JqZWN0KHtcbiAgICAgICAgc2lnOiBzaWcsXG4gICAgICAgIGtleVBhaXI6IG5ldyBLZXlQYWlyKCkuZnJvbU9iamVjdCh7cHViS2V5OiBwdWJLZXl9KSxcbiAgICAgICAgaGFzaEJ1ZjogaGFzaEJ1ZlxuICAgICAgfSlcbiAgICAgIHJldHVybiBlY2RzYS5jYWxjcmVjb3ZlcnkoKS5zaWdcbiAgICB9XG5cbiAgICBzdGF0aWMgYXN5bmNDYWxjcmVjb3ZlcnkgKHNpZywgcHViS2V5LCBoYXNoQnVmKSB7XG4gICAgICByZXR1cm4gYXNpbmsoZnVuY3Rpb24gKiAoKSB7XG4gICAgICAgIGxldCB3b3JrZXJzUmVzdWx0ID0geWllbGQgV29ya2Vycy5hc3luY0NsYXNzTWV0aG9kKCdFY2RzYScsICdjYWxjcmVjb3ZlcnknLCBbc2lnLCBwdWJLZXksIGhhc2hCdWZdKVxuICAgICAgICByZXR1cm4gbmV3IFNpZygpLmZyb21GYXN0QnVmZmVyKHdvcmtlcnNSZXN1bHQucmVzYnVmKVxuICAgICAgfSwgdGhpcylcbiAgICB9XG5cbiAgICBmcm9tU3RyaW5nIChzdHIpIHtcbiAgICAgIGxldCBvYmogPSBKU09OLnBhcnNlKHN0cilcbiAgICAgIGlmIChvYmouaGFzaEJ1Zikge1xuICAgICAgICB0aGlzLmhhc2hCdWYgPSBuZXcgQnVmZmVyKG9iai5oYXNoQnVmLCAnaGV4JylcbiAgICAgIH1cbiAgICAgIGlmIChvYmoua2V5UGFpcikge1xuICAgICAgICB0aGlzLmtleVBhaXIgPSBuZXcgS2V5UGFpcigpLmZyb21TdHJpbmcob2JqLmtleVBhaXIpXG4gICAgICB9XG4gICAgICBpZiAob2JqLnNpZykge1xuICAgICAgICB0aGlzLnNpZyA9IG5ldyBTaWcoKS5mcm9tU3RyaW5nKG9iai5zaWcpXG4gICAgICB9XG4gICAgICBpZiAob2JqLmspIHtcbiAgICAgICAgdGhpcy5rID0gbmV3IEJuKG9iai5rLCAxMClcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuXG4gICAgcmFuZG9tSyAoKSB7XG4gICAgICBsZXQgTiA9IFBvaW50LmdldE4oKVxuICAgICAgbGV0IGtcbiAgICAgIGRvIHtcbiAgICAgICAgayA9IG5ldyBCbigpLmZyb21CdWZmZXIoUmFuZG9tLmdldFJhbmRvbUJ1ZmZlcigzMikpXG4gICAgICB9IHdoaWxlICghKGsubHQoTikgJiYgay5ndCgwKSkpXG4gICAgICB0aGlzLmsgPSBrXG4gICAgICByZXR1cm4gdGhpc1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSB0cmFkaXRpb25hbCBFY2RzYSBhbGdvcml0aG0gdXNlcyBhIHB1cmVseSByYW5kb20gdmFsdWUgb2Ygay4gVGhpcyBoYXNcbiAgICAgKiB0aGUgbmVnYXRpdmUgdGhhdCB3aGVuIHNpZ25JbmcsIHlvdXIgZW50cm9weSBtdXN0IGJlIGdvb2QsIG9yIHRoZSBwcml2YXRlXG4gICAgICoga2V5IGNhbiBiZSByZWNvdmVyZWQgaWYgdHdvIHNpZ25hdHVyZXMgdXNlIHRoZSBzYW1lIHZhbHVlIG9mIGsuIEl0IHR1cm5zIG91dFxuICAgICAqIHRoYXQgayBkb2VzIG5vdCBoYXZlIHRvIGJlIHB1cmVseSByYW5kb20uIEl0IGNhbiBiZSBkZXRlcm1pbmlzdGljLCBzbyBsb25nXG4gICAgICogYXMgYW4gYXR0YWNrZXIgY2FuJ3QgZ3Vlc3MgaXQuIFJGQyA2OTc5IHNwZWNpZmllcyBob3cgdG8gZG8gdGhpcyB1c2luZyBhXG4gICAgICogY29tYmluYXRpb24gb2YgdGhlIHByaXZhdGUga2V5IGFuZCB0aGUgaGFzaCBvZiB0aGUgdGhpbmcgdG8gYmUgc2lnbmVkLiBJdCBpc1xuICAgICAqIGJlc3QgcHJhY3RpY2UgdG8gdXNlIHRoaXMgdmFsdWUsIHdoaWNoIGNhbiBiZSB0ZXN0ZWQgZm9yIGJ5dGUtZm9yLWJ5dGVcbiAgICAgKiBhY2N1cmFjeSwgYW5kIGlzIHJlc2lzdGFudCB0byBhIGJyb2tlbiBSTkcuIE5vdGUgdGhhdCBpdCBpcyBhY3R1YWxseSB0aGVcbiAgICAgKiBjYXNlIHRoYXQgYml0Y29pbiBwcml2YXRlIGtleXMgaGF2ZSBiZWVuIGNvbXByb21pc2VkIHRocm91Z2ggdGhhdCBhdHRhY2suXG4gICAgICogRGV0ZXJtaW5pc3RpYyBrIGlzIGEgYmVzdCBwcmFjdGljZS5cbiAgICAgKlxuICAgICAqIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmM2OTc5I3NlY3Rpb24tMy4yXG4gICAgICovXG4gICAgZGV0ZXJtaW5pc3RpY0sgKGJhZHJzKSB7XG4gICAgICBsZXQgdiA9IG5ldyBCdWZmZXIoMzIpXG4gICAgICB2LmZpbGwoMHgwMSlcbiAgICAgIGxldCBrID0gbmV3IEJ1ZmZlcigzMilcbiAgICAgIGsuZmlsbCgweDAwKVxuICAgICAgbGV0IHggPSB0aGlzLmtleVBhaXIucHJpdktleS5ibi50b0J1ZmZlcih7c2l6ZTogMzJ9KVxuICAgICAgayA9IEhhc2guc2hhMjU2SG1hYyhCdWZmZXIuY29uY2F0KFt2LCBuZXcgQnVmZmVyKFsweDAwXSksIHgsIHRoaXMuaGFzaEJ1Zl0pLCBrKVxuICAgICAgdiA9IEhhc2guc2hhMjU2SG1hYyh2LCBrKVxuICAgICAgayA9IEhhc2guc2hhMjU2SG1hYyhCdWZmZXIuY29uY2F0KFt2LCBuZXcgQnVmZmVyKFsweDAxXSksIHgsIHRoaXMuaGFzaEJ1Zl0pLCBrKVxuICAgICAgdiA9IEhhc2guc2hhMjU2SG1hYyh2LCBrKVxuICAgICAgdiA9IEhhc2guc2hhMjU2SG1hYyh2LCBrKVxuICAgICAgbGV0IFQgPSBuZXcgQm4oKS5mcm9tQnVmZmVyKHYpXG4gICAgICBsZXQgTiA9IFBvaW50LmdldE4oKVxuXG4gICAgICAvLyBpZiByIG9yIHMgd2VyZSBpbnZhbGlkIHdoZW4gdGhpcyBmdW5jdGlvbiB3YXMgdXNlZCBpbiBzaWduSW5nLFxuICAgICAgLy8gd2UgZG8gbm90IHdhbnQgdG8gYWN0dWFsbHkgY29tcHV0ZSByLCBzIGhlcmUgZm9yIGVmZmljaWVuY3ksIHNvLFxuICAgICAgLy8gd2UgY2FuIGluY3JlbWVudCBiYWRycy4gZXhwbGFpbmVkIGF0IGVuZCBvZiBSRkMgNjk3OSBzZWN0aW9uIDMuMlxuICAgICAgaWYgKGJhZHJzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgYmFkcnMgPSAwXG4gICAgICB9XG4gICAgICAvLyBhbHNvIGV4cGxhaW5lZCBpbiAzLjIsIHdlIG11c3QgZW5zdXJlIFQgaXMgaW4gdGhlIHByb3BlciByYW5nZSAoMCwgTilcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYmFkcnMgfHwgIShULmx0KE4pICYmIFQuZ3QoMCkpOyBpKyspIHtcbiAgICAgICAgayA9IEhhc2guc2hhMjU2SG1hYyhCdWZmZXIuY29uY2F0KFt2LCBuZXcgQnVmZmVyKFsweDAwXSldKSwgaylcbiAgICAgICAgdiA9IEhhc2guc2hhMjU2SG1hYyh2LCBrKVxuICAgICAgICB2ID0gSGFzaC5zaGEyNTZIbWFjKHYsIGspXG4gICAgICAgIFQgPSBuZXcgQm4oKS5mcm9tQnVmZmVyKHYpXG4gICAgICB9XG5cbiAgICAgIHRoaXMuayA9IFRcbiAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW5mb3JtYXRpb24gYWJvdXQgcHVibGljIGtleSByZWNvdmVyeTpcbiAgICAgKiBodHRwczovL2JpdGNvaW50YWxrLm9yZy9pbmRleC5waHA/dG9waWM9NjQzMC4wXG4gICAgICogaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8xOTY2NTQ5MS9ob3ctZG8taS1nZXQtYW4tZWNkc2EtcHVibGljLWtleS1mcm9tLWp1c3QtYS1iaXRjb2luLXNpZ25hdHVyZS1zZWMxLTQtMS02LWtcbiAgICAgKiBUaGlzIGNvZGUgd2FzIG9yaWdpbmFsbHkgdGFrZW4gZnJvbSBCaXRjb2luSlNcbiAgICAgKi9cbiAgICBzaWcyUHViS2V5ICgpIHtcbiAgICAgIGxldCByZWNvdmVyeSA9IHRoaXMuc2lnLnJlY292ZXJ5XG4gICAgICBpZiAoIShyZWNvdmVyeSA9PT0gMCB8fCByZWNvdmVyeSA9PT0gMSB8fCByZWNvdmVyeSA9PT0gMiB8fCByZWNvdmVyeSA9PT0gMykpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpIG11c3QgYmUgZXF1YWwgdG8gMCwgMSwgMiwgb3IgMycpXG4gICAgICB9XG5cbiAgICAgIGxldCBlID0gbmV3IEJuKCkuZnJvbUJ1ZmZlcih0aGlzLmhhc2hCdWYpXG4gICAgICBsZXQgciA9IHRoaXMuc2lnLnJcbiAgICAgIGxldCBzID0gdGhpcy5zaWcuc1xuXG4gICAgICAvLyBBIHNldCBMU0Igc2lnbmlmaWVzIHRoYXQgdGhlIHktY29vcmRpbmF0ZSBpcyBvZGRcbiAgICAgIGxldCBpc1lPZGQgPSByZWNvdmVyeSAmIDFcblxuICAgICAgLy8gVGhlIG1vcmUgc2lnbmlmaWNhbnQgYml0IHNwZWNpZmllcyB3aGV0aGVyIHdlIHNob3VsZCB1c2UgdGhlXG4gICAgICAvLyBmaXJzdCBvciBzZWNvbmQgY2FuZGlkYXRlIGtleS5cbiAgICAgIGxldCBpc1NlY29uZEtleSA9IHJlY292ZXJ5ID4+IDFcblxuICAgICAgbGV0IG4gPSBQb2ludC5nZXROKClcbiAgICAgIGxldCBHID0gUG9pbnQuZ2V0RygpXG5cbiAgICAgIC8vIDEuMSBMRXQgeCA9IHIgKyBqblxuICAgICAgbGV0IHggPSBpc1NlY29uZEtleSA/IHIuYWRkKG4pIDogclxuICAgICAgbGV0IFIgPSBQb2ludC5mcm9tWChpc1lPZGQsIHgpXG5cbiAgICAgIC8vIDEuNCBDaGVjayB0aGF0IG5SIGlzIGF0IGluZmluaXR5XG4gICAgICBsZXQgblIgPSBSLm11bChuKVxuXG4gICAgICBpZiAoIW5SLmlzSW5maW5pdHkoKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ25SIGlzIG5vdCBhIHZhbGlkIGN1cnZlIHBvaW50JylcbiAgICAgIH1cblxuICAgICAgLy8gQ29tcHV0ZSAtZSBmcm9tIGVcbiAgICAgIGxldCBlTmVnID0gZS5uZWcoKS51bW9kKG4pXG5cbiAgICAgIC8vIDEuNi4xIENvbXB1dGUgUSA9IHJeLTEgKHNSIC0gZUcpXG4gICAgICAvLyBRID0gcl4tMSAoc1IgKyAtZUcpXG4gICAgICBsZXQgckludiA9IHIuaW52bShuKVxuXG4gICAgICAvLyBsZXQgUSA9IFIubXVsdGlwbHlUd28ocywgRywgZU5lZykubXVsKHJJbnYpXG4gICAgICBsZXQgUSA9IFIubXVsKHMpLmFkZChHLm11bChlTmVnKSkubXVsKHJJbnYpXG5cbiAgICAgIGxldCBwdWJLZXkgPSBuZXcgUHViS2V5KFEpXG4gICAgICBwdWJLZXkuY29tcHJlc3NlZCA9IHRoaXMuc2lnLmNvbXByZXNzZWRcbiAgICAgIHB1YktleS52YWxpZGF0ZSgpXG5cbiAgICAgIHJldHVybiBwdWJLZXlcbiAgICB9XG5cbiAgICBhc3luY1NpZzJQdWJLZXkgKCkge1xuICAgICAgcmV0dXJuIGFzaW5rKGZ1bmN0aW9uICogKCkge1xuICAgICAgICBsZXQgd29ya2Vyc1Jlc3VsdCA9IHlpZWxkIFdvcmtlcnMuYXN5bmNPYmplY3RNZXRob2QodGhpcywgJ3NpZzJQdWJLZXknLCBbXSlcbiAgICAgICAgcmV0dXJuIFB1YktleS5mcm9tRmFzdEJ1ZmZlcih3b3JrZXJzUmVzdWx0LnJlc2J1ZilcbiAgICAgIH0sIHRoaXMpXG4gICAgfVxuXG4gICAgc3RhdGljIHNpZzJQdWJLZXkgKHNpZywgaGFzaEJ1Zikge1xuICAgICAgbGV0IGVjZHNhID0gbmV3IEVjZHNhKCkuZnJvbU9iamVjdCh7XG4gICAgICAgIHNpZzogc2lnLFxuICAgICAgICBoYXNoQnVmOiBoYXNoQnVmXG4gICAgICB9KVxuICAgICAgcmV0dXJuIGVjZHNhLnNpZzJQdWJLZXkoKVxuICAgIH1cblxuICAgIHN0YXRpYyBhc3luY1NpZzJQdWJLZXkgKHNpZywgaGFzaEJ1Zikge1xuICAgICAgcmV0dXJuIGFzaW5rKGZ1bmN0aW9uICogKCkge1xuICAgICAgICBsZXQgZWNkc2EgPSBuZXcgRWNkc2EoKS5mcm9tT2JqZWN0KHtcbiAgICAgICAgICBzaWc6IHNpZyxcbiAgICAgICAgICBoYXNoQnVmOiBoYXNoQnVmXG4gICAgICAgIH0pXG4gICAgICAgIGxldCBwdWJLZXkgPSB5aWVsZCBlY2RzYS5hc3luY1NpZzJQdWJLZXkoKVxuICAgICAgICByZXR1cm4gcHViS2V5XG4gICAgICB9LCB0aGlzKVxuICAgIH1cblxuICAgIHZlcmlmeVN0ciAoKSB7XG4gICAgICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcih0aGlzLmhhc2hCdWYpIHx8IHRoaXMuaGFzaEJ1Zi5sZW5ndGggIT09IDMyKSB7XG4gICAgICAgIHJldHVybiAnaGFzaEJ1ZiBtdXN0IGJlIGEgMzIgYnl0ZSBidWZmZXInXG4gICAgICB9XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIHRoaXMua2V5UGFpci5wdWJLZXkudmFsaWRhdGUoKVxuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gJ0ludmFsaWQgcHViS2V5OiAnICsgZVxuICAgICAgfVxuXG4gICAgICBsZXQgciA9IHRoaXMuc2lnLnJcbiAgICAgIGxldCBzID0gdGhpcy5zaWcuc1xuICAgICAgaWYgKCEoci5ndCgwKSAmJiByLmx0KFBvaW50LmdldE4oKSkpIHx8XG4gICAgICAgICEocy5ndCgwKSAmJiBzLmx0KFBvaW50LmdldE4oKSkpKSB7XG4gICAgICAgIHJldHVybiAnciBhbmQgcyBub3QgaW4gcmFuZ2UnXG4gICAgICB9XG5cbiAgICAgIGxldCBlID0gbmV3IEJuKCkuZnJvbUJ1ZmZlcih0aGlzLmhhc2hCdWYsIHRoaXMuZW5kaWFuID8ge2VuZGlhbjogdGhpcy5lbmRpYW59IDogdW5kZWZpbmVkKVxuICAgICAgbGV0IG4gPSBQb2ludC5nZXROKClcbiAgICAgIGxldCBzaW52ID0gcy5pbnZtKG4pXG4gICAgICBsZXQgdTEgPSBzaW52Lm11bChlKS5tb2QobilcbiAgICAgIGxldCB1MiA9IHNpbnYubXVsKHIpLm1vZChuKVxuXG4gICAgICBsZXQgcCA9IFBvaW50LmdldEcoKS5tdWxBZGQodTEsIHRoaXMua2V5UGFpci5wdWJLZXkucG9pbnQsIHUyKVxuICAgICAgLy8gbGV0IHAgPSBQb2ludC5nZXRHKCkubXVsQWRkKHUxLCB0aGlzLmtleVBhaXIucHViS2V5LnBvaW50LCB1MilcbiAgICAgIGlmIChwLmlzSW5maW5pdHkoKSkge1xuICAgICAgICByZXR1cm4gJ3AgaXMgaW5maW5pdHknXG4gICAgICB9XG5cbiAgICAgIGlmICghKHAuZ2V0WCgpLm1vZChuKS5jbXAocikgPT09IDApKSB7XG4gICAgICAgIHJldHVybiAnSW52YWxpZCBzaWduYXR1cmUnXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICB9XG5cbiAgICBzaWduICgpIHtcbiAgICAgIGxldCBoYXNoQnVmID0gdGhpcy5oYXNoQnVmXG4gICAgICBsZXQgcHJpdktleSA9IHRoaXMua2V5UGFpci5wcml2S2V5XG5cbiAgICAgIGxldCBkID0gcHJpdktleS5iblxuXG4gICAgICBpZiAoIWhhc2hCdWYgfHwgIXByaXZLZXkgfHwgIWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIHBhcmFtZXRlcnMnKVxuICAgICAgfVxuXG4gICAgICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihoYXNoQnVmKSB8fCBoYXNoQnVmLmxlbmd0aCAhPT0gMzIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdoYXNoQnVmIG11c3QgYmUgYSAzMiBieXRlIGJ1ZmZlcicpXG4gICAgICB9XG5cbiAgICAgIGxldCBOID0gUG9pbnQuZ2V0TigpXG4gICAgICBsZXQgRyA9IFBvaW50LmdldEcoKVxuICAgICAgbGV0IGUgPSBuZXcgQm4oKS5mcm9tQnVmZmVyKGhhc2hCdWYsIHRoaXMuZW5kaWFuID8ge2VuZGlhbjogdGhpcy5lbmRpYW59IDogdW5kZWZpbmVkKVxuXG4gICAgICAvLyB0cnkgZGlmZmVyZW50IHZhbHVlcyBvZiBrIHVudGlsIHIsIHMgYXJlIHZhbGlkXG4gICAgICBsZXQgYmFkcnMgPSAwXG4gICAgICBsZXQgaywgUSwgciwgc1xuICAgICAgZG8ge1xuICAgICAgICBpZiAoIXRoaXMuayB8fCBiYWRycyA+IDApIHtcbiAgICAgICAgICB0aGlzLmRldGVybWluaXN0aWNLKGJhZHJzKVxuICAgICAgICB9XG4gICAgICAgIGJhZHJzKytcbiAgICAgICAgayA9IHRoaXMua1xuICAgICAgICBRID0gRy5tdWwoaylcbiAgICAgICAgciA9IFEuZ2V0WCgpLm1vZChOKVxuICAgICAgICBzID0gay5pbnZtKE4pLm11bChlLmFkZChkLm11bChyKSkpLm1vZChOKVxuICAgICAgfSB3aGlsZSAoci5jbXAoMCkgPD0gMCB8fCBzLmNtcCgwKSA8PSAwKVxuXG4gICAgICAvLyBlbmZvcmNlIGxvdyBzXG4gICAgICAvLyBzZWUgQmlwIDYyLCBcImxvdyBTIHZhbHVlcyBpbiBzaWduYXR1cmVzXCJcbiAgICAgIGlmIChzLmd0KG5ldyBCbigpLmZyb21CdWZmZXIobmV3IEJ1ZmZlcignN0ZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkY1RDU3NkU3MzU3QTQ1MDFEREZFOTJGNDY2ODFCMjBBMCcsICdoZXgnKSkpKSB7XG4gICAgICAgIHMgPSBQb2ludC5nZXROKCkuc3ViKHMpXG4gICAgICB9XG4gICAgICB0aGlzLnNpZyA9IFNpZy5mcm9tT2JqZWN0KHtyOiByLCBzOiBzLCBjb21wcmVzc2VkOiB0aGlzLmtleVBhaXIucHViS2V5LmNvbXByZXNzZWR9KVxuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG5cbiAgICBhc3luY1NpZ24gKCkge1xuICAgICAgcmV0dXJuIGFzaW5rKGZ1bmN0aW9uICogKCkge1xuICAgICAgICBsZXQgd29ya2Vyc1Jlc3VsdCA9IHlpZWxkIFdvcmtlcnMuYXN5bmNPYmplY3RNZXRob2QodGhpcywgJ3NpZ24nLCBbXSlcbiAgICAgICAgcmV0dXJuIHRoaXMuZnJvbUZhc3RCdWZmZXIod29ya2Vyc1Jlc3VsdC5yZXNidWYpXG4gICAgICB9LCB0aGlzKVxuICAgIH1cblxuICAgIHNpZ25SYW5kb21LICgpIHtcbiAgICAgIHRoaXMucmFuZG9tSygpXG4gICAgICByZXR1cm4gdGhpcy5zaWduKClcbiAgICB9XG5cbiAgICB0b1N0cmluZyAoKSB7XG4gICAgICBsZXQgb2JqID0ge31cbiAgICAgIGlmICh0aGlzLmhhc2hCdWYpIHtcbiAgICAgICAgb2JqLmhhc2hCdWYgPSB0aGlzLmhhc2hCdWYudG9TdHJpbmcoJ2hleCcpXG4gICAgICB9XG4gICAgICBpZiAodGhpcy5rZXlQYWlyKSB7XG4gICAgICAgIG9iai5rZXlQYWlyID0gdGhpcy5rZXlQYWlyLnRvU3RyaW5nKClcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnNpZykge1xuICAgICAgICBvYmouc2lnID0gdGhpcy5zaWcudG9TdHJpbmcoKVxuICAgICAgfVxuICAgICAgaWYgKHRoaXMuaykge1xuICAgICAgICBvYmouayA9IHRoaXMuay50b1N0cmluZygpXG4gICAgICB9XG4gICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkob2JqKVxuICAgIH1cblxuICAgIHZlcmlmeSAoKSB7XG4gICAgICBpZiAoIXRoaXMudmVyaWZ5U3RyKCkpIHtcbiAgICAgICAgdGhpcy52ZXJpZmllZCA9IHRydWVcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMudmVyaWZpZWQgPSBmYWxzZVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG5cbiAgICBhc3luY1ZlcmlmeSAoKSB7XG4gICAgICByZXR1cm4gYXNpbmsoZnVuY3Rpb24gKiAoKSB7XG4gICAgICAgIGxldCB3b3JrZXJzUmVzdWx0ID0geWllbGQgV29ya2Vycy5hc3luY09iamVjdE1ldGhvZCh0aGlzLCAndmVyaWZ5JywgW10pXG4gICAgICAgIHJldHVybiB0aGlzLmZyb21GYXN0QnVmZmVyKHdvcmtlcnNSZXN1bHQucmVzYnVmKVxuICAgICAgfSwgdGhpcylcbiAgICB9XG5cbiAgICBzdGF0aWMgc2lnbiAoaGFzaEJ1Ziwga2V5UGFpciwgZW5kaWFuKSB7XG4gICAgICByZXR1cm4gbmV3IEVjZHNhKCkuZnJvbU9iamVjdCh7XG4gICAgICAgIGhhc2hCdWY6IGhhc2hCdWYsXG4gICAgICAgIGVuZGlhbjogZW5kaWFuLFxuICAgICAgICBrZXlQYWlyOiBrZXlQYWlyXG4gICAgICB9KS5zaWduKCkuc2lnXG4gICAgfVxuXG4gICAgc3RhdGljIGFzeW5jU2lnbiAoaGFzaEJ1Ziwga2V5UGFpciwgZW5kaWFuKSB7XG4gICAgICByZXR1cm4gYXNpbmsoZnVuY3Rpb24gKiAoKSB7XG4gICAgICAgIGxldCBlY2RzYSA9IG5ldyBFY2RzYSgpLmZyb21PYmplY3Qoe1xuICAgICAgICAgIGhhc2hCdWY6IGhhc2hCdWYsXG4gICAgICAgICAgZW5kaWFuOiBlbmRpYW4sXG4gICAgICAgICAga2V5UGFpcjoga2V5UGFpclxuICAgICAgICB9KVxuICAgICAgICB5aWVsZCBlY2RzYS5hc3luY1NpZ24oKVxuICAgICAgICByZXR1cm4gZWNkc2Euc2lnXG4gICAgICB9LCB0aGlzKVxuICAgIH1cblxuICAgIHN0YXRpYyB2ZXJpZnkgKGhhc2hCdWYsIHNpZywgcHViS2V5LCBlbmRpYW4pIHtcbiAgICAgIHJldHVybiBuZXcgRWNkc2EoKS5mcm9tT2JqZWN0KHtcbiAgICAgICAgaGFzaEJ1ZjogaGFzaEJ1ZixcbiAgICAgICAgZW5kaWFuOiBlbmRpYW4sXG4gICAgICAgIHNpZzogc2lnLFxuICAgICAgICBrZXlQYWlyOiBuZXcgS2V5UGFpcigpLmZyb21PYmplY3Qoe3B1YktleTogcHViS2V5fSlcbiAgICAgIH0pLnZlcmlmeSgpLnZlcmlmaWVkXG4gICAgfVxuXG4gICAgc3RhdGljIGFzeW5jVmVyaWZ5IChoYXNoQnVmLCBzaWcsIHB1YktleSwgZW5kaWFuKSB7XG4gICAgICByZXR1cm4gYXNpbmsoZnVuY3Rpb24gKiAoKSB7XG4gICAgICAgIGxldCBlY2RzYSA9IG5ldyBFY2RzYSgpLmZyb21PYmplY3Qoe1xuICAgICAgICAgIGhhc2hCdWY6IGhhc2hCdWYsXG4gICAgICAgICAgZW5kaWFuOiBlbmRpYW4sXG4gICAgICAgICAgc2lnOiBzaWcsXG4gICAgICAgICAga2V5UGFpcjogbmV3IEtleVBhaXIoKS5mcm9tT2JqZWN0KHtwdWJLZXk6IHB1YktleX0pXG4gICAgICAgIH0pXG4gICAgICAgIHlpZWxkIGVjZHNhLmFzeW5jVmVyaWZ5KClcbiAgICAgICAgcmV0dXJuIGVjZHNhLnZlcmlmaWVkXG4gICAgICB9LCB0aGlzKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBFY2RzYVxufVxuXG5pbmplY3QgPSByZXF1aXJlKCdpbmplY3RlcicpKGluamVjdCwgZGVwZW5kZW5jaWVzKVxubGV0IEVjZHNhID0gaW5qZWN0KClcbkVjZHNhLk1haW5uZXQgPSBpbmplY3Qoe1xuICBLZXlQYWlyOiByZXF1aXJlKCcuL2tleS1wYWlyJykuTWFpbm5ldFxufSlcbkVjZHNhLlRlc3RuZXQgPSBpbmplY3Qoe1xuICBLZXlQYWlyOiByZXF1aXJlKCcuL2tleS1wYWlyJykuVGVzdG5ldFxufSlcbm1vZHVsZS5leHBvcnRzID0gRWNkc2FcbiIsIi8qKlxuICogSGFzaFxuICogPT09PVxuICpcbiAqIFNvbWUgaGFzaCBmdW5jdGlvbnMgYXJlIHVzZWQgdGhyb3VnaCBvdXQgYml0Y29pbi4gV2UgZXhwb3NlIHRoZW0gaGVyZSBhcyBhXG4gKiBjb252ZW5pZW5jZS5cbiAqL1xuJ3VzZSBzdHJpY3QnXG5sZXQgZGVwZW5kZW5jaWVzID0ge1xuICBXb3JrZXJzOiByZXF1aXJlKCcuL3dvcmtlcnMnKSxcbiAgYXNpbms6IHJlcXVpcmUoJ2FzaW5rJyksXG4gIGhhc2hqczogcmVxdWlyZSgnaGFzaC5qcycpXG59XG5cbmxldCBpbmplY3QgPSBmdW5jdGlvbiAoZGVwcykge1xuICBsZXQgV29ya2VycyA9IGRlcHMuV29ya2Vyc1xuICBsZXQgYXNpbmsgPSBkZXBzLmFzaW5rXG4gIGxldCBoYXNoanMgPSBkZXBzLmhhc2hqc1xuXG4gIGxldCBIYXNoID0ge31cblxuICBIYXNoLnNoYTEgPSBmdW5jdGlvbiAoYnVmKSB7XG4gICAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdzaGExIGhhc2ggbXVzdCBiZSBvZiBhIGJ1ZmZlcicpXG4gICAgfVxuICAgIGxldCBTaGExID0gaGFzaGpzLnNoYTFcbiAgICBsZXQgaGFzaCA9IChuZXcgU2hhMSgpKS51cGRhdGUoYnVmKS5kaWdlc3QoKVxuICAgIHJldHVybiBuZXcgQnVmZmVyKGhhc2gpXG4gIH1cblxuICBIYXNoLnNoYTEuYmxvY2tTaXplID0gNTEyXG5cbiAgSGFzaC5hc3luY1NoYTEgPSBmdW5jdGlvbiAoYnVmKSB7XG4gICAgcmV0dXJuIGFzaW5rKGZ1bmN0aW9uICogKCkge1xuICAgICAgbGV0IGFyZ3MgPSBbYnVmXVxuICAgICAgbGV0IHdvcmtlcnNSZXN1bHQgPSB5aWVsZCBXb3JrZXJzLmFzeW5jQ2xhc3NNZXRob2QoJ0hhc2gnLCAnc2hhMScsIGFyZ3MpXG4gICAgICByZXR1cm4gd29ya2Vyc1Jlc3VsdC5yZXNidWZcbiAgICB9LCB0aGlzKVxuICB9XG5cbiAgSGFzaC5zaGEyNTYgPSBmdW5jdGlvbiAoYnVmKSB7XG4gICAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdzaGEyNTYgaGFzaCBtdXN0IGJlIG9mIGEgYnVmZmVyJylcbiAgICB9XG4gICAgbGV0IFNoYTI1NiA9IGhhc2hqcy5zaGEyNTZcbiAgICBsZXQgaGFzaCA9IChuZXcgU2hhMjU2KCkpLnVwZGF0ZShidWYpLmRpZ2VzdCgpXG4gICAgcmV0dXJuIG5ldyBCdWZmZXIoaGFzaClcbiAgfVxuXG4gIEhhc2guc2hhMjU2LmJsb2NrU2l6ZSA9IDUxMlxuXG4gIEhhc2guYXN5bmNTaGEyNTYgPSBmdW5jdGlvbiAoYnVmKSB7XG4gICAgcmV0dXJuIGFzaW5rKGZ1bmN0aW9uICogKCkge1xuICAgICAgbGV0IGFyZ3MgPSBbYnVmXVxuICAgICAgbGV0IHdvcmtlcnNSZXN1bHQgPSB5aWVsZCBXb3JrZXJzLmFzeW5jQ2xhc3NNZXRob2QoJ0hhc2gnLCAnc2hhMjU2JywgYXJncylcbiAgICAgIHJldHVybiB3b3JrZXJzUmVzdWx0LnJlc2J1ZlxuICAgIH0sIHRoaXMpXG4gIH1cblxuICBIYXNoLnNoYTI1NlNoYTI1NiA9IGZ1bmN0aW9uIChidWYpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIEhhc2guc2hhMjU2KEhhc2guc2hhMjU2KGJ1ZikpXG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdzaGEyNTZTaGEyNTYgaGFzaCBtdXN0IGJlIG9mIGEgYnVmZmVyOiAnICsgZSlcbiAgICB9XG4gIH1cblxuICBIYXNoLmFzeW5jU2hhMjU2U2hhMjU2ID0gZnVuY3Rpb24gKGJ1Zikge1xuICAgIHJldHVybiBhc2luayhmdW5jdGlvbiAqICgpIHtcbiAgICAgIGxldCBhcmdzID0gW2J1Zl1cbiAgICAgIGxldCB3b3JrZXJzUmVzdWx0ID0geWllbGQgV29ya2Vycy5hc3luY0NsYXNzTWV0aG9kKCdIYXNoJywgJ3NoYTI1NlNoYTI1NicsIGFyZ3MpXG4gICAgICByZXR1cm4gd29ya2Vyc1Jlc3VsdC5yZXNidWZcbiAgICB9LCB0aGlzKVxuICB9XG5cbiAgSGFzaC5yaXBlbWQxNjAgPSBmdW5jdGlvbiAoYnVmKSB7XG4gICAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdyaXBlbWQxNjAgaGFzaCBtdXN0IGJlIG9mIGEgYnVmZmVyJylcbiAgICB9XG4gICAgbGV0IFJpcGVtZDE2MCA9IGhhc2hqcy5yaXBlbWQxNjBcbiAgICBsZXQgaGFzaCA9IChuZXcgUmlwZW1kMTYwKCkpLnVwZGF0ZShidWYpLmRpZ2VzdCgpXG4gICAgcmV0dXJuIG5ldyBCdWZmZXIoaGFzaClcbiAgfVxuXG4gIEhhc2guYXN5bmNSaXBlbWQxNjAgPSBmdW5jdGlvbiAoYnVmKSB7XG4gICAgcmV0dXJuIGFzaW5rKGZ1bmN0aW9uICogKCkge1xuICAgICAgbGV0IGFyZ3MgPSBbYnVmXVxuICAgICAgbGV0IHdvcmtlcnNSZXN1bHQgPSB5aWVsZCBXb3JrZXJzLmFzeW5jQ2xhc3NNZXRob2QoJ0hhc2gnLCAncmlwZW1kMTYwJywgYXJncylcbiAgICAgIHJldHVybiB3b3JrZXJzUmVzdWx0LnJlc2J1ZlxuICAgIH0sIHRoaXMpXG4gIH1cblxuICBIYXNoLnNoYTI1NlJpcGVtZDE2MCA9IGZ1bmN0aW9uIChidWYpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIEhhc2gucmlwZW1kMTYwKEhhc2guc2hhMjU2KGJ1ZikpXG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdzaGEyNTZSaXBlbWQxNjAgaGFzaCBtdXN0IGJlIG9mIGEgYnVmZmVyOiAnICsgZSlcbiAgICB9XG4gIH1cblxuICBIYXNoLmFzeW5jU2hhMjU2UmlwZW1kMTYwID0gZnVuY3Rpb24gKGJ1Zikge1xuICAgIHJldHVybiBhc2luayhmdW5jdGlvbiAqICgpIHtcbiAgICAgIGxldCBhcmdzID0gW2J1Zl1cbiAgICAgIGxldCB3b3JrZXJzUmVzdWx0ID0geWllbGQgV29ya2Vycy5hc3luY0NsYXNzTWV0aG9kKCdIYXNoJywgJ3NoYTI1NlJpcGVtZDE2MCcsIGFyZ3MpXG4gICAgICByZXR1cm4gd29ya2Vyc1Jlc3VsdC5yZXNidWZcbiAgICB9LCB0aGlzKVxuICB9XG5cbiAgSGFzaC5zaGE1MTIgPSBmdW5jdGlvbiAoYnVmKSB7XG4gICAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdzaGE1MTIgaGFzaCBtdXN0IGJlIG9mIGEgYnVmZmVyJylcbiAgICB9XG4gICAgbGV0IFNoYTUxMiA9IGhhc2hqcy5zaGE1MTJcbiAgICBsZXQgaGFzaCA9IChuZXcgU2hhNTEyKCkpLnVwZGF0ZShidWYpLmRpZ2VzdCgpXG4gICAgcmV0dXJuIG5ldyBCdWZmZXIoaGFzaClcbiAgfVxuXG4gIEhhc2guYXN5bmNTaGE1MTIgPSBmdW5jdGlvbiAoYnVmKSB7XG4gICAgcmV0dXJuIGFzaW5rKGZ1bmN0aW9uICogKCkge1xuICAgICAgbGV0IGFyZ3MgPSBbYnVmXVxuICAgICAgbGV0IHdvcmtlcnNSZXN1bHQgPSB5aWVsZCBXb3JrZXJzLmFzeW5jQ2xhc3NNZXRob2QoJ0hhc2gnLCAnc2hhNTEyJywgYXJncylcbiAgICAgIHJldHVybiB3b3JrZXJzUmVzdWx0LnJlc2J1ZlxuICAgIH0sIHRoaXMpXG4gIH1cblxuICBIYXNoLnNoYTUxMi5ibG9ja1NpemUgPSAxMDI0XG5cbiAgSGFzaC5obWFjID0gZnVuY3Rpb24gKGhhc2hGU3RyLCBkYXRhLCBrZXkpIHtcbiAgICBpZiAoaGFzaEZTdHIgIT09ICdzaGExJyAmJiBoYXNoRlN0ciAhPT0gJ3NoYTI1NicgJiYgaGFzaEZTdHIgIT09ICdzaGE1MTInKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgY2hvaWNlIG9mIGhhc2ggZnVuY3Rpb24nKVxuICAgIH1cblxuICAgIGxldCBoYXNoZiA9IEhhc2hbaGFzaEZTdHJdXG5cbiAgICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihkYXRhKSB8fCAhQnVmZmVyLmlzQnVmZmVyKGtleSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignZGF0YSBhbmQga2V5IG11c3QgYmUgYnVmZmVycycpXG4gICAgfVxuXG4gICAgLy8gaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9IYXNoLWJhc2VkX21lc3NhZ2VfYXV0aGVudGljYXRpb25fY29kZVxuICAgIC8vIGh0dHA6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzQ4Njgjc2VjdGlvbi0yXG4gICAgbGV0IGJsb2NrU2l6ZSA9IGhhc2hmLmJsb2NrU2l6ZSAvIDhcblxuICAgIGlmIChrZXkubGVuZ3RoID4gYmxvY2tTaXplKSB7XG4gICAgICBrZXkgPSBoYXNoZihrZXkpXG4gICAgfVxuXG4gICAgaWYgKGtleS5sZW5ndGggPCBibG9ja1NpemUpIHtcbiAgICAgIGxldCBmaWxsID0gbmV3IEJ1ZmZlcihibG9ja1NpemUpXG4gICAgICBmaWxsLmZpbGwoMCwga2V5Lmxlbmd0aClcbiAgICAgIGtleS5jb3B5KGZpbGwpXG4gICAgICBrZXkgPSBmaWxsXG4gICAgfVxuXG4gICAgbGV0IG9LZXlQYWQgPSBuZXcgQnVmZmVyKGJsb2NrU2l6ZSlcbiAgICBsZXQgaUtleVBhZCA9IG5ldyBCdWZmZXIoYmxvY2tTaXplKVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYmxvY2tTaXplOyBpKyspIHtcbiAgICAgIG9LZXlQYWRbaV0gPSAweDVjIF4ga2V5W2ldXG4gICAgICBpS2V5UGFkW2ldID0gMHgzNiBeIGtleVtpXVxuICAgIH1cblxuICAgIHJldHVybiBoYXNoZihCdWZmZXIuY29uY2F0KFtvS2V5UGFkLCBoYXNoZihCdWZmZXIuY29uY2F0KFtpS2V5UGFkLCBkYXRhXSkpXSkpXG4gIH1cblxuICBIYXNoLnNoYTFIbWFjID0gZnVuY3Rpb24gKGRhdGEsIGtleSkge1xuICAgIHJldHVybiBIYXNoLmhtYWMoJ3NoYTEnLCBkYXRhLCBrZXkpXG4gIH1cblxuICBIYXNoLmFzeW5jU2hhMUhtYWMgPSBmdW5jdGlvbiAoZGF0YSwga2V5KSB7XG4gICAgcmV0dXJuIGFzaW5rKGZ1bmN0aW9uICogKCkge1xuICAgICAgbGV0IGFyZ3MgPSBbZGF0YSwga2V5XVxuICAgICAgbGV0IHdvcmtlcnNSZXN1bHQgPSB5aWVsZCBXb3JrZXJzLmFzeW5jQ2xhc3NNZXRob2QoJ0hhc2gnLCAnc2hhMUhtYWMnLCBhcmdzKVxuICAgICAgcmV0dXJuIHdvcmtlcnNSZXN1bHQucmVzYnVmXG4gICAgfSwgdGhpcylcbiAgfVxuXG4gIEhhc2guc2hhMUhtYWMuYml0c2l6ZSA9IDE2MFxuXG4gIEhhc2guc2hhMjU2SG1hYyA9IGZ1bmN0aW9uIChkYXRhLCBrZXkpIHtcbiAgICByZXR1cm4gSGFzaC5obWFjKCdzaGEyNTYnLCBkYXRhLCBrZXkpXG4gIH1cblxuICBIYXNoLmFzeW5jU2hhMjU2SG1hYyA9IGZ1bmN0aW9uIChkYXRhLCBrZXkpIHtcbiAgICByZXR1cm4gYXNpbmsoZnVuY3Rpb24gKiAoKSB7XG4gICAgICBsZXQgYXJncyA9IFtkYXRhLCBrZXldXG4gICAgICBsZXQgd29ya2Vyc1Jlc3VsdCA9IHlpZWxkIFdvcmtlcnMuYXN5bmNDbGFzc01ldGhvZCgnSGFzaCcsICdzaGEyNTZIbWFjJywgYXJncylcbiAgICAgIHJldHVybiB3b3JrZXJzUmVzdWx0LnJlc2J1ZlxuICAgIH0sIHRoaXMpXG4gIH1cblxuICBIYXNoLnNoYTI1NkhtYWMuYml0c2l6ZSA9IDI1NlxuXG4gIEhhc2guc2hhNTEySG1hYyA9IGZ1bmN0aW9uIChkYXRhLCBrZXkpIHtcbiAgICByZXR1cm4gSGFzaC5obWFjKCdzaGE1MTInLCBkYXRhLCBrZXkpXG4gIH1cblxuICBIYXNoLmFzeW5jU2hhNTEySG1hYyA9IGZ1bmN0aW9uIChkYXRhLCBrZXkpIHtcbiAgICByZXR1cm4gYXNpbmsoZnVuY3Rpb24gKiAoKSB7XG4gICAgICBsZXQgYXJncyA9IFtkYXRhLCBrZXldXG4gICAgICBsZXQgd29ya2Vyc1Jlc3VsdCA9IHlpZWxkIFdvcmtlcnMuYXN5bmNDbGFzc01ldGhvZCgnSGFzaCcsICdzaGE1MTJIbWFjJywgYXJncylcbiAgICAgIHJldHVybiB3b3JrZXJzUmVzdWx0LnJlc2J1ZlxuICAgIH0sIHRoaXMpXG4gIH1cblxuICBIYXNoLnNoYTUxMkhtYWMuYml0c2l6ZSA9IDUxMlxuXG4gIHJldHVybiBIYXNoXG59XG5cbmluamVjdCA9IHJlcXVpcmUoJ2luamVjdGVyJykoaW5qZWN0LCBkZXBlbmRlbmNpZXMpXG5sZXQgSGFzaCA9IGluamVjdCgpXG5tb2R1bGUuZXhwb3J0cyA9IEhhc2hcbiIsIi8qKlxuICogS2V5UGFpclxuICogPT09PT09PVxuICpcbiAqIEEga2V5UGFpciBpcyBhIGNvbGxlY3Rpb24gb2YgYSBwcml2YXRlIGtleSBhbmQgYSBwdWJsaWMga2V5LlxuICogbGV0IGtleVBhaXIgPSBuZXcgS2V5UGFpcigpLmZyb21SYW5kb20oKVxuICogbGV0IGtleVBhaXIgPSBuZXcgS2V5UGFpcigpLmZyb21Qcml2S2V5KHByaXZLZXkpXG4gKiBsZXQgcHJpdktleSA9IGtleVBhaXIucHJpdktleVxuICogbGV0IHB1YktleSA9IGtleVBhaXIucHViS2V5XG4gKi9cbid1c2Ugc3RyaWN0J1xubGV0IGRlcGVuZGVuY2llcyA9IHtcbiAgUHJpdktleTogcmVxdWlyZSgnLi9wcml2LWtleScpLFxuICBQdWJLZXk6IHJlcXVpcmUoJy4vcHViLWtleScpLFxuICBTdHJ1Y3Q6IHJlcXVpcmUoJy4vc3RydWN0JyksXG4gIEJ3OiByZXF1aXJlKCcuL2J3JyksXG4gIGFzaW5rOiByZXF1aXJlKCdhc2luaycpXG59XG5cbmxldCBpbmplY3QgPSBmdW5jdGlvbiAoZGVwcykge1xuICBsZXQgUHJpdktleSA9IGRlcHMuUHJpdktleVxuICBsZXQgUHViS2V5ID0gZGVwcy5QdWJLZXlcbiAgbGV0IFN0cnVjdCA9IGRlcHMuU3RydWN0XG4gIGxldCBCdyA9IGRlcHMuQndcbiAgbGV0IGFzaW5rID0gZGVwcy5hc2lua1xuXG4gIGNsYXNzIEtleVBhaXIgZXh0ZW5kcyBTdHJ1Y3Qge1xuICAgIGNvbnN0cnVjdG9yIChwcml2S2V5LCBwdWJLZXkpIHtcbiAgICAgIHN1cGVyKHtwcml2S2V5LCBwdWJLZXl9KVxuICAgIH1cblxuICAgIGZyb21KU09OIChqc29uKSB7XG4gICAgICBpZiAoanNvbi5wcml2S2V5KSB7XG4gICAgICAgIHRoaXMucHJpdktleSA9IFByaXZLZXkuZnJvbUpTT04oanNvbi5wcml2S2V5KVxuICAgICAgfVxuICAgICAgaWYgKGpzb24ucHViS2V5KSB7XG4gICAgICAgIHRoaXMucHViS2V5ID0gUHViS2V5LmZyb21KU09OKGpzb24ucHViS2V5KVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG4vKlxuICAgIHRvSlNPTiAoKSB7XG4gICAgICBsZXQganNvbiA9IHt9XG4gICAgICBpZiAodGhpcy5wcml2S2V5ICYmIHRoaXMucHJpdktleSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGpzb24ucHJpdktleSA9IHRoaXMucHJpdktleS50b0pTT04oKVxuICAgICAgfVxuICAgICAgaWYgKHRoaXMucHViS2V5ICYmIHRoaXMucHViS2V5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAganNvbi5wdWJLZXkgPSB0aGlzLnB1YktleS50b0pTT04oKVxuICAgICAgfVxuICAgICAgcmV0dXJuIGpzb25cbiAgICB9XG4qL1xuICAgIGZyb21CciAoYnIpIHtcbiAgICAgIGxldCBidWZsZW4xID0gYnIucmVhZFVJbnQ4KClcbiAgICAgIGlmIChidWZsZW4xID4gMCkge1xuICAgICAgICB0aGlzLnByaXZLZXkgPSBuZXcgUHJpdktleSgpLmZyb21GYXN0QnVmZmVyKGJyLnJlYWQoYnVmbGVuMSkpXG4gICAgICB9XG4gICAgICBsZXQgYnVmbGVuMiA9IGJyLnJlYWRVSW50OCgpXG4gICAgICBpZiAoYnVmbGVuMiA+IDApIHtcbiAgICAgICAgdGhpcy5wdWJLZXkgPSBuZXcgUHViS2V5KCkuZnJvbUZhc3RCdWZmZXIoYnIucmVhZChidWZsZW4yKSlcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuXG4gICAgdG9CdyAoYncpIHtcbiAgICAgIGlmICghYncpIHtcbiAgICAgICAgYncgPSBuZXcgQncoKVxuICAgICAgfVxuICAgICAgaWYgKHRoaXMucHJpdktleSkge1xuICAgICAgICBsZXQgcHJpdktleWJ1ZiA9IHRoaXMucHJpdktleS50b0Zhc3RCdWZmZXIoKVxuICAgICAgICBidy53cml0ZVVJbnQ4KHByaXZLZXlidWYubGVuZ3RoKVxuICAgICAgICBidy53cml0ZShwcml2S2V5YnVmKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYncud3JpdGVVSW50OCgwKVxuICAgICAgfVxuICAgICAgaWYgKHRoaXMucHViS2V5KSB7XG4gICAgICAgIGxldCBwdWJLZXlidWYgPSB0aGlzLnB1YktleS50b0Zhc3RCdWZmZXIoKVxuICAgICAgICBidy53cml0ZVVJbnQ4KHB1YktleWJ1Zi5sZW5ndGgpXG4gICAgICAgIGJ3LndyaXRlKHB1YktleWJ1ZilcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJ3LndyaXRlVUludDgoMClcbiAgICAgIH1cbiAgICAgIHJldHVybiBid1xuICAgIH1cblxuICAgIGZyb21TdHJpbmcgKHN0cikge1xuICAgICAgcmV0dXJuIHRoaXMuZnJvbUpTT04oSlNPTi5wYXJzZShzdHIpKVxuICAgIH1cblxuICAgIHRvU3RyaW5nICgpIHtcbiAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh0aGlzLnRvSlNPTigpKVxuICAgIH1cblxuICAgIHRvUHVibGljICgpIHtcbiAgICAgIGxldCBrZXlQYWlyID0gbmV3IEtleVBhaXIoKS5mcm9tT2JqZWN0KHRoaXMpXG4gICAgICBrZXlQYWlyLnByaXZLZXkgPSB1bmRlZmluZWRcbiAgICAgIHJldHVybiBrZXlQYWlyXG4gICAgfVxuXG4gICAgZnJvbVByaXZLZXkgKHByaXZLZXkpIHtcbiAgICAgIHRoaXMucHJpdktleSA9IHByaXZLZXlcbiAgICAgIHRoaXMucHViS2V5ID0gbmV3IFB1YktleSgpLmZyb21Qcml2S2V5KHByaXZLZXkpXG4gICAgICByZXR1cm4gdGhpc1xuICAgIH1cblxuICAgIHN0YXRpYyBmcm9tUHJpdktleSAocHJpdktleSkge1xuICAgICAgcmV0dXJuIG5ldyB0aGlzKCkuZnJvbVByaXZLZXkocHJpdktleSlcbiAgICB9XG5cbiAgICBhc3luY0Zyb21Qcml2S2V5IChwcml2S2V5KSB7XG4gICAgICByZXR1cm4gYXNpbmsoZnVuY3Rpb24gKiAoKSB7XG4gICAgICAgIHRoaXMucHJpdktleSA9IHByaXZLZXlcbiAgICAgICAgdGhpcy5wdWJLZXkgPSB5aWVsZCBuZXcgUHViS2V5KCkuYXN5bmNGcm9tUHJpdktleShwcml2S2V5KVxuICAgICAgICByZXR1cm4gdGhpc1xuICAgICAgfSwgdGhpcylcbiAgICB9XG5cbiAgICBzdGF0aWMgYXN5bmNGcm9tUHJpdktleSAocHJpdktleSkge1xuICAgICAgcmV0dXJuIG5ldyB0aGlzKCkuYXN5bmNGcm9tUHJpdktleShwcml2S2V5KVxuICAgIH1cblxuICAgIGZyb21SYW5kb20gKCkge1xuICAgICAgdGhpcy5wcml2S2V5ID0gbmV3IFByaXZLZXkoKS5mcm9tUmFuZG9tKClcbiAgICAgIHRoaXMucHViS2V5ID0gbmV3IFB1YktleSgpLmZyb21Qcml2S2V5KHRoaXMucHJpdktleSlcbiAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuXG4gICAgc3RhdGljIGZyb21SYW5kb20gKCkge1xuICAgICAgcmV0dXJuIG5ldyB0aGlzKCkuZnJvbVJhbmRvbSgpXG4gICAgfVxuXG4gICAgYXN5bmNGcm9tUmFuZG9tICgpIHtcbiAgICAgIHJldHVybiBhc2luayhmdW5jdGlvbiAqICgpIHtcbiAgICAgICAgdGhpcy5wcml2S2V5ID0gbmV3IFByaXZLZXkoKS5mcm9tUmFuZG9tKClcbiAgICAgICAgcmV0dXJuIHRoaXMuYXN5bmNGcm9tUHJpdktleSh0aGlzLnByaXZLZXkpXG4gICAgICB9LCB0aGlzKVxuICAgIH1cblxuICAgIHN0YXRpYyBhc3luY0Zyb21SYW5kb20gKCkge1xuICAgICAgcmV0dXJuIG5ldyB0aGlzKCkuYXN5bmNGcm9tUmFuZG9tKClcbiAgICB9XG4gIH1cblxuICByZXR1cm4gS2V5UGFpclxufVxuXG5pbmplY3QgPSByZXF1aXJlKCdpbmplY3RlcicpKGluamVjdCwgZGVwZW5kZW5jaWVzKVxubGV0IEtleVBhaXIgPSBpbmplY3QoKVxuS2V5UGFpci5NYWlubmV0ID0gaW5qZWN0KHtcbiAgUHJpdktleTogcmVxdWlyZSgnLi9wcml2LWtleScpLk1haW5uZXRcbn0pXG5LZXlQYWlyLlRlc3RuZXQgPSBpbmplY3Qoe1xuICBQcml2S2V5OiByZXF1aXJlKCcuL3ByaXYta2V5JykuVGVzdG5ldFxufSlcbm1vZHVsZS5leHBvcnRzID0gS2V5UGFpclxuIiwiLypcbiAqIE9wQ29kZVxuICogPT09PT09XG4gKlxuICogQW4gb3BDb2RlIGlzIG9uZSBvZiB0aGUgb3BlcmF0aW9ucyBpbiB0aGUgYml0Y29pbiBzY3JpcHRpbmcgbGFuZ3VhZ2UuIEVhY2hcbiAqIG9wZXJhdGlvbiBpcyBqdXN0IGEgbnVtYmVyIGZyb20gMC0yNTUsIGFuZCBpdCBoYXMgYSBjb3JyZXNwb25kaW5nIHN0cmluZyxcbiAqIGUuZy4gXCJPUF9SRVRVUk5cIiwgd2hpY2ggY29tZXMgZnJvbSB0aGUgbmFtZSBvZiB0aGF0IGNvbnN0YW50IGluIHRoZSBiaXRjb2luZFxuICogc291cmNlIGNvZGUuIFRoZSB3YXkgeW91IHByb2JhYmx5IHdhbnQgdG8gdXNlIHRoaXMgaXMgd2l0aFxuICogbmV3IE9wQ29kZShzdHIpLnRvTnVtYmVyKCkgb3IgbmV3IE9wQ29kZShudW0pLnRvU3RyaW5nKClcbiAqL1xuJ3VzZSBzdHJpY3QnXG5sZXQgZGVwZW5kZW5jaWVzID0ge1xuICBTdHJ1Y3Q6IHJlcXVpcmUoJy4vc3RydWN0Jylcbn1cblxubGV0IGluamVjdCA9IGZ1bmN0aW9uIChkZXBzKSB7XG4gIGxldCBTdHJ1Y3QgPSBkZXBzLlN0cnVjdFxuICBsZXQgbWFwXG5cbiAgY2xhc3MgT3BDb2RlIGV4dGVuZHMgU3RydWN0IHtcbiAgICBjb25zdHJ1Y3RvciAobnVtKSB7XG4gICAgICBzdXBlcih7bnVtfSlcbiAgICB9XG5cbiAgICBmcm9tTnVtYmVyIChudW0pIHtcbiAgICAgIHRoaXMubnVtID0gbnVtXG4gICAgICByZXR1cm4gdGhpc1xuICAgIH1cblxuICAgIHN0YXRpYyBmcm9tTnVtYmVyIChudW0pIHtcbiAgICAgIHJldHVybiBuZXcgdGhpcygpLmZyb21OdW1iZXIobnVtKVxuICAgIH1cblxuICAgIHRvTnVtYmVyICgpIHtcbiAgICAgIHJldHVybiB0aGlzLm51bVxuICAgIH1cblxuICAgIGZyb21TdHJpbmcgKHN0cikge1xuICAgICAgbGV0IG51bSA9IG1hcFtzdHJdXG4gICAgICBpZiAobnVtID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIG9wQ29kZVN0cicpXG4gICAgICB9XG4gICAgICB0aGlzLm51bSA9IG51bVxuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG5cbiAgICBzdGF0aWMgZnJvbVN0cmluZyAoc3RyKSB7XG4gICAgICByZXR1cm4gbmV3IHRoaXMoKS5mcm9tU3RyaW5nKHN0cilcbiAgICB9XG5cbiAgICB0b1N0cmluZyAoKSB7XG4gICAgICBsZXQgc3RyID0gT3BDb2RlLnN0clt0aGlzLm51bV1cbiAgICAgIGlmIChzdHIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAodGhpcy5udW0gPiAwICYmIHRoaXMubnVtIDwgT3BDb2RlLk9QX1BVU0hEQVRBMSkge1xuICAgICAgICAgIHJldHVybiB0aGlzLm51bS50b1N0cmluZygpXG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdPcENvZGUgZG9lcyBub3QgaGF2ZSBhIHN0cmluZyByZXByZXNlbnRhdGlvbicpXG4gICAgICB9XG4gICAgICByZXR1cm4gc3RyXG4gICAgfVxuICB9XG5cbiAgbWFwID0ge1xuICAgIC8vIHB1c2ggdmFsdWVcbiAgICBPUF9GQUxTRTogMHgwMCxcbiAgICBPUF8wOiAweDAwLFxuICAgIE9QX1BVU0hEQVRBMTogMHg0YyxcbiAgICBPUF9QVVNIREFUQTI6IDB4NGQsXG4gICAgT1BfUFVTSERBVEE0OiAweDRlLFxuICAgIE9QXzFORUdBVEU6IDB4NGYsXG4gICAgT1BfUkVTRVJWRUQ6IDB4NTAsXG4gICAgT1BfVFJVRTogMHg1MSxcbiAgICBPUF8xOiAweDUxLFxuICAgIE9QXzI6IDB4NTIsXG4gICAgT1BfMzogMHg1MyxcbiAgICBPUF80OiAweDU0LFxuICAgIE9QXzU6IDB4NTUsXG4gICAgT1BfNjogMHg1NixcbiAgICBPUF83OiAweDU3LFxuICAgIE9QXzg6IDB4NTgsXG4gICAgT1BfOTogMHg1OSxcbiAgICBPUF8xMDogMHg1YSxcbiAgICBPUF8xMTogMHg1YixcbiAgICBPUF8xMjogMHg1YyxcbiAgICBPUF8xMzogMHg1ZCxcbiAgICBPUF8xNDogMHg1ZSxcbiAgICBPUF8xNTogMHg1ZixcbiAgICBPUF8xNjogMHg2MCxcblxuICAgIC8vIGNvbnRyb2xcbiAgICBPUF9OT1A6IDB4NjEsXG4gICAgT1BfVkVSOiAweDYyLFxuICAgIE9QX0lGOiAweDYzLFxuICAgIE9QX05PVElGOiAweDY0LFxuICAgIE9QX1ZFUklGOiAweDY1LFxuICAgIE9QX1ZFUk5PVElGOiAweDY2LFxuICAgIE9QX0VMU0U6IDB4NjcsXG4gICAgT1BfRU5ESUY6IDB4NjgsXG4gICAgT1BfVkVSSUZZOiAweDY5LFxuICAgIE9QX1JFVFVSTjogMHg2YSxcblxuICAgIC8vIHN0YWNrIG9wc1xuICAgIE9QX1RPQUxUU1RBQ0s6IDB4NmIsXG4gICAgT1BfRlJPTUFMVFNUQUNLOiAweDZjLFxuICAgIE9QXzJEUk9QOiAweDZkLFxuICAgIE9QXzJEVVA6IDB4NmUsXG4gICAgT1BfM0RVUDogMHg2ZixcbiAgICBPUF8yT1ZFUjogMHg3MCxcbiAgICBPUF8yUk9UOiAweDcxLFxuICAgIE9QXzJTV0FQOiAweDcyLFxuICAgIE9QX0lGRFVQOiAweDczLFxuICAgIE9QX0RFUFRIOiAweDc0LFxuICAgIE9QX0RST1A6IDB4NzUsXG4gICAgT1BfRFVQOiAweDc2LFxuICAgIE9QX05JUDogMHg3NyxcbiAgICBPUF9PVkVSOiAweDc4LFxuICAgIE9QX1BJQ0s6IDB4NzksXG4gICAgT1BfUk9MTDogMHg3YSxcbiAgICBPUF9ST1Q6IDB4N2IsXG4gICAgT1BfU1dBUDogMHg3YyxcbiAgICBPUF9UVUNLOiAweDdkLFxuXG4gICAgLy8gc3BsaWNlIG9wc1xuICAgIE9QX0NBVDogMHg3ZSxcbiAgICBPUF9TVUJTVFI6IDB4N2YsXG4gICAgT1BfTEVGVDogMHg4MCxcbiAgICBPUF9SSUdIVDogMHg4MSxcbiAgICBPUF9TSVpFOiAweDgyLFxuXG4gICAgLy8gYml0IGxvZ2ljXG4gICAgT1BfSU5WRVJUOiAweDgzLFxuICAgIE9QX0FORDogMHg4NCxcbiAgICBPUF9PUjogMHg4NSxcbiAgICBPUF9YT1I6IDB4ODYsXG4gICAgT1BfRVFVQUw6IDB4ODcsXG4gICAgT1BfRVFVQUxWRVJJRlk6IDB4ODgsXG4gICAgT1BfUkVTRVJWRUQxOiAweDg5LFxuICAgIE9QX1JFU0VSVkVEMjogMHg4YSxcblxuICAgIC8vIG51bWVyaWNcbiAgICBPUF8xQUREOiAweDhiLFxuICAgIE9QXzFTVUI6IDB4OGMsXG4gICAgT1BfMk1VTDogMHg4ZCxcbiAgICBPUF8yRElWOiAweDhlLFxuICAgIE9QX05FR0FURTogMHg4ZixcbiAgICBPUF9BQlM6IDB4OTAsXG4gICAgT1BfTk9UOiAweDkxLFxuICAgIE9QXzBOT1RFUVVBTDogMHg5MixcblxuICAgIE9QX0FERDogMHg5MyxcbiAgICBPUF9TVUI6IDB4OTQsXG4gICAgT1BfTVVMOiAweDk1LFxuICAgIE9QX0RJVjogMHg5NixcbiAgICBPUF9NT0Q6IDB4OTcsXG4gICAgT1BfTFNISUZUOiAweDk4LFxuICAgIE9QX1JTSElGVDogMHg5OSxcblxuICAgIE9QX0JPT0xBTkQ6IDB4OWEsXG4gICAgT1BfQk9PTE9SOiAweDliLFxuICAgIE9QX05VTUVRVUFMOiAweDljLFxuICAgIE9QX05VTUVRVUFMVkVSSUZZOiAweDlkLFxuICAgIE9QX05VTU5PVEVRVUFMOiAweDllLFxuICAgIE9QX0xFU1NUSEFOOiAweDlmLFxuICAgIE9QX0dSRUFURVJUSEFOOiAweGEwLFxuICAgIE9QX0xFU1NUSEFOT1JFUVVBTDogMHhhMSxcbiAgICBPUF9HUkVBVEVSVEhBTk9SRVFVQUw6IDB4YTIsXG4gICAgT1BfTUlOOiAweGEzLFxuICAgIE9QX01BWDogMHhhNCxcblxuICAgIE9QX1dJVEhJTjogMHhhNSxcblxuICAgIC8vIGNyeXB0b1xuICAgIE9QX1JJUEVNRDE2MDogMHhhNixcbiAgICBPUF9TSEExOiAweGE3LFxuICAgIE9QX1NIQTI1NjogMHhhOCxcbiAgICBPUF9IQVNIMTYwOiAweGE5LFxuICAgIE9QX0hBU0gyNTY6IDB4YWEsXG4gICAgT1BfQ09ERVNFUEFSQVRPUjogMHhhYixcbiAgICBPUF9DSEVDS1NJRzogMHhhYyxcbiAgICBPUF9DSEVDS1NJR1ZFUklGWTogMHhhZCxcbiAgICBPUF9DSEVDS01VTFRJU0lHOiAweGFlLFxuICAgIE9QX0NIRUNLTVVMVElTSUdWRVJJRlk6IDB4YWYsXG5cbiAgICAvLyBleHBhbnNpb25cbiAgICBPUF9OT1AxOiAweGIwLFxuICAgIE9QX05PUDI6IDB4YjEsXG4gICAgT1BfQ0hFQ0tMT0NLVElNRVZFUklGWTogMHhiMSxcbiAgICBPUF9OT1AzOiAweGIyLFxuICAgIE9QX0NIRUNLU0VRVUVOQ0VWRVJJRlk6IDB4YjIsXG4gICAgT1BfTk9QNDogMHhiMyxcbiAgICBPUF9OT1A1OiAweGI0LFxuICAgIE9QX05PUDY6IDB4YjUsXG4gICAgT1BfTk9QNzogMHhiNixcbiAgICBPUF9OT1A4OiAweGI3LFxuICAgIE9QX05PUDk6IDB4YjgsXG4gICAgT1BfTk9QMTA6IDB4YjksXG5cbiAgICAvLyB0ZW1wbGF0ZSBtYXRjaGluZyBwYXJhbXNcbiAgICBPUF9TTUFMTERBVEE6IDB4ZjksXG4gICAgT1BfU01BTExJTlRFR0VSOiAweGZhLFxuICAgIE9QX1BVQktFWVM6IDB4ZmIsXG4gICAgT1BfUFVCS0VZSEFTSDogMHhmZCxcbiAgICBPUF9QVUJLRVk6IDB4ZmUsXG5cbiAgICBPUF9JTlZBTElET1BDT0RFOiAweGZmXG4gIH1cblxuICBPcENvZGUuc3RyID0ge31cblxuICBmb3IgKGxldCBrIGluIG1hcCkge1xuICAgIE9wQ29kZVtrXSA9IG1hcFtrXVxuICAgIGlmIChtYXAuaGFzT3duUHJvcGVydHkoaykpIHtcbiAgICAgIE9wQ29kZS5zdHJbbWFwW2tdXSA9IGtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gT3BDb2RlXG59XG5cbmluamVjdCA9IHJlcXVpcmUoJ2luamVjdGVyJykoaW5qZWN0LCBkZXBlbmRlbmNpZXMpXG5sZXQgT3BDb2RlID0gaW5qZWN0KClcbm1vZHVsZS5leHBvcnRzID0gT3BDb2RlXG4iLCIvKipcbiAqIFBvaW50IChvbiBzZWNwMjU2azEpXG4gKiA9PT09PT09PT09PT09PT09PT09PVxuICpcbiAqIEEgcG9pbnQgaXMgYSBwb2ludCBvbiB0aGUgc2VjcDI1NmsxIGN1cnZlIHdoaWNoIGlzIHRoZSBlbGxpcHRpYyBjdXJ2ZSB1c2VkXG4gKiBieSBiaXRjb2luLiBUaGlzIGNvZGUgaXMgYSB3cmFwcGVyIGZvciBGZWRvciBJbmR1dG55J3MgUG9pbnQgY2xhc3MgZnJvbSBoaXNcbiAqIGVsbGlwdGljIGxpYnJhcnkuIFRoaXMgY29kZSBhZGRzIGEgZmV3IG1pbm9yIGNvbnZlbmllbmNlcywgYnV0IGlzIG1vc3RseSB0aGVcbiAqIHNhbWUuIFNpbmNlIEZlZG9yJ3MgY29kZSByZXR1cm5zIHBvaW50cyBhbmQgYmlnIG51bWJlcnMgdGhhdCBhcmUgaW5zdGFuY2VzXG4gKiBvZiBoaXMgcG9pbnQgYW5kIGJpZyBudW1iZXIgY2xhc3Nlcywgd2UgaGF2ZSB0byB3cmFwIGFsbCB0aGUgbWV0aG9kcyBzdWNoIGFzXG4gKiBnZXRYKCkgdG8gcmV0dXJuIHRoZSBZb3VycyBCaXRjb2luIHBvaW50IGFuZCBiaWcgbnVtYmVyIHR5cGVzLlxuICovXG4ndXNlIHN0cmljdCdcbmxldCBkZXBlbmRlbmNpZXMgPSB7XG4gIEJuOiByZXF1aXJlKCcuL2JuJyksXG4gIGVsbGlwdGljOiByZXF1aXJlKCdlbGxpcHRpYycpXG59XG5cbmxldCBpbmplY3QgPSBmdW5jdGlvbiAoZGVwcykge1xuICBsZXQgQm4gPSBkZXBzLkJuXG4gIGxldCBlbGxpcHRpYyA9IGRlcHMuZWxsaXB0aWNcblxuICBsZXQgZWMgPSBlbGxpcHRpYy5jdXJ2ZXMuc2VjcDI1NmsxXG4gIGxldCBfcG9pbnQgPSBlYy5jdXJ2ZS5wb2ludCgpXG4gIGxldCBfUG9pbnQgPSBfcG9pbnQuY29uc3RydWN0b3JcblxuICBjbGFzcyBQb2ludCBleHRlbmRzIF9Qb2ludCB7XG4gICAgY29uc3RydWN0b3IgKHgsIHksIGlzUmVkKSB7XG4gICAgICBzdXBlcihlYy5jdXJ2ZSwgeCwgeSwgaXNSZWQpXG4gICAgfVxuXG4gICAgc3RhdGljIGZyb21YIChpc09kZCwgeCkge1xuICAgICAgbGV0IF9wb2ludCA9IGVjLmN1cnZlLnBvaW50RnJvbVgoeCwgaXNPZGQpXG4gICAgICBsZXQgcG9pbnQgPSBPYmplY3QuY3JlYXRlKFBvaW50LnByb3RvdHlwZSlcbiAgICAgIHJldHVybiBwb2ludC5jb3B5RnJvbShfcG9pbnQpXG4gICAgfVxuXG4gICAgY29weUZyb20gKHBvaW50KSB7XG4gICAgICBpZiAoIShwb2ludCBpbnN0YW5jZW9mIF9Qb2ludCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdwb2ludCBzaG91bGQgYmUgYW4gZXh0ZXJuYWwgcG9pbnQnKVxuICAgICAgfVxuICAgICAgT2JqZWN0LmtleXMocG9pbnQpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICB0aGlzW2tleV0gPSBwb2ludFtrZXldXG4gICAgICB9LmJpbmQodGhpcykpXG4gICAgICByZXR1cm4gdGhpc1xuICAgIH1cblxuICAgIGFkZCAocCkge1xuICAgICAgcCA9IF9Qb2ludC5wcm90b3R5cGUuYWRkLmNhbGwodGhpcywgcClcbiAgICAgIGxldCBwb2ludCA9IE9iamVjdC5jcmVhdGUoUG9pbnQucHJvdG90eXBlKVxuICAgICAgcmV0dXJuIHBvaW50LmNvcHlGcm9tKHApXG4gICAgfVxuXG4gICAgbXVsIChibikge1xuICAgICAgbGV0IHAgPSBfUG9pbnQucHJvdG90eXBlLm11bC5jYWxsKHRoaXMsIGJuKVxuICAgICAgbGV0IHBvaW50ID0gT2JqZWN0LmNyZWF0ZShQb2ludC5wcm90b3R5cGUpXG4gICAgICByZXR1cm4gcG9pbnQuY29weUZyb20ocClcbiAgICB9XG5cbiAgICBtdWxBZGQgKGJuMSwgcG9pbnQsIGJuMikge1xuICAgICAgbGV0IHAgPSBfUG9pbnQucHJvdG90eXBlLm11bEFkZC5jYWxsKHRoaXMsIGJuMSwgcG9pbnQsIGJuMilcbiAgICAgIHBvaW50ID0gT2JqZWN0LmNyZWF0ZShQb2ludC5wcm90b3R5cGUpXG4gICAgICByZXR1cm4gcG9pbnQuY29weUZyb20ocClcbiAgICB9XG5cbiAgICBnZXRYICgpIHtcbiAgICAgIGxldCBfeCA9IF9Qb2ludC5wcm90b3R5cGUuZ2V0WC5jYWxsKHRoaXMpXG4gICAgICBsZXQgeCA9IE9iamVjdC5jcmVhdGUoQm4ucHJvdG90eXBlKVxuICAgICAgX3guY29weSh4KVxuICAgICAgcmV0dXJuIHhcbiAgICB9XG5cbiAgICBnZXRZICgpIHtcbiAgICAgIGxldCBfeSA9IF9Qb2ludC5wcm90b3R5cGUuZ2V0WS5jYWxsKHRoaXMpXG4gICAgICBsZXQgeSA9IE9iamVjdC5jcmVhdGUoQm4ucHJvdG90eXBlKVxuICAgICAgX3kuY29weSh5KVxuICAgICAgcmV0dXJuIHlcbiAgICB9XG5cbiAgICBmcm9tWCAoaXNPZGQsIHgpIHtcbiAgICAgIGxldCBwb2ludCA9IFBvaW50LmZyb21YKGlzT2RkLCB4KVxuICAgICAgcmV0dXJuIHRoaXMuY29weUZyb20ocG9pbnQpXG4gICAgfVxuXG4gICAgdG9KU09OICgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHg6IHRoaXMuZ2V0WCgpLnRvU3RyaW5nKCksXG4gICAgICAgIHk6IHRoaXMuZ2V0WSgpLnRvU3RyaW5nKClcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmcm9tSlNPTiAoanNvbikge1xuICAgICAgbGV0IHggPSBuZXcgQm4oKS5mcm9tU3RyaW5nKGpzb24ueClcbiAgICAgIGxldCB5ID0gbmV3IEJuKCkuZnJvbVN0cmluZyhqc29uLnkpXG4gICAgICBsZXQgcG9pbnQgPSBuZXcgUG9pbnQoeCwgeSlcbiAgICAgIHJldHVybiB0aGlzLmNvcHlGcm9tKHBvaW50KVxuICAgIH1cblxuICAgIHRvU3RyaW5nICgpIHtcbiAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh0aGlzLnRvSlNPTigpKVxuICAgIH1cblxuICAgIGZyb21TdHJpbmcgKHN0cikge1xuICAgICAgbGV0IGpzb24gPSBKU09OLnBhcnNlKHN0cilcbiAgICAgIGxldCBwID0gbmV3IFBvaW50KCkuZnJvbUpTT04oanNvbilcbiAgICAgIHJldHVybiB0aGlzLmNvcHlGcm9tKHApXG4gICAgfVxuXG4gICAgc3RhdGljIGdldEcgKCkge1xuICAgICAgbGV0IF9nID0gZWMuY3VydmUuZ1xuICAgICAgbGV0IGcgPSBPYmplY3QuY3JlYXRlKFBvaW50LnByb3RvdHlwZSlcbiAgICAgIHJldHVybiBnLmNvcHlGcm9tKF9nKVxuICAgIH1cblxuICAgIHN0YXRpYyBnZXROICgpIHtcbiAgICAgIHJldHVybiBuZXcgQm4oZWMuY3VydmUubi50b0FycmF5KCkpXG4gICAgfVxuXG4gICAgLy8gaHR0cHM6Ly93d3cuaWFjci5vcmcvYXJjaGl2ZS9wa2MyMDAzLzI1NjcwMjExLzI1NjcwMjExLnBkZlxuICAgIHZhbGlkYXRlICgpIHtcbiAgICAgIGxldCBwMiA9IFBvaW50LmZyb21YKHRoaXMuZ2V0WSgpLmlzT2RkKCksIHRoaXMuZ2V0WCgpKVxuICAgICAgaWYgKCEocDIuZ2V0WSgpLmNtcCh0aGlzLmdldFkoKSkgPT09IDApKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCB5IHZhbHVlIG9mIHB1YmxpYyBrZXknKVxuICAgICAgfVxuICAgICAgaWYgKCEodGhpcy5nZXRYKCkuZ3QoLTEpICYmIHRoaXMuZ2V0WCgpLmx0KFBvaW50LmdldE4oKSkpIHx8XG4gICAgICAgICEodGhpcy5nZXRZKCkuZ3QoLTEpICYmIHRoaXMuZ2V0WSgpLmx0KFBvaW50LmdldE4oKSkpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignUG9pbnQgZG9lcyBub3QgbGllIG9uIHRoZSBjdXJ2ZScpXG4gICAgICB9XG4gICAgICBpZiAoISh0aGlzLm11bChQb2ludC5nZXROKCkpLmlzSW5maW5pdHkoKSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdQb2ludCB0aW1lcyBOIG11c3QgYmUgaW5maW5pdHknKVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG4gIH1cblxuICByZXR1cm4gUG9pbnRcbn1cblxuaW5qZWN0ID0gcmVxdWlyZSgnaW5qZWN0ZXInKShpbmplY3QsIGRlcGVuZGVuY2llcylcbmxldCBQb2ludCA9IGluamVjdCgpXG5tb2R1bGUuZXhwb3J0cyA9IFBvaW50XG4iLCIvKipcbiAqIFByaXZhdGUgS2V5XG4gKiA9PT09PT09PT09PVxuICpcbiAqIEEgcHJpdmF0ZSBrZXkgaXMgdXNlZCBmb3Igc2lnbkluZyB0cmFuc2FjdGlvbnMgKG9yIG1lc3NhZ2VzKS4gVGhlIHByaW1hcnlcbiAqIHdheSB0byB1c2UgdGhpcyBpcyBuZXcgUHJpdktleSgpLmZyb21SYW5kb20oKSwgb3IgbmV3IFByaXZLZXkoKS5mcm9tQnVmZmVyKGJ1ZikuXG4gKi9cbid1c2Ugc3RyaWN0J1xubGV0IGRlcGVuZGVuY2llcyA9IHtcbiAgQm46IHJlcXVpcmUoJy4vYm4nKSxcbiAgUG9pbnQ6IHJlcXVpcmUoJy4vcG9pbnQnKSxcbiAgQ29uc3RhbnRzOiByZXF1aXJlKCcuL2NvbnN0YW50cycpLkRlZmF1bHQuUHJpdktleSxcbiAgQmFzZTU4Q2hlY2s6IHJlcXVpcmUoJy4vYmFzZS01OC1jaGVjaycpLFxuICBSYW5kb206IHJlcXVpcmUoJy4vcmFuZG9tJyksXG4gIFN0cnVjdDogcmVxdWlyZSgnLi9zdHJ1Y3QnKVxufVxuXG5sZXQgaW5qZWN0ID0gZnVuY3Rpb24gKGRlcHMpIHtcbiAgbGV0IEJuID0gZGVwcy5CblxuICBsZXQgUG9pbnQgPSBkZXBzLlBvaW50XG4gIGxldCBDb25zdGFudHMgPSBkZXBzLkNvbnN0YW50c1xuICBsZXQgQmFzZTU4Q2hlY2sgPSBkZXBzLkJhc2U1OENoZWNrXG4gIGxldCBSYW5kb20gPSBkZXBzLlJhbmRvbVxuICBsZXQgU3RydWN0ID0gZGVwcy5TdHJ1Y3RcblxuICBjbGFzcyBQcml2S2V5IGV4dGVuZHMgU3RydWN0IHtcbiAgICBjb25zdHJ1Y3RvciAoYm4sIGNvbXByZXNzZWQpIHtcbiAgICAgIHN1cGVyKHtibiwgY29tcHJlc3NlZH0pXG4gICAgfVxuXG4gICAgZnJvbUpTT04gKGpzb24pIHtcbiAgICAgIHRoaXMuZnJvbUhleChqc29uKVxuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG5cbiAgICB0b0pTT04gKCkge1xuICAgICAgcmV0dXJuIHRoaXMudG9IZXgoKVxuICAgIH1cblxuICAgIGZyb21SYW5kb20gKCkge1xuICAgICAgbGV0IHByaXZCdWYsIGJuLCBjb25kaXRpb25cblxuICAgICAgZG8ge1xuICAgICAgICBwcml2QnVmID0gUmFuZG9tLmdldFJhbmRvbUJ1ZmZlcigzMilcbiAgICAgICAgYm4gPSBuZXcgQm4oKS5mcm9tQnVmZmVyKHByaXZCdWYpXG4gICAgICAgIGNvbmRpdGlvbiA9IGJuLmx0KFBvaW50LmdldE4oKSlcbiAgICAgIH0gd2hpbGUgKCFjb25kaXRpb24pXG5cbiAgICAgIHRoaXMuZnJvbU9iamVjdCh7XG4gICAgICAgIGJuOiBibixcbiAgICAgICAgY29tcHJlc3NlZDogdHJ1ZVxuICAgICAgfSlcbiAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuXG4gICAgc3RhdGljIGZyb21SYW5kb20gKCkge1xuICAgICAgcmV0dXJuIG5ldyB0aGlzKCkuZnJvbVJhbmRvbSgpXG4gICAgfVxuXG4gICAgdG9CdWZmZXIgKCkge1xuICAgICAgbGV0IGNvbXByZXNzZWQgPSB0aGlzLmNvbXByZXNzZWRcblxuICAgICAgaWYgKGNvbXByZXNzZWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjb21wcmVzc2VkID0gdHJ1ZVxuICAgICAgfVxuXG4gICAgICBsZXQgcHJpdkJ1ZiA9IHRoaXMuYm4udG9CdWZmZXIoe3NpemU6IDMyfSlcbiAgICAgIGxldCBidWZcbiAgICAgIGlmIChjb21wcmVzc2VkKSB7XG4gICAgICAgIGJ1ZiA9IEJ1ZmZlci5jb25jYXQoW25ldyBCdWZmZXIoW0NvbnN0YW50cy52ZXJzaW9uQnl0ZU51bV0pLCBwcml2QnVmLCBuZXcgQnVmZmVyKFsweDAxXSldKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYnVmID0gQnVmZmVyLmNvbmNhdChbbmV3IEJ1ZmZlcihbQ29uc3RhbnRzLnZlcnNpb25CeXRlTnVtXSksIHByaXZCdWZdKVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gYnVmXG4gICAgfVxuXG4gICAgZnJvbUJ1ZmZlciAoYnVmKSB7XG4gICAgICBpZiAoYnVmLmxlbmd0aCA9PT0gMSArIDMyICsgMSAmJiBidWZbMSArIDMyICsgMSAtIDFdID09PSAxKSB7XG4gICAgICAgIHRoaXMuY29tcHJlc3NlZCA9IHRydWVcbiAgICAgIH0gZWxzZSBpZiAoYnVmLmxlbmd0aCA9PT0gMSArIDMyKSB7XG4gICAgICAgIHRoaXMuY29tcHJlc3NlZCA9IGZhbHNlXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0xFbmd0aCBvZiBwcml2S2V5IGJ1ZmZlciBtdXN0IGJlIDMzICh1bmNvbXByZXNzZWQgcHViS2V5KSBvciAzNCAoY29tcHJlc3NlZCBwdWJLZXkpJylcbiAgICAgIH1cblxuICAgICAgaWYgKGJ1ZlswXSAhPT0gQ29uc3RhbnRzLnZlcnNpb25CeXRlTnVtKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCB2ZXJzaW9uQnl0ZU51bSBieXRlJylcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuZnJvbUJuKG5ldyBCbigpLmZyb21CdWZmZXIoYnVmLnNsaWNlKDEsIDEgKyAzMikpKVxuICAgIH1cblxuICAgIHRvQm4gKCkge1xuICAgICAgcmV0dXJuIHRoaXMuYm5cbiAgICB9XG5cbiAgICBmcm9tQm4gKGJuKSB7XG4gICAgICB0aGlzLmJuID0gYm5cbiAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuXG4gICAgc3RhdGljIGZyb21CbiAoYm4pIHtcbiAgICAgIHJldHVybiBuZXcgdGhpcygpLmZyb21CbihibilcbiAgICB9XG5cbiAgICB2YWxpZGF0ZSAoKSB7XG4gICAgICBpZiAoIXRoaXMuYm4ubHQoUG9pbnQuZ2V0TigpKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ051bWJlciBtdXN0IGJlIGxlc3MgdGhhbiBOJylcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgdGhpcy5jb21wcmVzc2VkICE9PSAnYm9vbGVhbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdNdXN0IHNwZWNpZnkgd2hldGhlciB0aGUgY29ycmVzcG9uZGluZyBwdWJsaWMga2V5IGlzIGNvbXByZXNzZWQgb3Igbm90ICh0cnVlIG9yIGZhbHNlKScpXG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpc1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE91dHB1dCB0aGUgcHJpdmF0ZSBrZXkgYSBXYWxsZXQgSW1wb3J0IEZvcm1hdCAoV2lmKSBzdHJpbmcuXG4gICAgICovXG4gICAgdG9XaWYgKCkge1xuICAgICAgcmV0dXJuIEJhc2U1OENoZWNrLmVuY29kZSh0aGlzLnRvQnVmZmVyKCkpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW5wdXQgdGhlIHByaXZhdGUga2V5IGZyb20gYSBXYWxsZXQgSW1wb3J0IEZvcm1hdCAoV2lmKSBzdHJpbmcuXG4gICAgICovXG4gICAgZnJvbVdpZiAoc3RyKSB7XG4gICAgICByZXR1cm4gdGhpcy5mcm9tQnVmZmVyKEJhc2U1OENoZWNrLmRlY29kZShzdHIpKVxuICAgIH1cblxuICAgIHN0YXRpYyBmcm9tV2lmIChzdHIpIHtcbiAgICAgIHJldHVybiBuZXcgdGhpcygpLmZyb21XaWYoc3RyKVxuICAgIH1cblxuICAgIHRvU3RyaW5nICgpIHtcbiAgICAgIHJldHVybiB0aGlzLnRvV2lmKClcbiAgICB9XG5cbiAgICBmcm9tU3RyaW5nIChzdHIpIHtcbiAgICAgIHJldHVybiB0aGlzLmZyb21XaWYoc3RyKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBQcml2S2V5XG59XG5cbmluamVjdCA9IHJlcXVpcmUoJ2luamVjdGVyJykoaW5qZWN0LCBkZXBlbmRlbmNpZXMpXG5sZXQgUHJpdktleSA9IGluamVjdCgpXG5Qcml2S2V5Lk1haW5uZXQgPSBpbmplY3Qoe1xuICBDb25zdGFudHM6IHJlcXVpcmUoJy4vY29uc3RhbnRzJykuTWFpbm5ldC5Qcml2S2V5XG59KVxuUHJpdktleS5UZXN0bmV0ID0gaW5qZWN0KHtcbiAgQ29uc3RhbnRzOiByZXF1aXJlKCcuL2NvbnN0YW50cycpLlRlc3RuZXQuUHJpdktleVxufSlcbm1vZHVsZS5leHBvcnRzID0gUHJpdktleVxuIiwiLyoqXG4gKiBQdWJsaWMgS2V5XG4gKiA9PT09PT09PT09XG4gKlxuICogQSBwdWJsaWMga2V5IGNvcnJlc3BvbmRzIHRvIGEgcHJpdmF0ZSBrZXkuIElmIHlvdSBoYXZlIGEgcHJpdmF0ZSBrZXksIHlvdVxuICogY2FuIGZpbmQgdGhlIGNvcnJlc3BvbmRpbmcgcHVibGljIGtleSB3aXRoIG5ldyBQdWJLZXkoKS5mcm9tUHJpdktleShwcml2S2V5KS5cbiAqL1xuJ3VzZSBzdHJpY3QnXG5sZXQgZGVwZW5kZW5jaWVzID0ge1xuICBQb2ludDogcmVxdWlyZSgnLi9wb2ludCcpLFxuICBCbjogcmVxdWlyZSgnLi9ibicpLFxuICBCdzogcmVxdWlyZSgnLi9idycpLFxuICBTdHJ1Y3Q6IHJlcXVpcmUoJy4vc3RydWN0JyksXG4gIFdvcmtlcnM6IHJlcXVpcmUoJy4vd29ya2VycycpLFxuICBhc2luazogcmVxdWlyZSgnYXNpbmsnKVxufVxuXG5sZXQgaW5qZWN0ID0gZnVuY3Rpb24gKGRlcHMpIHtcbiAgbGV0IFBvaW50ID0gZGVwcy5Qb2ludFxuICBsZXQgQm4gPSBkZXBzLkJuXG4gIGxldCBCdyA9IGRlcHMuQndcbiAgbGV0IFN0cnVjdCA9IGRlcHMuU3RydWN0XG4gIGxldCBXb3JrZXJzID0gZGVwcy5Xb3JrZXJzXG4gIGxldCBhc2luayA9IGRlcHMuYXNpbmtcblxuICBjbGFzcyBQdWJLZXkgZXh0ZW5kcyBTdHJ1Y3Qge1xuICAgIGNvbnN0cnVjdG9yIChwb2ludCkge1xuICAgICAgc3VwZXIoe3BvaW50fSlcbiAgICB9XG5cbiAgICBmcm9tSlNPTiAoanNvbikge1xuICAgICAgdGhpcy5mcm9tRmFzdEhleChqc29uKVxuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG5cbiAgICB0b0pTT04gKCkge1xuICAgICAgcmV0dXJuIHRoaXMudG9GYXN0SGV4KClcbiAgICB9XG5cbiAgICBmcm9tUHJpdktleSAocHJpdktleSkge1xuICAgICAgdGhpcy5mcm9tT2JqZWN0KHtcbiAgICAgICAgcG9pbnQ6IFBvaW50LmdldEcoKS5tdWwocHJpdktleS5ibiksXG4gICAgICAgIGNvbXByZXNzZWQ6IHByaXZLZXkuY29tcHJlc3NlZFxuICAgICAgfSlcbiAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuXG4gICAgc3RhdGljIGZyb21Qcml2S2V5IChwcml2S2V5KSB7XG4gICAgICByZXR1cm4gbmV3IHRoaXMoKS5mcm9tUHJpdktleShwcml2S2V5KVxuICAgIH1cblxuICAgIGFzeW5jRnJvbVByaXZLZXkgKHByaXZLZXkpIHtcbiAgICAgIHJldHVybiBhc2luayhmdW5jdGlvbiAqICgpIHtcbiAgICAgICAgbGV0IHdvcmtlcnNSZXN1bHQgPSB5aWVsZCBXb3JrZXJzLmFzeW5jT2JqZWN0TWV0aG9kKHRoaXMsICdmcm9tUHJpdktleScsIFtwcml2S2V5XSlcbiAgICAgICAgcmV0dXJuIHRoaXMuZnJvbUZhc3RCdWZmZXIod29ya2Vyc1Jlc3VsdC5yZXNidWYpXG4gICAgICB9LCB0aGlzKVxuICAgIH1cblxuICAgIHN0YXRpYyBhc3luY0Zyb21Qcml2S2V5IChwcml2S2V5KSB7XG4gICAgICByZXR1cm4gbmV3IHRoaXMoKS5hc3luY0Zyb21Qcml2S2V5KHByaXZLZXkpXG4gICAgfVxuXG4gICAgZnJvbUJ1ZmZlciAoYnVmLCBzdHJpY3QpIHtcbiAgICAgIHJldHVybiB0aGlzLmZyb21EZXIoYnVmLCBzdHJpY3QpXG4gICAgfVxuXG4gICAgYXN5bmNGcm9tQnVmZmVyIChidWYsIHN0cmljdCkge1xuICAgICAgcmV0dXJuIGFzaW5rKGZ1bmN0aW9uICogKCkge1xuICAgICAgICBsZXQgYXJncyA9IFtidWYsIHN0cmljdF1cbiAgICAgICAgbGV0IHdvcmtlcnNSZXN1bHQgPSB5aWVsZCBXb3JrZXJzLmFzeW5jT2JqZWN0TWV0aG9kKHRoaXMsICdmcm9tQnVmZmVyJywgYXJncylcbiAgICAgICAgcmV0dXJuIHRoaXMuZnJvbUZhc3RCdWZmZXIod29ya2Vyc1Jlc3VsdC5yZXNidWYpXG4gICAgICB9LCB0aGlzKVxuICAgIH1cblxuICAgIGZyb21GYXN0QnVmZmVyIChidWYpIHtcbiAgICAgIGlmIChidWYubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiB0aGlzXG4gICAgICB9XG4gICAgICBsZXQgY29tcHJlc3NlZCA9IEJvb2xlYW4oYnVmWzBdKVxuICAgICAgYnVmID0gYnVmLnNsaWNlKDEpXG4gICAgICB0aGlzLmZyb21EZXIoYnVmKVxuICAgICAgdGhpcy5jb21wcmVzc2VkID0gY29tcHJlc3NlZFxuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbiBvcmRlciB0byBtaW1pYyB0aGUgbm9uLXN0cmljdCBzdHlsZSBvZiBPcGVuU1NMLCBzZXQgc3RyaWN0ID0gZmFsc2UuIEZvclxuICAgICAqIGluZm9ybWF0aW9uIGFuZCB3aGF0IHByZWZpeGVzIDB4MDYgYW5kIDB4MDcgbWVhbiwgaW4gYWRkaXRpb24gdG8gdGhlIG5vcm1hbFxuICAgICAqIGNvbXByZXNzZWQgYW5kIHVuY29tcHJlc3NlZCBwdWJsaWMga2V5cywgc2VlIHRoZSBtZXNzYWdlIGJ5IFBldGVyIFd1aWxsZVxuICAgICAqIHdoZXJlIGhlIGRpc2NvdmVyZWQgdGhlc2UgXCJoeWJyaWQgcHViS2V5c1wiIG9uIHRoZSBtYWlsaW5nIGxpc3Q6XG4gICAgICogaHR0cDovL3NvdXJjZWZvcmdlLm5ldC9wL2JpdGNvaW4vbWFpbG1hbi9tZXNzYWdlLzI5NDE2MTMzL1xuICAgICAqL1xuICAgIGZyb21EZXIgKGJ1Ziwgc3RyaWN0KSB7XG4gICAgICBpZiAoc3RyaWN0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgc3RyaWN0ID0gdHJ1ZVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RyaWN0ID0gZmFsc2VcbiAgICAgIH1cbiAgICAgIGlmIChidWZbMF0gPT09IDB4MDQgfHwgKCFzdHJpY3QgJiYgKGJ1ZlswXSA9PT0gMHgwNiB8fCBidWZbMF0gPT09IDB4MDcpKSkge1xuICAgICAgICBsZXQgeGJ1ZiA9IGJ1Zi5zbGljZSgxLCAzMylcbiAgICAgICAgbGV0IHlidWYgPSBidWYuc2xpY2UoMzMsIDY1KVxuICAgICAgICBpZiAoeGJ1Zi5sZW5ndGggIT09IDMyIHx8IHlidWYubGVuZ3RoICE9PSAzMiB8fCBidWYubGVuZ3RoICE9PSA2NSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTEVuZ3RoIG9mIHggYW5kIHkgbXVzdCBiZSAzMiBieXRlcycpXG4gICAgICAgIH1cbiAgICAgICAgbGV0IHggPSBuZXcgQm4oeGJ1ZilcbiAgICAgICAgbGV0IHkgPSBuZXcgQm4oeWJ1ZilcbiAgICAgICAgdGhpcy5wb2ludCA9IG5ldyBQb2ludCh4LCB5KVxuICAgICAgICB0aGlzLmNvbXByZXNzZWQgPSBmYWxzZVxuICAgICAgfSBlbHNlIGlmIChidWZbMF0gPT09IDB4MDMpIHtcbiAgICAgICAgbGV0IHhidWYgPSBidWYuc2xpY2UoMSlcbiAgICAgICAgbGV0IHggPSBuZXcgQm4oeGJ1ZilcbiAgICAgICAgdGhpcy5mcm9tWCh0cnVlLCB4KVxuICAgICAgICB0aGlzLmNvbXByZXNzZWQgPSB0cnVlXG4gICAgICB9IGVsc2UgaWYgKGJ1ZlswXSA9PT0gMHgwMikge1xuICAgICAgICBsZXQgeGJ1ZiA9IGJ1Zi5zbGljZSgxKVxuICAgICAgICBsZXQgeCA9IG5ldyBCbih4YnVmKVxuICAgICAgICB0aGlzLmZyb21YKGZhbHNlLCB4KVxuICAgICAgICB0aGlzLmNvbXByZXNzZWQgPSB0cnVlXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgREVSIGZvcm1hdCBwdWJLZXknKVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG5cbiAgICBzdGF0aWMgZnJvbURlciAoYnVmLCBzdHJpY3QpIHtcbiAgICAgIHJldHVybiBuZXcgdGhpcygpLmZyb21EZXIoYnVmLCBzdHJpY3QpXG4gICAgfVxuXG4gICAgZnJvbVN0cmluZyAoc3RyKSB7XG4gICAgICB0aGlzLmZyb21EZXIobmV3IEJ1ZmZlcihzdHIsICdoZXgnKSlcbiAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuXG4gICAgZnJvbVggKG9kZCwgeCkge1xuICAgICAgaWYgKHR5cGVvZiBvZGQgIT09ICdib29sZWFuJykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ011c3Qgc3BlY2lmeSB3aGV0aGVyIHkgaXMgb2RkIG9yIG5vdCAodHJ1ZSBvciBmYWxzZSknKVxuICAgICAgfVxuICAgICAgdGhpcy5wb2ludCA9IFBvaW50LmZyb21YKG9kZCwgeClcbiAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuXG4gICAgc3RhdGljIGZyb21YIChvZGQsIHgpIHtcbiAgICAgIHJldHVybiBuZXcgdGhpcygpLmZyb21YKG9kZCwgeClcbiAgICB9XG5cbiAgICB0b0J1ZmZlciAoKSB7XG4gICAgICBsZXQgY29tcHJlc3NlZCA9IHRoaXMuY29tcHJlc3NlZCA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IHRoaXMuY29tcHJlc3NlZFxuICAgICAgcmV0dXJuIHRoaXMudG9EZXIoY29tcHJlc3NlZClcbiAgICB9XG5cbiAgICB0b0Zhc3RCdWZmZXIgKCkge1xuICAgICAgaWYgKCF0aGlzLnBvaW50KSB7XG4gICAgICAgIHJldHVybiBuZXcgQnVmZmVyKDApXG4gICAgICB9XG4gICAgICBsZXQgYncgPSBuZXcgQncoKVxuICAgICAgbGV0IGNvbXByZXNzZWQgPSB0aGlzLmNvbXByZXNzZWQgPT09IHVuZGVmaW5lZCA/IHRydWUgOiBCb29sZWFuKHRoaXMuY29tcHJlc3NlZClcbiAgICAgIGJ3LndyaXRlVUludDgoTnVtYmVyKGNvbXByZXNzZWQpKVxuICAgICAgYncud3JpdGUodGhpcy50b0RlcihmYWxzZSkpXG4gICAgICByZXR1cm4gYncudG9CdWZmZXIoKVxuICAgIH1cblxuICAgIHRvRGVyIChjb21wcmVzc2VkKSB7XG4gICAgICBjb21wcmVzc2VkID0gY29tcHJlc3NlZCA9PT0gdW5kZWZpbmVkID8gdGhpcy5jb21wcmVzc2VkIDogY29tcHJlc3NlZFxuICAgICAgaWYgKHR5cGVvZiBjb21wcmVzc2VkICE9PSAnYm9vbGVhbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdNdXN0IHNwZWNpZnkgd2hldGhlciB0aGUgcHVibGljIGtleSBpcyBjb21wcmVzc2VkIG9yIG5vdCAodHJ1ZSBvciBmYWxzZSknKVxuICAgICAgfVxuXG4gICAgICBsZXQgeCA9IHRoaXMucG9pbnQuZ2V0WCgpXG4gICAgICBsZXQgeSA9IHRoaXMucG9pbnQuZ2V0WSgpXG5cbiAgICAgIGxldCB4YnVmID0geC50b0J1ZmZlcih7c2l6ZTogMzJ9KVxuICAgICAgbGV0IHlidWYgPSB5LnRvQnVmZmVyKHtzaXplOiAzMn0pXG5cbiAgICAgIGxldCBwcmVmaXhcbiAgICAgIGlmICghY29tcHJlc3NlZCkge1xuICAgICAgICBwcmVmaXggPSBuZXcgQnVmZmVyKFsweDA0XSlcbiAgICAgICAgcmV0dXJuIEJ1ZmZlci5jb25jYXQoW3ByZWZpeCwgeGJ1ZiwgeWJ1Zl0pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZXQgb2RkID0geWJ1Zlt5YnVmLmxlbmd0aCAtIDFdICUgMlxuICAgICAgICBpZiAob2RkKSB7XG4gICAgICAgICAgcHJlZml4ID0gbmV3IEJ1ZmZlcihbMHgwM10pXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHJlZml4ID0gbmV3IEJ1ZmZlcihbMHgwMl0pXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIEJ1ZmZlci5jb25jYXQoW3ByZWZpeCwgeGJ1Zl0pXG4gICAgICB9XG4gICAgfVxuXG4gICAgdG9TdHJpbmcgKCkge1xuICAgICAgbGV0IGNvbXByZXNzZWQgPSB0aGlzLmNvbXByZXNzZWQgPT09IHVuZGVmaW5lZCA/IHRydWUgOiB0aGlzLmNvbXByZXNzZWRcbiAgICAgIHJldHVybiB0aGlzLnRvRGVyKGNvbXByZXNzZWQpLnRvU3RyaW5nKCdoZXgnKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRyYW5zbGF0ZWQgZnJvbSBiaXRjb2luZCdzIElzQ29tcHJlc3NlZE9yVW5jb21wcmVzc2VkUHViS2V5XG4gICAgICovXG4gICAgc3RhdGljIGlzQ29tcHJlc3NlZE9yVW5jb21wcmVzc2VkIChidWYpIHtcbiAgICAgIGlmIChidWYubGVuZ3RoIDwgMzMpIHtcbiAgICAgICAgLy8gIE5vbi1jYW5vbmljYWwgcHVibGljIGtleTogdG9vIHNob3J0XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgICAgaWYgKGJ1ZlswXSA9PT0gMHgwNCkge1xuICAgICAgICBpZiAoYnVmLmxlbmd0aCAhPT0gNjUpIHtcbiAgICAgICAgICAvLyAgTm9uLWNhbm9uaWNhbCBwdWJsaWMga2V5OiBpbnZhbGlkIGxlbmd0aCBmb3IgdW5jb21wcmVzc2VkIGtleVxuICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGJ1ZlswXSA9PT0gMHgwMiB8fCBidWZbMF0gPT09IDB4MDMpIHtcbiAgICAgICAgaWYgKGJ1Zi5sZW5ndGggIT09IDMzKSB7XG4gICAgICAgICAgLy8gIE5vbi1jYW5vbmljYWwgcHVibGljIGtleTogaW52YWxpZCBsZW5ndGggZm9yIGNvbXByZXNzZWQga2V5XG4gICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vICBOb24tY2Fub25pY2FsIHB1YmxpYyBrZXk6IG5laXRoZXIgY29tcHJlc3NlZCBub3IgdW5jb21wcmVzc2VkXG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG5cbiAgICAvLyBodHRwczovL3d3dy5pYWNyLm9yZy9hcmNoaXZlL3BrYzIwMDMvMjU2NzAyMTEvMjU2NzAyMTEucGRmXG4gICAgdmFsaWRhdGUgKCkge1xuICAgICAgaWYgKHRoaXMucG9pbnQuaXNJbmZpbml0eSgpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcigncG9pbnQ6IFBvaW50IGNhbm5vdCBiZSBlcXVhbCB0byBJbmZpbml0eScpXG4gICAgICB9XG4gICAgICBpZiAodGhpcy5wb2ludC5lcShuZXcgUG9pbnQobmV3IEJuKDApLCBuZXcgQm4oMCkpKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3BvaW50OiBQb2ludCBjYW5ub3QgYmUgZXF1YWwgdG8gMCwgMCcpXG4gICAgICB9XG4gICAgICB0aGlzLnBvaW50LnZhbGlkYXRlKClcbiAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIFB1YktleVxufVxuXG5pbmplY3QgPSByZXF1aXJlKCdpbmplY3RlcicpKGluamVjdCwgZGVwZW5kZW5jaWVzKVxubGV0IFB1YktleSA9IGluamVjdCgpXG5tb2R1bGUuZXhwb3J0cyA9IFB1YktleVxuIiwiLyoqXG4gKiBSYW5kb20gTnVtYmVyIEdlbmVyYXRvclxuICogPT09PT09PT09PT09PT09PT09PT09PT1cbiAqXG4gKiBSYW5kb20gbnVtYmVycyBhcmUgaW1wb3J0YW50IGluIGJpdGNvaW4gcHJpbWFyaWx5IGZvciBnZW5lcmF0aW5nIHByaXZhdGVcbiAqIGtleXMuIEl0IGlzIGFsc28gaW1wb3J0YW50IGZvciBjcmVhdGluZyBzaWduYXR1cmVzIGlmIHlvdSBhcmUgdXNpbmcgYSByYW5kb21cbiAqIHZhbHVlIG9mIGssIGJ1dCBZb3VycyBCaXRjb2luIGRlZmF1bHRzIHRvIHVzaW5nIGRldGVybWluaXN0aWMgay4gVGhhdCBtZWFuc1xuICogY29tcHV0aW5nIGEgcmFuZG9tIHByaXZhdGUga2V5LCBvciBhIHJhbmRvbSBzZWVkIGZvciB1c2UgaW4gQmlwMzkgb3IgQmlwMzIsXG4gKiBpcyB0aGUgcHJpbWFyeSB1c2Ugb2YgdGhlIHJhbmRvbSBudW1iZXIgZ2VuZXJhdG9yLiAgTm90ZSB0aGF0IHRoZSBzaW1wbGljaXR5XG4gKiBvZiB0aGlzIGNsYXNzIGlzIGV4dHJlbWVseSBjYXJlZnVsbHkgY29uc2lkZXJlZC4gSXQgaXMgZWFzeSB0byBhdWRpdCB0aGF0XG4gKiB0aGlzIGNvZGUgcnVucyBub2RlJ3MgcmFuZG9tQnl0ZXMgZnVuY3Rpb24uIEl0IGlzIGFsc28gZWFzeSB0byBhdWRpdCB0aGF0XG4gKiB0aGUgcmFuZG9tQnl0ZXMgbWV0aG9kIGlzIGNvcnJlY3RseSBpbnRlcnByZXRlZCBhc1xuICogd2luZG93LmNyeXB0by5nZXRSYW5kb21WYWx1ZXMgd2hlbiB0aGlzIGNvZGUgaXMgYnJvd3NlcmlmaWVkIGJ5IGJyb3dzZXJpZnksXG4gKiBhbmQgdGh1cyBhbHNvIHdvcmtzIGNvcnJlY3RseSBpbiB0aGUgYnJvd3Nlci4gV2UgZGVsaWJlcmF0ZWx5IGRvIG5vdCBkb1xuICogYW55dGhpbmcgZWxzZSB0byB0aGlzIHJhbmRvbSBudW1iZXIgaW4gb3JkZXIgdG8gbWluaW1pemUgcG9zc2libGUgZXJyb3JzIGluXG4gKiB0aGlzIGFic29sdXRlbHkgY3JpdGljYWwgY29kZS5cbiAqL1xuJ3VzZSBzdHJpY3QnXG5sZXQgZGVwZW5kZW5jaWVzID0ge1xuICByYW5kb21CeXRlczogcmVxdWlyZSgncmFuZG9tYnl0ZXMnKVxufVxuXG5sZXQgaW5qZWN0ID0gZnVuY3Rpb24gKGRlcHMpIHtcbiAgbGV0IHJhbmRvbUJ5dGVzID0gZGVwcy5yYW5kb21CeXRlc1xuXG4gIGxldCBSYW5kb20gPSB7fVxuXG4gIFJhbmRvbS5nZXRSYW5kb21CdWZmZXIgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICAgIHJldHVybiByYW5kb21CeXRlcyhzaXplKVxuICB9XG5cbiAgcmV0dXJuIFJhbmRvbVxufVxuXG5pbmplY3QgPSByZXF1aXJlKCdpbmplY3RlcicpKGluamVjdCwgZGVwZW5kZW5jaWVzKVxubGV0IFJhbmRvbSA9IGluamVjdCgpXG5tb2R1bGUuZXhwb3J0cyA9IFJhbmRvbVxuIiwiLypcbiAqIFNjcmlwdFxuICogPT09PT09XG4gKlxuICogU2NyaXB0IGlzIHRoZSBzY3JpcHRpbmcgbGFuZ3VhZ2UgYnVpbHQgaW50byBiaXRjb2luLiBUaGUgU2NyaXB0IGNsYXNzIGxldHNcbiAqIHlvdSBjcmVhdGUgYW4gaW5zdGFuY2Ugb2YgYSBzY3JpcHQsIGUuZy4gZm9yIGEgc2NyaXB0U2lnIG9yIGEgc2NyaXB0UHViS2V5LlxuICogSXQgdW5kZXJzdGFuZHMgYm90aCB0aGUgYmluYXJ5IGZvcm1hdCwgYXMgd2VsbCBhcyB0d28gZGlmZmVyZW50IHN0cmluZ1xuICogZm9ybWF0cy4gVGhlIGRlZmF1bHQgc3RyaW5nIGZvcm1hdCwgdG8vZnJvbVN0cmluZywgaXMgYSBjdXN0b20gZm9ybWF0IG9ubHlcbiAqIHVzZWQgYnkgWW91cnMgQml0Y29pbiBiZWNhdXNlIGl0IGlzIGlzb21vcnBoaWMgdG8gdGhlIGJpbmFyeSBmb3JtYXQgKG9yIGFzXG4gKiBpc29tb3JwaGljIGFzIGl0IGNhbiBiZSAuLi4gc2luY2UgT1BfMCBhbmQgT1BfRkFMU0UgaGF2ZSB0aGUgc2FtZSBieXRlXG4gKiB2YWx1ZSwgYW5kIHNvIGRvIE9QXzEgYW5kIE9QX1RSVUUpLiBUaGUgYml0Y29pbmQgc3RyaW5nIGZvcm1hdCBpcyBhbHNvXG4gKiBzdXBwb3J0LCBidXQgdGhhdCBmb3JtYXQgaXMgbm90IGlzb21vcnBoaWMgKGkuZS4sIGlmIHlvdSBwdWxsIGluIGEgc3RyaW5nXG4gKiBhbmQgdGhlbiB3cml0ZSBpdCBhZ2FpbiwgeW91IGFyZSBsaWtlbHkgdG8gZ2V0IGJhY2sgYSBkaWZmZXJlbnQgc3RyaW5nLCBldmVuXG4gKiBpZiB5b3UgZG9uJ3QgdXNlIE9QXzAsIE9QX0ZBTFNFLCBPUF8xLCBvciBPUF9UUlVFKS5cbiAqL1xuJ3VzZSBzdHJpY3QnXG5sZXQgZGVwZW5kZW5jaWVzID0ge1xuICBCbjogcmVxdWlyZSgnLi9ibicpLFxuICBCcjogcmVxdWlyZSgnLi9icicpLFxuICBCdzogcmVxdWlyZSgnLi9idycpLFxuICBjbXA6IHJlcXVpcmUoJy4vY21wJyksXG4gIE9wQ29kZTogcmVxdWlyZSgnLi9vcC1jb2RlJyksXG4gIFB1YktleTogcmVxdWlyZSgnLi9wdWIta2V5JyksXG4gIFNpZzogcmVxdWlyZSgnLi9zaWcnKSxcbiAgU3RydWN0OiByZXF1aXJlKCcuL3N0cnVjdCcpXG59XG5cbmxldCBpbmplY3QgPSBmdW5jdGlvbiAoZGVwcykge1xuICBsZXQgQm4gPSBkZXBzLkJuXG4gIGxldCBCciA9IGRlcHMuQnJcbiAgbGV0IEJ3ID0gZGVwcy5Cd1xuICBsZXQgY21wID0gZGVwcy5jbXBcbiAgbGV0IE9wQ29kZSA9IGRlcHMuT3BDb2RlXG4gIGxldCBQdWJLZXkgPSBkZXBzLlB1YktleVxuICBsZXQgU2lnID0gZGVwcy5TaWdcbiAgbGV0IFN0cnVjdCA9IGRlcHMuU3RydWN0XG5cbiAgY2xhc3MgU2NyaXB0IGV4dGVuZHMgU3RydWN0IHtcbiAgICBjb25zdHJ1Y3RvciAoY2h1bmtzID0gW10pIHtcbiAgICAgIHN1cGVyKHtjaHVua3N9KVxuICAgIH1cblxuICAgIGZyb21KU09OIChqc29uKSB7XG4gICAgICByZXR1cm4gdGhpcy5mcm9tU3RyaW5nKGpzb24pXG4gICAgfVxuXG4gICAgdG9KU09OICgpIHtcbiAgICAgIHJldHVybiB0aGlzLnRvU3RyaW5nKClcbiAgICB9XG5cbiAgICBmcm9tQnVmZmVyIChidWYpIHtcbiAgICAgIHRoaXMuY2h1bmtzID0gW11cblxuICAgICAgbGV0IGJyID0gbmV3IEJyKGJ1ZilcbiAgICAgIHdoaWxlICghYnIuZW9mKCkpIHtcbiAgICAgICAgbGV0IG9wQ29kZU51bSA9IGJyLnJlYWRVSW50OCgpXG5cbiAgICAgICAgbGV0IGxlbiwgYnVmXG4gICAgICAgIGlmIChvcENvZGVOdW0gPiAwICYmIG9wQ29kZU51bSA8IE9wQ29kZS5PUF9QVVNIREFUQTEpIHtcbiAgICAgICAgICBsZW4gPSBvcENvZGVOdW1cbiAgICAgICAgICB0aGlzLmNodW5rcy5wdXNoKHtcbiAgICAgICAgICAgIGJ1ZjogYnIucmVhZChsZW4pLFxuICAgICAgICAgICAgbGVuOiBsZW4sXG4gICAgICAgICAgICBvcENvZGVOdW06IG9wQ29kZU51bVxuICAgICAgICAgIH0pXG4gICAgICAgIH0gZWxzZSBpZiAob3BDb2RlTnVtID09PSBPcENvZGUuT1BfUFVTSERBVEExKSB7XG4gICAgICAgICAgbGVuID0gYnIucmVhZFVJbnQ4KClcbiAgICAgICAgICBsZXQgYnVmID0gYnIucmVhZChsZW4pXG4gICAgICAgICAgdGhpcy5jaHVua3MucHVzaCh7XG4gICAgICAgICAgICBidWY6IGJ1ZixcbiAgICAgICAgICAgIGxlbjogbGVuLFxuICAgICAgICAgICAgb3BDb2RlTnVtOiBvcENvZGVOdW1cbiAgICAgICAgICB9KVxuICAgICAgICB9IGVsc2UgaWYgKG9wQ29kZU51bSA9PT0gT3BDb2RlLk9QX1BVU0hEQVRBMikge1xuICAgICAgICAgIGxlbiA9IGJyLnJlYWRVSW50MTZMRSgpXG4gICAgICAgICAgYnVmID0gYnIucmVhZChsZW4pXG4gICAgICAgICAgdGhpcy5jaHVua3MucHVzaCh7XG4gICAgICAgICAgICBidWY6IGJ1ZixcbiAgICAgICAgICAgIGxlbjogbGVuLFxuICAgICAgICAgICAgb3BDb2RlTnVtOiBvcENvZGVOdW1cbiAgICAgICAgICB9KVxuICAgICAgICB9IGVsc2UgaWYgKG9wQ29kZU51bSA9PT0gT3BDb2RlLk9QX1BVU0hEQVRBNCkge1xuICAgICAgICAgIGxlbiA9IGJyLnJlYWRVSW50MzJMRSgpXG4gICAgICAgICAgYnVmID0gYnIucmVhZChsZW4pXG4gICAgICAgICAgdGhpcy5jaHVua3MucHVzaCh7XG4gICAgICAgICAgICBidWY6IGJ1ZixcbiAgICAgICAgICAgIGxlbjogbGVuLFxuICAgICAgICAgICAgb3BDb2RlTnVtOiBvcENvZGVOdW1cbiAgICAgICAgICB9KVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuY2h1bmtzLnB1c2goe1xuICAgICAgICAgICAgb3BDb2RlTnVtOiBvcENvZGVOdW1cbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuXG4gICAgdG9CdWZmZXIgKCkge1xuICAgICAgbGV0IGJ3ID0gbmV3IEJ3KClcblxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmNodW5rcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBsZXQgY2h1bmsgPSB0aGlzLmNodW5rc1tpXVxuICAgICAgICBsZXQgb3BDb2RlTnVtID0gY2h1bmsub3BDb2RlTnVtXG4gICAgICAgIGJ3LndyaXRlVUludDgob3BDb2RlTnVtKVxuICAgICAgICBpZiAoY2h1bmsuYnVmKSB7XG4gICAgICAgICAgaWYgKG9wQ29kZU51bSA8IE9wQ29kZS5PUF9QVVNIREFUQTEpIHtcbiAgICAgICAgICAgIGJ3LndyaXRlKGNodW5rLmJ1ZilcbiAgICAgICAgICB9IGVsc2UgaWYgKG9wQ29kZU51bSA9PT0gT3BDb2RlLk9QX1BVU0hEQVRBMSkge1xuICAgICAgICAgICAgYncud3JpdGVVSW50OChjaHVuay5sZW4pXG4gICAgICAgICAgICBidy53cml0ZShjaHVuay5idWYpXG4gICAgICAgICAgfSBlbHNlIGlmIChvcENvZGVOdW0gPT09IE9wQ29kZS5PUF9QVVNIREFUQTIpIHtcbiAgICAgICAgICAgIGJ3LndyaXRlVUludDE2TEUoY2h1bmsubGVuKVxuICAgICAgICAgICAgYncud3JpdGUoY2h1bmsuYnVmKVxuICAgICAgICAgIH0gZWxzZSBpZiAob3BDb2RlTnVtID09PSBPcENvZGUuT1BfUFVTSERBVEE0KSB7XG4gICAgICAgICAgICBidy53cml0ZVVJbnQzMkxFKGNodW5rLmxlbilcbiAgICAgICAgICAgIGJ3LndyaXRlKGNodW5rLmJ1ZilcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGJ3LnRvQnVmZmVyKClcbiAgICB9XG5cbiAgICBmcm9tU3RyaW5nIChzdHIpIHtcbiAgICAgIHRoaXMuY2h1bmtzID0gW11cbiAgICAgIGlmIChzdHIgPT09ICcnIHx8IHN0ciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiB0aGlzXG4gICAgICB9XG5cbiAgICAgIGxldCB0b2tlbnMgPSBzdHIuc3BsaXQoJyAnKVxuICAgICAgbGV0IGkgPSAwXG4gICAgICB3aGlsZSAoaSA8IHRva2Vucy5sZW5ndGgpIHtcbiAgICAgICAgbGV0IHRva2VuID0gdG9rZW5zW2ldXG4gICAgICAgIGxldCBvcENvZGVOdW1cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBsZXQgb3BDb2RlID0gbmV3IE9wQ29kZSgpLmZyb21TdHJpbmcodG9rZW4pXG4gICAgICAgICAgb3BDb2RlTnVtID0gb3BDb2RlLnRvTnVtYmVyKClcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3BDb2RlTnVtID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBvcENvZGVOdW0gPSBwYXJzZUludCh0b2tlbiwgMTApXG4gICAgICAgICAgaWYgKG9wQ29kZU51bSA+IDAgJiYgb3BDb2RlTnVtIDwgT3BDb2RlLk9QX1BVU0hEQVRBMSkge1xuICAgICAgICAgICAgdGhpcy5jaHVua3MucHVzaCh7XG4gICAgICAgICAgICAgIGJ1ZjogbmV3IEJ1ZmZlcih0b2tlbnNbaSArIDFdLnNsaWNlKDIpLCAnaGV4JyksXG4gICAgICAgICAgICAgIGxlbjogb3BDb2RlTnVtLFxuICAgICAgICAgICAgICBvcENvZGVOdW06IG9wQ29kZU51bVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIGkgPSBpICsgMlxuICAgICAgICAgIH0gZWxzZSBpZiAob3BDb2RlTnVtID09PSAwKSB7XG4gICAgICAgICAgICB0aGlzLmNodW5rcy5wdXNoKHtcbiAgICAgICAgICAgICAgb3BDb2RlTnVtOiAwXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgaSA9IGkgKyAxXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBzY3JpcHQnKVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChvcENvZGVOdW0gPT09IE9wQ29kZS5PUF9QVVNIREFUQTEgfHwgb3BDb2RlTnVtID09PSBPcENvZGUuT1BfUFVTSERBVEEyIHx8IG9wQ29kZU51bSA9PT0gT3BDb2RlLk9QX1BVU0hEQVRBNCkge1xuICAgICAgICAgIGlmICh0b2tlbnNbaSArIDJdLnNsaWNlKDAsIDIpICE9PSAnMHgnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1B1c2hkYXRhIGRhdGEgbXVzdCBzdGFydCB3aXRoIDB4JylcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5jaHVua3MucHVzaCh7XG4gICAgICAgICAgICBidWY6IG5ldyBCdWZmZXIodG9rZW5zW2kgKyAyXS5zbGljZSgyKSwgJ2hleCcpLFxuICAgICAgICAgICAgbGVuOiBwYXJzZUludCh0b2tlbnNbaSArIDFdLCAxMCksXG4gICAgICAgICAgICBvcENvZGVOdW06IG9wQ29kZU51bVxuICAgICAgICAgIH0pXG4gICAgICAgICAgaSA9IGkgKyAzXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5jaHVua3MucHVzaCh7XG4gICAgICAgICAgICBvcENvZGVOdW06IG9wQ29kZU51bVxuICAgICAgICAgIH0pXG4gICAgICAgICAgaSA9IGkgKyAxXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuXG4gICAgdG9TdHJpbmcgKCkge1xuICAgICAgbGV0IHN0ciA9ICcnXG5cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5jaHVua3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGV0IGNodW5rID0gdGhpcy5jaHVua3NbaV1cbiAgICAgICAgbGV0IG9wQ29kZU51bSA9IGNodW5rLm9wQ29kZU51bVxuICAgICAgICBpZiAoIWNodW5rLmJ1Zikge1xuICAgICAgICAgIGlmIChPcENvZGUuc3RyW29wQ29kZU51bV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgc3RyID0gc3RyICsgJyAnICsgbmV3IE9wQ29kZShvcENvZGVOdW0pLnRvU3RyaW5nKClcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3RyID0gc3RyICsgJyAnICsgJzB4JyArIG9wQ29kZU51bS50b1N0cmluZygxNilcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKG9wQ29kZU51bSA9PT0gT3BDb2RlLk9QX1BVU0hEQVRBMSB8fCBvcENvZGVOdW0gPT09IE9wQ29kZS5PUF9QVVNIREFUQTIgfHwgb3BDb2RlTnVtID09PSBPcENvZGUuT1BfUFVTSERBVEE0KSB7XG4gICAgICAgICAgICBzdHIgPSBzdHIgKyAnICcgKyBuZXcgT3BDb2RlKG9wQ29kZU51bSkudG9TdHJpbmcoKVxuICAgICAgICAgIH1cbiAgICAgICAgICBzdHIgPSBzdHIgKyAnICcgKyBjaHVuay5sZW5cbiAgICAgICAgICBzdHIgPSBzdHIgKyAnICcgKyAnMHgnICsgY2h1bmsuYnVmLnRvU3RyaW5nKCdoZXgnKVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzdHIuc3Vic3RyKDEpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW5wdXQgdGhlIHNjcmlwdCBmcm9tIHRoZSBzY3JpcHQgc3RyaW5nIGZvcm1hdCB1c2VkIGluIGJpdGNvaW5kIGRhdGEgdGVzdHNcbiAgICAgKi9cbiAgICBmcm9tQml0Y29pbmRTdHJpbmcgKHN0cikge1xuICAgICAgbGV0IGJ3ID0gbmV3IEJ3KClcbiAgICAgIGxldCB0b2tlbnMgPSBzdHIuc3BsaXQoJyAnKVxuICAgICAgbGV0IGlcbiAgICAgIGZvciAoaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGV0IHRva2VuID0gdG9rZW5zW2ldXG4gICAgICAgIGlmICh0b2tlbiA9PT0gJycpIHtcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG4gICAgICAgIGlmICh0b2tlblswXSA9PT0gJzAnICYmIHRva2VuWzFdID09PSAneCcpIHtcbiAgICAgICAgICBsZXQgaGV4ID0gdG9rZW4uc2xpY2UoMilcbiAgICAgICAgICBidy53cml0ZShuZXcgQnVmZmVyKGhleCwgJ2hleCcpKVxuICAgICAgICB9IGVsc2UgaWYgKHRva2VuWzBdID09PSBcIidcIikge1xuICAgICAgICAgIGxldCB0c3RyID0gdG9rZW4uc2xpY2UoMSwgdG9rZW4ubGVuZ3RoIC0gMSlcbiAgICAgICAgICBsZXQgY2J1ZiA9IG5ldyBCdWZmZXIodHN0cilcbiAgICAgICAgICBsZXQgdGJ1ZiA9IG5ldyBTY3JpcHQoKS53cml0ZUJ1ZmZlcihjYnVmKS50b0J1ZmZlcigpXG4gICAgICAgICAgYncud3JpdGUodGJ1ZilcbiAgICAgICAgfSBlbHNlIGlmIChPcENvZGVbJ09QXycgKyB0b2tlbl0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGxldCBvcHN0ciA9ICdPUF8nICsgdG9rZW5cbiAgICAgICAgICBsZXQgb3BDb2RlTnVtID0gT3BDb2RlW29wc3RyXVxuICAgICAgICAgIGJ3LndyaXRlVUludDgob3BDb2RlTnVtKVxuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBPcENvZGVbdG9rZW5dID09PSAnbnVtYmVyJykge1xuICAgICAgICAgIGxldCBvcHN0ciA9IHRva2VuXG4gICAgICAgICAgbGV0IG9wQ29kZU51bSA9IE9wQ29kZVtvcHN0cl1cbiAgICAgICAgICBidy53cml0ZVVJbnQ4KG9wQ29kZU51bSlcbiAgICAgICAgfSBlbHNlIGlmICghaXNOYU4ocGFyc2VJbnQodG9rZW4sIDEwKSkpIHtcbiAgICAgICAgICBsZXQgYm4gPSBuZXcgQm4odG9rZW4pXG4gICAgICAgICAgbGV0IHNjcmlwdCA9IG5ldyBTY3JpcHQoKS53cml0ZUJuKGJuKVxuICAgICAgICAgIGxldCB0YnVmID0gc2NyaXB0LnRvQnVmZmVyKClcbiAgICAgICAgICBidy53cml0ZSh0YnVmKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ291bGQgbm90IGRldGVybWluZSB0eXBlIG9mIHNjcmlwdCB2YWx1ZScpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGxldCBidWYgPSBidy50b0J1ZmZlcigpXG4gICAgICByZXR1cm4gdGhpcy5mcm9tQnVmZmVyKGJ1ZilcbiAgICB9XG5cbiAgICBzdGF0aWMgZnJvbUJpdGNvaW5kU3RyaW5nIChzdHIpIHtcbiAgICAgIHJldHVybiBuZXcgdGhpcygpLmZyb21CaXRjb2luZFN0cmluZyhzdHIpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogT3V0cHV0IHRoZSBzY3JpcHQgdG8gdGhlIHNjcmlwdCBzdHJpbmcgZm9ybWF0IHVzZWQgaW4gYml0Y29pbmQgZGF0YSB0ZXN0cy5cbiAgICAgKi9cbiAgICB0b0JpdGNvaW5kU3RyaW5nICgpIHtcbiAgICAgIGxldCBzdHIgPSAnJ1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmNodW5rcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBsZXQgY2h1bmsgPSB0aGlzLmNodW5rc1tpXVxuICAgICAgICBpZiAoY2h1bmsuYnVmKSB7XG4gICAgICAgICAgbGV0IGJ1ZiA9IG5ldyBTY3JpcHQoW2NodW5rXSkudG9CdWZmZXIoKVxuICAgICAgICAgIGxldCBoZXggPSBidWYudG9TdHJpbmcoJ2hleCcpXG4gICAgICAgICAgc3RyID0gc3RyICsgJyAnICsgJzB4JyArIGhleFxuICAgICAgICB9IGVsc2UgaWYgKE9wQ29kZS5zdHJbY2h1bmsub3BDb2RlTnVtXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgbGV0IG9zdHIgPSBuZXcgT3BDb2RlKGNodW5rLm9wQ29kZU51bSkudG9TdHJpbmcoKVxuICAgICAgICAgIHN0ciA9IHN0ciArICcgJyArIG9zdHIuc2xpY2UoMykgLy8gcmVtb3ZlIE9QX1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN0ciA9IHN0ciArICcgJyArICcweCcgKyBjaHVuay5vcENvZGVOdW0udG9TdHJpbmcoMTYpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBzdHIuc3Vic3RyKDEpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVHVybiBzY3JpcHQgaW50byBhIHN0YW5kYXJkIHB1YktleUhhc2ggb3V0cHV0IHNjcmlwdFxuICAgICAqL1xuICAgIGZyb21QdWJLZXlIYXNoIChoYXNoQnVmKSB7XG4gICAgICBpZiAoaGFzaEJ1Zi5sZW5ndGggIT09IDIwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignaGFzaEJ1ZiBtdXN0IGJlIGEgMjAgYnl0ZSBidWZmZXInKVxuICAgICAgfVxuICAgICAgdGhpcy53cml0ZU9wQ29kZShPcENvZGUuT1BfRFVQKVxuICAgICAgdGhpcy53cml0ZU9wQ29kZShPcENvZGUuT1BfSEFTSDE2MClcbiAgICAgIHRoaXMud3JpdGVCdWZmZXIoaGFzaEJ1ZilcbiAgICAgIHRoaXMud3JpdGVPcENvZGUoT3BDb2RlLk9QX0VRVUFMVkVSSUZZKVxuICAgICAgdGhpcy53cml0ZU9wQ29kZShPcENvZGUuT1BfQ0hFQ0tTSUcpXG4gICAgICByZXR1cm4gdGhpc1xuICAgIH1cblxuICAgIHN0YXRpYyBmcm9tUHViS2V5SGFzaCAoaGFzaEJ1Zikge1xuICAgICAgcmV0dXJuIG5ldyB0aGlzKCkuZnJvbVB1YktleUhhc2goaGFzaEJ1ZilcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUdXJuIHNjcmlwdCBpbnRvIGEgc3RhbmRhcmQgc2NyaXB0SGFzaCAocDJzaCkgb3V0cHV0IHNjcmlwdFxuICAgICAqL1xuICAgIGZyb21TY3JpcHRIYXNoIChoYXNoQnVmKSB7XG4gICAgICBpZiAoaGFzaEJ1Zi5sZW5ndGggIT09IDIwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignaGFzaEJ1ZiBtdXN0IGJlIGEgMjAgYnl0ZSBidWZmZXInKVxuICAgICAgfVxuICAgICAgdGhpcy53cml0ZU9wQ29kZShPcENvZGUuT1BfSEFTSDE2MClcbiAgICAgIHRoaXMud3JpdGVCdWZmZXIoaGFzaEJ1ZilcbiAgICAgIHRoaXMud3JpdGVPcENvZGUoT3BDb2RlLk9QX0VRVUFMKVxuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG5cbiAgICBzdGF0aWMgZnJvbVNjcmlwdEhhc2ggKGhhc2hCdWYpIHtcbiAgICAgIHJldHVybiBuZXcgdGhpcygpLmZyb21TY3JpcHRIYXNoKGhhc2hCdWYpXG4gICAgfVxuXG4gICAgc3RhdGljIHNvcnRQdWJLZXlzIChwdWJLZXlzKSB7XG4gICAgICByZXR1cm4gcHViS2V5cy5zbGljZSgpLnNvcnQoKHB1YktleTEsIHB1YktleTIpID0+IHtcbiAgICAgICAgbGV0IGJ1ZjEgPSBwdWJLZXkxLnRvQnVmZmVyKClcbiAgICAgICAgbGV0IGJ1ZjIgPSBwdWJLZXkyLnRvQnVmZmVyKClcbiAgICAgICAgbGV0IGxlbiA9IGJ1ZjEubGVuZ3RoID4gYnVmMS5sZW5ndGggPyBidWYxLmxlbmd0aCA6IGJ1ZjIubGVuZ3RoXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDw9IGxlbjsgaSsrKSB7XG4gICAgICAgICAgaWYgKGJ1ZjFbaV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIC0xIC8vIHNob3J0ZXIgc3RyaW5ncyBjb21lIGZpcnN0XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChidWYyW2ldID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiAxXG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChidWYxW2ldIDwgYnVmMltpXSkge1xuICAgICAgICAgICAgcmV0dXJuIC0xXG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChidWYxW2ldID4gYnVmMltpXSkge1xuICAgICAgICAgICAgcmV0dXJuIDFcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2VuZXJhdGUgYSBtdWx0aXNpZyBvdXRwdXQgc2NyaXB0IGZyb20gYSBsaXN0IG9mIHB1YmxpYyBrZXlzLiBzb3J0XG4gICAgICogZGVmYXVsdHMgdG8gdHJ1ZS4gSWYgc29ydCBpcyB0cnVlLCB0aGUgcHViS2V5cyBhcmUgc29ydGVkXG4gICAgICogbGV4aWNvZ3JhcGhpY2FsbHkuXG4gICAgKi9cbiAgICBmcm9tUHViS2V5cyAobSwgcHViS2V5cywgc29ydCA9IHRydWUpIHtcbiAgICAgIGlmICh0eXBlb2YgbSAhPT0gJ251bWJlcicpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdtIG11c3QgYmUgYSBudW1iZXInKVxuICAgICAgfVxuICAgICAgaWYgKHNvcnQgPT09IHRydWUpIHtcbiAgICAgICAgcHViS2V5cyA9IFNjcmlwdC5zb3J0UHViS2V5cyhwdWJLZXlzKVxuICAgICAgfVxuICAgICAgdGhpcy53cml0ZU9wQ29kZShtICsgT3BDb2RlLk9QXzEgLSAxKVxuICAgICAgZm9yIChsZXQgaSBpbiBwdWJLZXlzKSB7XG4gICAgICAgIHRoaXMud3JpdGVCdWZmZXIocHViS2V5c1tpXS50b0J1ZmZlcigpKVxuICAgICAgfVxuICAgICAgdGhpcy53cml0ZU9wQ29kZShwdWJLZXlzLmxlbmd0aCArIE9wQ29kZS5PUF8xIC0gMSlcbiAgICAgIHRoaXMud3JpdGVPcENvZGUoT3BDb2RlLk9QX0NIRUNLTVVMVElTSUcpXG4gICAgICByZXR1cm4gdGhpc1xuICAgIH1cblxuICAgIHN0YXRpYyBmcm9tUHViS2V5cyAobSwgcHViS2V5cywgc29ydCkge1xuICAgICAgcmV0dXJuIG5ldyB0aGlzKCkuZnJvbVB1YktleXMobSwgcHViS2V5cywgc29ydClcbiAgICB9XG5cbiAgICByZW1vdmVDb2Rlc2VwYXJhdG9ycyAoKSB7XG4gICAgICBsZXQgY2h1bmtzID0gW11cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5jaHVua3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKHRoaXMuY2h1bmtzW2ldLm9wQ29kZU51bSAhPT0gT3BDb2RlLk9QX0NPREVTRVBBUkFUT1IpIHtcbiAgICAgICAgICBjaHVua3MucHVzaCh0aGlzLmNodW5rc1tpXSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy5jaHVua3MgPSBjaHVua3NcbiAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuXG4gICAgaXNQdXNoT25seSAoKSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuY2h1bmtzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxldCBjaHVuayA9IHRoaXMuY2h1bmtzW2ldXG4gICAgICAgIGxldCBvcENvZGVOdW0gPSBjaHVuay5vcENvZGVOdW1cbiAgICAgICAgaWYgKG9wQ29kZU51bSA+IE9wQ29kZS5PUF8xNikge1xuICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cblxuICAgIGlzT3BSZXR1cm4gKCkge1xuICAgICAgaWYgKHRoaXMuY2h1bmtzWzBdLm9wQ29kZU51bSA9PT0gT3BDb2RlLk9QX1JFVFVSTiAmJlxuICAgICAgICAodGhpcy5jaHVua3MubGVuZ3RoID09PSAxIHx8XG4gICAgICAgICAgKHRoaXMuY2h1bmtzLmxlbmd0aCA9PT0gMiAmJlxuICAgICAgICAgIHRoaXMuY2h1bmtzWzFdLmJ1ZiAmJlxuICAgICAgICAgIHRoaXMuY2h1bmtzWzFdLmJ1Zi5sZW5ndGggPD0gNDAgJiZcbiAgICAgICAgICB0aGlzLmNodW5rc1sxXS5sZW5ndGggPT09IHRoaXMuY2h1bmtzLmxlbilcbiAgICAgICAgKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgfVxuXG4gICAgaXNQdWJLZXlIYXNoT3V0ICgpIHtcbiAgICAgIGlmICh0aGlzLmNodW5rc1swXSAmJiB0aGlzLmNodW5rc1swXS5vcENvZGVOdW0gPT09IE9wQ29kZS5PUF9EVVAgJiZcbiAgICAgICAgdGhpcy5jaHVua3NbMV0gJiYgdGhpcy5jaHVua3NbMV0ub3BDb2RlTnVtID09PSBPcENvZGUuT1BfSEFTSDE2MCAmJlxuICAgICAgICB0aGlzLmNodW5rc1syXS5idWYgJiZcbiAgICAgICAgdGhpcy5jaHVua3NbM10gJiYgdGhpcy5jaHVua3NbM10ub3BDb2RlTnVtID09PSBPcENvZGUuT1BfRVFVQUxWRVJJRlkgJiZcbiAgICAgICAgdGhpcy5jaHVua3NbNF0gJiYgdGhpcy5jaHVua3NbNF0ub3BDb2RlTnVtID09PSBPcENvZGUuT1BfQ0hFQ0tTSUcpIHtcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgcHViS2V5SGFzaCBpbnB1dCBzaG91bGQgY29uc2lzdCBvZiB0d28gcHVzaCBvcGVyYXRpb25zLiBUaGUgZmlyc3QgcHVzaFxuICAgICAqIG9wZXJhdGlvbiBtYXkgYmUgT1BfMCwgd2hpY2ggbWVhbnMgdGhlIHNpZ25hdHVyZSBpcyBtaXNzaW5nLCB3aGljaCBpcyB0cnVlXG4gICAgICogZm9yIHNvbWUgcGFydGlhbGx5IHNpZ25lZCAoYW5kIGludmFsaWQpIHRyYW5zYWN0aW9ucy5cbiAgICAgKi9cbiAgICBpc1B1YktleUhhc2hJbiAoKSB7XG4gICAgICBpZiAodGhpcy5jaHVua3MubGVuZ3RoID09PSAyICYmXG4gICAgICAgICh0aGlzLmNodW5rc1swXS5idWYgfHwgdGhpcy5jaHVua3NbMF0ub3BDb2RlTnVtID09PSBPcENvZGUuT1BfMCkgJiZcbiAgICAgICAgdGhpcy5jaHVua3NbMV0uYnVmKSB7XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpc1NjcmlwdEhhc2hPdXQgKCkge1xuICAgICAgbGV0IGJ1ZiA9IHRoaXMudG9CdWZmZXIoKVxuICAgICAgcmV0dXJuIChidWYubGVuZ3RoID09PSAyMyAmJlxuICAgICAgICBidWZbMF0gPT09IE9wQ29kZS5PUF9IQVNIMTYwICYmXG4gICAgICAgIGJ1ZlsxXSA9PT0gMHgxNCAmJlxuICAgICAgICBidWZbMjJdID09PSBPcENvZGUuT1BfRVFVQUwpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTm90ZSB0aGF0IHRoZXNlIGFyZSBmcmVxdWVudGx5IGluZGlzdGluZ3Vpc2hhYmxlIGZyb20gcHViS2V5SGFzaGluXG4gICAgICovXG4gICAgaXNTY3JpcHRIYXNoSW4gKCkge1xuICAgICAgaWYgKCF0aGlzLmlzUHVzaE9ubHkoKSkge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICAgIHRyeSB7XG4gICAgICAgIG5ldyBTY3JpcHQoKS5mcm9tQnVmZmVyKHRoaXMuY2h1bmtzW3RoaXMuY2h1bmtzLmxlbmd0aCAtIDFdLmJ1ZilcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVuaWVuY2UgbWV0aG9kIHRvIGNoZWNrIGlmIGEgc2NyaXB0IGlzIGJvdGggc2NyaXB0SGFzaCAocDJzaCkgYW5kIGlmXG4gICAgICogdGhlIHJlZGVlbVNjcmlwdCBpbnNpZGUgaXMgYSBtdWx0aXNpZyBvdXRwdXQuIFRoaXMgaXMgdGhlIHN0YW5kYXJkIGZvcm1hdFxuICAgICAqIGZvciBpbnB1dHMgb2YgbW9zdCBtdWx0aXNpZyB0cmFuc2FjdGlvbnMuXG4gICAgICovXG4gICAgaXNTY3JpcHRIYXNoTXVsdGlTaWdJbiAoKSB7XG4gICAgICBpZiAoIXRoaXMuaXNTY3JpcHRIYXNoSW4oKSkge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICAgIGxldCByZWRlZW1TY3JpcHRcbiAgICAgIHRyeSB7XG4gICAgICAgIHJlZGVlbVNjcmlwdCA9IG5ldyBTY3JpcHQoKS5mcm9tQnVmZmVyKHRoaXMuY2h1bmtzW3RoaXMuY2h1bmtzLmxlbmd0aCAtIDFdLmJ1ZilcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICAgIHJldHVybiByZWRlZW1TY3JpcHQuaXNNdWx0aVNpZ091dCgpXG4gICAgfVxuXG4gICAgaXNNdWx0aVNpZ091dCAoKSB7XG4gICAgICBsZXQgbSA9IHRoaXMuY2h1bmtzWzBdLm9wQ29kZU51bSAtIE9wQ29kZS5PUF8xICsgMVxuICAgICAgaWYgKCEobSA+PSAxICYmIG0gPD0gMTYpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgICAgbGV0IHB1YktleWNodW5rcyA9IHRoaXMuY2h1bmtzLnNsaWNlKDEsIHRoaXMuY2h1bmtzLmxlbmd0aCAtIDIpXG4gICAgICBpZiAoIXB1YktleWNodW5rcy5ldmVyeSgoY2h1bmspID0+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBsZXQgYnVmID0gY2h1bmsuYnVmXG4gICAgICAgICAgbGV0IHB1YktleSA9IG5ldyBQdWJLZXkoKS5mcm9tRGVyKGJ1ZilcbiAgICAgICAgICBwdWJLZXkudmFsaWRhdGUoKVxuICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICB9XG4gICAgICB9KSkge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICAgIGxldCBuID0gdGhpcy5jaHVua3NbdGhpcy5jaHVua3MubGVuZ3RoIC0gMl0ub3BDb2RlTnVtIC0gT3BDb2RlLk9QXzEgKyAxXG4gICAgICBpZiAoIShuID49IG0gJiYgbiA8PSAxNikpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgICBpZiAodGhpcy5jaHVua3NbMSArIG4gKyAxXS5vcENvZGVOdW0gIT09IE9wQ29kZS5PUF9DSEVDS01VTFRJU0lHKSB7XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG5cbiAgICBpc011bHRpU2lnSW4gKCkge1xuICAgICAgaWYgKHRoaXMuY2h1bmtzWzBdLm9wQ29kZU51bSAhPT0gT3BDb2RlLk9QXzApIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgICBsZXQgcmVtYWluSW5nID0gdGhpcy5jaHVua3Muc2xpY2UoMSlcbiAgICAgIGlmIChyZW1haW5JbmcubGVuZ3RoIDwgMSkge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICAgIHJldHVybiByZW1haW5JbmcuZXZlcnkoKGNodW5rKSA9PiBCdWZmZXIuaXNCdWZmZXIoY2h1bmsuYnVmKSAmJiBTaWcuSXNUeERlcihjaHVuay5idWYpKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFuYWxhZ291cyB0byBiaXRjb2luZCdzIEZpbmRBbmREZWxldGUuIEZpbmQgYW5kIGRlbGV0ZSBlcXVpdmFsZW50IGNodW5rcyxcbiAgICAgKiB0eXBpY2FsbHkgdXNlZCB3aXRoIHB1c2ggZGF0YSBjaHVua3MuICBOb3RlIHRoYXQgdGhpcyB3aWxsIGZpbmQgYW5kIGRlbGV0ZVxuICAgICAqIG5vdCBqdXN0IHRoZSBzYW1lIGRhdGEsIGJ1dCB0aGUgc2FtZSBkYXRhIHdpdGggdGhlIHNhbWUgcHVzaCBkYXRhIG9wIGFzXG4gICAgICogcHJvZHVjZWQgYnkgZGVmYXVsdC4gaS5lLiwgaWYgYSBwdXNoZGF0YSBpbiBhIHR4IGRvZXMgbm90IHVzZSB0aGUgbWluaW1hbFxuICAgICAqIHB1c2hkYXRhIG9wLCB0aGVuIHdoZW4geW91IHRyeSB0byByZW1vdmUgdGhlIGRhdGEgaXQgaXMgcHVzaGluZywgaXQgd2lsbCBub3RcbiAgICAgKiBiZSByZW1vdmVkLCBiZWNhdXNlIHRoZXkgZG8gbm90IHVzZSB0aGUgc2FtZSBwdXNoZGF0YSBvcC5cbiAgICAgKi9cbiAgICBmaW5kQW5kRGVsZXRlIChzY3JpcHQpIHtcbiAgICAgIGxldCBidWYgPSBzY3JpcHQudG9CdWZmZXIoKVxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmNodW5rcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBsZXQgc2NyaXB0MiA9IG5ldyBTY3JpcHQoW3RoaXMuY2h1bmtzW2ldXSlcbiAgICAgICAgbGV0IGJ1ZjIgPSBzY3JpcHQyLnRvQnVmZmVyKClcbiAgICAgICAgaWYgKGNtcChidWYsIGJ1ZjIpKSB7XG4gICAgICAgICAgdGhpcy5jaHVua3Muc3BsaWNlKGksIDEpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuXG4gICAgd3JpdGVTY3JpcHQgKHNjcmlwdCkge1xuICAgICAgdGhpcy5jaHVua3MgPSB0aGlzLmNodW5rcy5jb25jYXQoc2NyaXB0LmNodW5rcylcbiAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuXG4gICAgc3RhdGljIHdyaXRlU2NyaXB0IChzY3JpcHQpIHtcbiAgICAgIHJldHVybiBuZXcgdGhpcygpLndyaXRlU2NyaXB0KHNjcmlwdClcbiAgICB9XG5cbiAgICB3cml0ZVN0cmluZyAoc3RyKSB7XG4gICAgICBsZXQgc2NyaXB0ID0gbmV3IFNjcmlwdCgpLmZyb21TdHJpbmcoc3RyKVxuICAgICAgdGhpcy5jaHVua3MgPSB0aGlzLmNodW5rcy5jb25jYXQoc2NyaXB0LmNodW5rcylcbiAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuXG4gICAgc3RhdGljIHdyaXRlU3RyaW5nIChzdHIpIHtcbiAgICAgIHJldHVybiBuZXcgdGhpcygpLndyaXRlU3RyaW5nKHN0cilcbiAgICB9XG5cbiAgICB3cml0ZU9wQ29kZSAob3BDb2RlTnVtKSB7XG4gICAgICB0aGlzLmNodW5rcy5wdXNoKHtvcENvZGVOdW19KVxuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG5cbiAgICBzdGF0aWMgd3JpdGVPcENvZGUgKG9wQ29kZU51bSkge1xuICAgICAgcmV0dXJuIG5ldyB0aGlzKCkud3JpdGVPcENvZGUob3BDb2RlTnVtKVxuICAgIH1cblxuICAgIHNldENodW5rT3BDb2RlIChpLCBvcENvZGVOdW0pIHtcbiAgICAgIHRoaXMuY2h1bmtzW2ldID0ge29wQ29kZU51bX1cbiAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuXG4gICAgLy8gd3JpdGUgYSBiaWcgbnVtYmVyIGluIHRoZSBtaW5pbWFsIHdheVxuICAgIHdyaXRlQm4gKGJuKSB7XG4gICAgICBpZiAoYm4uY21wKDApID09PSBPcENvZGUuT1BfMCkge1xuICAgICAgICB0aGlzLmNodW5rcy5wdXNoKHtcbiAgICAgICAgICBvcENvZGVOdW06IE9wQ29kZS5PUF8wXG4gICAgICAgIH0pXG4gICAgICB9IGVsc2UgaWYgKGJuLmNtcCgtMSkgPT09IDApIHtcbiAgICAgICAgdGhpcy5jaHVua3MucHVzaCh7XG4gICAgICAgICAgb3BDb2RlTnVtOiBPcENvZGUuT1BfMU5FR0FURVxuICAgICAgICB9KVxuICAgICAgfSBlbHNlIGlmIChibi5jbXAoMSkgPj0gMCAmJiBibi5jbXAoMTYpIDw9IDApIHsgLy8gc2VlIE9QXzEgLSBPUF8xNlxuICAgICAgICB0aGlzLmNodW5rcy5wdXNoKHtcbiAgICAgICAgICBvcENvZGVOdW06IGJuLnRvTnVtYmVyKCkgKyBPcENvZGUuT1BfMSAtIDFcbiAgICAgICAgfSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxldCBidWYgPSBibi50b1NtKHtlbmRpYW46ICdsaXR0bGUnfSlcbiAgICAgICAgdGhpcy53cml0ZUJ1ZmZlcihidWYpXG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpc1xuICAgIH1cblxuICAgIHN0YXRpYyB3cml0ZUJuIChibikge1xuICAgICAgcmV0dXJuIG5ldyB0aGlzKCkud3JpdGVCbihibilcbiAgICB9XG5cbiAgICBzZXRDaHVua0JuIChpLCBibikge1xuICAgICAgdGhpcy5jaHVua3NbaV0gPSBuZXcgU2NyaXB0KCkud3JpdGVCbihibikuY2h1bmtzWzBdXG4gICAgICByZXR1cm4gdGhpc1xuICAgIH1cblxuICAgIC8vIG5vdGU6IHRoaXMgZG9lcyBub3QgbmVjZXNzYXJpbHkgd3JpdGUgYnVmZmVycyBpbiB0aGUgbWluaW1hbCB3YXlcbiAgICAvLyB0byB3cml0ZSBudW1iZXJzIGluIHRoZSBtaW5pbWFsIHdheSwgc2VlIHdyaXRlQm5cbiAgICB3cml0ZUJ1ZmZlciAoYnVmKSB7XG4gICAgICBsZXQgb3BDb2RlTnVtXG4gICAgICBsZXQgbGVuID0gYnVmLmxlbmd0aFxuICAgICAgaWYgKGJ1Zi5sZW5ndGggPiAwICYmIGJ1Zi5sZW5ndGggPCBPcENvZGUuT1BfUFVTSERBVEExKSB7XG4gICAgICAgIG9wQ29kZU51bSA9IGJ1Zi5sZW5ndGhcbiAgICAgIH0gZWxzZSBpZiAoYnVmLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBvcENvZGVOdW0gPSBPcENvZGUuT1BfMFxuICAgICAgfSBlbHNlIGlmIChidWYubGVuZ3RoIDwgTWF0aC5wb3coMiwgOCkpIHtcbiAgICAgICAgb3BDb2RlTnVtID0gT3BDb2RlLk9QX1BVU0hEQVRBMVxuICAgICAgfSBlbHNlIGlmIChidWYubGVuZ3RoIDwgTWF0aC5wb3coMiwgMTYpKSB7XG4gICAgICAgIG9wQ29kZU51bSA9IE9wQ29kZS5PUF9QVVNIREFUQTJcbiAgICAgIH0gZWxzZSBpZiAoYnVmLmxlbmd0aCA8IE1hdGgucG93KDIsIDMyKSkge1xuICAgICAgICBvcENvZGVOdW0gPSBPcENvZGUuT1BfUFVTSERBVEE0XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJZb3UgY2FuJ3QgcHVzaCB0aGF0IG11Y2ggZGF0YVwiKVxuICAgICAgfVxuICAgICAgdGhpcy5jaHVua3MucHVzaCh7XG4gICAgICAgIGJ1ZjogYnVmLFxuICAgICAgICBsZW46IGxlbixcbiAgICAgICAgb3BDb2RlTnVtOiBvcENvZGVOdW1cbiAgICAgIH0pXG4gICAgICByZXR1cm4gdGhpc1xuICAgIH1cblxuICAgIHN0YXRpYyB3cml0ZUJ1ZmZlciAoYnVmKSB7XG4gICAgICByZXR1cm4gbmV3IHRoaXMoKS53cml0ZUJ1ZmZlcihidWYpXG4gICAgfVxuXG4gICAgc2V0Q2h1bmtCdWZmZXIgKGksIGJ1Zikge1xuICAgICAgdGhpcy5jaHVua3NbaV0gPSBuZXcgU2NyaXB0KCkud3JpdGVCdWZmZXIoYnVmKS5jaHVua3NbMF1cbiAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuXG4gICAgLy8gbWFrZSBzdXJlIGEgcHVzaCBpcyB0aGUgc21hbGxlc3Qgd2F5IHRvIHB1c2ggdGhhdCBwYXJ0aWN1bGFyIGRhdGFcbiAgICAvLyBjb21lcyBmcm9tIGJpdGNvaW5kJ3Mgc2NyaXB0IGludGVycHJldGVyIENoZWNrTWluaW1hbFB1c2ggZnVuY3Rpb25cbiAgICBjaGVja01pbmltYWxQdXNoIChpKSB7XG4gICAgICBsZXQgY2h1bmsgPSB0aGlzLmNodW5rc1tpXVxuICAgICAgbGV0IGJ1ZiA9IGNodW5rLmJ1ZlxuICAgICAgbGV0IG9wQ29kZU51bSA9IGNodW5rLm9wQ29kZU51bVxuICAgICAgaWYgKCFidWYpIHtcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH1cbiAgICAgIGlmIChidWYubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIC8vIENvdWxkIGhhdmUgdXNlZCBPUF8wLlxuICAgICAgICByZXR1cm4gb3BDb2RlTnVtID09PSBPcENvZGUuT1BfMFxuICAgICAgfSBlbHNlIGlmIChidWYubGVuZ3RoID09PSAxICYmIGJ1ZlswXSA+PSAxICYmIGJ1ZlswXSA8PSAxNikge1xuICAgICAgICAvLyBDb3VsZCBoYXZlIHVzZWQgT1BfMSAuLiBPUF8xNi5cbiAgICAgICAgcmV0dXJuIG9wQ29kZU51bSA9PT0gT3BDb2RlLk9QXzEgKyAoYnVmWzBdIC0gMSlcbiAgICAgIH0gZWxzZSBpZiAoYnVmLmxlbmd0aCA9PT0gMSAmJiBidWZbMF0gPT09IDB4ODEpIHtcbiAgICAgICAgLy8gQ291bGQgaGF2ZSB1c2VkIE9QXzFORUdBVEUuXG4gICAgICAgIHJldHVybiBvcENvZGVOdW0gPT09IE9wQ29kZS5PUF8xTkVHQVRFXG4gICAgICB9IGVsc2UgaWYgKGJ1Zi5sZW5ndGggPD0gNzUpIHtcbiAgICAgICAgLy8gQ291bGQgaGF2ZSB1c2VkIGEgZGlyZWN0IHB1c2ggKG9wQ29kZSBpbmRpY2F0aW5nIG51bWJlciBvZiBieXRlcyBwdXNoZWQgKyB0aG9zZSBieXRlcykuXG4gICAgICAgIHJldHVybiBvcENvZGVOdW0gPT09IGJ1Zi5sZW5ndGhcbiAgICAgIH0gZWxzZSBpZiAoYnVmLmxlbmd0aCA8PSAyNTUpIHtcbiAgICAgICAgLy8gQ291bGQgaGF2ZSB1c2VkIE9QX1BVU0hEQVRBLlxuICAgICAgICByZXR1cm4gb3BDb2RlTnVtID09PSBPcENvZGUuT1BfUFVTSERBVEExXG4gICAgICB9IGVsc2UgaWYgKGJ1Zi5sZW5ndGggPD0gNjU1MzUpIHtcbiAgICAgICAgLy8gQ291bGQgaGF2ZSB1c2VkIE9QX1BVU0hEQVRBMi5cbiAgICAgICAgcmV0dXJuIG9wQ29kZU51bSA9PT0gT3BDb2RlLk9QX1BVU0hEQVRBMlxuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gIH1cblxuICByZXR1cm4gU2NyaXB0XG59XG5cbmluamVjdCA9IHJlcXVpcmUoJ2luamVjdGVyJykoaW5qZWN0LCBkZXBlbmRlbmNpZXMpXG5sZXQgU2NyaXB0ID0gaW5qZWN0KClcbm1vZHVsZS5leHBvcnRzID0gU2NyaXB0XG4iLCIvKipcbiAqIFNpZ25hdHVyZVxuICogPT09PT09PT09XG4gKlxuICogQSBzaWduYXR1cmUgaXMgdGhlIHRoaW5nIHlvdSBtYWtlIHdoZW4geW91IHdhbnQgdG8gc2lnbiBhIHRyYW5zYWN0aW9uLCBvclxuICogdGhlIHRoaW5nIHlvdSB3YW50IHRvIHZlcmlmeSBpZiB5b3Ugd2FudCB0byBlbnN1cmUgdGhhdCBzb21lb25lIHNpZ25lZCBhXG4gKiB0cmFuc2FjdGlvbi4gSXQgaGFzIGFuIHIgYW5kIHMgdmFsdWUsIHdoaWNoIGFyZSB0aGUgY3J5cHRvZ3JhcGhpYyBiaWdcbiAqIG51bWJlcnMgdGhhdCBkZWZpbmUgYSBzaWduYXR1cmUuIEFuZCBzaW5jZSB0aGlzIGlzIGEgYml0Y29pbiBsaWJyYXJ5LCBpdFxuICogYWxzbyBoYXMgbkhhc2hUeXBlLCB3aGljaCBpcyB0aGUgd2F5IHRvIGhhc2ggYSB0cmFuc2FjdGlvbiBhbmQgaXMgdXNlZCBpblxuICogdGhlIGJpbmFyeSBmb3JtYXQgb2YgYSBzaWduYXR1cmUgd2hlbiBpdCBpcyBpbiBhIHRyYW5zYWN0aW9uLiBXZSBhbHNvXG4gKiBzdXBwb3J0IGEgcHVibGljIGtleSByZWNvdmVyIHZhbHVlLCByZWNvdmVyeSwgYWxsb3dpbmcgb25lIHRvIGNvbXB1dGUgdGhlXG4gKiBwdWJsaWMga2V5IGZyb20gYSBzaWduYXR1cmUuIFRoZSBcImNvbXByZXNzZWRcIiB2YWx1ZSBpcyBhbHNvIG5lY2Vzc2FyeSB0b1xuICogYWNjdXJhdGVseSBjb21wdXRlIHRoZSBwdWJsaWMga2V5IGZyb20gYSBzaWduYXR1cmUuXG4gKlxuICogVGhlcmUgYXJlIGEgZmV3IGRpZmZlcmVudCBmb3JtYXRzIG9mIGEgc2lnbmF0dXJlIGluIGJpdGNvaW4uIE9uZSBpcyBERVIsIHRoZVxuICogb3RoZXIgaXMgdGhlIFR4Rm9ybWF0IHdoaWNoIGlzIHRoZSBzYW1lIGFzIERFUiBidXQgd2l0aCB0aGUgbkhhc2hUeXBlIGJ5dGVcbiAqIGFwcGVuZGVkLCBhbmQgdGhlIGZpbmFsIG9uZSBpcyBDb21wYWN0LCB3aGljaCBpcyB1c2VkIGJ5IEJpdGNvaW4gU2lnbmVkXG4gKiBNZXNzYWdlIChCc20pLlxuICovXG4ndXNlIHN0cmljdCdcbmxldCBkZXBlbmRlbmNpZXMgPSB7XG4gIEJuOiByZXF1aXJlKCcuL2JuJyksXG4gIFN0cnVjdDogcmVxdWlyZSgnLi9zdHJ1Y3QnKVxufVxuXG5sZXQgaW5qZWN0ID0gZnVuY3Rpb24gKGRlcHMpIHtcbiAgbGV0IEJuID0gZGVwcy5CblxuICBsZXQgU3RydWN0ID0gZGVwcy5TdHJ1Y3RcblxuICAvKipcbiAgICogciwgczogYmlnIG51bWJlcnMgY29uc3RpdGluZyBhIGNyeXB0b2dyYXBoaWMgc2lnbmF0dXJlXG4gICAqIG5IYXNoVHlwZTogZm91bmQgYXQgdGhlIGVuZCBvZiBhIHNpZ25hdHVyZSBpbiBhIHRyYW5zYWN0aW9uXG4gICAqIHJlY292ZXJ5OiBwdWJsaWMga2V5IHJlY292ZXJ5IG51bWJlclxuICAgKiBjb21wcmVzc2VkOiB3aGV0aGVyIHRoZSByZWNvdmVyZWQgcHViS2V5IGlzIGNvbXByZXNzZWRcbiAgICovXG4gIGNsYXNzIFNpZyBleHRlbmRzIFN0cnVjdCB7XG4gICAgY29uc3RydWN0b3IgKHIsIHMsIG5IYXNoVHlwZSwgcmVjb3ZlcnksIGNvbXByZXNzZWQpIHtcbiAgICAgIHN1cGVyKHtyLCBzLCBuSGFzaFR5cGUsIHJlY292ZXJ5LCBjb21wcmVzc2VkfSlcbiAgICB9XG5cbiAgICBmcm9tQnVmZmVyIChidWYpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZyb21EZXIoYnVmLCB0cnVlKVxuICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZyb21Db21wYWN0KGJ1ZilcbiAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICByZXR1cm4gdGhpcy5mcm9tVHhGb3JtYXQoYnVmKVxuICAgIH1cblxuICAgIHRvQnVmZmVyICgpIHtcbiAgICAgIGlmICh0aGlzLm5IYXNoVHlwZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRvVHhGb3JtYXQoKVxuICAgICAgfSBlbHNlIGlmICh0aGlzLnJlY292ZXJ5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudG9Db21wYWN0KClcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLnRvRGVyKClcbiAgICB9XG5cbiAgICAvLyBUaGUgZm9ybWF0IHVzZWQgYnkgXCJtZXNzYWdlXCJcbiAgICBmcm9tQ29tcGFjdCAoYnVmKSB7XG4gICAgICBsZXQgY29tcHJlc3NlZCA9IHRydWVcbiAgICAgIGxldCByZWNvdmVyeSA9IGJ1Zi5zbGljZSgwLCAxKVswXSAtIDI3IC0gNFxuICAgICAgaWYgKHJlY292ZXJ5IDwgMCkge1xuICAgICAgICBjb21wcmVzc2VkID0gZmFsc2VcbiAgICAgICAgcmVjb3ZlcnkgPSByZWNvdmVyeSArIDRcbiAgICAgIH1cblxuICAgICAgbGV0IGIyID0gYnVmLnNsaWNlKDEsIDMzKVxuICAgICAgbGV0IGIzID0gYnVmLnNsaWNlKDMzLCA2NSlcblxuICAgICAgaWYgKCEocmVjb3ZlcnkgPT09IDAgfHwgcmVjb3ZlcnkgPT09IDEgfHwgcmVjb3ZlcnkgPT09IDIgfHwgcmVjb3ZlcnkgPT09IDMpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignaSBtdXN0IGJlIDAsIDEsIDIsIG9yIDMnKVxuICAgICAgfVxuICAgICAgaWYgKGIyLmxlbmd0aCAhPT0gMzIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdyIG11c3QgYmUgMzIgYnl0ZXMnKVxuICAgICAgfVxuICAgICAgaWYgKGIzLmxlbmd0aCAhPT0gMzIgfHwgYnVmLmxlbmd0aCA+IDY1KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcigncyBtdXN0IGJlIDMyIGJ5dGVzJylcbiAgICAgIH1cblxuICAgICAgdGhpcy5jb21wcmVzc2VkID0gY29tcHJlc3NlZFxuICAgICAgdGhpcy5yZWNvdmVyeSA9IHJlY292ZXJ5XG4gICAgICB0aGlzLnIgPSBuZXcgQm4oKS5mcm9tQnVmZmVyKGIyKVxuICAgICAgdGhpcy5zID0gbmV3IEJuKCkuZnJvbUJ1ZmZlcihiMylcblxuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG5cbiAgICBzdGF0aWMgZnJvbUNvbXBhY3QgKGJ1Zikge1xuICAgICAgcmV0dXJuIG5ldyB0aGlzKCkuZnJvbUNvbXBhY3QoYnVmKVxuICAgIH1cblxuICAgIC8vIFRoZSBmb3JtYXQgdXNlZCBpbiBhIHR4LCBleGNlcHQgd2l0aG91dCB0aGUgbkhhc2hUeXBlIGF0IHRoZSBlbmRcbiAgICBmcm9tRGVyIChidWYsIHN0cmljdCkge1xuICAgICAgbGV0IG9iaiA9IFNpZy5wYXJzZURlcihidWYsIHN0cmljdClcbiAgICAgIHRoaXMuciA9IG9iai5yXG4gICAgICB0aGlzLnMgPSBvYmouc1xuXG4gICAgICByZXR1cm4gdGhpc1xuICAgIH1cblxuICAgIHN0YXRpYyBmcm9tRGVyIChidWYsIHN0cmljdCkge1xuICAgICAgcmV0dXJuIG5ldyB0aGlzKCkuZnJvbURlcihidWYsIHN0cmljdClcbiAgICB9XG5cbiAgICAvLyBUaGUgZm9ybWF0IHVzZWQgaW4gYSB0eFxuICAgIGZyb21UeEZvcm1hdCAoYnVmKSB7XG4gICAgICBpZiAoYnVmLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAvLyBhbGxvdyBzZXR0aW5nIGEgXCJibGFua1wiIHNpZ25hdHVyZVxuICAgICAgICB0aGlzLnIgPSBuZXcgQm4oMSlcbiAgICAgICAgdGhpcy5zID0gbmV3IEJuKDEpXG4gICAgICAgIHRoaXMubkhhc2hUeXBlID0gMVxuICAgICAgICByZXR1cm4gdGhpc1xuICAgICAgfVxuICAgICAgbGV0IG5IYXNoVHlwZSA9IGJ1Zi5yZWFkVUludDgoYnVmLmxlbmd0aCAtIDEpXG4gICAgICBsZXQgZGVyYnVmID0gYnVmLnNsaWNlKDAsIGJ1Zi5sZW5ndGggLSAxKVxuICAgICAgdGhpcy5mcm9tRGVyKGRlcmJ1ZiwgZmFsc2UpXG4gICAgICB0aGlzLm5IYXNoVHlwZSA9IG5IYXNoVHlwZVxuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG5cbiAgICBzdGF0aWMgZnJvbVR4Rm9ybWF0IChidWYpIHtcbiAgICAgIHJldHVybiBuZXcgdGhpcygpLmZyb21UeEZvcm1hdChidWYpXG4gICAgfVxuXG4gICAgZnJvbVN0cmluZyAoc3RyKSB7XG4gICAgICByZXR1cm4gdGhpcy5mcm9tSGV4KHN0cilcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbiBvcmRlciB0byBtaW1pYyB0aGUgbm9uLXN0cmljdCBERVIgZW5jb2Rpbmcgb2YgT3BlblNTTCwgc2V0IHN0cmljdCA9IGZhbHNlLlxuICAgICAqL1xuICAgIHN0YXRpYyBwYXJzZURlciAoYnVmLCBzdHJpY3QpIHtcbiAgICAgIGlmIChzdHJpY3QgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBzdHJpY3QgPSB0cnVlXG4gICAgICB9XG5cbiAgICAgIGlmICghQnVmZmVyLmlzQnVmZmVyKGJ1ZikpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdERVIgZm9ybWF0dGVkIHNpZ25hdHVyZSBzaG91bGQgYmUgYSBidWZmZXInKVxuICAgICAgfVxuXG4gICAgICBsZXQgaGVhZGVyID0gYnVmWzBdXG5cbiAgICAgIGlmIChoZWFkZXIgIT09IDB4MzApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdIZWFkZXIgYnl0ZSBzaG91bGQgYmUgMHgzMCcpXG4gICAgICB9XG5cbiAgICAgIGxldCBsZW5ndGggPSBidWZbMV1cbiAgICAgIGxldCBidWZsZW5ndGggPSBidWYuc2xpY2UoMikubGVuZ3RoXG4gICAgICBpZiAoc3RyaWN0ICYmIGxlbmd0aCAhPT0gYnVmbGVuZ3RoKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTEVuZ3RoIGJ5dGUgc2hvdWxkIGxlbmd0aCBvZiB3aGF0IGZvbGxvd3MnKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGVuZ3RoID0gbGVuZ3RoIDwgYnVmbGVuZ3RoID8gbGVuZ3RoIDogYnVmbGVuZ3RoXG4gICAgICB9XG5cbiAgICAgIGxldCByaGVhZGVyID0gYnVmWzIgKyAwXVxuICAgICAgaWYgKHJoZWFkZXIgIT09IDB4MDIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnRlZ2VyIGJ5dGUgZm9yIHIgc2hvdWxkIGJlIDB4MDInKVxuICAgICAgfVxuXG4gICAgICBsZXQgcmxlbmd0aCA9IGJ1ZlsyICsgMV1cbiAgICAgIGxldCByYnVmID0gYnVmLnNsaWNlKDIgKyAyLCAyICsgMiArIHJsZW5ndGgpXG4gICAgICBsZXQgciA9IG5ldyBCbigpLmZyb21CdWZmZXIocmJ1ZilcbiAgICAgIGxldCBybmVnID0gYnVmWzIgKyAxICsgMV0gPT09IDB4MDBcbiAgICAgIGlmIChybGVuZ3RoICE9PSByYnVmLmxlbmd0aCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0xFbmd0aCBvZiByIGluY29ycmVjdCcpXG4gICAgICB9XG5cbiAgICAgIGxldCBzaGVhZGVyID0gYnVmWzIgKyAyICsgcmxlbmd0aCArIDBdXG4gICAgICBpZiAoc2hlYWRlciAhPT0gMHgwMikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludGVnZXIgYnl0ZSBmb3IgcyBzaG91bGQgYmUgMHgwMicpXG4gICAgICB9XG5cbiAgICAgIGxldCBzbGVuZ3RoID0gYnVmWzIgKyAyICsgcmxlbmd0aCArIDFdXG4gICAgICBsZXQgc2J1ZiA9IGJ1Zi5zbGljZSgyICsgMiArIHJsZW5ndGggKyAyLCAyICsgMiArIHJsZW5ndGggKyAyICsgc2xlbmd0aClcbiAgICAgIGxldCBzID0gbmV3IEJuKCkuZnJvbUJ1ZmZlcihzYnVmKVxuICAgICAgbGV0IHNuZWcgPSBidWZbMiArIDIgKyBybGVuZ3RoICsgMiArIDJdID09PSAweDAwXG4gICAgICBpZiAoc2xlbmd0aCAhPT0gc2J1Zi5sZW5ndGgpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdMRW5ndGggb2YgcyBpbmNvcnJlY3QnKVxuICAgICAgfVxuXG4gICAgICBsZXQgc3VtbGVuZ3RoID0gMiArIDIgKyBybGVuZ3RoICsgMiArIHNsZW5ndGhcbiAgICAgIGlmIChsZW5ndGggIT09IHN1bWxlbmd0aCAtIDIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdMRW5ndGggb2Ygc2lnbmF0dXJlIGluY29ycmVjdCcpXG4gICAgICB9XG5cbiAgICAgIGxldCBvYmogPSB7XG4gICAgICAgIGhlYWRlcjogaGVhZGVyLFxuICAgICAgICBsZW5ndGg6IGxlbmd0aCxcbiAgICAgICAgcmhlYWRlcjogcmhlYWRlcixcbiAgICAgICAgcmxlbmd0aDogcmxlbmd0aCxcbiAgICAgICAgcm5lZzogcm5lZyxcbiAgICAgICAgcmJ1ZjogcmJ1ZixcbiAgICAgICAgcjogcixcbiAgICAgICAgc2hlYWRlcjogc2hlYWRlcixcbiAgICAgICAgc2xlbmd0aDogc2xlbmd0aCxcbiAgICAgICAgc25lZzogc25lZyxcbiAgICAgICAgc2J1Zjogc2J1ZixcbiAgICAgICAgczogc1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gb2JqXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBmdW5jdGlvbiBpcyB0cmFuc2xhdGVkIGZyb20gYml0Y29pbmQncyBJc0RFUlNpZ25hdHVyZSBhbmQgaXMgdXNlZCBpblxuICAgICAqIHRoZSBzY3JpcHQgaW50ZXJwcmV0ZXIuICBUaGlzIFwiREVSXCIgZm9ybWF0IGFjdHVhbGx5IGluY2x1ZGVzIGFuIGV4dHJhIGJ5dGUsXG4gICAgICogdGhlIG5IYXNoVHlwZSwgYXQgdGhlIGVuZC4gSXQgaXMgcmVhbGx5IHRoZSB0eCBmb3JtYXQsIG5vdCBERVIgZm9ybWF0LlxuICAgICAqXG4gICAgICogQSBjYW5vbmljYWwgc2lnbmF0dXJlIGV4aXN0cyBvZjogWzMwXSBbdG90YWwgbGVuXSBbMDJdIFtsZW4gUl0gW1JdIFswMl0gW2xlbiBTXSBbU10gW2hhc2h0eXBlXVxuICAgICAqIFdoZXJlIFIgYW5kIFMgYXJlIG5vdCBuZWdhdGl2ZSAodGhlaXIgZmlyc3QgYnl0ZSBoYXMgaXRzIGhpZ2hlc3QgYml0IG5vdCBzZXQpLCBhbmQgbm90XG4gICAgICogZXhjZXNzaXZlbHkgcGFkZGVkIChkbyBub3Qgc3RhcnQgd2l0aCBhIDAgYnl0ZSwgdW5sZXNzIGFuIG90aGVyd2lzZSBuZWdhdGl2ZSBudW1iZXIgZm9sbG93cyxcbiAgICAgKiBpbiB3aGljaCBjYXNlIGEgc2luZ2xlIDAgYnl0ZSBpcyBuZWNlc3NhcnkgYW5kIGV2ZW4gcmVxdWlyZWQpLlxuICAgICAqXG4gICAgICogU2VlIGh0dHBzOi8vYml0Y29pbnRhbGsub3JnL2luZGV4LnBocD90b3BpYz04MzkyLm1zZzEyNzYyMyNtc2cxMjc2MjNcbiAgICAgKi9cbiAgICBzdGF0aWMgSXNUeERlciAoYnVmKSB7XG4gICAgICBpZiAoYnVmLmxlbmd0aCA8IDkpIHtcbiAgICAgICAgLy8gIE5vbi1jYW5vbmljYWwgc2lnbmF0dXJlOiB0b28gc2hvcnRcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgICBpZiAoYnVmLmxlbmd0aCA+IDczKSB7XG4gICAgICAgIC8vIE5vbi1jYW5vbmljYWwgc2lnbmF0dXJlOiB0b28gbG9uZ1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICAgIGlmIChidWZbMF0gIT09IDB4MzApIHtcbiAgICAgICAgLy8gIE5vbi1jYW5vbmljYWwgc2lnbmF0dXJlOiB3cm9uZyB0eXBlXG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgICAgaWYgKGJ1ZlsxXSAhPT0gYnVmLmxlbmd0aCAtIDMpIHtcbiAgICAgICAgLy8gIE5vbi1jYW5vbmljYWwgc2lnbmF0dXJlOiB3cm9uZyBsZW5ndGggbWFya2VyXG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgICAgbGV0IG5MRW5SID0gYnVmWzNdXG4gICAgICBpZiAoNSArIG5MRW5SID49IGJ1Zi5sZW5ndGgpIHtcbiAgICAgICAgLy8gIE5vbi1jYW5vbmljYWwgc2lnbmF0dXJlOiBTIGxlbmd0aCBtaXNwbGFjZWRcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgICBsZXQgbkxFblMgPSBidWZbNSArIG5MRW5SXVxuICAgICAgaWYgKChuTEVuUiArIG5MRW5TICsgNykgIT09IGJ1Zi5sZW5ndGgpIHtcbiAgICAgICAgLy8gIE5vbi1jYW5vbmljYWwgc2lnbmF0dXJlOiBSK1MgbGVuZ3RoIG1pc21hdGNoXG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuXG4gICAgICBsZXQgUiA9IGJ1Zi5zbGljZSg0KVxuICAgICAgaWYgKGJ1Zls0IC0gMl0gIT09IDB4MDIpIHtcbiAgICAgICAgLy8gIE5vbi1jYW5vbmljYWwgc2lnbmF0dXJlOiBSIHZhbHVlIHR5cGUgbWlzbWF0Y2hcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgICBpZiAobkxFblIgPT09IDApIHtcbiAgICAgICAgLy8gIE5vbi1jYW5vbmljYWwgc2lnbmF0dXJlOiBSIGxlbmd0aCBpcyB6ZXJvXG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgICAgaWYgKFJbMF0gJiAweDgwKSB7XG4gICAgICAgIC8vICBOb24tY2Fub25pY2FsIHNpZ25hdHVyZTogUiB2YWx1ZSBuZWdhdGl2ZVxuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICAgIGlmIChuTEVuUiA+IDEgJiYgKFJbMF0gPT09IDB4MDApICYmICEoUlsxXSAmIDB4ODApKSB7XG4gICAgICAgIC8vICBOb24tY2Fub25pY2FsIHNpZ25hdHVyZTogUiB2YWx1ZSBleGNlc3NpdmVseSBwYWRkZWRcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG5cbiAgICAgIGxldCBTID0gYnVmLnNsaWNlKDYgKyBuTEVuUilcbiAgICAgIGlmIChidWZbNiArIG5MRW5SIC0gMl0gIT09IDB4MDIpIHtcbiAgICAgICAgLy8gIE5vbi1jYW5vbmljYWwgc2lnbmF0dXJlOiBTIHZhbHVlIHR5cGUgbWlzbWF0Y2hcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgICBpZiAobkxFblMgPT09IDApIHtcbiAgICAgICAgLy8gIE5vbi1jYW5vbmljYWwgc2lnbmF0dXJlOiBTIGxlbmd0aCBpcyB6ZXJvXG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgICAgaWYgKFNbMF0gJiAweDgwKSB7XG4gICAgICAgIC8vICBOb24tY2Fub25pY2FsIHNpZ25hdHVyZTogUyB2YWx1ZSBuZWdhdGl2ZVxuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICAgIGlmIChuTEVuUyA+IDEgJiYgKFNbMF0gPT09IDB4MDApICYmICEoU1sxXSAmIDB4ODApKSB7XG4gICAgICAgIC8vICBOb24tY2Fub25pY2FsIHNpZ25hdHVyZTogUyB2YWx1ZSBleGNlc3NpdmVseSBwYWRkZWRcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbXBhcmVzIHRvIGJpdGNvaW5kJ3MgSXNMb3dERVJTaWduYXR1cmVcbiAgICAgKiBTZWUgYWxzbyBFY2RzYSBzaWduYXR1cmUgYWxnb3JpdGhtIHdoaWNoIGVuZm9yY2VzIHRoaXMuXG4gICAgICogU2VlIGFsc28gQmlwIDYyLCBcImxvdyBTIHZhbHVlcyBpbiBzaWduYXR1cmVzXCJcbiAgICAgKi9cbiAgICBoYXNMb3dTICgpIHtcbiAgICAgIGlmICh0aGlzLnMubHQoMSkgfHwgdGhpcy5zLmd0KEJuLmZyb21CdWZmZXIobmV3IEJ1ZmZlcignN0ZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkY1RDU3NkU3MzU3QTQ1MDFEREZFOTJGNDY2ODFCMjBBMCcsICdoZXgnKSkpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFbnN1cmVzIHRoZSBuSGFzaFR5cGUgaXMgZXhhY3RseSBlcXVhbCB0byBvbmUgb2YgdGhlIHN0YW5kYXJkIG9wdGlvbnMgb3IgY29tYmluYXRpb25zIHRoZXJlb2YuXG4gICAgICogVHJhbnNsYXRlZCBmcm9tIGJpdGNvaW5kJ3MgSXNEZWZpbmVkSGFzaHR5cGVTaWduYXR1cmVcbiAgICAgKi9cbiAgICBoYXNEZWZpbmVkSGFzaFR5cGUgKCkge1xuICAgICAgaWYgKHRoaXMubkhhc2hUeXBlIDwgU2lnLlNJR0hBU0hfQUxMIHx8IHRoaXMubkhhc2hUeXBlID4gU2lnLlNJR0hBU0hfU0lOR0xFKSB7XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG5cbiAgICB0b0NvbXBhY3QgKHJlY292ZXJ5LCBjb21wcmVzc2VkKSB7XG4gICAgICByZWNvdmVyeSA9IHR5cGVvZiByZWNvdmVyeSA9PT0gJ251bWJlcicgPyByZWNvdmVyeSA6IHRoaXMucmVjb3ZlcnlcbiAgICAgIGNvbXByZXNzZWQgPSB0eXBlb2YgY29tcHJlc3NlZCA9PT0gJ2Jvb2xlYW4nID8gY29tcHJlc3NlZCA6IHRoaXMuY29tcHJlc3NlZFxuXG4gICAgICBpZiAoIShyZWNvdmVyeSA9PT0gMCB8fCByZWNvdmVyeSA9PT0gMSB8fCByZWNvdmVyeSA9PT0gMiB8fCByZWNvdmVyeSA9PT0gMykpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdyZWNvdmVyeSBtdXN0IGJlIGVxdWFsIHRvIDAsIDEsIDIsIG9yIDMnKVxuICAgICAgfVxuXG4gICAgICBsZXQgdmFsID0gcmVjb3ZlcnkgKyAyNyArIDRcbiAgICAgIGlmIChjb21wcmVzc2VkID09PSBmYWxzZSkge1xuICAgICAgICB2YWwgPSB2YWwgLSA0XG4gICAgICB9XG4gICAgICBsZXQgYjEgPSBuZXcgQnVmZmVyKFt2YWxdKVxuICAgICAgbGV0IGIyID0gdGhpcy5yLnRvQnVmZmVyKHtzaXplOiAzMn0pXG4gICAgICBsZXQgYjMgPSB0aGlzLnMudG9CdWZmZXIoe3NpemU6IDMyfSlcbiAgICAgIHJldHVybiBCdWZmZXIuY29uY2F0KFtiMSwgYjIsIGIzXSlcbiAgICB9XG5cbiAgICB0b0RlciAoKSB7XG4gICAgICBsZXQgcm5idWYgPSB0aGlzLnIudG9CdWZmZXIoKVxuICAgICAgbGV0IHNuYnVmID0gdGhpcy5zLnRvQnVmZmVyKClcblxuICAgICAgbGV0IHJuZWcgPSBybmJ1ZlswXSAmIDB4ODBcbiAgICAgIGxldCBzbmVnID0gc25idWZbMF0gJiAweDgwXG5cbiAgICAgIGxldCByYnVmID0gcm5lZyA/IEJ1ZmZlci5jb25jYXQoW25ldyBCdWZmZXIoWzB4MDBdKSwgcm5idWZdKSA6IHJuYnVmXG4gICAgICBsZXQgc2J1ZiA9IHNuZWcgPyBCdWZmZXIuY29uY2F0KFtuZXcgQnVmZmVyKFsweDAwXSksIHNuYnVmXSkgOiBzbmJ1ZlxuXG4gICAgICBsZXQgbGVuZ3RoID0gMiArIHJidWYubGVuZ3RoICsgMiArIHNidWYubGVuZ3RoXG4gICAgICBsZXQgcmxlbmd0aCA9IHJidWYubGVuZ3RoXG4gICAgICBsZXQgc2xlbmd0aCA9IHNidWYubGVuZ3RoXG4gICAgICBsZXQgcmhlYWRlciA9IDB4MDJcbiAgICAgIGxldCBzaGVhZGVyID0gMHgwMlxuICAgICAgbGV0IGhlYWRlciA9IDB4MzBcblxuICAgICAgbGV0IGRlciA9IEJ1ZmZlci5jb25jYXQoW25ldyBCdWZmZXIoW2hlYWRlciwgbGVuZ3RoLCByaGVhZGVyLCBybGVuZ3RoXSksIHJidWYsIG5ldyBCdWZmZXIoW3NoZWFkZXIsIHNsZW5ndGhdKSwgc2J1Zl0pXG4gICAgICByZXR1cm4gZGVyXG4gICAgfVxuXG4gICAgdG9UeEZvcm1hdCAoKSB7XG4gICAgICBsZXQgZGVyYnVmID0gdGhpcy50b0RlcigpXG4gICAgICBsZXQgYnVmID0gbmV3IEJ1ZmZlcigxKVxuICAgICAgYnVmLndyaXRlVUludDgodGhpcy5uSGFzaFR5cGUsIDApXG4gICAgICByZXR1cm4gQnVmZmVyLmNvbmNhdChbZGVyYnVmLCBidWZdKVxuICAgIH1cblxuICAgIHRvU3RyaW5nICgpIHtcbiAgICAgIHJldHVybiB0aGlzLnRvSGV4KClcbiAgICB9XG4gIH1cblxuICBTaWcuU0lHSEFTSF9BTEwgPSAweDAwMDAwMDAxXG4gIFNpZy5TSUdIQVNIX05PTkUgPSAweDAwMDAwMDAyXG4gIFNpZy5TSUdIQVNIX1NJTkdMRSA9IDB4MDAwMDAwMDNcbiAgU2lnLlNJR0hBU0hfQU5ZT05FQ0FOUEFZID0gMHgwMDAwMDA4MFxuXG4gIHJldHVybiBTaWdcbn1cblxuaW5qZWN0ID0gcmVxdWlyZSgnaW5qZWN0ZXInKShpbmplY3QsIGRlcGVuZGVuY2llcylcbmxldCBTaWcgPSBpbmplY3QoKVxubW9kdWxlLmV4cG9ydHMgPSBTaWdcbiIsIi8qKlxuICogU3RydWN0dXJlXG4gKiA9PT09PT09PT1cbiAqXG4gKiBBIGNvbnZlbmllbnQgc3RydWN0dXJlIHRvIGV4dGVuZCBvYmplY3RzIGZyb20gdGhhdCBjb21lcyB3aXRoIHZlcnkgY29tbW9uXG4gKiBib2lsZXIgcGxhdGUgaW5zdGFuY2UgbWV0aG9kczpcbiAqIC0gZnJvbU9iamVjdFxuICogLSBmcm9tQnJcbiAqIC0gdG9Cd1xuICogLSBmcm9tQnVmZmVyXG4gKiAtIGZyb21GYXN0QnVmZmVyXG4gKiAtIHRvQnVmZmVyXG4gKiAtIHRvRmFzdEJ1ZmZlclxuICogLSBmcm9tSGV4XG4gKiAtIHRvSGV4XG4gKiAtIGZyb21TdHJpbmdcbiAqIC0gdG9TdHJpbmdcbiAqIC0gZnJvbUpTT05cbiAqIC0gdG9KU09OXG4gKiAtIGNsb25lQnlCdWZmZXJcbiAqIC0gY2xvbmVCeUZhc3RCdWZmZXJcbiAqIC0gY2xvbmVCeUhleFxuICogLSBjbG9uZUJ5U3RyaW5nXG4gKiAtIGNsb25lQnlKU09OXG4gKlxuICogQXMgd2VsbCBhcyBzdGF0aWMgbWV0aG9kcyBmb3I6XG4gKiAtIGZyb21PYmplY3RcbiAqIC0gZnJvbUJyXG4gKiAtIGZyb21CdWZmZXJcbiAqIC0gZnJvbUZhc3RCdWZmZXJcbiAqIC0gZnJvbUhleFxuICogLSBmcm9tU3RyaW5nXG4gKiAtIGZyb21KU09OXG4gKlxuICogVGhlIFwiZXhwZWN0XCIgbWV0aG9kIGFsc28gZmFjaWxpdGF0ZXMgZGVzZXJpYWxpemluZyBhIHNlcXVlbmNlIG9mIGJ1ZmZlcnNcbiAqIGludG8gYW4gb2JqZWN0LlxuICovXG4ndXNlIHN0cmljdCdcbmxldCBkZXBlbmRlbmNpZXMgPSB7XG4gIEJyOiByZXF1aXJlKCcuL2JyJyksXG4gIEJ3OiByZXF1aXJlKCcuL2J3Jylcbn1cblxubGV0IGluamVjdCA9IGZ1bmN0aW9uIChkZXBzKSB7XG4gIGxldCBCciA9IGRlcHMuQnJcbiAgbGV0IEJ3ID0gZGVwcy5Cd1xuXG4gIGNsYXNzIFN0cnVjdCB7XG4gICAgY29uc3RydWN0b3IgKG9iaikge1xuICAgICAgdGhpcy5mcm9tT2JqZWN0KG9iailcbiAgICB9XG5cbiAgICBmcm9tT2JqZWN0IChvYmopIHtcbiAgICAgIGlmICghb2JqKSB7XG4gICAgICAgIHJldHVybiB0aGlzXG4gICAgICB9XG4gICAgICBmb3IgKGxldCBrZXkgb2YgT2JqZWN0LmtleXMob2JqKSkge1xuICAgICAgICBpZiAob2JqW2tleV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHRoaXNba2V5XSA9IG9ialtrZXldXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuXG4gICAgc3RhdGljIGZyb21PYmplY3QgKG9iaikge1xuICAgICAgcmV0dXJuIG5ldyB0aGlzKCkuZnJvbU9iamVjdChvYmopXG4gICAgfVxuXG4gICAgZnJvbUJyIChicikge1xuICAgICAgaWYgKCEoYnIgaW5zdGFuY2VvZiBCcikpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdiciBtdXN0IGJlIGEgYnVmZmVyIHJlYWRlcicpXG4gICAgICB9XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ25vdCBpbXBsZW1lbnRlZCcpXG4gICAgfVxuXG4gICAgc3RhdGljIGZyb21CciAoYnIpIHtcbiAgICAgIHJldHVybiBuZXcgdGhpcygpLmZyb21CcihicilcbiAgICB9XG5cbiAgICBhc3luY0Zyb21CciAoYnIpIHtcbiAgICAgIGlmICghKGJyIGluc3RhbmNlb2YgQnIpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignYnIgbXVzdCBiZSBhIGJ1ZmZlciByZWFkZXInKVxuICAgICAgfVxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdub3QgaW1wbGVtZW50ZWQnKVxuICAgIH1cblxuICAgIHN0YXRpYyBhc3luY0Zyb21CciAoYnIpIHtcbiAgICAgIHJldHVybiBuZXcgdGhpcygpLmFzeW5jRnJvbUJyKGJyKVxuICAgIH1cblxuICAgIHRvQncgKGJ3KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ25vdCBpbXBsZW1lbnRlZCcpXG4gICAgfVxuXG4gICAgYXN5bmNUb0J3IChidykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdub3QgaW1wbGVtZW50ZWQnKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEl0IGlzIHZlcnkgb2Z0ZW4gdGhlIGNhc2UgdGhhdCB5b3Ugd2FudCB0byBjcmVhdGUgYSBiaXRjb2luIG9iamVjdCBmcm9tIGFcbiAgICAgKiBzdHJlYW0gb2Ygc21hbGwgYnVmZmVycyByYXRoZXIgdGhhbiBmcm9tIGEgYnVmZmVyIG9mIHRoZSBjb3JyZWN0IGxlbmd0aC5cbiAgICAgKiBGb3IgaW5zdGFuY2UsIGlmIHN0cmVhbWluZyBmcm9tIHRoZSBuZXR3b3JrIG9yIGRpc2suIFRoZSBnZW5Gcm9tQnVmZmVyc1xuICAgICAqIG1ldGhvZCBpcyBhIGdlbmVyYXRvciB3aGljaCBwcm9kdWNlcyBhbiBpdGVyYXRvci4gVXNlIC5uZXh0KGJ1ZikgdG8gcGFzc1xuICAgICAqIGluIGEgc21hbGwgYnVmZmVyLiBUaGUgaXRlcmF0b3Igd2lsbCBlbmQgd2hlbiBpdCBoYXMgcmVjZWl2ZWQgZW5vdWdoIGRhdGFcbiAgICAgKiB0byBwcm9kdWNlIHRoZSBvYmplY3QuIEluIHNvbWUgY2FzZXMgaXQgaXMgYWJsZSB0byB5aWVsZCB0aGUgbnVtYmVyIG9mXG4gICAgICogYnl0ZXMgaXQgaXMgZXhwZWN0aW5nLCBidXQgdGhhdCBpcyBub3QgYWx3YXlzIGtub3duLlxuICAgICAqL1xuICAgICogZ2VuRnJvbUJ1ZmZlcnMgKCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdub3QgaW1wbGVtZW50ZWQnKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgY29udmVuaWVuY2UgbWV0aG9kIHVzZWQgYnkgZnJvbSB0aGUgZ2VuRnJvbUJ1ZmZlcnMqIGdlbmVyYXRvcnMuXG4gICAgICogQmFzaWNhbGx5IGxldHMgeW91IGV4cGVjdCBhIGNlcnRhaW4gbnVtYmVyIG9mIGJ5dGVzIChsZW4pIGFuZCBrZWVwc1xuICAgICAqIHlpZWxkaW5nIHVudGlsIHlvdSBnaXZlIGl0IGVub3VnaC4gSXQgeWllbGRzIHRoZSBleHBlY3RlZCBhbW91bnRcbiAgICAgKiByZW1haW5JbmcsIGFuZCByZXR1cm5zIGFuIG9iamVjdCBjb250YWluSW5nIGEgYnVmZmVyIG9mIHRoZSBleHBlY3RlZFxuICAgICAqIGxlbmd0aCwgYW5kLCBpZiBhbnksIHRoZSByZW1haW5kZXIgYnVmZmVyLlxuICAgICAqL1xuICAgICogZXhwZWN0IChsZW4sIHN0YXJ0YnVmKSB7XG4gICAgICBsZXQgYnVmID0gc3RhcnRidWZcbiAgICAgIGxldCBidyA9IG5ldyBCdygpXG4gICAgICBsZXQgZ290bGVuID0gMFxuICAgICAgaWYgKHN0YXJ0YnVmKSB7XG4gICAgICAgIGJ3LndyaXRlKHN0YXJ0YnVmKVxuICAgICAgICBnb3RsZW4gKz0gc3RhcnRidWYubGVuZ3RoXG4gICAgICB9XG4gICAgICBsZXQgcmVtYWluZGVyYnVmXG4gICAgICB3aGlsZSAoZ290bGVuIDwgbGVuKSB7XG4gICAgICAgIGxldCByZW1haW5kZXJsZW4gPSAobGVuIC0gZ290bGVuKVxuICAgICAgICBidWYgPSB5aWVsZCByZW1haW5kZXJsZW5cbiAgICAgICAgaWYgKCFidWYpIHtcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG4gICAgICAgIGJ3LndyaXRlKGJ1ZilcbiAgICAgICAgZ290bGVuICs9IGJ1Zi5sZW5ndGhcbiAgICAgIH1cbiAgICAgIGJ1ZiA9IGJ3LnRvQnVmZmVyKClcbiAgICAgIGxldCBvdmVybGVuID0gZ290bGVuIC0gbGVuXG4gICAgICByZW1haW5kZXJidWYgPSBidWYuc2xpY2UoYnVmLmxlbmd0aCAtIG92ZXJsZW4sIGJ1Zi5sZW5ndGgpXG4gICAgICBidWYgPSBidWYuc2xpY2UoMCwgYnVmLmxlbmd0aCAtIG92ZXJsZW4pXG4gICAgICByZXR1cm4ge1xuICAgICAgICBidWY6IGJ1ZixcbiAgICAgICAgcmVtYWluZGVyYnVmOiByZW1haW5kZXJidWZcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0IGEgYnVmZmVyIGludG8gYW4gb2JqZWN0LCBpLmUuIGRlc2VyaWFsaXplIHRoZSBvYmplY3QuXG4gICAgICovXG4gICAgZnJvbUJ1ZmZlciAoYnVmLCAuLi5yZXN0KSB7XG4gICAgICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihidWYpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignYnVmIG11c3QgYmUgYSBidWZmZXInKVxuICAgICAgfVxuICAgICAgbGV0IGJyID0gbmV3IEJyKGJ1ZilcbiAgICAgIHJldHVybiB0aGlzLmZyb21CcihiciwgLi4ucmVzdClcbiAgICB9XG5cbiAgICBzdGF0aWMgZnJvbUJ1ZmZlciAoLi4ucmVzdCkge1xuICAgICAgcmV0dXJuIG5ldyB0aGlzKCkuZnJvbUJ1ZmZlciguLi5yZXN0KVxuICAgIH1cblxuICAgIGFzeW5jRnJvbUJ1ZmZlciAoYnVmLCAuLi5yZXN0KSB7XG4gICAgICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihidWYpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignYnVmIG11c3QgYmUgYSBidWZmZXInKVxuICAgICAgfVxuICAgICAgbGV0IGJyID0gbmV3IEJyKGJ1ZilcbiAgICAgIHJldHVybiB0aGlzLmFzeW5jRnJvbUJyKGJyLCAuLi5yZXN0KVxuICAgIH1cblxuICAgIHN0YXRpYyBhc3luY0Zyb21CdWZmZXIgKGJ1ZiwgLi4ucmVzdCkge1xuICAgICAgcmV0dXJuIG5ldyB0aGlzKCkuYXN5bmNGcm9tQnVmZmVyKGJ1ZiwgLi4ucmVzdClcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgY29tcGxlbWVudCBvZiB0b0Zhc3RCdWZmZXIgLSBzZWUgZGVzY3JpcHRpb24gZm9yIHRvRmFzdEJ1ZmZlclxuICAgICAqL1xuICAgIGZyb21GYXN0QnVmZmVyIChidWYsIC4uLnJlc3QpIHtcbiAgICAgIGlmIChidWYubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiB0aGlzXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGhpcy5mcm9tQnVmZmVyKGJ1ZiwgLi4ucmVzdClcbiAgICAgIH1cbiAgICB9XG5cbiAgICBzdGF0aWMgZnJvbUZhc3RCdWZmZXIgKC4uLnJlc3QpIHtcbiAgICAgIHJldHVybiBuZXcgdGhpcygpLmZyb21GYXN0QnVmZmVyKC4uLnJlc3QpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydCB0aGUgb2JqZWN0IGludG8gYSBidWZmZXIsIGkuZS4gc2VyaWFsaXplIHRoZSBvYmplY3QuIFRoaXMgbWV0aG9kXG4gICAgICogbWF5IGJsb2NrIHRoZSBtYWluIHRocmVhZC5cbiAgICAgKi9cbiAgICB0b0J1ZmZlciAoLi4ucmVzdCkge1xuICAgICAgcmV0dXJuIHRoaXMudG9CdyguLi5yZXN0KS50b0J1ZmZlcigpXG4gICAgfVxuXG4gICAgYXN5bmNUb0J1ZmZlciAoLi4ucmVzdCkge1xuICAgICAgcmV0dXJuIHRoaXMuYXN5bmNUb0J3KC4uLnJlc3QpLnRoZW4oKGJ3KSA9PiBidy50b0J1ZmZlcigpKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNvbWV0aW1lcyB0aGUgdG9CdWZmZXIgbWV0aG9kIGhhcyBjcnlwdG9ncmFwaHkgYW5kIGJsb2NrcyB0aGUgbWFpbiB0aHJlYWQsXG4gICAgICogYW5kIHdlIG5lZWQgYSBub24tYmxvY2tpbmcgd2F5IHRvIHNlcmlhbGl6ZSBhbiBvYmplY3QuIFRoYXQgaXMgd2hhdFxuICAgICAqIHRvRmFzdEJ1ZmZlciBpcy4gT2YgY291cnNlIGl0IGRlZmF1bHRzIHRvIGp1c3QgdXNpbmcgdG9CdWZmZXIgaWYgYW4gb2JqZWN0XG4gICAgICogaGFzbid0IGltcGxlbWVudGVkIGl0LiBJZiB5b3VyIHJlZ3VsYXIgdG9CdWZmZXIgbWV0aG9kIGJsb2NrcywgbGlrZSB3aXRoXG4gICAgICogQmlwMzIsIHRoZW4geW91IHNob3VsZCBpbXBsZW1lbnQgdGhpcyBtZXRob2QgdG8gYmUgbm9uLWJsb2NraW5nLiBUaGlzXG4gICAgICogbWV0aG9kIGlzIHVzZWQgdG8gc2VuZCBvYmplY3RzIHRvIHRoZSB3b3JrZXJzLiBpLmUuLCBmb3IgY29udmVydGluZyBhXG4gICAgICogQmlwMzIgb2JqZWN0IHRvIGEgc3RyaW5nLCB3ZSBuZWVkIHRvIGVuY29kZSBpdCBhcyBhIGJ1ZmZlciBpbiBhXG4gICAgICogbm9uLWJsb2NraW5nIG1hbm5lciB3aXRoIHRvRmFzdEJ1ZmZlciwgc2VuZCBpdCB0byBhIHdvcmtlciwgdGhlbiB0aGVcbiAgICAgKiB3b3JrZXIgY29udmVydHMgaXQgdG8gYSBzdHJpbmcsIHdoaWNoIGlzIGEgYmxvY2tpbmcgb3BlcmF0aW9uLlxuICAgICAqXG4gICAgICogSXQgaXMgdmVyeSBjb21tb24gdG8gd2FudCB0byBjb252ZXJ0IGEgYmxhbmsgb2JqZWN0IHRvIGEgemVybyBsZW5ndGhcbiAgICAgKiBidWZmZXIsIHNvIHdlIGNhbiB0cmFuc3BvcnQgYSBibGFuayBvYmplY3QgdG8gYSB3b3JrZXIuIFNvIHRoYXQgYmVoYXZpb3JcbiAgICAgKiBpcyBpbmNsdWRlZCBieSBkZWZhdWx0LlxuICAgICAqL1xuICAgIHRvRmFzdEJ1ZmZlciAoLi4ucmVzdCkge1xuICAgICAgaWYgKE9iamVjdC5rZXlzKHRoaXMpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gbmV3IEJ1ZmZlcigwKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudG9CdWZmZXIoLi4ucmVzdClcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmcm9tSGV4IChoZXgsIC4uLnJlc3QpIHtcbiAgICAgIGxldCBidWZcbiAgICAgIHRyeSB7XG4gICAgICAgIGJ1ZiA9IG5ldyBCdWZmZXIoaGV4LCAnaGV4JylcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIGhleCBzdHJpbmcnKVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuZnJvbUJ1ZmZlcihidWYsIC4uLnJlc3QpXG4gICAgfVxuXG4gICAgc3RhdGljIGZyb21IZXggKGhleCwgLi4ucmVzdCkge1xuICAgICAgcmV0dXJuIG5ldyB0aGlzKCkuZnJvbUhleChoZXgsIC4uLnJlc3QpXG4gICAgfVxuXG4gICAgYXN5bmNGcm9tSGV4IChoZXgsIC4uLnJlc3QpIHtcbiAgICAgIGxldCBidWZcbiAgICAgIHRyeSB7XG4gICAgICAgIGJ1ZiA9IG5ldyBCdWZmZXIoaGV4LCAnaGV4JylcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIGhleCBzdHJpbmcnKVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuYXN5bmNGcm9tQnVmZmVyKGJ1ZiwgLi4ucmVzdClcbiAgICB9XG5cbiAgICBzdGF0aWMgYXN5bmNGcm9tSGV4IChoZXgsIC4uLnJlc3QpIHtcbiAgICAgIHJldHVybiBuZXcgdGhpcygpLmFzeW5jRnJvbUhleChoZXgsIC4uLnJlc3QpXG4gICAgfVxuXG4gICAgZnJvbUZhc3RIZXggKGhleCwgLi4ucmVzdCkge1xuICAgICAgbGV0IGJ1ZlxuICAgICAgdHJ5IHtcbiAgICAgICAgYnVmID0gbmV3IEJ1ZmZlcihoZXgsICdoZXgnKVxuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgaGV4IHN0cmluZycpXG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5mcm9tRmFzdEJ1ZmZlcihidWYsIC4uLnJlc3QpXG4gICAgfVxuXG4gICAgc3RhdGljIGZyb21GYXN0SGV4IChoZXgsIC4uLnJlc3QpIHtcbiAgICAgIHJldHVybiBuZXcgdGhpcygpLmZyb21GYXN0SGV4KGhleCwgLi4ucmVzdClcbiAgICB9XG5cbiAgICB0b0hleCAoLi4ucmVzdCkge1xuICAgICAgcmV0dXJuIHRoaXMudG9CdWZmZXIoLi4ucmVzdCkudG9TdHJpbmcoJ2hleCcpXG4gICAgfVxuXG4gICAgYXN5bmNUb0hleCAoLi4ucmVzdCkge1xuICAgICAgcmV0dXJuIHRoaXMuYXN5bmNUb0J1ZmZlciguLi5yZXN0KS50aGVuKChidWYpID0+IGJ1Zi50b1N0cmluZygnaGV4JykpXG4gICAgfVxuXG4gICAgdG9GYXN0SGV4ICguLi5yZXN0KSB7XG4gICAgICByZXR1cm4gdGhpcy50b0Zhc3RCdWZmZXIoLi4ucmVzdCkudG9TdHJpbmcoJ2hleCcpXG4gICAgfVxuXG4gICAgZnJvbVN0cmluZyAoc3RyLCAuLi5yZXN0KSB7XG4gICAgICBpZiAodHlwZW9mIHN0ciAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdzdHIgbXVzdCBiZSBhIHN0cmluZycpXG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5mcm9tSGV4KHN0ciwgLi4ucmVzdClcbiAgICB9XG5cbiAgICBzdGF0aWMgZnJvbVN0cmluZyAoc3RyLCAuLi5yZXN0KSB7XG4gICAgICByZXR1cm4gbmV3IHRoaXMoKS5mcm9tU3RyaW5nKHN0ciwgLi4ucmVzdClcbiAgICB9XG5cbiAgICBhc3luY0Zyb21TdHJpbmcgKHN0ciwgLi4ucmVzdCkge1xuICAgICAgaWYgKHR5cGVvZiBzdHIgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignc3RyIG11c3QgYmUgYSBzdHJpbmcnKVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuYXN5bmNGcm9tSGV4KHN0ciwgLi4ucmVzdClcbiAgICB9XG5cbiAgICBzdGF0aWMgYXN5bmNGcm9tU3RyaW5nIChzdHIsIC4uLnJlc3QpIHtcbiAgICAgIHJldHVybiBuZXcgdGhpcygpLmFzeW5jRnJvbVN0cmluZyhzdHIsIC4uLnJlc3QpXG4gICAgfVxuXG4gICAgdG9TdHJpbmcgKC4uLnJlc3QpIHtcbiAgICAgIHJldHVybiB0aGlzLnRvSGV4KC4uLnJlc3QpXG4gICAgfVxuXG4gICAgYXN5bmNUb1N0cmluZyAoLi4ucmVzdCkge1xuICAgICAgcmV0dXJuIHRoaXMuYXN5bmNUb0hleCguLi5yZXN0KVxuICAgIH1cblxuICAgIGZyb21KU09OIChqc29uKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ25vdCBpbXBsZW1lbnRlZCcpXG4gICAgfVxuXG4gICAgc3RhdGljIGZyb21KU09OIChqc29uLCAuLi5yZXN0KSB7XG4gICAgICByZXR1cm4gbmV3IHRoaXMoKS5mcm9tSlNPTihqc29uLCAuLi5yZXN0KVxuICAgIH1cblxuICAgIGFzeW5jRnJvbUpTT04gKGpzb24sIC4uLnJlc3QpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignbm90IGltcGxlbWVudGVkJylcbiAgICB9XG5cbiAgICBzdGF0aWMgYXN5bmNGcm9tSlNPTiAoanNvbiwgLi4ucmVzdCkge1xuICAgICAgcmV0dXJuIG5ldyB0aGlzKCkuYXN5bmNGcm9tSlNPTihqc29uLCAuLi5yZXN0KVxuICAgIH1cblxuICAgIHRvSlNPTiAoKSB7XG4gICAgICB2YXIganNvbiA9IHt9XG4gICAgICBmb3IgKHZhciB2YWwgaW4gdGhpcykge1xuICAgICAgICAvLyBhcnJheXNcbiAgICAgICAgaWYgKHRoaXNbdmFsXSBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgICAgbGV0IGFyciA9IFtdXG4gICAgICAgICAgZm9yICh2YXIgaSBpbiB0aGlzW3ZhbF0pIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpc1t2YWxdW2ldLnRvSlNPTiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICBhcnIucHVzaCh0aGlzW3ZhbF1baV0udG9KU09OKCkpXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBhcnIucHVzaChKU09OLnN0cmluZ2lmeSh0aGlzW3ZhbF1baV0pKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBqc29uW3ZhbF0gPSBhcnJcbiAgICAgICAgLy8gb2JqZWN0c1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB0aGlzW3ZhbF0gPT09ICdvYmplY3QnICYmIHR5cGVvZiB0aGlzW3ZhbF0udG9KU09OID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAganNvblt2YWxdID0gdGhpc1t2YWxdLnRvSlNPTigpXG4gICAgICAgIC8vIGJvb2xlYW5zLCBudW1iZXJzLCBhbmQgc3RyaW5nc1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB0aGlzW3ZhbF0gPT09ICdib29sZWFuJyB8fCB0eXBlb2YgdGhpc1t2YWxdID09PSAnbnVtYmVyJyB8fCB0eXBlb2YgdGhpc1t2YWxdID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIGpzb25bdmFsXSA9IHRoaXNbdmFsXVxuICAgICAgICAvLyB0aHJvdyBhbiBlcnJvciBmb3Igb2JqZWN0cyB0aGF0IGRvIG5vdCBpbXBsZW1lbnQgdG9KU09OXG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHRoaXNbdmFsXSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ25vdCBpbXBsZW1lbnRlZCcpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBqc29uXG4gICAgICAvLyB0aHJvdyBuZXcgRXJyb3IoJ25vdCBpbXBsZW1lbnRlZCcpXG4gICAgfVxuXG4gICAgYXN5bmNUb0pTT04gKCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdub3QgaW1wbGVtZW50ZWQnKVxuICAgIH1cblxuICAgIGNsb25lICgpIHtcbiAgICAgIC8vIFRPRE86IFNob3VsZCB0aGlzIGJlIG1vcmUgaW50ZWxsaWdlbnQgYWJvdXQgcGlja2luZyB3aGljaCBjbG9uZSBtZXRob2RcbiAgICAgIC8vIHRvIGRlZmF1bHQgdG8/XG4gICAgICByZXR1cm4gdGhpcy5jbG9uZUJ5SlNPTigpXG4gICAgfVxuXG4gICAgY2xvbmVCeUJ1ZmZlciAoKSB7XG4gICAgICByZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoKS5mcm9tQnVmZmVyKHRoaXMudG9CdWZmZXIoKSlcbiAgICB9XG5cbiAgICBjbG9uZUJ5RmFzdEJ1ZmZlciAoKSB7XG4gICAgICByZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoKS5mcm9tRmFzdEJ1ZmZlcih0aGlzLnRvRmFzdEJ1ZmZlcigpKVxuICAgIH1cblxuICAgIGNsb25lQnlIZXggKCkge1xuICAgICAgcmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCkuZnJvbUhleCh0aGlzLnRvSGV4KCkpXG4gICAgfVxuXG4gICAgY2xvbmVCeVN0cmluZyAoKSB7XG4gICAgICByZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoKS5mcm9tU3RyaW5nKHRoaXMudG9TdHJpbmcoKSlcbiAgICB9XG5cbiAgICBjbG9uZUJ5SlNPTiAoKSB7XG4gICAgICByZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoKS5mcm9tSlNPTih0aGlzLnRvSlNPTigpKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBTdHJ1Y3Rcbn1cblxuaW5qZWN0ID0gcmVxdWlyZSgnaW5qZWN0ZXInKShpbmplY3QsIGRlcGVuZGVuY2llcylcbmxldCBTdHJ1Y3QgPSBpbmplY3QoKVxubW9kdWxlLmV4cG9ydHMgPSBTdHJ1Y3RcbiIsIi8qKlxuICogVHJhbnNhY3Rpb24gQnVpbGRlciAoZXhwZXJpbWVudGFsKVxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICpcbiAqIFRyYW5zYWN0aW9uIEJ1aWxkZXIuIFRoaXMgaXMgYSwgeWV0IHVuZmluaXNoZWQsIGNvbnZlbmllbmNlIGNsYXNzIGZvclxuICogYnVpbGRpbmcgcHViS2V5SGFzaCBhbmQgcDJzaCB0cmFuc2FjdGlvbnMsIGFuZCBhbHNvIGZvciB2ZXJpZnlpbmcgYXJiaXRyYXJ5XG4gKiB0cmFuc2FjdGlvbnMgKGFuZCB0aGVpciBpbnB1dHMpLiBZb3UgY2FuIChvciB3aWxsIGJlIGFibGUgdG8pIHBheSB0b1xuICogcHViS2V5SGFzaCB0byBwMnNoIGFuZCBjYW4gc3BlbmQgcHViS2V5SGFzaCBvciBwMnNoLXB1YktleUhhc2ggb3JcbiAqIHAyc2gtbXVsdGlzaWcuXG4gKi9cbid1c2Ugc3RyaWN0J1xubGV0IGRlcGVuZGVuY2llcyA9IHtcbiAgQWRkcmVzczogcmVxdWlyZSgnLi9hZGRyZXNzJyksXG4gIENvbnN0YW50czogcmVxdWlyZSgnLi9jb25zdGFudHMnKS5EZWZhdWx0LlR4QnVpbGRlcixcbiAgQm46IHJlcXVpcmUoJy4vYm4nKSxcbiAgUHViS2V5OiByZXF1aXJlKCcuL3B1Yi1rZXknKSxcbiAgU2NyaXB0OiByZXF1aXJlKCcuL3NjcmlwdCcpLFxuICBTaWc6IHJlcXVpcmUoJy4vc2lnJyksXG4gIFN0cnVjdDogcmVxdWlyZSgnLi9zdHJ1Y3QnKSxcbiAgVHg6IHJlcXVpcmUoJy4vdHgnKSxcbiAgVHhJbjogcmVxdWlyZSgnLi90eC1pbicpLFxuICBUeE91dDogcmVxdWlyZSgnLi90eC1vdXQnKSxcbiAgVHhPdXRNYXA6IHJlcXVpcmUoJy4vdHgtb3V0LW1hcCcpLFxuICBWYXJJbnQ6IHJlcXVpcmUoJy4vdmFyLWludCcpLFxuICBhc2luazogcmVxdWlyZSgnYXNpbmsnKVxufVxuXG5sZXQgaW5qZWN0ID0gZnVuY3Rpb24gKGRlcHMpIHtcbiAgbGV0IEFkZHJlc3MgPSBkZXBzLkFkZHJlc3NcbiAgbGV0IENvbnN0YW50cyA9IGRlcHMuQ29uc3RhbnRzXG4gIGxldCBCbiA9IGRlcHMuQm5cbiAgbGV0IFB1YktleSA9IGRlcHMuUHViS2V5XG4gIGxldCBTY3JpcHQgPSBkZXBzLlNjcmlwdFxuICBsZXQgU2lnID0gZGVwcy5TaWdcbiAgbGV0IFN0cnVjdCA9IGRlcHMuU3RydWN0XG4gIGxldCBUeCA9IGRlcHMuVHhcbiAgbGV0IFR4SW4gPSBkZXBzLlR4SW5cbiAgbGV0IFR4T3V0ID0gZGVwcy5UeE91dFxuICBsZXQgVHhPdXRNYXAgPSBkZXBzLlR4T3V0TWFwXG4gIGxldCBWYXJJbnQgPSBkZXBzLlZhckludFxuICBsZXQgYXNpbmsgPSBkZXBzLmFzaW5rXG5cbiAgY2xhc3MgVHhCdWlsZGVyIGV4dGVuZHMgU3RydWN0IHtcbiAgICBjb25zdHJ1Y3RvciAodHggPSBuZXcgVHgoKSwgdHhJbnMgPSBbXSwgdHhPdXRzID0gW10sIHVUeE91dE1hcCA9IG5ldyBUeE91dE1hcCgpLCBjaGFuZ2VTY3JpcHQsIGZlZVBlcktiTnVtID0gQ29uc3RhbnRzLmZlZVBlcktiTnVtLCBuTG9ja1RpbWUgPSAwLCB2ZXJzaW9uQnl0ZXNOdW0gPSAxKSB7XG4gICAgICBzdXBlcih7dHgsIHR4SW5zLCB0eE91dHMsIHVUeE91dE1hcCwgY2hhbmdlU2NyaXB0LCBmZWVQZXJLYk51bSwgbkxvY2tUaW1lLCB2ZXJzaW9uQnl0ZXNOdW19KVxuICAgIH1cblxuICAgIHRvSlNPTiAoKSB7XG4gICAgICBsZXQganNvbiA9IHt9XG4gICAgICBqc29uLnR4ID0gdGhpcy50eC50b0hleCgpXG4gICAgICBqc29uLnR4SW5zID0gdGhpcy50eElucy5tYXAoKHR4SW4pID0+IHR4SW4udG9IZXgoKSlcbiAgICAgIGpzb24udHhPdXRzID0gdGhpcy50eE91dHMubWFwKCh0eE91dCkgPT4gdHhPdXQudG9IZXgoKSlcbiAgICAgIGpzb24udVR4T3V0TWFwID0gdGhpcy51VHhPdXRNYXAudG9KU09OKClcbiAgICAgIGlmICh0aGlzLmNoYW5nZVNjcmlwdCkge1xuICAgICAgICBqc29uLmNoYW5nZVNjcmlwdCA9IHRoaXMuY2hhbmdlU2NyaXB0LnRvSGV4KClcbiAgICAgIH1cbiAgICAgIGpzb24uZmVlUGVyS2JOdW0gPSB0aGlzLmZlZVBlcktiTnVtXG4gICAgICByZXR1cm4ganNvblxuICAgIH1cblxuICAgIGZyb21KU09OIChqc29uKSB7XG4gICAgICB0aGlzLnR4ID0gbmV3IFR4KCkuZnJvbUhleChqc29uLnR4KVxuICAgICAgdGhpcy50eElucyA9IGpzb24udHhJbnMubWFwKCh0eEluKSA9PiBUeEluLmZyb21IZXgodHhJbikpXG4gICAgICB0aGlzLnR4T3V0cyA9IGpzb24udHhPdXRzLm1hcCgodHhPdXQpID0+IFR4T3V0LmZyb21IZXgodHhPdXQpKVxuICAgICAgdGhpcy51VHhPdXRNYXAgPSBuZXcgVHhPdXRNYXAoKS5mcm9tSlNPTihqc29uLnVUeE91dE1hcClcbiAgICAgIGlmIChqc29uLmNoYW5nZVNjcmlwdCkge1xuICAgICAgICB0aGlzLmNoYW5nZVNjcmlwdCA9IG5ldyBTY3JpcHQoKS5mcm9tSGV4KGpzb24uY2hhbmdlU2NyaXB0KVxuICAgICAgfVxuICAgICAgdGhpcy5mZWVQZXJLYk51bSA9IGpzb24uZmVlUGVyS2JOdW1cbiAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuXG4gICAgc2V0RmVlUGVyS2JOdW0gKGZlZVBlcktiTnVtKSB7XG4gICAgICB0aGlzLmZlZVBlcktiTnVtID0gZmVlUGVyS2JOdW1cbiAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuXG4gICAgc2V0Q2hhbmdlQWRkcmVzcyAoY2hhbmdlQWRkcmVzcykge1xuICAgICAgdGhpcy5jaGFuZ2VTY3JpcHQgPSBjaGFuZ2VBZGRyZXNzLnRvU2NyaXB0KClcbiAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuXG4gICAgc2V0Q2hhbmdlU2NyaXB0IChjaGFuZ2VTY3JpcHQpIHtcbiAgICAgIHRoaXMuY2hhbmdlU2NyaXB0ID0gY2hhbmdlU2NyaXB0XG4gICAgICByZXR1cm4gdGhpc1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIG5Mb2NrVGltZSBpcyBhbiB1bnNpZ25lZCBpbnRlZ2VyLlxuICAgICAqL1xuICAgIHNldE5Mb2NrdGltZSAobkxvY2tUaW1lKSB7XG4gICAgICB0aGlzLm5Mb2NrVGltZSA9IG5Mb2NrVGltZVxuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG5cbiAgICBzZXRWZXJzaW9uICh2ZXJzaW9uQnl0ZXNOdW0pIHtcbiAgICAgIHRoaXMudmVyc2lvbkJ5dGVzTnVtID0gdmVyc2lvbkJ5dGVzTnVtXG4gICAgICByZXR1cm4gdGhpc1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEltcG9ydCBhIHRyYW5zYWN0aW9uIHBhcnRpYWxseSBzaWduZWQgYnkgc29tZW9uZSBlbHNlLiBUaGUgb25seSB0aGluZyB5b3VcbiAgICAgKiBjYW4gZG8gYWZ0ZXIgdGhpcyBpcyBzaWduIG9uZSBvciBtb3JlIGlucHV0cy4gVXN1YWxseSB1c2VkIGZvciBtdWx0aXNpZ1xuICAgICAqIHRyYW5zYWN0aW9ucy4gdVR4T3V0TWFwIGlzIG9wdGlvbmFsLiBJdCBpcyBub3QgbmVjZXNzYXJ5IHNvIGxvbmcgYXMgeW91XG4gICAgICogcGFzcyBpbiB0aGUgdHhPdXQgd2hlbiB5b3Ugc2lnbi5cbiAgICAgKi9cbiAgICBpbXBvcnRQYXJ0aWFsbHlTaWduZWRUeCAodHgsIHVUeE91dE1hcCkge1xuICAgICAgdGhpcy50eCA9IHR4XG4gICAgICBpZiAodVR4T3V0TWFwKSB7XG4gICAgICAgIHRoaXMudVR4T3V0TWFwID0gdVR4T3V0TWFwXG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpc1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBheSBcImZyb21cIiBhIHNjcmlwdCAtIGluIG90aGVyIHdvcmRzLCBhZGQgYW4gaW5wdXQgdG8gdGhlIHRyYW5zYWN0aW9uLlxuICAgICAqL1xuICAgIGlucHV0RnJvbVNjcmlwdCAodHhIYXNoQnVmLCB0eE91dE51bSwgdHhPdXQsIHNjcmlwdCwgblNlcXVlbmNlKSB7XG4gICAgICBpZiAoIShCdWZmZXIuaXNCdWZmZXIodHhIYXNoQnVmKSkgfHwgISh0eXBlb2YgdHhPdXROdW0gPT09ICdudW1iZXInKSB8fCAhKHR4T3V0IGluc3RhbmNlb2YgVHhPdXQpIHx8ICEoc2NyaXB0IGluc3RhbmNlb2YgU2NyaXB0KSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgb25lIG9mOiB0eEhhc2hCdWYsIHR4T3V0TnVtLCB0eE91dCwgc2NyaXB0JylcbiAgICAgIH1cbiAgICAgIHRoaXMudHhJbnMucHVzaChUeEluLmZyb21Qcm9wZXJ0aWVzKHR4SGFzaEJ1ZiwgdHhPdXROdW0sIHNjcmlwdCwgblNlcXVlbmNlKSlcbiAgICAgIHRoaXMudVR4T3V0TWFwLmFkZCh0eEhhc2hCdWYsIHR4T3V0TnVtLCB0eE91dClcbiAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGF5IFwiZnJvbVwiIGEgcHViS2V5SGFzaCBvdXRwdXQgLSBpbiBvdGhlciB3b3JkcywgYWRkIGFuIGlucHV0IHRvIHRoZVxuICAgICAqIHRyYW5zYWN0aW9uLlxuICAgICAqL1xuICAgIGlucHV0RnJvbVB1YktleUhhc2ggKHR4SGFzaEJ1ZiwgdHhPdXROdW0sIHR4T3V0LCBwdWJLZXksIG5TZXF1ZW5jZSkge1xuICAgICAgaWYgKCEoQnVmZmVyLmlzQnVmZmVyKHR4SGFzaEJ1ZikpIHx8ICEodHlwZW9mIHR4T3V0TnVtID09PSAnbnVtYmVyJykgfHwgISh0eE91dCBpbnN0YW5jZW9mIFR4T3V0KSB8fCAhKHB1YktleSBpbnN0YW5jZW9mIFB1YktleSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIG9uZSBvZjogdHhIYXNoQnVmLCB0eE91dE51bSwgdHhPdXQsIHB1YktleScpXG4gICAgICB9XG4gICAgICB0aGlzLnR4SW5zLnB1c2gobmV3IFR4SW4oKS5mcm9tT2JqZWN0KHtuU2VxdWVuY2V9KS5mcm9tUHViS2V5SGFzaFR4T3V0KHR4SGFzaEJ1ZiwgdHhPdXROdW0sIHR4T3V0LCBwdWJLZXkpKVxuICAgICAgdGhpcy51VHhPdXRNYXAuYWRkKHR4SGFzaEJ1ZiwgdHhPdXROdW0sIHR4T3V0KVxuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQYXkgXCJmcm9tXCIgYSBzY3JpcHRIYXNoIChwMnNoKSBvdXRwdXQgLSBpbiBvdGhlciB3b3JkcywgYWRkIGFuIGlucHV0IHRvXG4gICAgICogdGhlIHRyYW5zYWN0aW9uLlxuICAgICAqL1xuICAgIGlucHV0RnJvbVNjcmlwdEhhc2hNdWx0aVNpZyAodHhIYXNoQnVmLCB0eE91dE51bSwgdHhPdXQsIHJlZGVlbVNjcmlwdCwgblNlcXVlbmNlKSB7XG4gICAgICBpZiAoIShCdWZmZXIuaXNCdWZmZXIodHhIYXNoQnVmKSkgfHwgISh0eXBlb2YgdHhPdXROdW0gPT09ICdudW1iZXInKSB8fCAhKHR4T3V0IGluc3RhbmNlb2YgVHhPdXQpIHx8ICEocmVkZWVtU2NyaXB0IGluc3RhbmNlb2YgU2NyaXB0KSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgb25lIG9mOiB0eEhhc2hCdWYsIHR4T3V0TnVtLCB0eE91dCwgcmVkZWVtU2NyaXB0JylcbiAgICAgIH1cbiAgICAgIHRoaXMudHhJbnMucHVzaChuZXcgVHhJbigpLmZyb21PYmplY3Qoe25TZXF1ZW5jZX0pLmZyb21TY3JpcHRIYXNoTXVsdGlTaWdUeE91dCh0eEhhc2hCdWYsIHR4T3V0TnVtLCB0eE91dCwgcmVkZWVtU2NyaXB0KSlcbiAgICAgIHRoaXMudVR4T3V0TWFwLmFkZCh0eEhhc2hCdWYsIHR4T3V0TnVtLCB0eE91dClcbiAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQW4gYWRkcmVzcyB0byBzZW5kIGZ1bmRzIHRvLCBhbG9uZyB3aXRoIHRoZSBhbW91bnQuIFRoZSBhbW91bnQgc2hvdWxkIGJlXG4gICAgICogZGVub21pbmF0ZWQgaW4gc2F0b3NoaXMsIG5vdCBiaXRjb2lucy5cbiAgICAgKi9cbiAgICBvdXRwdXRUb0FkZHJlc3MgKHZhbHVlQm4sIGFkZHIpIHtcbiAgICAgIGlmICghKGFkZHIgaW5zdGFuY2VvZiBBZGRyZXNzKSB8fCAhKHZhbHVlQm4gaW5zdGFuY2VvZiBCbikpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdhZGRyIG11c3QgYmUgYW4gQWRkcmVzcywgYW5kIHZhbHVlQm4gbXVzdCBiZSBhIEJuJylcbiAgICAgIH1cbiAgICAgIGxldCBzY3JpcHRcbiAgICAgIGlmIChhZGRyLnR5cGUoKSA9PT0gJ3NjcmlwdEhhc2gnKSB7XG4gICAgICAgIHNjcmlwdCA9IG5ldyBTY3JpcHQoKS5mcm9tU2NyaXB0SGFzaChhZGRyLmhhc2hCdWYpXG4gICAgICB9IGVsc2UgaWYgKGFkZHIudHlwZSgpID09PSAncHViS2V5SGFzaCcpIHtcbiAgICAgICAgc2NyaXB0ID0gbmV3IFNjcmlwdCgpLmZyb21QdWJLZXlIYXNoKGFkZHIuaGFzaEJ1ZilcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBhZGRyZXNzIHR5cGUnKVxuICAgICAgfVxuICAgICAgdGhpcy5vdXRwdXRUb1NjcmlwdCh2YWx1ZUJuLCBzY3JpcHQpXG4gICAgICByZXR1cm4gdGhpc1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc2NyaXB0IHRvIHNlbmQgZnVuZHMgdG8sIGFsb25nIHdpdGggdGhlIGFtb3VudC4gVGhlIGFtb3VudCBzaG91bGQgYmVcbiAgICAgKiBkZW5vbWluYXRlZCBpbiBzYXRvc2hpcywgbm90IGJpdGNvaW5zLlxuICAgICAqL1xuICAgIG91dHB1dFRvU2NyaXB0ICh2YWx1ZUJuLCBzY3JpcHQpIHtcbiAgICAgIGlmICghKHNjcmlwdCBpbnN0YW5jZW9mIFNjcmlwdCkgfHwgISh2YWx1ZUJuIGluc3RhbmNlb2YgQm4pKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignc2NyaXB0IG11c3QgYmUgYSBTY3JpcHQsIGFuZCB2YWx1ZUJuIG11c3QgYmUgYSBCbicpXG4gICAgICB9XG4gICAgICBsZXQgdHhPdXQgPSBUeE91dC5mcm9tUHJvcGVydGllcyh2YWx1ZUJuLCBzY3JpcHQpXG4gICAgICB0aGlzLnR4T3V0cy5wdXNoKHR4T3V0KVxuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG5cbiAgICBidWlsZE91dHB1dHMgKCkge1xuICAgICAgbGV0IG91dGFtb3VudCA9IG5ldyBCbigwKVxuICAgICAgdGhpcy50eE91dHMuZm9yRWFjaCgodHhPdXQpID0+IHtcbiAgICAgICAgb3V0YW1vdW50ID0gb3V0YW1vdW50LmFkZCh0eE91dC52YWx1ZUJuKVxuICAgICAgICB0aGlzLnR4LmFkZFR4T3V0KHR4T3V0KVxuICAgICAgfSlcbiAgICAgIHJldHVybiBvdXRhbW91bnRcbiAgICB9XG5cbiAgICBidWlsZElucHV0cyAob3V0YW1vdW50LCBleHRyYUlucHV0c051bSA9IDApIHtcbiAgICAgIGxldCBpbmFtb3VudCA9IG5ldyBCbigwKVxuICAgICAgZm9yIChsZXQgdHhJbiBvZiB0aGlzLnR4SW5zKSB7XG4gICAgICAgIGxldCB0eE91dCA9IHRoaXMudVR4T3V0TWFwLmdldCh0eEluLnR4SGFzaEJ1ZiwgdHhJbi50eE91dE51bSlcbiAgICAgICAgaW5hbW91bnQgPSBpbmFtb3VudC5hZGQodHhPdXQudmFsdWVCbilcbiAgICAgICAgdGhpcy50eC5hZGRUeEluKHR4SW4pXG4gICAgICAgIGlmIChpbmFtb3VudC5nZXEob3V0YW1vdW50KSkge1xuICAgICAgICAgIGlmIChleHRyYUlucHV0c051bSA8PSAwKSB7XG4gICAgICAgICAgICBicmVha1xuICAgICAgICAgIH1cbiAgICAgICAgICBleHRyYUlucHV0c051bS0tXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChpbmFtb3VudC5sdChvdXRhbW91bnQpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignbm90IGVub3VnaCBmdW5kcyBmb3Igb3V0cHV0JylcbiAgICAgIH1cbiAgICAgIHJldHVybiBpbmFtb3VudFxuICAgIH1cblxuICAgIC8vIEZvciBub3cgdGhpcyBtZXRob2Qgb25seSBzdXBwb3J0cyBwdWJLZXlIYXNoIGlucHV0cy4gSXQgYXNzdW1lcyB3ZSBoYXZlXG4gICAgLy8gbm90IHlldCBhZGRlZCBzaWduYXR1cmVzIHRvIG91ciBpbnB1dHMuXG4gICAgLy8gVE9ETzogU3VwcG9ydCBpdCB3aGVuIHRoZSBzaWduYXR1cmVzIGFyZSBhbHJlYWR5IG9uIHRoZSBpbnB1dHMuXG4gICAgLy8gVE9ETzogU3VwcG9ydCBwMnNoIGlucHV0cy5cbiAgICBlc3RpbWF0ZVNpemUgKCkge1xuICAgICAgLy8gbGFyZ2VzdCBwb3NzaWJsZSBzaWcgc2l6ZVxuICAgICAgbGV0IHNpZ3NpemUgPSAxICsgMSArIDEgKyAxICsgMzIgKyAxICsgMSArIDMyICsgMVxuICAgICAgbGV0IHNpemUgPSB0aGlzLnR4LnRvQnVmZmVyKCkubGVuZ3RoXG4gICAgICBzaXplID0gc2l6ZSArIHNpZ3NpemUgKiB0aGlzLnR4LnR4SW5zLmxlbmd0aFxuICAgICAgc2l6ZSA9IHNpemUgKyAxIC8vIGFzc3VtZSB0eEluc1ZpIGluY3JlYXNlcyBieSAxIGJ5dGVcbiAgICAgIHJldHVybiBzaXplXG4gICAgfVxuXG4gICAgZXN0aW1hdGVGZWUgKCkge1xuICAgICAgLy8gVE9ETzogU3VwcG9ydCBjYWxjdWxhdGluZyBmZWVzIGZyb20gcDJzaCBtdWx0aXNpZy5cbiAgICAgIGxldCBmZWUgPSBNYXRoLmNlaWwodGhpcy5lc3RpbWF0ZVNpemUoKSAvIDEwMDApICogdGhpcy5mZWVQZXJLYk51bVxuICAgICAgcmV0dXJuIG5ldyBCbihmZWUpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQnVpbGRzIHRoZSB0cmFuc2FjdGlvbiBhbmQgYWRkcyB0aGUgYXBwcm9wcmlhdGUgZmVlIGJ5IHN1YnRyYWN0aW5nIGZyb21cbiAgICAgKiB0aGUgY2hhbmdlIG91dHB1dC4gTm90ZSB0aGF0IGJ5IGRlZmF1bHQgdGhlIFR4QnVpbGRlciB3aWxsIHVzZSBhcyBtYW55XG4gICAgICogaW5wdXRzIGFzIG5lY2Vzc2FyeSB0byBwYXkgdGhlIG91dHB1dCBhbW91bnRzIGFuZCB0aGUgcmVxdWlyZWQgZmVlLiBUaGVcbiAgICAgKiBUeEJ1aWxkZXIgd2lsbCBub3QgbmVjZXNzYXJpbHkgdXMgYWxsIHRoZSBpbnB1dHMuIFRvIGZvcmNlIHRoZSBUeEJ1aWxkZXJcbiAgICAgKiB0byB1c2UgYWxsIHRoZSBpbnB1dHMgKHN1Y2ggYXMgaWYgeW91IHdpc2ggdG8gc3BlbmQgdGhlIGVudGlyZSBiYWxhbmNlXG4gICAgICogb2YgYSB3YWxsZXQpLCBzZXQgdGhlIGFyZ3VtZW50IHVzZUFsbElucHV0cyA9IHRydWUuXG4gICAgICovXG4gICAgYnVpbGQgKHVzZUFsbElucHV0cyA9IGZhbHNlKSB7XG4gICAgICBsZXQgY2hhbmdlQW1vdW50LCBzaG91bGRmZWViblxuICAgICAgZm9yIChsZXQgZXh0cmFJbnB1dHNOdW0gPSB1c2VBbGxJbnB1dHMgPyB0aGlzLnR4SW5zLmxlbmd0aCAtIDEgOiAwOyBleHRyYUlucHV0c051bSA8IHRoaXMudHhJbnMubGVuZ3RoOyBleHRyYUlucHV0c051bSsrKSB7XG4gICAgICAgIHRoaXMudHggPSBuZXcgVHgoKVxuICAgICAgICBsZXQgb3V0YW1vdW50ID0gdGhpcy5idWlsZE91dHB1dHMoKVxuICAgICAgICBsZXQgY2hhbmdlU2NyaXB0ID0gdGhpcy5jaGFuZ2VTY3JpcHRcbiAgICAgICAgbGV0IGNoYW5nZVR4T3V0ID0gVHhPdXQuZnJvbVByb3BlcnRpZXMobmV3IEJuKDApLCBjaGFuZ2VTY3JpcHQpXG4gICAgICAgIHRoaXMudHguYWRkVHhPdXQoY2hhbmdlVHhPdXQpXG5cbiAgICAgICAgbGV0IGluYW1vdW50ID0gdGhpcy5idWlsZElucHV0cyhvdXRhbW91bnQsIGV4dHJhSW5wdXRzTnVtKVxuXG4gICAgICAgIC8vIFRPRE86IFdoYXQgaWYgY2hhbmdlIGFtb3VudCBpcyBsZXNzIHRoYW4gZHVzdD9cbiAgICAgICAgLy8gU2V0IGNoYW5nZSBhbW91bnQgZnJvbSBpbmFtb3VudCAtIG91dGFtb3VudFxuICAgICAgICBjaGFuZ2VBbW91bnQgPSBpbmFtb3VudC5zdWIob3V0YW1vdW50KVxuICAgICAgICB0aGlzLnR4LnR4T3V0c1t0aGlzLnR4LnR4T3V0cy5sZW5ndGggLSAxXS52YWx1ZUJuID0gY2hhbmdlQW1vdW50XG5cbiAgICAgICAgc2hvdWxkZmVlYm4gPSB0aGlzLmVzdGltYXRlRmVlKClcbiAgICAgICAgaWYgKGNoYW5nZUFtb3VudC5nZXEoc2hvdWxkZmVlYm4pICYmIGNoYW5nZUFtb3VudC5zdWIoc2hvdWxkZmVlYm4pLmd0KENvbnN0YW50cy5kdXN0TnVtKSkge1xuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChjaGFuZ2VBbW91bnQuZ2VxKHNob3VsZGZlZWJuKSkge1xuICAgICAgICAvLyBTdWJ0cmFjdCBmZWUgZnJvbSBjaGFuZ2VcbiAgICAgICAgLy8gVE9ETzogV2hhdCBpZiBjaGFuZ2UgaXMgbGVzcyB0aGFuIGR1c3Q/IFdoYXQgaWYgY2hhbmdlIGlzIDA/XG4gICAgICAgIGNoYW5nZUFtb3VudCA9IGNoYW5nZUFtb3VudC5zdWIoc2hvdWxkZmVlYm4pXG4gICAgICAgIHRoaXMudHgudHhPdXRzW3RoaXMudHgudHhPdXRzLmxlbmd0aCAtIDFdLnZhbHVlQm4gPSBjaGFuZ2VBbW91bnRcblxuICAgICAgICBpZiAoY2hhbmdlQW1vdW50Lmx0KENvbnN0YW50cy5kdXN0TnVtKSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcigndW5hYmxlIHRvIGNyZWF0ZSBjaGFuZ2UgYW1vdW50IGdyZWF0ZXIgdGhhbiBkdXN0JylcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMudHgubkxvY2tUaW1lID0gdGhpcy5uTG9ja1RpbWVcbiAgICAgICAgdGhpcy50eC52ZXJzaW9uQnl0ZXNOdW0gPSB0aGlzLnZlcnNpb25CeXRlc051bVxuICAgICAgICByZXR1cm4gdGhpc1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd1bmFibGUgdG8gZ2F0aGVyIGVub3VnaCBpbnB1dHMgZm9yIG91dHB1dHMgYW5kIGZlZScpXG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2sgaWYgYWxsIHNpZ25hdHVyZXMgYXJlIHByZXNlbnQgaW4gYSBwMnNoIG11bHRpc2lnIGlucHV0IHNjcmlwdC5cbiAgICAgKi9cbiAgICBzdGF0aWMgYWxsU2lnc1ByZXNlbnQgKG0sIHNjcmlwdCkge1xuICAgICAgLy8gVGhlIGZpcnN0IGVsZW1lbnQgaXMgYSBGYW1vdXMgTXVsdGlTaWcgQnVnIE9QXzAsIGFuZCBsYXN0IGVsZW1lbnQgaXMgdGhlXG4gICAgICAvLyByZWRlZW1TY3JpcHQuIFRoZSByZXN0IGFyZSBzaWduYXR1cmVzLlxuICAgICAgbGV0IHByZXNlbnQgPSAwXG4gICAgICBmb3IgKGxldCBpID0gMTsgaSA8IHNjcmlwdC5jaHVua3MubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgICAgIGlmIChzY3JpcHQuY2h1bmtzW2ldLmJ1Zikge1xuICAgICAgICAgIHByZXNlbnQrK1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcHJlc2VudCA9PT0gbVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZSBibGFuayBzaWduYXR1cmVzIGluIGEgcDJzaCBtdWx0aXNpZyBpbnB1dCBzY3JpcHQuXG4gICAgICovXG4gICAgc3RhdGljIHJlbW92ZUJsYW5rU2lncyAoc2NyaXB0KSB7XG4gICAgICAvLyBUaGUgZmlyc3QgZWxlbWVudCBpcyBhIEZhbW91cyBNdWx0aVNpZyBCdWcgT1BfMCwgYW5kIGxhc3QgZWxlbWVudCBpcyB0aGVcbiAgICAgIC8vIHJlZGVlbVNjcmlwdC4gVGhlIHJlc3QgYXJlIHNpZ25hdHVyZXMuXG4gICAgICBzY3JpcHQgPSBuZXcgU2NyaXB0KHNjcmlwdC5jaHVua3Muc2xpY2UoKSkgLy8gY29weSB0aGUgc2NyaXB0XG4gICAgICBmb3IgKGxldCBpID0gMTsgaSA8IHNjcmlwdC5jaHVua3MubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgICAgIGlmICghc2NyaXB0LmNodW5rc1tpXS5idWYpIHtcbiAgICAgICAgICBzY3JpcHQuY2h1bmtzLnNwbGljZShpLCAxKSAvLyByZW1vdmUgaXRoIGVsZW1lbnRcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHNjcmlwdFxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdpdmVuIHRoZSBzaWduYXR1cmUgZm9yIGEgdHJhbnNhY3Rpb24sIGZpbGwgaXQgaW4gdGhlIGFwcHJvcHJpYXRlIHBsYWNlXG4gICAgICogZm9yIGFuIGlucHV0IHRoYXQgc3BlbmRzIGEgcHViS2V5SGFzaCBvdXRwdXQuXG4gICAgICovXG4gICAgZmlsbFB1YktleUhhc2hTaWcgKGksIGtleVBhaXIsIHNpZykge1xuICAgICAgbGV0IHR4SW4gPSB0aGlzLnR4LnR4SW5zW2ldXG4gICAgICB0eEluLnNjcmlwdC5jaHVua3NbMF0gPSBuZXcgU2NyaXB0KCkud3JpdGVCdWZmZXIoc2lnLnRvVHhGb3JtYXQoKSkuY2h1bmtzWzBdXG4gICAgICB0eEluLnNjcmlwdFZpID0gVmFySW50LmZyb21OdW1iZXIodHhJbi5zY3JpcHQudG9CdWZmZXIoKS5sZW5ndGgpXG4gICAgICByZXR1cm4gdGhpc1xuICAgIH1cblxuICAgIGZpbGxTY3JpcHRIYXNoTXVsdGlTaWdTaWcgKGksIGtleVBhaXIsIHNpZywgcmVkZWVtU2NyaXB0KSB7XG4gICAgICBsZXQgdHhJbiA9IHRoaXMudHgudHhJbnNbaV1cbiAgICAgIGxldCBzY3JpcHQgPSB0eEluLnNjcmlwdFxuXG4gICAgICAvLyB0aHJlZSBub3JtYWwgb3BDb2RlcywgYW5kIHRoZSByZXN0IGFyZSBwdWJLZXlzXG4gICAgICBsZXQgcHViS2V5Y2h1bmtzID0gcmVkZWVtU2NyaXB0LmNodW5rcy5zbGljZSgxLCByZWRlZW1TY3JpcHQuY2h1bmtzLmxlbmd0aCAtIDIpXG5cbiAgICAgIGxldCBwdWJLZXlidWZzID0gcHViS2V5Y2h1bmtzLm1hcCgoY2h1bmspID0+IGNodW5rLmJ1ZilcbiAgICAgIGxldCBwdWJLZXlidWYgPSBrZXlQYWlyLnB1YktleS50b0J1ZmZlcigpXG5cbiAgICAgIC8vIGZpbmQgd2hpY2ggcHViS2V5IGluIHRoZSByZWRlZW1TY3JpcHQgaXMgdGhlIG9uZSB3ZSBhcmUgdHJ5aW5nIHRvIHNpZ25cbiAgICAgIGxldCB0aGlzUHViS2V5SW5kZXhcbiAgICAgIGZvciAodGhpc1B1YktleUluZGV4ID0gMDsgdGhpc1B1YktleUluZGV4IDwgcHViS2V5YnVmcy5sZW5ndGg7IHRoaXNQdWJLZXlJbmRleCsrKSB7XG4gICAgICAgIGlmIChCdWZmZXIuY29tcGFyZShwdWJLZXlidWYsIHB1YktleWJ1ZnNbdGhpc1B1YktleUluZGV4XSkgPT09IDApIHtcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzUHViS2V5SW5kZXggPj0gcHViS2V5YnVmcy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdjYW5ub3Qgc2lnbjsgcHViS2V5IG5vdCBmb3VuZCBpbiBpbnB1dCAnICsgaSlcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBzY3JpcHQuY2h1bmtzW3RoaXNQdWJLZXlJbmRleCArIDFdID0gbmV3IFNjcmlwdCgpLndyaXRlQnVmZmVyKHNpZy50b1R4Rm9ybWF0KCkpLmNodW5rc1swXVxuICAgICAgbGV0IG0gPSByZWRlZW1TY3JpcHQuY2h1bmtzWzBdLm9wQ29kZU51bSAtIDB4NTBcbiAgICAgIGlmIChUeEJ1aWxkZXIuYWxsU2lnc1ByZXNlbnQobSwgc2NyaXB0KSkge1xuICAgICAgICB0eEluLnNjcmlwdCA9IFR4QnVpbGRlci5yZW1vdmVCbGFua1NpZ3Moc2NyaXB0KVxuICAgICAgfVxuICAgICAgdHhJbi5zY3JpcHRWaSA9IFZhckludC5mcm9tTnVtYmVyKHR4SW4uc2NyaXB0LnRvQnVmZmVyKCkubGVuZ3RoKVxuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTaWduIGFuIGlucHV0LCBidXQgZG8gbm90IGZpbGwgdGhlIHNpZ25hdHVyZSBpbnRvIHRoZSB0cmFuc2FjdGlvbi4gUmV0dXJuXG4gICAgICogdGhlIHNpZ25hdHVyZS5cbiAgICAgKlxuICAgICAqIEZvciBhIG5vcm1hbCB0cmFuc2FjdGlvbiwgc3ViU2NyaXB0IGlzIHVzdWFsbHkgdGhlIHNjcmlwdFB1YktleS4gRm9yIGFcbiAgICAgKiBwMnNoIHRyYW5zYWN0aW9uLCBzdWJTY3JpcHQgaXMgdXN1YWxseSB0aGUgcmVkZWVtU2NyaXB0LiBJZiB5b3UncmUgbm90XG4gICAgICogbm9ybWFsIGJlY2F1c2UgeW91J3JlIHVzaW5nIE9QX0NPREVTRVBBUkFUT1JzLCB5b3Uga25vdyB3aGF0IHRvIGRvLlxuICAgICAqL1xuICAgIGdldFNpZyAoa2V5UGFpciwgbkhhc2hUeXBlLCBuSW4sIHN1YlNjcmlwdCkge1xuICAgICAgbkhhc2hUeXBlID0gbkhhc2hUeXBlID09PSB1bmRlZmluZWQgPyBTaWcuU0lHSEFTSF9BTEwgOiBuSGFzaFR5cGVcbiAgICAgIHJldHVybiB0aGlzLnR4LnNpZ24oa2V5UGFpciwgbkhhc2hUeXBlLCBuSW4sIHN1YlNjcmlwdClcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBc3luY2hyb25vdXNseSBzaWduIGFuIGlucHV0IGluIGEgd29ya2VyLCBidXQgZG8gbm90IGZpbGwgdGhlIHNpZ25hdHVyZVxuICAgICAqIGludG8gdGhlIHRyYW5zYWN0aW9uLiBSZXR1cm4gdGhlIHNpZ25hdHVyZS5cbiAgICAgKi9cbiAgICBhc3luY0dldFNpZyAoa2V5UGFpciwgbkhhc2hUeXBlLCBuSW4sIHN1YlNjcmlwdCkge1xuICAgICAgbkhhc2hUeXBlID0gbkhhc2hUeXBlID09PSB1bmRlZmluZWQgPyBTaWcuU0lHSEFTSF9BTEwgOiBuSGFzaFR5cGVcbiAgICAgIHJldHVybiB0aGlzLnR4LmFzeW5jU2lnbihrZXlQYWlyLCBuSGFzaFR5cGUsIG5Jbiwgc3ViU2NyaXB0KVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNpZ24gaXRoIGlucHV0IHdpdGgga2V5UGFpciBhbmQgaW5zZXJ0IHRoZSBzaWduYXR1cmUgaW50byB0aGUgdHJhbnNhY3Rpb24uXG4gICAgICogVGhpcyBtZXRob2Qgb25seSB3b3JrcyBmb3Igc29tZSBzdGFuZGFyZCB0cmFuc2FjdGlvbiB0eXBlcy4gRm9yXG4gICAgICogbm9uLXN0YW5kYXJkIHRyYW5zYWN0aW9uIHR5cGVzLCB1c2UgZ2V0U2lnLlxuICAgICAqL1xuICAgIHNpZ24gKGksIGtleVBhaXIsIHR4T3V0KSB7XG4gICAgICBsZXQgdHhJbiA9IHRoaXMudHgudHhJbnNbaV1cbiAgICAgIGxldCBzY3JpcHQgPSB0eEluLnNjcmlwdFxuICAgICAgaWYgKHNjcmlwdC5pc1B1YktleUhhc2hJbigpKSB7XG4gICAgICAgIGxldCB0eEhhc2hCdWYgPSB0eEluLnR4SGFzaEJ1ZlxuICAgICAgICBsZXQgdHhPdXROdW0gPSB0eEluLnR4T3V0TnVtXG4gICAgICAgIGlmICghdHhPdXQpIHtcbiAgICAgICAgICB0eE91dCA9IHRoaXMudVR4T3V0TWFwLmdldCh0eEhhc2hCdWYsIHR4T3V0TnVtKVxuICAgICAgICB9XG4gICAgICAgIGxldCBvdXRTY3JpcHQgPSB0eE91dC5zY3JpcHRcbiAgICAgICAgbGV0IHN1YlNjcmlwdCA9IG91dFNjcmlwdCAvLyB0cnVlIGZvciBzdGFuZGFyZCBzY3JpcHQgdHlwZXNcbiAgICAgICAgbGV0IHNpZyA9IHRoaXMuZ2V0U2lnKGtleVBhaXIsIFNpZy5TSUdIQVNIX0FMTCwgaSwgc3ViU2NyaXB0KVxuICAgICAgICB0aGlzLmZpbGxQdWJLZXlIYXNoU2lnKGksIGtleVBhaXIsIHNpZywgc3ViU2NyaXB0KVxuICAgICAgfSBlbHNlIGlmIChzY3JpcHQuaXNTY3JpcHRIYXNoSW4oKSkge1xuICAgICAgICBsZXQgcmVkZWVtU2NyaXB0ID0gbmV3IFNjcmlwdCgpLmZyb21CdWZmZXIoc2NyaXB0LmNodW5rc1tzY3JpcHQuY2h1bmtzLmxlbmd0aCAtIDFdLmJ1ZilcbiAgICAgICAgbGV0IHN1YlNjcmlwdCA9IHJlZGVlbVNjcmlwdFxuICAgICAgICBpZiAoIXJlZGVlbVNjcmlwdC5pc011bHRpU2lnT3V0KCkpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2Nhbm5vdCBzaWduIG5vbi1tdWx0aXNpZyBzY3JpcHRIYXNoIHNjcmlwdCB0eXBlIGZvciBpbnB1dCAnICsgaSlcbiAgICAgICAgfVxuICAgICAgICBsZXQgc2lnID0gdGhpcy50eC5zaWduKGtleVBhaXIsIFNpZy5TSUdIQVNIX0FMTCwgaSwgc3ViU2NyaXB0KVxuICAgICAgICB0aGlzLmZpbGxTY3JpcHRIYXNoTXVsdGlTaWdTaWcoaSwga2V5UGFpciwgc2lnLCByZWRlZW1TY3JpcHQpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2Nhbm5vdCBzaWduIHVua25vd24gc2NyaXB0IHR5cGUgZm9yIGlucHV0ICcgKyBpKVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBc3luY2hyb25vdXNseSBzaWduIGl0aCBpbnB1dCB3aXRoIGtleVBhaXIgaW4gYSB3b3JrZXIgYW5kIGluc2VydCB0aGVcbiAgICAgKiBzaWduYXR1cmUgaW50byB0aGUgdHJhbnNhY3Rpb24uICBUaGlzIG1ldGhvZCBvbmx5IHdvcmtzIGZvciBzb21lIHN0YW5kYXJkXG4gICAgICogdHJhbnNhY3Rpb24gdHlwZXMuIEZvciBub24tc3RhbmRhcmQgdHJhbnNhY3Rpb24gdHlwZXMsIHVzZSBhc3luY0dldFNpZy5cbiAgICAgKi9cbiAgICBhc3luY1NpZ24gKGksIGtleVBhaXIsIHR4T3V0KSB7XG4gICAgICByZXR1cm4gYXNpbmsoZnVuY3Rpb24gKiAoKSB7XG4gICAgICAgIGxldCB0eEluID0gdGhpcy50eC50eEluc1tpXVxuICAgICAgICBsZXQgc2NyaXB0ID0gdHhJbi5zY3JpcHRcbiAgICAgICAgaWYgKHNjcmlwdC5pc1B1YktleUhhc2hJbigpKSB7XG4gICAgICAgICAgbGV0IHR4SGFzaEJ1ZiA9IHR4SW4udHhIYXNoQnVmXG4gICAgICAgICAgbGV0IHR4T3V0TnVtID0gdHhJbi50eE91dE51bVxuICAgICAgICAgIGlmICghdHhPdXQpIHtcbiAgICAgICAgICAgIHR4T3V0ID0gdGhpcy51VHhPdXRNYXAuZ2V0KHR4SGFzaEJ1ZiwgdHhPdXROdW0pXG4gICAgICAgICAgfVxuICAgICAgICAgIGxldCBvdXRTY3JpcHQgPSB0eE91dC5zY3JpcHRcbiAgICAgICAgICBsZXQgc3ViU2NyaXB0ID0gb3V0U2NyaXB0IC8vIHRydWUgZm9yIHN0YW5kYXJkIHNjcmlwdCB0eXBlc1xuICAgICAgICAgIGxldCBzaWcgPSB5aWVsZCB0aGlzLmFzeW5jR2V0U2lnKGtleVBhaXIsIFNpZy5TSUdIQVNIX0FMTCwgaSwgc3ViU2NyaXB0KVxuICAgICAgICAgIHRoaXMuZmlsbFB1YktleUhhc2hTaWcoaSwga2V5UGFpciwgc2lnLCBzdWJTY3JpcHQpXG4gICAgICAgIH0gZWxzZSBpZiAoc2NyaXB0LmlzU2NyaXB0SGFzaEluKCkpIHtcbiAgICAgICAgICBsZXQgcmVkZWVtU2NyaXB0ID0gbmV3IFNjcmlwdCgpLmZyb21CdWZmZXIoc2NyaXB0LmNodW5rc1tzY3JpcHQuY2h1bmtzLmxlbmd0aCAtIDFdLmJ1ZilcbiAgICAgICAgICBsZXQgc3ViU2NyaXB0ID0gcmVkZWVtU2NyaXB0XG4gICAgICAgICAgaWYgKCFyZWRlZW1TY3JpcHQuaXNNdWx0aVNpZ091dCgpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2Nhbm5vdCBzaWduIG5vbi1tdWx0aXNpZyBzY3JpcHRIYXNoIHNjcmlwdCB0eXBlIGZvciBpbnB1dCAnICsgaSlcbiAgICAgICAgICB9XG4gICAgICAgICAgbGV0IHNpZyA9IHlpZWxkIHRoaXMudHguYXN5bmNTaWduKGtleVBhaXIsIFNpZy5TSUdIQVNIX0FMTCwgaSwgc3ViU2NyaXB0KVxuICAgICAgICAgIHRoaXMuZmlsbFNjcmlwdEhhc2hNdWx0aVNpZ1NpZyhpLCBrZXlQYWlyLCBzaWcsIHJlZGVlbVNjcmlwdClcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2Nhbm5vdCBzaWduIHVua25vd24gc2NyaXB0IHR5cGUgZm9yIGlucHV0ICcgKyBpKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzXG4gICAgICB9LCB0aGlzKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBUeEJ1aWxkZXJcbn1cblxuaW5qZWN0ID0gcmVxdWlyZSgnaW5qZWN0ZXInKShpbmplY3QsIGRlcGVuZGVuY2llcylcbmxldCBUeEJ1aWxkZXIgPSBpbmplY3QoKVxubW9kdWxlLmV4cG9ydHMgPSBUeEJ1aWxkZXJcbiIsIi8qXG4gKiBUcmFuc2FjdGlvbiBJbnB1dFxuICogPT09PT09PT09PT09PT09PT1cbiAqXG4gKiBBbiBpbnB1dCB0byBhIHRyYW5zYWN0aW9uLiBUaGUgd2F5IHlvdSBwcm9iYWJseSB3YW50IHRvIHVzZSB0aGlzIGlzIHRocm91Z2hcbiAqIHRoZSBjb252ZW5pZW50IG1ldGhvZCBvZiBuZXcgVHhJbih0eEhhc2hCdWYsIHR4T3V0TnVtLCBzY3JpcHQsIG5TZXF1ZW5jZSkgKGkuZS4sIHlvdVxuICogY2FuIGxlYXZlIG91dCB0aGUgc2NyaXB0VmksIHdoaWNoIGlzIGNvbXB1dGVkIGF1dG9tYXRpY2FsbHkgaWYgeW91IGxlYXZlIGl0XG4gKiBvdXQuKVxuICovXG4ndXNlIHN0cmljdCdcbmxldCBkZXBlbmRlbmNpZXMgPSB7XG4gIEJ3OiByZXF1aXJlKCcuL2J3JyksXG4gIFZhckludDogcmVxdWlyZSgnLi92YXItaW50JyksXG4gIE9wQ29kZTogcmVxdWlyZSgnLi9vcC1jb2RlJyksXG4gIFNjcmlwdDogcmVxdWlyZSgnLi9zY3JpcHQnKSxcbiAgU3RydWN0OiByZXF1aXJlKCcuL3N0cnVjdCcpXG59XG5cbmxldCBpbmplY3QgPSBmdW5jdGlvbiAoZGVwcykge1xuICBsZXQgQncgPSBkZXBzLkJ3XG4gIGxldCBWYXJJbnQgPSBkZXBzLlZhckludFxuICBsZXQgT3BDb2RlID0gZGVwcy5PcENvZGVcbiAgbGV0IFNjcmlwdCA9IGRlcHMuU2NyaXB0XG4gIGxldCBTdHJ1Y3QgPSBkZXBzLlN0cnVjdFxuXG4gIGNsYXNzIFR4SW4gZXh0ZW5kcyBTdHJ1Y3Qge1xuICAgIGNvbnN0cnVjdG9yICh0eEhhc2hCdWYsIHR4T3V0TnVtLCBzY3JpcHRWaSwgc2NyaXB0LCBuU2VxdWVuY2UgPSAweGZmZmZmZmZmKSB7XG4gICAgICBzdXBlcih7dHhIYXNoQnVmLCB0eE91dE51bSwgc2NyaXB0VmksIHNjcmlwdCwgblNlcXVlbmNlfSlcbiAgICB9XG5cbiAgICBzZXRTY3JpcHQgKHNjcmlwdCkge1xuICAgICAgdGhpcy5zY3JpcHRWaSA9IFZhckludC5mcm9tTnVtYmVyKHNjcmlwdC50b0J1ZmZlcigpLmxlbmd0aClcbiAgICAgIHRoaXMuc2NyaXB0ID0gc2NyaXB0XG4gICAgICByZXR1cm4gdGhpc1xuICAgIH1cblxuICAgIGZyb21Qcm9wZXJ0aWVzICh0eEhhc2hCdWYsIHR4T3V0TnVtLCBzY3JpcHQsIG5TZXF1ZW5jZSkge1xuICAgICAgdGhpcy5mcm9tT2JqZWN0KHt0eEhhc2hCdWYsIHR4T3V0TnVtLCBuU2VxdWVuY2V9KVxuICAgICAgdGhpcy5zZXRTY3JpcHQoc2NyaXB0KVxuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG5cbiAgICBzdGF0aWMgZnJvbVByb3BlcnRpZXMgKHR4SGFzaEJ1ZiwgdHhPdXROdW0sIHNjcmlwdCwgblNlcXVlbmNlKSB7XG4gICAgICByZXR1cm4gbmV3IHRoaXMoKS5mcm9tUHJvcGVydGllcyh0eEhhc2hCdWYsIHR4T3V0TnVtLCBzY3JpcHQsIG5TZXF1ZW5jZSlcbiAgICB9XG5cbiAgICBmcm9tSlNPTiAoanNvbikge1xuICAgICAgdGhpcy5mcm9tT2JqZWN0KHtcbiAgICAgICAgdHhIYXNoQnVmOiBuZXcgQnVmZmVyKGpzb24udHhIYXNoQnVmLCAnaGV4JyksXG4gICAgICAgIHR4T3V0TnVtOiBqc29uLnR4T3V0TnVtLFxuICAgICAgICBzY3JpcHRWaTogVmFySW50LmZyb21KU09OKGpzb24uc2NyaXB0VmkpLFxuICAgICAgICBzY3JpcHQ6IFNjcmlwdC5mcm9tSlNPTihqc29uLnNjcmlwdCksXG4gICAgICAgIG5TZXF1ZW5jZToganNvbi5uU2VxdWVuY2VcbiAgICAgIH0pXG4gICAgICByZXR1cm4gdGhpc1xuICAgIH1cblxuICAgIHRvSlNPTiAoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eEhhc2hCdWY6IHRoaXMudHhIYXNoQnVmLnRvU3RyaW5nKCdoZXgnKSxcbiAgICAgICAgdHhPdXROdW06IHRoaXMudHhPdXROdW0sXG4gICAgICAgIHNjcmlwdFZpOiB0aGlzLnNjcmlwdFZpLnRvSlNPTigpLFxuICAgICAgICBzY3JpcHQ6IHRoaXMuc2NyaXB0LnRvSlNPTigpLFxuICAgICAgICBuU2VxdWVuY2U6IHRoaXMublNlcXVlbmNlXG4gICAgICB9XG4gICAgfVxuXG4gICAgZnJvbUJyIChicikge1xuICAgICAgdGhpcy50eEhhc2hCdWYgPSBici5yZWFkKDMyKVxuICAgICAgdGhpcy50eE91dE51bSA9IGJyLnJlYWRVSW50MzJMRSgpXG4gICAgICB0aGlzLnNjcmlwdFZpID0gVmFySW50LmZyb21CdWZmZXIoYnIucmVhZFZhckludEJ1ZigpKVxuICAgICAgdGhpcy5zY3JpcHQgPSBTY3JpcHQuZnJvbUJ1ZmZlcihici5yZWFkKHRoaXMuc2NyaXB0VmkudG9OdW1iZXIoKSkpXG4gICAgICB0aGlzLm5TZXF1ZW5jZSA9IGJyLnJlYWRVSW50MzJMRSgpXG4gICAgICByZXR1cm4gdGhpc1xuICAgIH1cblxuICAgIHRvQncgKGJ3KSB7XG4gICAgICBpZiAoIWJ3KSB7XG4gICAgICAgIGJ3ID0gbmV3IEJ3KClcbiAgICAgIH1cbiAgICAgIGJ3LndyaXRlKHRoaXMudHhIYXNoQnVmKVxuICAgICAgYncud3JpdGVVSW50MzJMRSh0aGlzLnR4T3V0TnVtKVxuICAgICAgYncud3JpdGUodGhpcy5zY3JpcHRWaS5idWYpXG4gICAgICBidy53cml0ZSh0aGlzLnNjcmlwdC50b0J1ZmZlcigpKVxuICAgICAgYncud3JpdGVVSW50MzJMRSh0aGlzLm5TZXF1ZW5jZSlcbiAgICAgIHJldHVybiBid1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdlbmVyYXRlIHR4SW4gd2l0aCBibGFuayBzaWduYXR1cmVzIGZyb20gYSB0eE91dCBhbmQgaXRzXG4gICAgICogdHhIYXNoQnVmK3R4T3V0TnVtLiBBIFwiYmxhbmtcIiBzaWduYXR1cmUgaXMganVzdCBhbiBPUF8wLlxuICAgICAqL1xuICAgIGZyb21QdWJLZXlIYXNoVHhPdXQgKHR4SGFzaEJ1ZiwgdHhPdXROdW0sIHR4T3V0LCBwdWJLZXkpIHtcbiAgICAgIGxldCBzY3JpcHQgPSBuZXcgU2NyaXB0KClcbiAgICAgIGlmICh0eE91dC5zY3JpcHQuaXNQdWJLZXlIYXNoT3V0KCkpIHtcbiAgICAgICAgc2NyaXB0LndyaXRlT3BDb2RlKE9wQ29kZS5PUF8wKSAvLyBibGFuayBzaWduYXR1cmVcbiAgICAgICAgc2NyaXB0LndyaXRlQnVmZmVyKHB1YktleS50b0J1ZmZlcigpKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd0eE91dCBtdXN0IGJlIG9mIHR5cGUgcHViS2V5SGFzaCcpXG4gICAgICB9XG4gICAgICB0aGlzLnR4SGFzaEJ1ZiA9IHR4SGFzaEJ1ZlxuICAgICAgdGhpcy50eE91dE51bSA9IHR4T3V0TnVtXG4gICAgICB0aGlzLnNldFNjcmlwdChzY3JpcHQpXG4gICAgICByZXR1cm4gdGhpc1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdlbmVyYXRlIHR4SW4gd2l0aCBibGFuayBzaWduYXR1cmVzIGZyb20gYSB0eE91dCBhbmQgaXRzXG4gICAgICogdHhIYXNoQnVmK3R4T3V0TnVtLiBBIFwiYmxhbmtcIiBzaWduYXR1cmUgaXMganVzdCBhbiBPUF8wLlxuICAgICAqXG4gICAgICogVE9ETzogQWxzbyBzdXBwb3J0IG90aGVyIHR5cGVzIG9mIHAyc2ggb3V0cHV0cyBvdGhlciB0aGFuIG11bHRpc2lnLlxuICAgICAqL1xuICAgIGZyb21TY3JpcHRIYXNoTXVsdGlTaWdUeE91dCAodHhIYXNoQnVmLCB0eE91dE51bSwgdHhPdXQsIHJlZGVlbVNjcmlwdCkge1xuICAgICAgbGV0IHNjcmlwdCA9IG5ldyBTY3JpcHQoKVxuICAgICAgaWYgKCF0eE91dC5zY3JpcHQuaXNTY3JpcHRIYXNoT3V0KCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd0eE91dCBtdXN0IGJlIG9mIHR5cGUgc2NyaXB0SGFzaCcpXG4gICAgICB9XG4gICAgICBpZiAoIXJlZGVlbVNjcmlwdC5pc011bHRpU2lnT3V0KCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdyZWRlZW1TY3JpcHQgbXVzdCBiZSBtdWx0aXNpZycpXG4gICAgICB9XG4gICAgICBzY3JpcHQud3JpdGVPcENvZGUoT3BDb2RlLk9QXzApIC8vIGV4dHJhIE9QXzA7IGZhbW91cyBtdWx0aXNpZyBidWcgaW4gYml0Y29pbiBwb3BzIG9uZSB0b28gbWFueSBpdGVtcyBmcm9tIHRoZSBzdGFja1xuICAgICAgbGV0IG51bXB1YktleXMgPSByZWRlZW1TY3JpcHQuY2h1bmtzLmxlbmd0aCAtIDMgLy8gMyBub3JtYWwgb3BDb2RlcywgdGhlIHJlc3QgcHViS2V5c1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1wdWJLZXlzOyBpKyspIHtcbiAgICAgICAgc2NyaXB0LndyaXRlT3BDb2RlKE9wQ29kZS5PUF8wKSAvLyBvbmUgYmxhbmsgcGVyIHB1YktleSAobm90IHBlciBzaWcpXG4gICAgICB9XG4gICAgICBzY3JpcHQud3JpdGVCdWZmZXIocmVkZWVtU2NyaXB0LnRvQnVmZmVyKCkpXG4gICAgICB0aGlzLmZyb21Qcm9wZXJ0aWVzKHR4SGFzaEJ1ZiwgdHhPdXROdW0sIHNjcmlwdClcbiAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuXG4gICAgc3RhdGljIGZyb21TY3JpcHRIYXNoTXVsdGlTaWdUeE91dCAodHhIYXNoQnVmLCB0eE91dE51bSwgdHhPdXQsIHJlZGVlbVNjcmlwdCkge1xuICAgICAgcmV0dXJuIG5ldyB0aGlzKCkuZnJvbVNjcmlwdEhhc2hNdWx0aVNpZ1R4T3V0KHR4SGFzaEJ1ZiwgdHhPdXROdW0sIHR4T3V0LCByZWRlZW1TY3JpcHQpXG4gICAgfVxuXG4gICAgaGFzTnVsbElucHV0ICgpIHtcbiAgICAgIGxldCBoZXggPSB0aGlzLnR4SGFzaEJ1Zi50b1N0cmluZygnaGV4JylcbiAgICAgIGlmIChoZXggPT09ICcwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwJyAmJiB0aGlzLnR4T3V0TnVtID09PSAweGZmZmZmZmZmKSB7XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBbmFsYWdvdXMgdG8gYml0Y29pbmQncyBTZXROdWxsIGluIENPdXRQb2ludFxuICAgICAqL1xuICAgIHNldE51bGxJbnB1dCAoKSB7XG4gICAgICB0aGlzLnR4SGFzaEJ1ZiA9IG5ldyBCdWZmZXIoMzIpXG4gICAgICB0aGlzLnR4SGFzaEJ1Zi5maWxsKDApXG4gICAgICB0aGlzLnR4T3V0TnVtID0gMHhmZmZmZmZmZiAvLyAtMSBjYXN0IHRvIHVuc2lnbmVkIGludFxuICAgIH1cbiAgfVxuXG4gIC8qIEludGVycHJldCBzZXF1ZW5jZSBudW1iZXJzIGFzIHJlbGF0aXZlIGxvY2stdGltZSBjb25zdHJhaW50cy4gKi9cbiAgVHhJbi5MT0NLVElNRV9WRVJJRllfU0VRVUVOQ0UgPSAoMSA8PCAwKVxuXG4gIC8qIFNldHRpbmcgblNlcXVlbmNlIHRvIHRoaXMgdmFsdWUgZm9yIGV2ZXJ5IGlucHV0IGluIGEgdHJhbnNhY3Rpb24gZGlzYWJsZXNcbiAgICogbkxvY2tUaW1lLiAqL1xuICBUeEluLlNFUVVFTkNFX0ZJTkFMID0gMHhmZmZmZmZmZlxuXG4gIC8qIEJlbG93IGZsYWdzIGFwcGx5IGluIHRoZSBjb250ZXh0IG9mIEJpcCA2OCovXG4gIC8qIElmIHRoaXMgZmxhZyBzZXQsIHR4SW4ublNlcXVlbmNlIGlzIE5PVCBpbnRlcnByZXRlZCBhcyBhIHJlbGF0aXZlIGxvY2stdGltZS5cbiAgICogKi9cbiAgVHhJbi5TRVFVRU5DRV9MT0NLVElNRV9ESVNBQkxFX0ZMQUcgPSAoMSA8PCAzMSlcblxuICAvKiBJZiB0eEluLm5TZXF1ZW5jZSBlbmNvZGVzIGEgcmVsYXRpdmUgbG9jay10aW1lIGFuZCB0aGlzIGZsYWcgaXMgc2V0LCB0aGVcbiAgICogcmVsYXRpdmUgbG9jay10aW1lIGhhcyB1bml0cyBvZiA1MTIgc2Vjb25kcywgb3RoZXJ3aXNlIGl0IHNwZWNpZmllcyBibG9ja3NcbiAgICogd2l0aCBhIGdyYW51bGFyaXR5IG9mIDEuICovXG4gIFR4SW4uU0VRVUVOQ0VfTE9DS1RJTUVfVFlQRV9GTEFHID0gKDEgPDwgMjIpXG5cbiAgLyogSWYgdHhJbi5uU2VxdWVuY2UgZW5jb2RlcyBhIHJlbGF0aXZlIGxvY2stdGltZSwgdGhpcyBtYXNrIGlzIGFwcGxpZWQgdG9cbiAgICogZXh0cmFjdCB0aGF0IGxvY2stdGltZSBmcm9tIHRoZSBzZXF1ZW5jZSBmaWVsZC4gKi9cbiAgVHhJbi5TRVFVRU5DRV9MT0NLVElNRV9NQVNLID0gMHgwMDAwZmZmZlxuXG4gIC8qIEluIG9yZGVyIHRvIHVzZSB0aGUgc2FtZSBudW1iZXIgb2YgYml0cyB0byBlbmNvZGUgcm91Z2hseSB0aGUgc2FtZVxuICAgKiB3YWxsLWNsb2NrIGR1cmF0aW9uLCBhbmQgYmVjYXVzZSBibG9ja3MgYXJlIG5hdHVyYWxseSBsaW1pdGVkIHRvIG9jY3VyXG4gICAqIGV2ZXJ5IDYwMHMgb24gYXZlcmFnZSwgdGhlIG1pbmltdW0gZ3JhbnVsYXJpdHkgZm9yIHRpbWUtYmFzZWQgcmVsYXRpdmVcbiAgICogbG9jay10aW1lIGlzIGZpeGVkIGF0IDUxMiBzZWNvbmRzLiAgQ29udmVydGluZyBmcm9tIENUeEluOjpuU2VxdWVuY2UgdG9cbiAgICogc2Vjb25kcyBpcyBwZXJmb3JtZWQgYnkgbXVsdGlwbHlpbmcgYnkgNTEyID0gMl45LCBvciBlcXVpdmFsZW50bHlcbiAgICogc2hpZnRpbmcgdXAgYnkgOSBiaXRzLiAqL1xuICBUeEluLlNFUVVFTkNFX0xPQ0tUSU1FX0dSQU5VTEFSSVRZID0gOVxuXG4gIHJldHVybiBUeEluXG59XG5cbmluamVjdCA9IHJlcXVpcmUoJ2luamVjdGVyJykoaW5qZWN0LCBkZXBlbmRlbmNpZXMpXG5sZXQgVHhJbiA9IGluamVjdCgpXG5tb2R1bGUuZXhwb3J0cyA9IFR4SW5cbiIsIi8qKlxuICogVHJhbnNhY3Rpb24gT3V0cHV0IE1hcFxuICogPT09PT09PT09PT09PT09PT09PT09PVxuICpcbiAqIEEgbWFwIGZyb20gYSB0cmFuc2FjdGlvbiBoYXNoIGFuZCBvdXRwdXQgbnVtYmVyIHRvIHRoYXQgcGFydGljdWxhciBvdXRwdXQuXG4gKiBOb3RlIHRoYXQgdGhlIG1hcCBpcyBmcm9tIHRoZSB0cmFuc2FjdGlvbiAqaGFzaCosIHdoaWNoIGlzIHRoZSB2YWx1ZSB0aGF0XG4gKiBvY2N1cnMgaW4gdGhlIGJsb2NrY2hhaW4sIG5vdCB0aGUgaWQsIHdoaWNoIGlzIHRoZSByZXZlcnNlIG9mIHRoZSBoYXNoLlxuICovXG4ndXNlIHN0cmljdCdcbmxldCBkZXBlbmRlbmNpZXMgPSB7XG4gIFN0cnVjdDogcmVxdWlyZSgnLi9zdHJ1Y3QnKSxcbiAgVHhPdXQ6IHJlcXVpcmUoJy4vdHgtb3V0Jylcbn1cblxubGV0IGluamVjdCA9IGZ1bmN0aW9uIChkZXBzKSB7XG4gIGxldCBTdHJ1Y3QgPSBkZXBzLlN0cnVjdFxuICBsZXQgVHhPdXQgPSBkZXBzLlR4T3V0XG5cbiAgY2xhc3MgVHhPdXRNYXAgZXh0ZW5kcyBTdHJ1Y3Qge1xuICAgIGNvbnN0cnVjdG9yIChtYXAgPSBuZXcgTWFwKCkpIHtcbiAgICAgIHN1cGVyKHttYXB9KVxuICAgIH1cblxuICAgIHRvSlNPTiAoKSB7XG4gICAgICBsZXQganNvbiA9IHt9XG4gICAgICB0aGlzLm1hcC5mb3JFYWNoKCh0eE91dCwgbGFiZWwpID0+IHtcbiAgICAgICAganNvbltsYWJlbF0gPSB0eE91dC50b0hleCgpXG4gICAgICB9KVxuICAgICAgcmV0dXJuIGpzb25cbiAgICB9XG5cbiAgICBmcm9tSlNPTiAoanNvbikge1xuICAgICAgT2JqZWN0LmtleXMoanNvbikuZm9yRWFjaCgobGFiZWwpID0+IHtcbiAgICAgICAgdGhpcy5tYXAuc2V0KGxhYmVsLCBUeE91dC5mcm9tSGV4KGpzb25bbGFiZWxdKSlcbiAgICAgIH0pXG4gICAgICByZXR1cm4gdGhpc1xuICAgIH1cblxuICAgIGFkZCAodHhIYXNoQnVmLCB0eE91dE51bSwgdHhPdXQpIHtcbiAgICAgIGxldCBsYWJlbCA9IHR4SGFzaEJ1Zi50b1N0cmluZygnaGV4JykgKyAnOicgKyB0eE91dE51bVxuICAgICAgdGhpcy5tYXAuc2V0KGxhYmVsLCB0eE91dClcbiAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuXG4gICAgZ2V0ICh0eEhhc2hCdWYsIHR4T3V0TnVtKSB7XG4gICAgICBsZXQgbGFiZWwgPSB0eEhhc2hCdWYudG9TdHJpbmcoJ2hleCcpICsgJzonICsgdHhPdXROdW1cbiAgICAgIHJldHVybiB0aGlzLm1hcC5nZXQobGFiZWwpXG4gICAgfVxuXG4gICAgYWRkVHggKHR4KSB7XG4gICAgICBsZXQgdHhoYXNoaGV4ID0gdHguaGFzaCgpLnRvU3RyaW5nKCdoZXgnKVxuICAgICAgdHgudHhPdXRzLmZvckVhY2goKHR4T3V0LCBpbmRleCkgPT4ge1xuICAgICAgICBsZXQgbGFiZWwgPSB0eGhhc2hoZXggKyAnOicgKyBpbmRleFxuICAgICAgICB0aGlzLm1hcC5zZXQobGFiZWwsIHR4T3V0KVxuICAgICAgfSlcbiAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIFR4T3V0TWFwXG59XG5cbmluamVjdCA9IHJlcXVpcmUoJ2luamVjdGVyJykoaW5qZWN0LCBkZXBlbmRlbmNpZXMpXG5sZXQgVHhPdXRNYXAgPSBpbmplY3QoKVxubW9kdWxlLmV4cG9ydHMgPSBUeE91dE1hcFxuIiwiLyoqXG4gKiBUcmFuc2FjdGlvbiBPdXRwdXRcbiAqID09PT09PT09PT09PT09PT09PVxuICpcbiAqIEFuIG91dHB1dCB0byBhIHRyYW5zYWN0aW9uLiBUaGUgd2F5IHlvdSBub3JtYWxseSB3YW50IHRvIG1ha2Ugb25lIGlzIHdpdGhcbiAqIG5ldyBUeE91dCh2YWx1ZUJuLCBzY3JpcHQpIChpLmUuLCBqdXN0IGFzIHdpdGggVHhJbiwgeW91IGNhbiBsZWF2ZSBvdXQgdGhlXG4gKiBzY3JpcHRWaSwgc2luY2UgaXQgY2FuIGJlIGNvbXB1dGVkIGF1dG9tYXRpY2FsbHkuXG4qL1xuJ3VzZSBzdHJpY3QnXG5sZXQgZGVwZW5kZW5jaWVzID0ge1xuICBCbjogcmVxdWlyZSgnLi9ibicpLFxuICBCdzogcmVxdWlyZSgnLi9idycpLFxuICBTY3JpcHQ6IHJlcXVpcmUoJy4vc2NyaXB0JyksXG4gIFN0cnVjdDogcmVxdWlyZSgnLi9zdHJ1Y3QnKSxcbiAgVmFySW50OiByZXF1aXJlKCcuL3Zhci1pbnQnKVxufVxuXG5sZXQgaW5qZWN0ID0gZnVuY3Rpb24gKGRlcHMpIHtcbiAgbGV0IEJuID0gZGVwcy5CblxuICBsZXQgQncgPSBkZXBzLkJ3XG4gIGxldCBTY3JpcHQgPSBkZXBzLlNjcmlwdFxuICBsZXQgU3RydWN0ID0gZGVwcy5TdHJ1Y3RcbiAgbGV0IFZhckludCA9IGRlcHMuVmFySW50XG5cbiAgY2xhc3MgVHhPdXQgZXh0ZW5kcyBTdHJ1Y3Qge1xuICAgIGNvbnN0cnVjdG9yICh2YWx1ZUJuLCBzY3JpcHRWaSwgc2NyaXB0KSB7XG4gICAgICBzdXBlcih7dmFsdWVCbiwgc2NyaXB0VmksIHNjcmlwdH0pXG4gICAgfVxuXG4gICAgc2V0U2NyaXB0IChzY3JpcHQpIHtcbiAgICAgIHRoaXMuc2NyaXB0VmkgPSBWYXJJbnQuZnJvbU51bWJlcihzY3JpcHQudG9CdWZmZXIoKS5sZW5ndGgpXG4gICAgICB0aGlzLnNjcmlwdCA9IHNjcmlwdFxuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG5cbiAgICBmcm9tUHJvcGVydGllcyAodmFsdWVCbiwgc2NyaXB0KSB7XG4gICAgICB0aGlzLmZyb21PYmplY3Qoe3ZhbHVlQm59KVxuICAgICAgdGhpcy5zZXRTY3JpcHQoc2NyaXB0KVxuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG5cbiAgICBzdGF0aWMgZnJvbVByb3BlcnRpZXMgKHZhbHVlQm4sIHNjcmlwdCkge1xuICAgICAgcmV0dXJuIG5ldyB0aGlzKCkuZnJvbVByb3BlcnRpZXModmFsdWVCbiwgc2NyaXB0KVxuICAgIH1cblxuICAgIGZyb21KU09OIChqc29uKSB7XG4gICAgICB0aGlzLmZyb21PYmplY3Qoe1xuICAgICAgICB2YWx1ZUJuOiBuZXcgQm4oKS5mcm9tSlNPTihqc29uLnZhbHVlQm4pLFxuICAgICAgICBzY3JpcHRWaTogbmV3IFZhckludCgpLmZyb21KU09OKGpzb24uc2NyaXB0VmkpLFxuICAgICAgICBzY3JpcHQ6IG5ldyBTY3JpcHQoKS5mcm9tSlNPTihqc29uLnNjcmlwdClcbiAgICAgIH0pXG4gICAgICByZXR1cm4gdGhpc1xuICAgIH1cblxuICAgIHRvSlNPTiAoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB2YWx1ZUJuOiB0aGlzLnZhbHVlQm4udG9KU09OKCksXG4gICAgICAgIHNjcmlwdFZpOiB0aGlzLnNjcmlwdFZpLnRvSlNPTigpLFxuICAgICAgICBzY3JpcHQ6IHRoaXMuc2NyaXB0LnRvSlNPTigpXG4gICAgICB9XG4gICAgfVxuXG4gICAgZnJvbUJyIChicikge1xuICAgICAgdGhpcy52YWx1ZUJuID0gYnIucmVhZFVJbnQ2NExFQm4oKVxuICAgICAgdGhpcy5zY3JpcHRWaSA9IFZhckludC5mcm9tTnVtYmVyKGJyLnJlYWRWYXJJbnROdW0oKSlcbiAgICAgIHRoaXMuc2NyaXB0ID0gbmV3IFNjcmlwdCgpLmZyb21CdWZmZXIoYnIucmVhZCh0aGlzLnNjcmlwdFZpLnRvTnVtYmVyKCkpKVxuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG5cbiAgICB0b0J3IChidykge1xuICAgICAgaWYgKCFidykge1xuICAgICAgICBidyA9IG5ldyBCdygpXG4gICAgICB9XG4gICAgICBidy53cml0ZVVJbnQ2NExFQm4odGhpcy52YWx1ZUJuKVxuICAgICAgYncud3JpdGUodGhpcy5zY3JpcHRWaS5idWYpXG4gICAgICBidy53cml0ZSh0aGlzLnNjcmlwdC50b0J1ZmZlcigpKVxuICAgICAgcmV0dXJuIGJ3XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIFR4T3V0XG59XG5cbmluamVjdCA9IHJlcXVpcmUoJ2luamVjdGVyJykoaW5qZWN0LCBkZXBlbmRlbmNpZXMpXG5sZXQgVHhPdXQgPSBpbmplY3QoKVxubW9kdWxlLmV4cG9ydHMgPSBUeE91dFxuIiwiLyoqXG4gKiBUcmFuc2FjdGlvblxuICogPT09PT09PT09PT1cbiAqXG4gKiBBIGJpdGNvaW4gdHJhbnNhY3Rpb24uXG4gKi9cbid1c2Ugc3RyaWN0J1xubGV0IGRlcGVuZGVuY2llcyA9IHtcbiAgQm46IHJlcXVpcmUoJy4vYm4nKSxcbiAgQnI6IHJlcXVpcmUoJy4vYnInKSxcbiAgQnc6IHJlcXVpcmUoJy4vYncnKSxcbiAgRWNkc2E6IHJlcXVpcmUoJy4vZWNkc2EnKSxcbiAgSGFzaDogcmVxdWlyZSgnLi9oYXNoJyksXG4gIFNjcmlwdDogcmVxdWlyZSgnLi9zY3JpcHQnKSxcbiAgU2lnOiByZXF1aXJlKCcuL3NpZycpLFxuICBTdHJ1Y3Q6IHJlcXVpcmUoJy4vc3RydWN0JyksXG4gIFR4SW46IHJlcXVpcmUoJy4vdHgtaW4nKSxcbiAgVHhPdXQ6IHJlcXVpcmUoJy4vdHgtb3V0JyksXG4gIFZhckludDogcmVxdWlyZSgnLi92YXItaW50JyksXG4gIFdvcmtlcnM6IHJlcXVpcmUoJy4vd29ya2VycycpLFxuICBhc2luazogcmVxdWlyZSgnYXNpbmsnKVxufVxuXG5sZXQgaW5qZWN0ID0gZnVuY3Rpb24gKGRlcHMpIHtcbiAgbGV0IEJuID0gZGVwcy5CblxuICBsZXQgQnIgPSBkZXBzLkJyXG4gIGxldCBCdyA9IGRlcHMuQndcbiAgbGV0IEVjZHNhID0gZGVwcy5FY2RzYVxuICBsZXQgSGFzaCA9IGRlcHMuSGFzaFxuICBsZXQgU2NyaXB0ID0gZGVwcy5TY3JpcHRcbiAgbGV0IFNpZyA9IGRlcHMuU2lnXG4gIGxldCBTdHJ1Y3QgPSBkZXBzLlN0cnVjdFxuICBsZXQgVHhJbiA9IGRlcHMuVHhJblxuICBsZXQgVHhPdXQgPSBkZXBzLlR4T3V0XG4gIGxldCBWYXJJbnQgPSBkZXBzLlZhckludFxuICBsZXQgV29ya2VycyA9IGRlcHMuV29ya2Vyc1xuICBsZXQgYXNpbmsgPSBkZXBzLmFzaW5rXG5cbiAgY2xhc3MgVHggZXh0ZW5kcyBTdHJ1Y3Qge1xuICAgIGNvbnN0cnVjdG9yICh2ZXJzaW9uQnl0ZXNOdW0gPSAxLCB0eEluc1ZpID0gVmFySW50LmZyb21OdW1iZXIoMCksIHR4SW5zID0gW10sIHR4T3V0c1ZpID0gVmFySW50LmZyb21OdW1iZXIoMCksIHR4T3V0cyA9IFtdLCBuTG9ja1RpbWUgPSAwKSB7XG4gICAgICBzdXBlcih7dmVyc2lvbkJ5dGVzTnVtLCB0eEluc1ZpLCB0eElucywgdHhPdXRzVmksIHR4T3V0cywgbkxvY2tUaW1lfSlcbiAgICB9XG5cbiAgICBmcm9tSlNPTiAoanNvbikge1xuICAgICAgbGV0IHR4SW5zID0gW11cbiAgICAgIGpzb24udHhJbnMuZm9yRWFjaChmdW5jdGlvbiAodHhJbikge1xuICAgICAgICB0eElucy5wdXNoKG5ldyBUeEluKCkuZnJvbUpTT04odHhJbikpXG4gICAgICB9KVxuICAgICAgbGV0IHR4T3V0cyA9IFtdXG4gICAgICBqc29uLnR4T3V0cy5mb3JFYWNoKGZ1bmN0aW9uICh0eE91dCkge1xuICAgICAgICB0eE91dHMucHVzaChuZXcgVHhPdXQoKS5mcm9tSlNPTih0eE91dCkpXG4gICAgICB9KVxuICAgICAgdGhpcy5mcm9tT2JqZWN0KHtcbiAgICAgICAgdmVyc2lvbkJ5dGVzTnVtOiBqc29uLnZlcnNpb25CeXRlc051bSxcbiAgICAgICAgdHhJbnNWaTogbmV3IFZhckludCgpLmZyb21KU09OKGpzb24udHhJbnNWaSksXG4gICAgICAgIHR4SW5zOiB0eElucyxcbiAgICAgICAgdHhPdXRzVmk6IG5ldyBWYXJJbnQoKS5mcm9tSlNPTihqc29uLnR4T3V0c1ZpKSxcbiAgICAgICAgdHhPdXRzOiB0eE91dHMsXG4gICAgICAgIG5Mb2NrVGltZToganNvbi5uTG9ja1RpbWVcbiAgICAgIH0pXG4gICAgICByZXR1cm4gdGhpc1xuICAgIH1cblxuICAgIHRvSlNPTiAoKSB7XG4gICAgICBsZXQgdHhJbnMgPSBbXVxuICAgICAgdGhpcy50eElucy5mb3JFYWNoKGZ1bmN0aW9uICh0eEluKSB7XG4gICAgICAgIHR4SW5zLnB1c2godHhJbi50b0pTT04oKSlcbiAgICAgIH0pXG4gICAgICBsZXQgdHhPdXRzID0gW11cbiAgICAgIHRoaXMudHhPdXRzLmZvckVhY2goZnVuY3Rpb24gKHR4T3V0KSB7XG4gICAgICAgIHR4T3V0cy5wdXNoKHR4T3V0LnRvSlNPTigpKVxuICAgICAgfSlcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHZlcnNpb25CeXRlc051bTogdGhpcy52ZXJzaW9uQnl0ZXNOdW0sXG4gICAgICAgIHR4SW5zVmk6IHRoaXMudHhJbnNWaS50b0pTT04oKSxcbiAgICAgICAgdHhJbnM6IHR4SW5zLFxuICAgICAgICB0eE91dHNWaTogdGhpcy50eE91dHNWaS50b0pTT04oKSxcbiAgICAgICAgdHhPdXRzOiB0eE91dHMsXG4gICAgICAgIG5Mb2NrVGltZTogdGhpcy5uTG9ja1RpbWVcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmcm9tQnIgKGJyKSB7XG4gICAgICB0aGlzLnZlcnNpb25CeXRlc051bSA9IGJyLnJlYWRVSW50MzJMRSgpXG4gICAgICB0aGlzLnR4SW5zVmkgPSBuZXcgVmFySW50KGJyLnJlYWRWYXJJbnRCdWYoKSlcbiAgICAgIGxldCB0eEluc051bSA9IHRoaXMudHhJbnNWaS50b051bWJlcigpXG4gICAgICB0aGlzLnR4SW5zID0gW11cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdHhJbnNOdW07IGkrKykge1xuICAgICAgICB0aGlzLnR4SW5zLnB1c2gobmV3IFR4SW4oKS5mcm9tQnIoYnIpKVxuICAgICAgfVxuICAgICAgdGhpcy50eE91dHNWaSA9IG5ldyBWYXJJbnQoYnIucmVhZFZhckludEJ1ZigpKVxuICAgICAgbGV0IHR4T3V0c051bSA9IHRoaXMudHhPdXRzVmkudG9OdW1iZXIoKVxuICAgICAgdGhpcy50eE91dHMgPSBbXVxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0eE91dHNOdW07IGkrKykge1xuICAgICAgICB0aGlzLnR4T3V0cy5wdXNoKG5ldyBUeE91dCgpLmZyb21CcihicikpXG4gICAgICB9XG4gICAgICB0aGlzLm5Mb2NrVGltZSA9IGJyLnJlYWRVSW50MzJMRSgpXG4gICAgICByZXR1cm4gdGhpc1xuICAgIH1cblxuICAgIHRvQncgKGJ3KSB7XG4gICAgICBpZiAoIWJ3KSB7XG4gICAgICAgIGJ3ID0gbmV3IEJ3KClcbiAgICAgIH1cbiAgICAgIGJ3LndyaXRlVUludDMyTEUodGhpcy52ZXJzaW9uQnl0ZXNOdW0pXG4gICAgICBidy53cml0ZSh0aGlzLnR4SW5zVmkuYnVmKVxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnR4SW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMudHhJbnNbaV0udG9CdyhidylcbiAgICAgIH1cbiAgICAgIGJ3LndyaXRlKHRoaXMudHhPdXRzVmkuYnVmKVxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnR4T3V0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICB0aGlzLnR4T3V0c1tpXS50b0J3KGJ3KVxuICAgICAgfVxuICAgICAgYncud3JpdGVVSW50MzJMRSh0aGlzLm5Mb2NrVGltZSlcbiAgICAgIHJldHVybiBid1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZvciBhIG5vcm1hbCB0cmFuc2FjdGlvbiwgc3ViU2NyaXB0IGlzIHVzdWFsbHkgdGhlIHNjcmlwdFB1YktleS4gRm9yIGFcbiAgICAgKiBwMnNoIHRyYW5zYWN0aW9uLCBzdWJTY3JpcHQgaXMgdXN1YWxseSB0aGUgcmVkZWVtU2NyaXB0LiBJZiB5b3UncmUgbm90XG4gICAgICogbm9ybWFsIGJlY2F1c2UgeW91J3JlIHVzaW5nIE9QX0NPREVTRVBBUkFUT1JzLCB5b3Uga25vdyB3aGF0IHRvIGRvLlxuICAgICAqL1xuICAgIHNpZ2hhc2ggKG5IYXNoVHlwZSwgbkluLCBzdWJTY3JpcHQpIHtcbiAgICAgIGxldCB0eGNvcHkgPSB0aGlzLmNsb25lQnlCdWZmZXIoKVxuXG4gICAgICBzdWJTY3JpcHQgPSBuZXcgU2NyaXB0KCkuZnJvbUJ1ZmZlcihzdWJTY3JpcHQudG9CdWZmZXIoKSlcbiAgICAgIHN1YlNjcmlwdC5yZW1vdmVDb2Rlc2VwYXJhdG9ycygpXG5cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdHhjb3B5LnR4SW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHR4Y29weS50eEluc1tpXSA9IFR4SW4uZnJvbUJ1ZmZlcih0eGNvcHkudHhJbnNbaV0udG9CdWZmZXIoKSkuc2V0U2NyaXB0KG5ldyBTY3JpcHQoKSlcbiAgICAgIH1cblxuICAgICAgdHhjb3B5LnR4SW5zW25Jbl0gPSBUeEluLmZyb21CdWZmZXIodHhjb3B5LnR4SW5zW25Jbl0udG9CdWZmZXIoKSkuc2V0U2NyaXB0KHN1YlNjcmlwdClcblxuICAgICAgaWYgKChuSGFzaFR5cGUgJiAzMSkgPT09IFNpZy5TSUdIQVNIX05PTkUpIHtcbiAgICAgICAgdHhjb3B5LnR4T3V0cy5sZW5ndGggPSAwXG4gICAgICAgIHR4Y29weS50eE91dHNWaSA9IFZhckludC5mcm9tTnVtYmVyKDApXG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0eGNvcHkudHhJbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpZiAoaSAhPT0gbkluKSB7XG4gICAgICAgICAgICB0eGNvcHkudHhJbnNbaV0ublNlcXVlbmNlID0gMFxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICgobkhhc2hUeXBlICYgMzEpID09PSBTaWcuU0lHSEFTSF9TSU5HTEUpIHtcbiAgICAgICAgLy8gVGhlIFNJR0hBU0hfU0lOR0xFIGJ1Zy5cbiAgICAgICAgLy8gaHR0cHM6Ly9iaXRjb2ludGFsay5vcmcvaW5kZXgucGhwP3RvcGljPTI2MDU5NS4wXG4gICAgICAgIGlmIChuSW4gPiB0eGNvcHkudHhPdXRzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICByZXR1cm4gbmV3IEJ1ZmZlcignMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMScsICdoZXgnKVxuICAgICAgICB9XG5cbiAgICAgICAgdHhjb3B5LnR4T3V0cy5sZW5ndGggPSBuSW4gKyAxXG4gICAgICAgIHR4Y29weS50eE91dHNWaSA9IFZhckludC5mcm9tTnVtYmVyKG5JbiArIDEpXG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0eGNvcHkudHhPdXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgaWYgKGkgPCBuSW4pIHtcbiAgICAgICAgICAgIHR4Y29weS50eE91dHNbaV0gPSBUeE91dC5mcm9tUHJvcGVydGllcyhuZXcgQm4oKS5mcm9tQnVmZmVyKG5ldyBCdWZmZXIoJ2ZmZmZmZmZmZmZmZmZmZmYnLCAnaGV4JykpLCBuZXcgU2NyaXB0KCkpXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0eGNvcHkudHhJbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpZiAoaSAhPT0gbkluKSB7XG4gICAgICAgICAgICB0eGNvcHkudHhJbnNbaV0ublNlcXVlbmNlID0gMFxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gZWxzZSwgU0lHSEFTSF9BTExcblxuICAgICAgaWYgKG5IYXNoVHlwZSAmIFNpZy5TSUdIQVNIX0FOWU9ORUNBTlBBWSkge1xuICAgICAgICB0eGNvcHkudHhJbnNbMF0gPSB0eGNvcHkudHhJbnNbbkluXVxuICAgICAgICB0eGNvcHkudHhJbnMubGVuZ3RoID0gMVxuICAgICAgICB0eGNvcHkudHhJbnNWaSA9IFZhckludC5mcm9tTnVtYmVyKDEpXG4gICAgICB9XG5cbiAgICAgIGxldCBidWYgPSBuZXcgQncoKS53cml0ZSh0eGNvcHkudG9CdWZmZXIoKSkud3JpdGVJbnQzMkxFKG5IYXNoVHlwZSkudG9CdWZmZXIoKVxuICAgICAgcmV0dXJuIG5ldyBCcihIYXNoLnNoYTI1NlNoYTI1NihidWYpKS5yZWFkUmV2ZXJzZSgpXG4gICAgfVxuXG4gICAgYXN5bmNTaWdoYXNoIChuSGFzaFR5cGUsIG5Jbiwgc3ViU2NyaXB0KSB7XG4gICAgICByZXR1cm4gYXNpbmsoZnVuY3Rpb24gKiAoKSB7XG4gICAgICAgIGxldCB3b3JrZXJzUmVzdWx0ID0geWllbGQgV29ya2Vycy5hc3luY09iamVjdE1ldGhvZCh0aGlzLCAnc2lnaGFzaCcsIFtuSGFzaFR5cGUsIG5Jbiwgc3ViU2NyaXB0XSlcbiAgICAgICAgcmV0dXJuIHdvcmtlcnNSZXN1bHQucmVzYnVmXG4gICAgICB9LCB0aGlzKVxuICAgIH1cblxuICAgIC8vIFRoaXMgZnVuY3Rpb24gcmV0dXJucyBhIHNpZ25hdHVyZSBidXQgZG9lcyBub3QgdXBkYXRlIGFueSBpbnB1dHNcbiAgICBzaWduIChrZXlQYWlyLCBuSGFzaFR5cGUsIG5Jbiwgc3ViU2NyaXB0KSB7XG4gICAgICBsZXQgaGFzaEJ1ZiA9IHRoaXMuc2lnaGFzaChuSGFzaFR5cGUsIG5Jbiwgc3ViU2NyaXB0KVxuICAgICAgbGV0IHNpZyA9IEVjZHNhLnNpZ24oaGFzaEJ1Ziwga2V5UGFpciwgJ2xpdHRsZScpLmZyb21PYmplY3Qoe25IYXNoVHlwZTogbkhhc2hUeXBlfSlcbiAgICAgIHJldHVybiBzaWdcbiAgICB9XG5cbiAgICBhc3luY1NpZ24gKGtleVBhaXIsIG5IYXNoVHlwZSwgbkluLCBzdWJTY3JpcHQpIHtcbiAgICAgIHJldHVybiBhc2luayhmdW5jdGlvbiAqICgpIHtcbiAgICAgICAgbGV0IHdvcmtlcnNSZXN1bHQgPSB5aWVsZCBXb3JrZXJzLmFzeW5jT2JqZWN0TWV0aG9kKHRoaXMsICdzaWduJywgW2tleVBhaXIsIG5IYXNoVHlwZSwgbkluLCBzdWJTY3JpcHRdKVxuICAgICAgICByZXR1cm4gbmV3IFNpZygpLmZyb21GYXN0QnVmZmVyKHdvcmtlcnNSZXN1bHQucmVzYnVmKVxuICAgICAgfSwgdGhpcylcbiAgICB9XG5cbiAgICAvLyBUaGlzIGZ1bmN0aW9uIHRha2VzIGEgc2lnbmF0dXJlIGFzIGlucHV0IGFuZCBkb2VzIG5vdCBwYXJzZSBhbnkgaW5wdXRzXG4gICAgdmVyaWZ5IChzaWcsIHB1YktleSwgbkluLCBzdWJTY3JpcHQpIHtcbiAgICAgIGxldCBoYXNoQnVmID0gdGhpcy5zaWdoYXNoKHNpZy5uSGFzaFR5cGUsIG5Jbiwgc3ViU2NyaXB0KVxuICAgICAgcmV0dXJuIEVjZHNhLnZlcmlmeShoYXNoQnVmLCBzaWcsIHB1YktleSwgJ2xpdHRsZScpXG4gICAgfVxuXG4gICAgYXN5bmNWZXJpZnkgKHNpZywgcHViS2V5LCBuSW4sIHN1YlNjcmlwdCkge1xuICAgICAgcmV0dXJuIGFzaW5rKGZ1bmN0aW9uICogKCkge1xuICAgICAgICBsZXQgd29ya2Vyc1Jlc3VsdCA9IHlpZWxkIFdvcmtlcnMuYXN5bmNPYmplY3RNZXRob2QodGhpcywgJ3ZlcmlmeScsIFtzaWcsIHB1YktleSwgbkluLCBzdWJTY3JpcHRdKVxuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZSh3b3JrZXJzUmVzdWx0LnJlc2J1Zi50b1N0cmluZygpKVxuICAgICAgfSwgdGhpcylcbiAgICB9XG5cbiAgICBoYXNoICgpIHtcbiAgICAgIHJldHVybiBIYXNoLnNoYTI1NlNoYTI1Nih0aGlzLnRvQnVmZmVyKCkpXG4gICAgfVxuXG4gICAgYXN5bmNIYXNoICgpIHtcbiAgICAgIHJldHVybiBhc2luayhmdW5jdGlvbiAqICgpIHtcbiAgICAgICAgbGV0IHdvcmtlcnNSZXN1bHQgPSB5aWVsZCBXb3JrZXJzLmFzeW5jT2JqZWN0TWV0aG9kKHRoaXMsICdoYXNoJywgW10pXG4gICAgICAgIHJldHVybiB3b3JrZXJzUmVzdWx0LnJlc2J1ZlxuICAgICAgfSwgdGhpcylcbiAgICB9XG5cbiAgICBpZCAoKSB7XG4gICAgICByZXR1cm4gbmV3IEJyKHRoaXMuaGFzaCgpKS5yZWFkUmV2ZXJzZSgpXG4gICAgfVxuXG4gICAgYXN5bmNJZCAoKSB7XG4gICAgICByZXR1cm4gYXNpbmsoZnVuY3Rpb24gKiAoKSB7XG4gICAgICAgIGxldCB3b3JrZXJzUmVzdWx0ID0geWllbGQgV29ya2Vycy5hc3luY09iamVjdE1ldGhvZCh0aGlzLCAnaWQnLCBbXSlcbiAgICAgICAgcmV0dXJuIHdvcmtlcnNSZXN1bHQucmVzYnVmXG4gICAgICB9LCB0aGlzKVxuICAgIH1cblxuICAgIGFkZFR4SW4gKHR4SGFzaEJ1ZiwgdHhPdXROdW0sIHNjcmlwdCwgblNlcXVlbmNlKSB7XG4gICAgICBsZXQgdHhJblxuICAgICAgaWYgKHR4SGFzaEJ1ZiBpbnN0YW5jZW9mIFR4SW4pIHtcbiAgICAgICAgdHhJbiA9IHR4SGFzaEJ1ZlxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdHhJbiA9IG5ldyBUeEluKCkuZnJvbU9iamVjdCh7dHhIYXNoQnVmLCB0eE91dE51bSwgblNlcXVlbmNlfSkuc2V0U2NyaXB0KHNjcmlwdClcbiAgICAgIH1cbiAgICAgIHRoaXMudHhJbnMucHVzaCh0eEluKVxuICAgICAgdGhpcy50eEluc1ZpID0gVmFySW50LmZyb21OdW1iZXIodGhpcy50eEluc1ZpLnRvTnVtYmVyKCkgKyAxKVxuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG5cbiAgICBhZGRUeE91dCAodmFsdWVCbiwgc2NyaXB0KSB7XG4gICAgICBsZXQgdHhPdXRcbiAgICAgIGlmICh2YWx1ZUJuIGluc3RhbmNlb2YgVHhPdXQpIHtcbiAgICAgICAgdHhPdXQgPSB2YWx1ZUJuXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0eE91dCA9IG5ldyBUeE91dCgpLmZyb21PYmplY3Qoe3ZhbHVlQm59KS5zZXRTY3JpcHQoc2NyaXB0KVxuICAgICAgfVxuICAgICAgdGhpcy50eE91dHMucHVzaCh0eE91dClcbiAgICAgIHRoaXMudHhPdXRzVmkgPSBWYXJJbnQuZnJvbU51bWJlcih0aGlzLnR4T3V0c1ZpLnRvTnVtYmVyKCkgKyAxKVxuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBbmFsYWdvdXMgdG8gYml0Y29pbmQncyBJc0NvaW5CYXNlIGZ1bmN0aW9uIGluIHRyYW5zYWN0aW9uLmhcbiAgICAgKi9cbiAgICBpc0NvaW5iYXNlICgpIHtcbiAgICAgIHJldHVybiAodGhpcy50eElucy5sZW5ndGggPT09IDEgJiYgdGhpcy50eEluc1swXS5oYXNOdWxsSW5wdXQoKSlcbiAgICB9XG4gIH1cblxuICBUeC5NQVhfTU9ORVkgPSAyMTAwMDAwMCAqIDFlOFxuXG4gIHJldHVybiBUeFxufVxuXG5pbmplY3QgPSByZXF1aXJlKCdpbmplY3RlcicpKGluamVjdCwgZGVwZW5kZW5jaWVzKVxubGV0IFR4ID0gaW5qZWN0KClcbm1vZHVsZS5leHBvcnRzID0gVHhcbiIsIi8qKlxuICogVmFySW50IChhLmsuYS4gQ29tcGFjdCBTaXplKVxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICpcbiAqIEEgdmFySW50IGlzIGEgdmFyaWJsZSBzaXplZCBpbnRlZ2VyLCBhbmQgaXQgaXMgYSBmb3JtYXQgdGhhdCBpcyB1bmlxdWUgdG9cbiAqIGJpdGNvaW4sIGFuZCB1c2VkIHRocm91Z2hvdXQgYml0Y29pbiB0byByZXByZXNlbnQgdGhlIGxlbmd0aCBvZiBiaW5hcnkgZGF0YVxuICogaW4gYSBjb21wYWN0IGZvcm1hdCB0aGF0IGNhbiB0YWtlIHVwIGFzIGxpdHRsZSBhcyAxIGJ5dGUgb3IgYXMgbXVjaCBhcyA5XG4gKiBieXRlcy5cbiAqL1xuJ3VzZSBzdHJpY3QnXG5sZXQgZGVwZW5kZW5jaWVzID0ge1xuICBCcjogcmVxdWlyZSgnLi9icicpLFxuICBCdzogcmVxdWlyZSgnLi9idycpLFxuICBTdHJ1Y3Q6IHJlcXVpcmUoJy4vc3RydWN0Jylcbn1cblxubGV0IGluamVjdCA9IGZ1bmN0aW9uIChkZXBzKSB7XG4gIGxldCBCciA9IGRlcHMuQnJcbiAgbGV0IEJ3ID0gZGVwcy5Cd1xuICBsZXQgU3RydWN0ID0gZGVwcy5TdHJ1Y3RcblxuICBjbGFzcyBWYXJJbnQgZXh0ZW5kcyBTdHJ1Y3Qge1xuICAgIGNvbnN0cnVjdG9yIChidWYpIHtcbiAgICAgIHN1cGVyKHtidWZ9KVxuICAgIH1cblxuICAgIGZyb21KU09OIChqc29uKSB7XG4gICAgICB0aGlzLmZyb21PYmplY3Qoe1xuICAgICAgICBidWY6IG5ldyBCdWZmZXIoanNvbiwgJ2hleCcpXG4gICAgICB9KVxuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG5cbiAgICB0b0pTT04gKCkge1xuICAgICAgcmV0dXJuIHRoaXMuYnVmLnRvU3RyaW5nKCdoZXgnKVxuICAgIH1cblxuICAgIGZyb21CdWZmZXIgKGJ1Zikge1xuICAgICAgdGhpcy5idWYgPSBidWZcbiAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuXG4gICAgZnJvbUJyIChicikge1xuICAgICAgdGhpcy5idWYgPSBici5yZWFkVmFySW50QnVmKClcbiAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuXG4gICAgZnJvbUJuIChibikge1xuICAgICAgdGhpcy5idWYgPSBuZXcgQncoKS53cml0ZVZhckludEJuKGJuKS50b0J1ZmZlcigpXG4gICAgICByZXR1cm4gdGhpc1xuICAgIH1cblxuICAgIHN0YXRpYyBmcm9tQm4gKGJuKSB7XG4gICAgICByZXR1cm4gbmV3IHRoaXMoKS5mcm9tQm4oYm4pXG4gICAgfVxuXG4gICAgZnJvbU51bWJlciAobnVtKSB7XG4gICAgICB0aGlzLmJ1ZiA9IG5ldyBCdygpLndyaXRlVmFySW50TnVtKG51bSkudG9CdWZmZXIoKVxuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG5cbiAgICBzdGF0aWMgZnJvbU51bWJlciAobnVtKSB7XG4gICAgICByZXR1cm4gbmV3IHRoaXMoKS5mcm9tTnVtYmVyKG51bSlcbiAgICB9XG5cbiAgICB0b0J1ZmZlciAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5idWZcbiAgICB9XG5cbiAgICB0b0JuICgpIHtcbiAgICAgIHJldHVybiBuZXcgQnIodGhpcy5idWYpLnJlYWRWYXJJbnRCbigpXG4gICAgfVxuXG4gICAgdG9OdW1iZXIgKCkge1xuICAgICAgcmV0dXJuIG5ldyBCcih0aGlzLmJ1ZikucmVhZFZhckludE51bSgpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIFZhckludFxufVxuXG5pbmplY3QgPSByZXF1aXJlKCdpbmplY3RlcicpKGluamVjdCwgZGVwZW5kZW5jaWVzKVxubGV0IFZhckludCA9IGluamVjdCgpXG5tb2R1bGUuZXhwb3J0cyA9IFZhckludFxuIiwiLyoqXG4gKiBXb3JrZXJzQ21kXG4gKiA9PT09PT09PT09XG4gKlxuICogQSBjb21tYW5kIHNlbnQgdG8gYSB3b3JrZXIuIFRoZSBpZGVhIGlzIHRoYXQgeW91IHNlbmQgdGhlIHdvcmtlciBhIG9iamVjdCxcbiAqIGFuZCBhIG1ldGhvZCB0byBwZXJmb3JtIG9uIHRoYXQgb2JqZWN0LCBhbmQgdGhlIGFyZ3VtZW50cyB0byB0aGF0IG1ldGhvZCxcbiAqIGFsbCBjb250YWluZWQgaW5zaWRlIGEgV29ya2Vyc0NtZCBvYmplY3QuIFRoZSB3b3JrZXIgd2lsbCBzZW5kIGJhY2sgYVxuICogcmVzdWx0LCB3aGljaCBpcyBhIFdvcmtlcnNSZXN1bHQgb2JqZWN0LlxuICovXG4ndXNlIHN0cmljdCdcbmxldCBkZXBlbmRlbmNpZXMgPSB7XG4gIEJ3OiByZXF1aXJlKCcuL2J3JyksXG4gIFN0cnVjdDogcmVxdWlyZSgnLi9zdHJ1Y3QnKVxufVxuXG5sZXQgaW5qZWN0ID0gZnVuY3Rpb24gKGRlcHMpIHtcbiAgbGV0IEJ3ID0gZGVwcy5Cd1xuICBsZXQgU3RydWN0ID0gZGVwcy5TdHJ1Y3RcblxuICBjbGFzcyBXb3JrZXJzQ21kIGV4dGVuZHMgU3RydWN0IHtcbiAgICBjb25zdHJ1Y3RvciAob2JqYnVmLCBjbGFzc25hbWUsIG1ldGhvZG5hbWUsIGFyZ3MsIGlkKSB7XG4gICAgICBzdXBlcih7b2JqYnVmLCBjbGFzc25hbWUsIG1ldGhvZG5hbWUsIGFyZ3MsIGlkfSlcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYXJndW1lbnRzIHRvIGEgd29ya2VycyBjb21tYW5kIGNhbiBiZSBub3JtYWwgamF2YXNjcmlwdCBvYmplY3RzLFxuICAgICAqIGJ1ZmZlcnMsIG9yIFlvdXJzIEJpdGNvaW4gb2JqZWN0cy5cbiAgICAgKi9cbiAgICBzdGF0aWMgYXJnc1RvQncgKGJ3LCBhcmdzKSB7XG4gICAgICBidy53cml0ZVZhckludE51bShhcmdzLmxlbmd0aClcbiAgICAgIGZvciAobGV0IGluZGV4IGluIGFyZ3MpIHtcbiAgICAgICAgbGV0IGFyZyA9IGFyZ3NbaW5kZXhdXG4gICAgICAgIGlmIChCdWZmZXIuaXNCdWZmZXIoYXJnKSkge1xuICAgICAgICAgIC8vIGFyZ3VtZW50IGlzIEJ1ZmZlclxuICAgICAgICAgIGJ3LndyaXRlVUludDgoMCkgLy8gaGVhZGVyIGJ5dGVcbiAgICAgICAgICBidy53cml0ZVZhckludE51bShhcmcubGVuZ3RoKVxuICAgICAgICAgIGJ3LndyaXRlKGFyZylcbiAgICAgICAgfSBlbHNlIGlmIChhcmcgaW5zdGFuY2VvZiBTdHJ1Y3QpIHtcbiAgICAgICAgICAvLyBhcmd1bWVudCBpcyBZb3VycyBCaXRjb2luIG9iamVjdFxuICAgICAgICAgIGJ3LndyaXRlVUludDgoMSkgLy8gaGVhZGVyIGJ5dGVcbiAgICAgICAgICBsZXQgY2xhc3NuYW1lID0gYXJnLmNvbnN0cnVjdG9yLm5hbWVcbiAgICAgICAgICBidy53cml0ZVZhckludE51bShjbGFzc25hbWUubGVuZ3RoKVxuICAgICAgICAgIGJ3LndyaXRlKG5ldyBCdWZmZXIoY2xhc3NuYW1lKSlcbiAgICAgICAgICBsZXQgYnVmID0gYXJnLnRvRmFzdEJ1ZmZlcigpXG4gICAgICAgICAgYncud3JpdGVWYXJJbnROdW0oYnVmLmxlbmd0aClcbiAgICAgICAgICBidy53cml0ZShidWYpXG4gICAgICAgIH0gZWxzZSBpZiAoYXJnID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBidy53cml0ZVVJbnQ4KDIpIC8vIGhlYWRlciBieXRlXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gYXNzdW1lIGJhc2ljIGphdmFzY3JpcHQgdHlwZVxuICAgICAgICAgIGJ3LndyaXRlVUludDgoMykgLy8gaGVhZGVyIGJ5dGVcbiAgICAgICAgICBsZXQgYnVmID0gbmV3IEJ1ZmZlcihKU09OLnN0cmluZ2lmeShhcmcpKVxuICAgICAgICAgIGJ3LndyaXRlVmFySW50TnVtKGJ1Zi5sZW5ndGgpXG4gICAgICAgICAgYncud3JpdGUoYnVmKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gYndcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYXJndW1lbnRzIHRvIGEgd29ya2VycyBjb21tYW5kIGNhbiBiZSBub3JtYWwgamF2YXNjcmlwdCBvYmplY3RzLFxuICAgICAqIGJ1ZmZlcnMsIG9yIFlvdXJzIEJpdGNvaW4gb2JqZWN0cy5cbiAgICAgKi9cbiAgICBzdGF0aWMgYXJnc0Zyb21CciAoYnIsIGNsYXNzZXMpIHtcbiAgICAgIGxldCBhcmdzbGVuID0gYnIucmVhZFZhckludE51bSgpXG4gICAgICBsZXQgYXJncyA9IFtdXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFyZ3NsZW47IGkrKykge1xuICAgICAgICBsZXQgaGVhZGVyID0gYnIucmVhZFVJbnQ4KClcbiAgICAgICAgaWYgKGhlYWRlciA9PT0gMCkge1xuICAgICAgICAgIC8vIGFyZ3VtZW50IGlzIEJ1ZmZlclxuICAgICAgICAgIGxldCBsZW4gPSBici5yZWFkVmFySW50TnVtKClcbiAgICAgICAgICBsZXQgYnVmID0gYnIucmVhZChsZW4pXG4gICAgICAgICAgYXJncy5wdXNoKGJ1ZilcbiAgICAgICAgfSBlbHNlIGlmIChoZWFkZXIgPT09IDEpIHtcbiAgICAgICAgICAvLyBhcmd1bWVudCBpcyBZb3VycyBCaXRjb2luIG9iamVjdFxuICAgICAgICAgIGxldCBjbGFzc05hbWVMRW4gPSBici5yZWFkVmFySW50TnVtKClcbiAgICAgICAgICBsZXQgY2xhc3NuYW1lID0gYnIucmVhZChjbGFzc05hbWVMRW4pLnRvU3RyaW5nKClcbiAgICAgICAgICBsZXQgYnVmbGVuID0gYnIucmVhZFZhckludE51bSgpXG4gICAgICAgICAgbGV0IGJ1ZiA9IGJyLnJlYWQoYnVmbGVuKVxuICAgICAgICAgIGxldCBvYmogPSBuZXcgY2xhc3Nlc1tjbGFzc25hbWVdKCkuZnJvbUZhc3RCdWZmZXIoYnVmKVxuICAgICAgICAgIGFyZ3MucHVzaChvYmopXG4gICAgICAgIH0gZWxzZSBpZiAoaGVhZGVyID09PSAyKSB7XG4gICAgICAgICAgYXJncy5wdXNoKHVuZGVmaW5lZClcbiAgICAgICAgfSBlbHNlIGlmIChoZWFkZXIgPT09IDMpIHtcbiAgICAgICAgICAvLyBhcmd1bWVudCBpcyBiYXNpYyBqYXZhc2NyaXB0IHR5cGVcbiAgICAgICAgICBsZXQgbGVuID0gYnIucmVhZFZhckludE51bSgpXG4gICAgICAgICAgbGV0IGJ1ZiA9IGJyLnJlYWQobGVuKVxuICAgICAgICAgIGxldCBvYmogPSBKU09OLnBhcnNlKGJ1Zi50b1N0cmluZygpKVxuICAgICAgICAgIGFyZ3MucHVzaChvYmopXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIGhlYWRlciBieXRlIGZvciBhcmd1bWVudCcpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBhcmdzXG4gICAgfVxuXG4gICAgdG9CdyAoYncpIHtcbiAgICAgIGlmICghYncpIHtcbiAgICAgICAgYncgPSBuZXcgQncoKVxuICAgICAgfVxuICAgICAgbGV0IGNsYXNzTmFtZUJ1ZiA9IG5ldyBCdWZmZXIodGhpcy5jbGFzc25hbWUpXG4gICAgICBidy53cml0ZVVJbnQ4KE51bWJlcih0aGlzLmlzb2JqKSlcbiAgICAgIGJ3LndyaXRlVmFySW50TnVtKGNsYXNzTmFtZUJ1Zi5sZW5ndGgpXG4gICAgICBidy53cml0ZShjbGFzc05hbWVCdWYpXG4gICAgICBsZXQgbWV0aG9kTmFtZUJ1ZiA9IG5ldyBCdWZmZXIodGhpcy5tZXRob2RuYW1lKVxuICAgICAgYncud3JpdGVWYXJJbnROdW0obWV0aG9kTmFtZUJ1Zi5sZW5ndGgpXG4gICAgICBidy53cml0ZShtZXRob2ROYW1lQnVmKVxuICAgICAgYncud3JpdGVWYXJJbnROdW0odGhpcy5vYmpidWYubGVuZ3RoKVxuICAgICAgYncud3JpdGUodGhpcy5vYmpidWYpXG4gICAgICBXb3JrZXJzQ21kLmFyZ3NUb0J3KGJ3LCB0aGlzLmFyZ3MpXG4gICAgICBidy53cml0ZVZhckludE51bSh0aGlzLmlkKVxuICAgICAgcmV0dXJuIGJ3XG4gICAgfVxuXG4gICAgZnJvbUJyIChiciwgY2xhc3Nlcykge1xuICAgICAgdGhpcy5pc29iaiA9IEJvb2xlYW4oYnIucmVhZFVJbnQ4KCkpXG4gICAgICBsZXQgY2xhc3NOYW1lTEVuID0gYnIucmVhZFZhckludE51bSgpXG4gICAgICB0aGlzLmNsYXNzbmFtZSA9IGJyLnJlYWQoY2xhc3NOYW1lTEVuKS50b1N0cmluZygpXG4gICAgICBsZXQgbWV0aG9kTmFtZUxFbiA9IGJyLnJlYWRWYXJJbnROdW0oKVxuICAgICAgdGhpcy5tZXRob2RuYW1lID0gYnIucmVhZChtZXRob2ROYW1lTEVuKS50b1N0cmluZygpXG4gICAgICBsZXQgb2JqYnVmbGVuID0gYnIucmVhZFZhckludE51bSgpXG4gICAgICB0aGlzLm9iamJ1ZiA9IGJyLnJlYWQob2JqYnVmbGVuKVxuICAgICAgdGhpcy5hcmdzID0gV29ya2Vyc0NtZC5hcmdzRnJvbUJyKGJyLCBjbGFzc2VzKVxuICAgICAgdGhpcy5pZCA9IGJyLnJlYWRWYXJJbnROdW0oKVxuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG5cbiAgICBmcm9tT2JqZWN0TWV0aG9kIChvYmosIG1ldGhvZG5hbWUsIGFyZ3MsIGlkKSB7XG4gICAgICB0aGlzLmlzb2JqID0gdHJ1ZVxuICAgICAgdGhpcy5vYmpidWYgPSBvYmoudG9GYXN0QnVmZmVyKClcbiAgICAgIHRoaXMuY2xhc3NuYW1lID0gb2JqLmNvbnN0cnVjdG9yLm5hbWVcbiAgICAgIHRoaXMubWV0aG9kbmFtZSA9IG1ldGhvZG5hbWVcbiAgICAgIHRoaXMuYXJncyA9IGFyZ3NcbiAgICAgIHRoaXMuaWQgPSBpZFxuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG5cbiAgICBzdGF0aWMgZnJvbU9iamVjdE1ldGhvZCAob2JqLCBtZXRob2RuYW1lLCBhcmdzLCBpZCkge1xuICAgICAgcmV0dXJuIG5ldyB0aGlzKCkuZnJvbU9iamVjdE1ldGhvZChvYmosIG1ldGhvZG5hbWUsIGFyZ3MsIGlkKVxuICAgIH1cblxuICAgIGZyb21DbGFzc01ldGhvZCAoY2xhc3NuYW1lLCBtZXRob2RuYW1lLCBhcmdzLCBpZCkge1xuICAgICAgdGhpcy5pc29iaiA9IGZhbHNlXG4gICAgICB0aGlzLm9iamJ1ZiA9IG5ldyBCdWZmZXIoMClcbiAgICAgIHRoaXMuY2xhc3NuYW1lID0gY2xhc3NuYW1lXG4gICAgICB0aGlzLm1ldGhvZG5hbWUgPSBtZXRob2RuYW1lXG4gICAgICB0aGlzLmFyZ3MgPSBhcmdzXG4gICAgICB0aGlzLmlkID0gaWRcbiAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuXG4gICAgc3RhdGljIGZyb21DbGFzc01ldGhvZCAoY2xhc3NuYW1lLCBtZXRob2RuYW1lLCBhcmdzLCBpZCkge1xuICAgICAgcmV0dXJuIG5ldyB0aGlzKCkuZnJvbUNsYXNzTWV0aG9kKGNsYXNzbmFtZSwgbWV0aG9kbmFtZSwgYXJncywgaWQpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIFdvcmtlcnNDbWRcbn1cblxuaW5qZWN0ID0gcmVxdWlyZSgnaW5qZWN0ZXInKShpbmplY3QsIGRlcGVuZGVuY2llcylcbmxldCBXb3JrZXJzQ21kID0gaW5qZWN0KClcbm1vZHVsZS5leHBvcnRzID0gV29ya2Vyc0NtZFxuIiwiLyoqXG4gKiBXb3JrZXJzUmVzdWx0XG4gKiA9PT09PT09PT09PT09XG4gKlxuICogQSByZXNwb25zZSBzZW50IGJhY2sgZnJvbSBhIHdvcmtlciB0byB0aGUgbWFpbiB0aHJlYWQuIENvbnRhaW5zIHRoZSBcInJlc3VsdFwiXG4gKiBvZiB0aGUgY29tcHV0YXRpb24gaW4gdGhlIGZvcm0gb2YgYSBidWZmZXIsIHJlc2J1Zi4gSWYgdGhlIGFjdHVhbCByZXN1bHQgaXNcbiAqIGFuIG9iamVjdCB3aXRoIGEgLnRvRmFzdEJ1ZmZlciBtZXRob2QsIHRoZSBvYmplY3QgaXMgY29udmVydGVkIHRvIGEgYnVmZmVyXG4gKiB1c2luZyB0aGF0IG1ldGhvZC4gT3RoZXJ3aXNlIGl0IGlzIEpTT04gc2VyaWFsaXplZCBpbnRvIGEgYnVmZmVyLiBUaGUgcmVzdWx0XG4gKiBjYW4gYWxzbyBiZSBhbiBlcnJvciwgaW4gd2hpY2ggY2FzZSB0aGUgaXNFcnJvciBmbGFnIGlzIHNldC5cbiAqL1xuJ3VzZSBzdHJpY3QnXG5sZXQgZGVwZW5kZW5jaWVzID0ge1xuICBCdzogcmVxdWlyZSgnLi9idycpLFxuICBTdHJ1Y3Q6IHJlcXVpcmUoJy4vc3RydWN0Jylcbn1cblxubGV0IGluamVjdCA9IGZ1bmN0aW9uIChkZXBzKSB7XG4gIGxldCBCdyA9IGRlcHMuQndcbiAgbGV0IFN0cnVjdCA9IGRlcHMuU3RydWN0XG5cbiAgY2xhc3MgV29ya2Vyc1Jlc3VsdCBleHRlbmRzIFN0cnVjdCB7XG4gICAgY29uc3RydWN0b3IgKHJlc2J1ZiwgaXNFcnJvciwgaWQpIHtcbiAgICAgIHN1cGVyKHtyZXNidWYsIGlzRXJyb3IsIGlkfSlcbiAgICB9XG5cbiAgICBmcm9tUmVzdWx0IChyZXN1bHQsIGlkKSB7XG4gICAgICBpZiAocmVzdWx0LnRvRmFzdEJ1ZmZlcikge1xuICAgICAgICB0aGlzLnJlc2J1ZiA9IHJlc3VsdC50b0Zhc3RCdWZmZXIoKVxuICAgICAgfSBlbHNlIGlmIChCdWZmZXIuaXNCdWZmZXIocmVzdWx0KSkge1xuICAgICAgICB0aGlzLnJlc2J1ZiA9IHJlc3VsdFxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5yZXNidWYgPSBuZXcgQnVmZmVyKEpTT04uc3RyaW5naWZ5KHJlc3VsdCkpXG4gICAgICB9XG4gICAgICB0aGlzLmlzRXJyb3IgPSBmYWxzZVxuICAgICAgdGhpcy5pZCA9IGlkXG4gICAgICByZXR1cm4gdGhpc1xuICAgIH1cblxuICAgIHN0YXRpYyBmcm9tUmVzdWx0IChyZXN1bHQsIGlkKSB7XG4gICAgICByZXR1cm4gbmV3IHRoaXMoKS5mcm9tUmVzdWx0KHJlc3VsdCwgaWQpXG4gICAgfVxuXG4gICAgZnJvbUVycm9yIChlcnJvciwgaWQpIHtcbiAgICAgIHRoaXMucmVzYnVmID0gbmV3IEJ1ZmZlcihKU09OLnN0cmluZ2lmeShlcnJvci5tZXNzYWdlKSlcbiAgICAgIHRoaXMuaXNFcnJvciA9IHRydWVcbiAgICAgIHRoaXMuaWQgPSBpZFxuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG5cbiAgICB0b0J3IChidykge1xuICAgICAgaWYgKCFidykge1xuICAgICAgICBidyA9IG5ldyBCdygpXG4gICAgICB9XG4gICAgICBidy53cml0ZVZhckludE51bSh0aGlzLnJlc2J1Zi5sZW5ndGgpXG4gICAgICBidy53cml0ZSh0aGlzLnJlc2J1ZilcbiAgICAgIGJ3LndyaXRlVUludDgoTnVtYmVyKHRoaXMuaXNFcnJvcikpXG4gICAgICBidy53cml0ZVZhckludE51bSh0aGlzLmlkKVxuICAgICAgcmV0dXJuIGJ3XG4gICAgfVxuXG4gICAgZnJvbUJyIChicikge1xuICAgICAgbGV0IHJlc2J1ZmxlbiA9IGJyLnJlYWRWYXJJbnROdW0oKVxuICAgICAgdGhpcy5yZXNidWYgPSBici5yZWFkKHJlc2J1ZmxlbilcbiAgICAgIHRoaXMuaXNFcnJvciA9IEJvb2xlYW4oYnIucmVhZFVJbnQ4KCkpXG4gICAgICB0aGlzLmlkID0gYnIucmVhZFZhckludE51bSgpXG4gICAgICByZXR1cm4gdGhpc1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBXb3JrZXJzUmVzdWx0XG59XG5cbmluamVjdCA9IHJlcXVpcmUoJ2luamVjdGVyJykoaW5qZWN0LCBkZXBlbmRlbmNpZXMpXG5sZXQgV29ya2Vyc1Jlc3VsdCA9IGluamVjdCgpXG5tb2R1bGUuZXhwb3J0cyA9IFdvcmtlcnNSZXN1bHRcbiIsIi8qIGdsb2JhbCBzZWxmICovXG4vKipcbiAqIFdvcmtlcnNcbiAqID09PT09PT1cbiAqXG4gKiBXb3JrZXJzIG1hbmFnZXMgZWl0aGVyIHByb2Nlc3NlcyAoaW4gbm9kZSkgb3IgdGhyZWFkcyAoaW4gYSBicm93c2VyKS4gVGhlXG4gKiB3b3JrZXJzIGFyZSBpbnRlbmRlZCB0byBoYW5kbGUgQ1BVLWhlYXZ5IHRhc2tzIHRoYXQgYmxvY2sgSU8uIFRoaXMgY2xhc3MgaXNcbiAqIGEgbGl0dGxlIHVudXN1YWwgaW4gdGhhdCBpdCBtdXN0IHVzZSBkaWZmZXJlbnQgaW50ZXJmYWNlcyB3aGV0aGVyIGluIG5vZGUgb3JcbiAqIGluIHRoZSBicm93c2VyLiBJbiBub2RlLCB3ZSB1c2Ugbm9kZSdzIGJ1aWxkLWluIGNoaWxkX3Byb2Nlc3MgZm9yayB0byBjcmVhdGVcbiAqIG5ldyB3b3JrZXJzIHdlIGNhbiBjb21tdW5pY2F0ZSB3aXRoLiBJbiB0aGUgYnJvd3Nlciwgd2UgdXNlIHdlYiB3b3JrZXJzLlxuICogVW5mb3J0dW5hdGVseSwgbm9kZSBhbmQgd2ViIGJyb3dzZXJzIGRvIG5vdCBoYXZlIGEgY29tbW9uIGludGVyZmFjZSBmb3JcbiAqIHdvcmtlcnMuIFRoZXJlIGlzIGEgbm9kZSBtb2R1bGUgY2FsbGVkIHdlYndvcmtlci10aHJlYWRzIGZvciBub2RlIHRoYXRcbiAqIG1pbWljcyB0aGUgYnJvd3NlcidzIHdlYiB3b3JrZXJzLCBidXQgdW5mb3J0dW5hdGVseSBpdCBkb2VzIG5vdCBzdXBwb3J0XG4gKiByZXF1aXJlKCksIGFuZCB0aHVzIGlzbid0IHZlcnkgdXNlZnVsIGluIG91ciBjYXNlLiBUaGVyZWZvcmUgd2UgZmFsbCBiYWNrIHRvXG4gKiBwcm9jZXNzIGZvcmtzLlxuICpcbiAqIFlvdSBwcm9iYWJseSBkb24ndCBuZWVkIHRvIHVzZSB0aGlzIGNsYXNzIGRpcmVjdGx5LiBVc2UgV29yaywgd2hpY2ggd2lsbFxuICogYXV0b21hdGljYWxseSBzcGF3biBuZXcgd29ya2VycyBpZiBuZWVkZWQuXG4gKi9cbid1c2Ugc3RyaWN0J1xubGV0IGRlcGVuZGVuY2llcyA9IHtcbiAgV29ya2VyOiAhcHJvY2Vzcy5icm93c2VyID8gcmVxdWlyZSgnY2hpbGRfcHJvY2VzcycpLnNwYXduIDogc2VsZi5Xb3JrZXIsXG4gIFdvcmtlcnNDbWQ6IHJlcXVpcmUoJy4vd29ya2Vycy1jbWQnKSxcbiAgV29ya2Vyc1Jlc3VsdDogcmVxdWlyZSgnLi93b3JrZXJzLXJlc3VsdCcpLFxuICBwYXRoOiAhcHJvY2Vzcy5icm93c2VyID8gcmVxdWlyZSgncGF0aCcpIDogdW5kZWZpbmVkXG59XG5cbmxldCBpbmplY3QgPSBmdW5jdGlvbiAoZGVwcykge1xuICBsZXQgV29ya2VyID0gZGVwcy5Xb3JrZXJcbiAgbGV0IFdvcmtlcnNDbWQgPSBkZXBzLldvcmtlcnNDbWRcbiAgbGV0IFdvcmtlcnNSZXN1bHQgPSBkZXBzLldvcmtlcnNSZXN1bHRcbiAgbGV0IHBhdGggPSBkZXBzLnBhdGhcblxuICBsZXQgZ2xvYmFsV29ya2Vyc1xuXG4gIGNsYXNzIFdvcmtlcnMge1xuICAgIGNvbnN0cnVjdG9yIChuYXRpdmVXb3JrZXJzID0gW10sIGxhc3RpZCA9IDAsIHByb21pc2VtYXAgPSBuZXcgTWFwKCkpIHtcbiAgICAgIHRoaXMubmF0aXZlV29ya2VycyA9IG5hdGl2ZVdvcmtlcnNcbiAgICAgIHRoaXMubGFzdGlkID0gbGFzdGlkXG4gICAgICB0aGlzLnByb21pc2VtYXAgPSBwcm9taXNlbWFwXG4gICAgfVxuXG4gICAgc3Bhd25Ccm93c2VyICgpIHtcbiAgICAgIC8vIFRPRE86IFN1cHBvcnQgbW9yZSB0aGFuIG9uZSB3b3JrZXJcbiAgICAgIHRoaXMubmF0aXZlV29ya2Vyc1swXSA9IG5ldyBXb3JrZXIocHJvY2Vzcy5lbnYuWU9VUlNfQklUQ09JTl9KU19CQVNFX1VSTCArIHByb2Nlc3MuZW52LllPVVJTX0JJVENPSU5fSlNfV09SS0VSX0ZJTEUpXG4gICAgICB0aGlzLmhhbmRsZUJyb3dzZXIoKVxuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG5cbiAgICBoYW5kbGVCcm93c2VyICgpIHtcbiAgICAgIHRoaXMubmF0aXZlV29ya2Vyc1swXS5vbmVycm9yID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHRoaXMub25FcnJvcihldmVudC5tZXNzYWdlICsgJzogJyArIGV2ZW50LmZpbGVuYW1lICsgJzonICsgZXZlbnQubGluZW5vKVxuICAgICAgfS5iaW5kKHRoaXMpXG4gICAgICB0aGlzLm5hdGl2ZVdvcmtlcnNbMF0ub25tZXNzYWdlID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHRoaXMub25TdGRvdXREYXRhKG5ldyBCdWZmZXIoZXZlbnQuZGF0YSkpXG4gICAgICB9LmJpbmQodGhpcylcbiAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuXG4gICAgc3Bhd25Ob2RlICgpIHtcbiAgICAgIC8vIFRPRE86IFN1cHBvcnQgbW9yZSB0aGFuIG9uZSB3b3JrZXJcbiAgICAgIC8vIFRPRE86IHttYXhCdWZmZXI6IDEwMDAqMTAyNH1cbiAgICAgIHRoaXMubmF0aXZlV29ya2Vyc1swXSA9IFdvcmtlcignbm9kZScsIFtwYXRoLmpvaW4oX19kaXJuYW1lLCAnd29ya2VyLW5vZGUuanMnKV0pXG4gICAgICB0aGlzLmhhbmRsZU5vZGUoKVxuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG5cbiAgICBoYW5kbGVOb2RlICgpIHtcbiAgICAgIHRoaXMubmF0aXZlV29ya2Vyc1swXS5vbignZXJyb3InLCAoZXJyb3IpID0+IHtcbiAgICAgICAgdGhpcy5vbkVycm9yKGVycm9yKVxuICAgICAgfSlcbiAgICAgIHRoaXMubmF0aXZlV29ya2Vyc1swXS5vbignZXhpdCcsICgpID0+IHtcbiAgICAgICAgdGhpcy5vbkVycm9yKCd1bmV4cGVjdGVkIGV4aXQnKVxuICAgICAgfSlcbiAgICAgIHRoaXMubmF0aXZlV29ya2Vyc1swXS5vbignY2xvc2UnLCAoKSA9PiB7XG4gICAgICAgIHRoaXMub25FcnJvcigndW5leHBlY3RlZCBjbG9zZScpXG4gICAgICB9KVxuICAgICAgdGhpcy5uYXRpdmVXb3JrZXJzWzBdLm9uKCdkaXNjb25uZWN0JywgKCkgPT4ge1xuICAgICAgICB0aGlzLm9uRXJyb3IoJ3VuZXhwZWN0ZWQgZGlzY29ubmVjdCcpXG4gICAgICB9KVxuICAgICAgdGhpcy5uYXRpdmVXb3JrZXJzWzBdLnN0ZG91dC5vbignZGF0YScsIChidWYpID0+IHtcbiAgICAgICAgdGhpcy5vblN0ZG91dERhdGEoYnVmKVxuICAgICAgfSlcbiAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuXG4gICAgb25TdGRvdXREYXRhIChidWYpIHtcbiAgICAgIGxldCB3b3JrZXJzUmVzdWx0ID0gbmV3IFdvcmtlcnNSZXN1bHQoKS5mcm9tRmFzdEJ1ZmZlcihidWYpXG4gICAgICByZXR1cm4gdGhpcy5vblJlc3VsdCh3b3JrZXJzUmVzdWx0KVxuICAgIH1cblxuICAgIG9uUmVzdWx0ICh3b3JrZXJzUmVzdWx0KSB7XG4gICAgICBpZiAoIXdvcmtlcnNSZXN1bHQuaXNFcnJvcikge1xuICAgICAgICBsZXQgcmVzb2x2ZSA9IHRoaXMucHJvbWlzZW1hcC5nZXQod29ya2Vyc1Jlc3VsdC5pZCkucmVzb2x2ZVxuICAgICAgICByZXNvbHZlKHdvcmtlcnNSZXN1bHQpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBjb25zb2xlLmxvZyh3b3JrZXJzUmVzdWx0LnJlc2J1Zi50b1N0cmluZygpKSAvLyB0aHJvdyBhbiBlcnJvciBpbiB3b3JrZXIgdG8gc2VlIG91dHB1dCBoZXJlXG4gICAgICAgIGxldCBlcnJvciA9IG5ldyBFcnJvcihKU09OLnBhcnNlKHdvcmtlcnNSZXN1bHQucmVzYnVmLnRvU3RyaW5nKCkpKVxuICAgICAgICBsZXQgcmVqZWN0ID0gdGhpcy5wcm9taXNlbWFwLmdldCh3b3JrZXJzUmVzdWx0LmlkKS5yZWplY3RcbiAgICAgICAgcmVqZWN0KGVycm9yKVxuICAgICAgfVxuICAgICAgdGhpcy5wcm9taXNlbWFwLmRlbGV0ZSh3b3JrZXJzUmVzdWx0LmlkKVxuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG5cbiAgICBvbkVycm9yIChlcnJvcikgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgICByZXR1cm4gdGhpc1xuICAgIH1cblxuICAgIHNwYXduICgpIHtcbiAgICAgIGlmIChnbG9iYWxXb3JrZXJzKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdXYXJuaW5nOiBTcG9vbGluZyB1cCBub24tZ2xvYmFsIHdvcmtlcnMuJylcbiAgICAgIH1cbiAgICAgIGlmIChwcm9jZXNzLmJyb3dzZXIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3Bhd25Ccm93c2VyKClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNwYXduTm9kZSgpXG4gICAgICB9XG4gICAgfVxuXG4gICAgc2VuZEJ1ZmZlciAoYnVmKSB7XG4gICAgICBsZXQgYnVmbGVuID0gbmV3IEJ1ZmZlcig0KVxuICAgICAgYnVmbGVuLndyaXRlVUludDMyQkUoYnVmLmxlbmd0aClcbiAgICAgIGJ1ZiA9IEJ1ZmZlci5jb25jYXQoW2J1ZmxlbiwgYnVmXSlcbiAgICAgIGlmIChwcm9jZXNzLmJyb3dzZXIpIHtcbiAgICAgICAgdGhpcy5uYXRpdmVXb3JrZXJzWzBdLnBvc3RNZXNzYWdlKGJ1ZilcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMubmF0aXZlV29ya2Vyc1swXS5zdGRpbi53cml0ZShidWYpXG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpc1xuICAgIH1cblxuICAgIGFzeW5jT2JqZWN0TWV0aG9kIChvYmosIG1ldGhvZG5hbWUsIGFyZ3MsIGlkKSB7XG4gICAgICBpZiAoIWFyZ3MpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdtdXN0IHNwZWNpZnkgYXJncycpXG4gICAgICB9XG4gICAgICBpZCA9IGlkICE9PSB1bmRlZmluZWQgPyBpZCA6ICsrdGhpcy5sYXN0aWRcbiAgICAgIGxldCB3b3JrZXJzQ21kID0gbmV3IFdvcmtlcnNDbWQoKS5mcm9tT2JqZWN0TWV0aG9kKG9iaiwgbWV0aG9kbmFtZSwgYXJncywgaWQpXG4gICAgICBsZXQgYnVmID0gd29ya2Vyc0NtZC50b0Zhc3RCdWZmZXIoKVxuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgdGhpcy5zZW5kQnVmZmVyKGJ1ZilcbiAgICAgICAgdGhpcy5wcm9taXNlbWFwLnNldChpZCwge1xuICAgICAgICAgIHJlc29sdmU6IHJlc29sdmUsXG4gICAgICAgICAgcmVqZWN0OiByZWplY3RcbiAgICAgICAgfSlcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgc3RhdGljIGFzeW5jT2JqZWN0TWV0aG9kIChvYmosIG1ldGhvZG5hbWUsIGFyZ3MsIGlkKSB7XG4gICAgICBpZiAoIWdsb2JhbFdvcmtlcnMpIHtcbiAgICAgICAgZ2xvYmFsV29ya2VycyA9IG5ldyBXb3JrZXJzKCkuc3Bhd24oKVxuICAgICAgfVxuICAgICAgcmV0dXJuIGdsb2JhbFdvcmtlcnMuYXN5bmNPYmplY3RNZXRob2Qob2JqLCBtZXRob2RuYW1lLCBhcmdzLCBpZClcbiAgICB9XG5cbiAgICBhc3luY0NsYXNzTWV0aG9kIChjbGFzc25hbWUsIG1ldGhvZG5hbWUsIGFyZ3MsIGlkKSB7XG4gICAgICBpZiAoIWFyZ3MpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdtdXN0IHNwZWNpZnkgYXJncycpXG4gICAgICB9XG4gICAgICBpZCA9IGlkICE9PSB1bmRlZmluZWQgPyBpZCA6ICsrdGhpcy5sYXN0aWRcbiAgICAgIGxldCB3b3JrZXJzQ21kID0gbmV3IFdvcmtlcnNDbWQoKS5mcm9tQ2xhc3NNZXRob2QoY2xhc3NuYW1lLCBtZXRob2RuYW1lLCBhcmdzLCBpZClcbiAgICAgIGxldCBidWYgPSB3b3JrZXJzQ21kLnRvRmFzdEJ1ZmZlcigpXG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICB0aGlzLnNlbmRCdWZmZXIoYnVmKVxuICAgICAgICB0aGlzLnByb21pc2VtYXAuc2V0KGlkLCB7XG4gICAgICAgICAgcmVzb2x2ZTogcmVzb2x2ZSxcbiAgICAgICAgICByZWplY3Q6IHJlamVjdFxuICAgICAgICB9KVxuICAgICAgfS5iaW5kKHRoaXMpKVxuICAgIH1cblxuICAgIHN0YXRpYyBhc3luY0NsYXNzTWV0aG9kIChvYmosIG1ldGhvZG5hbWUsIGFyZ3MsIGlkKSB7XG4gICAgICBpZiAoIWdsb2JhbFdvcmtlcnMpIHtcbiAgICAgICAgZ2xvYmFsV29ya2VycyA9IG5ldyBXb3JrZXJzKCkuc3Bhd24oKVxuICAgICAgfVxuICAgICAgcmV0dXJuIGdsb2JhbFdvcmtlcnMuYXN5bmNDbGFzc01ldGhvZChvYmosIG1ldGhvZG5hbWUsIGFyZ3MsIGlkKVxuICAgIH1cblxuICAgIHN0YXRpYyBlbmRHbG9iYWxXb3JrZXJzICgpIHtcbiAgICAgIGlmIChnbG9iYWxXb3JrZXJzICYmICFwcm9jZXNzLmJyb3dzZXIpIHtcbiAgICAgICAgLy8gVE9ETzogU3VwcG9ydCBtdWx0aXBsZSB3b3JrZXJzLlxuICAgICAgICBnbG9iYWxXb3JrZXJzLm5hdGl2ZVdvcmtlcnNbMF0ua2lsbCgnU0lHSU5UJylcbiAgICAgICAgZ2xvYmFsV29ya2VycyA9IHVuZGVmaW5lZFxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBXb3JrZXJzXG59XG5cbmluamVjdCA9IHJlcXVpcmUoJ2luamVjdGVyJykoaW5qZWN0LCBkZXBlbmRlbmNpZXMpXG5sZXQgV29ya2VycyA9IGluamVjdCgpXG5tb2R1bGUuZXhwb3J0cyA9IFdvcmtlcnNcbiIsIi8qKlxuICogYXNpbmtcbiAqID09PT09XG4gKlxuICogYXNpbmsgaXMgdGhlIHNhbWUgdGhpbmcgYXMsIG9yIGEgcmVuYW1lIG9mLCBzcGF3bi4gc3Bhd24gaW4gdHVybiBpcyBhIHRvb2xcbiAqIGZvciByZXBlYXRlZGx5IGNhbGxpbmcgdGhlIC50aGVucyBvZiBwcm9taXNlcyB5aWVsZGVkIGJ5IGEgZ2VuZXJhdG9yLlxuICogQmFzaWNhbGx5LCB0aGlzIG1ha2VzIGl0IHBvc3NpYmxlIHRvIHdyaXRlIGFzeW5jaHJvbm91cywgcHJvbWlzaWZpZWQgY29kZVxuICogd2l0aCBub3JtYWwgdHJ5L2NhdGNoZXMgdGhhdCBsb29rIGp1c3QgbGlrZSBzeW5jaHJvbm91cyBjb2RlLiBJdCBjcmVhdGVzXG4gKiBzaG9ydGVyIGFuZCBlYXNpZXIgdG8gdW5kZXJzdGFuZCBjb2RlLiBIeXBvdGhldGljYWxseSwgdGhlcmUgd2lsbCBiZSBhXG4gKiBmZWF0dXJlIGluIHRoZSBuZXh0IHZlcnNpb24gb2YgamF2YXNjcmlwdCwgRVM3LCBjYWxsZWQgXCJhc3luYyBmdW5jdGlvbnNcIixcbiAqIHdoaWNoIGRvIGV4YWN0bHkgd2hhdCBhc2luayBkb2VzLiBXaGVuL2lmIHRoYXQgaGFwcGVucyBhbmQgd2UgY2FuIGFjY2VzcyBpdFxuICogaW4gbm9kZSwgd2UgY2FuIHNpbXBseSByZW1vdmUgYWxsIGNhbGxzIHRvIGFzaW5rIGFuZCBvdXIgY29kZSBzaG91bGQgYmVoYXZlXG4gKiBpbiB0aGUgc2FtZSB3YXkuXG4gKlxuICogU2VlOlxuICogaHR0cDovL3RjMzkuZ2l0aHViLmlvL2VjbWFzY3JpcHQtYXN5bmNhd2FpdC9cbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L2VjbWFzY3JpcHQtYXN5bmNhd2FpdFxuICogaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vamFrZWFyY2hpYmFsZC8zMWI4OWNiYTYyNzkyNDk3MmFkNlxuICogaHR0cDovL3d3dy5odG1sNXJvY2tzLmNvbS9lbi90dXRvcmlhbHMvZXM2L3Byb21pc2VzL1xuICogaHR0cHM6Ly9ibG9ncy53aW5kb3dzLmNvbS9tc2VkZ2VkZXYvMjAxNS8wOS8zMC9hc3luY2hyb25vdXMtY29kZS1nZXRzLWVhc2llci13aXRoLWVzMjAxNi1hc3luYy1mdW5jdGlvbi1zdXBwb3J0LWluLWNoYWtyYS1hbmQtbWljcm9zb2Z0LWVkZ2UvXG4gKi9cbid1c2Ugc3RyaWN0J1xuZnVuY3Rpb24gc3Bhd24gKGdlbkYsIHNlbGYpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICB2YXIgZ2VuID0gZ2VuRi5jYWxsKHNlbGYpXG4gICAgZnVuY3Rpb24gc3RlcCAobmV4dEYpIHtcbiAgICAgIHZhciBuZXh0XG4gICAgICB0cnkge1xuICAgICAgICBuZXh0ID0gbmV4dEYoKVxuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBmaW5pc2hlZCB3aXRoIGZhaWx1cmUsIHJlamVjdCB0aGUgcHJvbWlzZVxuICAgICAgICByZWplY3QoZSlcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICBpZiAobmV4dC5kb25lKSB7XG4gICAgICAgIC8vIGZpbmlzaGVkIHdpdGggc3VjY2VzcywgcmVzb2x2ZSB0aGUgcHJvbWlzZVxuICAgICAgICByZXNvbHZlKG5leHQudmFsdWUpXG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgLy8gbm90IGZpbmlzaGVkLCBjaGFpbiBvZmYgdGhlIHlpZWxkZWQgcHJvbWlzZSBhbmQgYHN0ZXBgIGFnYWluXG4gICAgICBQcm9taXNlLnJlc29sdmUobmV4dC52YWx1ZSkudGhlbihmdW5jdGlvbiAodikge1xuICAgICAgICBzdGVwKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGdlbi5uZXh0KHYpIH0pXG4gICAgICB9LCBmdW5jdGlvbiAoZSkge1xuICAgICAgICBzdGVwKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGdlbi50aHJvdyhlKSB9KVxuICAgICAgfSlcbiAgICB9XG4gICAgc3RlcChmdW5jdGlvbiAoKSB7IHJldHVybiBnZW4ubmV4dCh1bmRlZmluZWQpIH0pXG4gIH0pXG59XG5tb2R1bGUuZXhwb3J0cyA9IHNwYXduXG4iLCIvLyBiYXNlLXggZW5jb2Rpbmdcbi8vIEZvcmtlZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9jcnlwdG9jb2luanMvYnM1OFxuLy8gT3JpZ2luYWxseSB3cml0dGVuIGJ5IE1pa2UgSGVhcm4gZm9yIEJpdGNvaW5KXG4vLyBDb3B5cmlnaHQgKGMpIDIwMTEgR29vZ2xlIEluY1xuLy8gUG9ydGVkIHRvIEphdmFTY3JpcHQgYnkgU3RlZmFuIFRob21hc1xuLy8gTWVyZ2VkIEJ1ZmZlciByZWZhY3RvcmluZ3MgZnJvbSBiYXNlNTgtbmF0aXZlIGJ5IFN0ZXBoZW4gUGFpclxuLy8gQ29weXJpZ2h0IChjKSAyMDEzIEJpdFBheSBJbmNcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBiYXNlIChBTFBIQUJFVCkge1xuICB2YXIgQUxQSEFCRVRfTUFQID0ge31cbiAgdmFyIEJBU0UgPSBBTFBIQUJFVC5sZW5ndGhcbiAgdmFyIExFQURFUiA9IEFMUEhBQkVULmNoYXJBdCgwKVxuXG4gIC8vIHByZS1jb21wdXRlIGxvb2t1cCB0YWJsZVxuICBmb3IgKHZhciBpID0gMDsgaSA8IEFMUEhBQkVULmxlbmd0aDsgaSsrKSB7XG4gICAgQUxQSEFCRVRfTUFQW0FMUEhBQkVULmNoYXJBdChpKV0gPSBpXG4gIH1cblxuICBmdW5jdGlvbiBlbmNvZGUgKHNvdXJjZSkge1xuICAgIGlmIChzb3VyY2UubGVuZ3RoID09PSAwKSByZXR1cm4gJydcblxuICAgIHZhciBkaWdpdHMgPSBbMF1cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNvdXJjZS5sZW5ndGg7ICsraSkge1xuICAgICAgZm9yICh2YXIgaiA9IDAsIGNhcnJ5ID0gc291cmNlW2ldOyBqIDwgZGlnaXRzLmxlbmd0aDsgKytqKSB7XG4gICAgICAgIGNhcnJ5ICs9IGRpZ2l0c1tqXSA8PCA4XG4gICAgICAgIGRpZ2l0c1tqXSA9IGNhcnJ5ICUgQkFTRVxuICAgICAgICBjYXJyeSA9IChjYXJyeSAvIEJBU0UpIHwgMFxuICAgICAgfVxuXG4gICAgICB3aGlsZSAoY2FycnkgPiAwKSB7XG4gICAgICAgIGRpZ2l0cy5wdXNoKGNhcnJ5ICUgQkFTRSlcbiAgICAgICAgY2FycnkgPSAoY2FycnkgLyBCQVNFKSB8IDBcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBkZWFsIHdpdGggbGVhZGluZyB6ZXJvc1xuICAgIGZvciAodmFyIGsgPSAwOyBzb3VyY2Vba10gPT09IDAgJiYgayA8IHNvdXJjZS5sZW5ndGggLSAxOyArK2spIHtcbiAgICAgIGRpZ2l0cy5wdXNoKDApXG4gICAgfVxuXG4gICAgLy8gY29udmVydCBkaWdpdHMgdG8gYSBzdHJpbmdcbiAgICBmb3IgKHZhciBpaSA9IDAsIGpqID0gZGlnaXRzLmxlbmd0aCAtIDE7IGlpIDw9IGpqOyArK2lpLCAtLWpqKSB7XG4gICAgICB2YXIgdG1wID0gQUxQSEFCRVRbZGlnaXRzW2lpXV1cbiAgICAgIGRpZ2l0c1tpaV0gPSBBTFBIQUJFVFtkaWdpdHNbampdXVxuICAgICAgZGlnaXRzW2pqXSA9IHRtcFxuICAgIH1cblxuICAgIHJldHVybiBkaWdpdHMuam9pbignJylcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlY29kZSAoc3RyaW5nKSB7XG4gICAgaWYgKHN0cmluZy5sZW5ndGggPT09IDApIHJldHVybiBbXVxuXG4gICAgdmFyIGJ5dGVzID0gWzBdXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHJpbmcubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB2YWx1ZSA9IEFMUEhBQkVUX01BUFtzdHJpbmdbaV1dXG4gICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkgdGhyb3cgbmV3IEVycm9yKCdOb24tYmFzZScgKyBCQVNFICsgJyBjaGFyYWN0ZXInKVxuXG4gICAgICBmb3IgKHZhciBqID0gMCwgY2FycnkgPSB2YWx1ZTsgaiA8IGJ5dGVzLmxlbmd0aDsgKytqKSB7XG4gICAgICAgIGNhcnJ5ICs9IGJ5dGVzW2pdICogQkFTRVxuICAgICAgICBieXRlc1tqXSA9IGNhcnJ5ICYgMHhmZlxuICAgICAgICBjYXJyeSA+Pj0gOFxuICAgICAgfVxuXG4gICAgICB3aGlsZSAoY2FycnkgPiAwKSB7XG4gICAgICAgIGJ5dGVzLnB1c2goY2FycnkgJiAweGZmKVxuICAgICAgICBjYXJyeSA+Pj0gOFxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIGRlYWwgd2l0aCBsZWFkaW5nIHplcm9zXG4gICAgZm9yICh2YXIgayA9IDA7IHN0cmluZ1trXSA9PT0gTEVBREVSICYmIGsgPCBzdHJpbmcubGVuZ3RoIC0gMTsgKytrKSB7XG4gICAgICBieXRlcy5wdXNoKDApXG4gICAgfVxuXG4gICAgcmV0dXJuIGJ5dGVzLnJldmVyc2UoKVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBlbmNvZGU6IGVuY29kZSxcbiAgICBkZWNvZGU6IGRlY29kZVxuICB9XG59XG4iLCIoZnVuY3Rpb24gKG1vZHVsZSwgZXhwb3J0cykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLy8gVXRpbHNcbiAgZnVuY3Rpb24gYXNzZXJ0ICh2YWwsIG1zZykge1xuICAgIGlmICghdmFsKSB0aHJvdyBuZXcgRXJyb3IobXNnIHx8ICdBc3NlcnRpb24gZmFpbGVkJyk7XG4gIH1cblxuICAvLyBDb3VsZCB1c2UgYGluaGVyaXRzYCBtb2R1bGUsIGJ1dCBkb24ndCB3YW50IHRvIG1vdmUgZnJvbSBzaW5nbGUgZmlsZVxuICAvLyBhcmNoaXRlY3R1cmUgeWV0LlxuICBmdW5jdGlvbiBpbmhlcml0cyAoY3Rvciwgc3VwZXJDdG9yKSB7XG4gICAgY3Rvci5zdXBlcl8gPSBzdXBlckN0b3I7XG4gICAgdmFyIFRlbXBDdG9yID0gZnVuY3Rpb24gKCkge307XG4gICAgVGVtcEN0b3IucHJvdG90eXBlID0gc3VwZXJDdG9yLnByb3RvdHlwZTtcbiAgICBjdG9yLnByb3RvdHlwZSA9IG5ldyBUZW1wQ3RvcigpO1xuICAgIGN0b3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY3RvcjtcbiAgfVxuXG4gIC8vIEJOXG5cbiAgZnVuY3Rpb24gQk4gKG51bWJlciwgYmFzZSwgZW5kaWFuKSB7XG4gICAgaWYgKEJOLmlzQk4obnVtYmVyKSkge1xuICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICB9XG5cbiAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICB0aGlzLndvcmRzID0gbnVsbDtcbiAgICB0aGlzLmxlbmd0aCA9IDA7XG5cbiAgICAvLyBSZWR1Y3Rpb24gY29udGV4dFxuICAgIHRoaXMucmVkID0gbnVsbDtcblxuICAgIGlmIChudW1iZXIgIT09IG51bGwpIHtcbiAgICAgIGlmIChiYXNlID09PSAnbGUnIHx8IGJhc2UgPT09ICdiZScpIHtcbiAgICAgICAgZW5kaWFuID0gYmFzZTtcbiAgICAgICAgYmFzZSA9IDEwO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9pbml0KG51bWJlciB8fCAwLCBiYXNlIHx8IDEwLCBlbmRpYW4gfHwgJ2JlJyk7XG4gICAgfVxuICB9XG4gIGlmICh0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jykge1xuICAgIG1vZHVsZS5leHBvcnRzID0gQk47XG4gIH0gZWxzZSB7XG4gICAgZXhwb3J0cy5CTiA9IEJOO1xuICB9XG5cbiAgQk4uQk4gPSBCTjtcbiAgQk4ud29yZFNpemUgPSAyNjtcblxuICB2YXIgQnVmZmVyO1xuICB0cnkge1xuICAgIEJ1ZmZlciA9IHJlcXVpcmUoJ2J1ZicgKyAnZmVyJykuQnVmZmVyO1xuICB9IGNhdGNoIChlKSB7XG4gIH1cblxuICBCTi5pc0JOID0gZnVuY3Rpb24gaXNCTiAobnVtKSB7XG4gICAgcmV0dXJuIG51bSAhPT0gbnVsbCAmJiB0eXBlb2YgbnVtID09PSAnb2JqZWN0JyAmJlxuICAgICAgbnVtLmNvbnN0cnVjdG9yLm5hbWUgPT09ICdCTicgJiYgQXJyYXkuaXNBcnJheShudW0ud29yZHMpO1xuICB9O1xuXG4gIEJOLm1heCA9IGZ1bmN0aW9uIG1heCAobGVmdCwgcmlnaHQpIHtcbiAgICBpZiAobGVmdC5jbXAocmlnaHQpID4gMCkgcmV0dXJuIGxlZnQ7XG4gICAgcmV0dXJuIHJpZ2h0O1xuICB9O1xuXG4gIEJOLm1pbiA9IGZ1bmN0aW9uIG1pbiAobGVmdCwgcmlnaHQpIHtcbiAgICBpZiAobGVmdC5jbXAocmlnaHQpIDwgMCkgcmV0dXJuIGxlZnQ7XG4gICAgcmV0dXJuIHJpZ2h0O1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5faW5pdCA9IGZ1bmN0aW9uIGluaXQgKG51bWJlciwgYmFzZSwgZW5kaWFuKSB7XG4gICAgaWYgKHR5cGVvZiBudW1iZXIgPT09ICdudW1iZXInKSB7XG4gICAgICByZXR1cm4gdGhpcy5faW5pdE51bWJlcihudW1iZXIsIGJhc2UsIGVuZGlhbik7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBudW1iZXIgPT09ICdvYmplY3QnKSB7XG4gICAgICByZXR1cm4gdGhpcy5faW5pdEFycmF5KG51bWJlciwgYmFzZSwgZW5kaWFuKTtcbiAgICB9XG5cbiAgICBpZiAoYmFzZSA9PT0gJ2hleCcpIHtcbiAgICAgIGJhc2UgPSAxNjtcbiAgICB9XG4gICAgYXNzZXJ0KGJhc2UgPT09IChiYXNlIHwgMCkgJiYgYmFzZSA+PSAyICYmIGJhc2UgPD0gMzYpO1xuXG4gICAgbnVtYmVyID0gbnVtYmVyLnRvU3RyaW5nKCkucmVwbGFjZSgvXFxzKy9nLCAnJyk7XG4gICAgdmFyIHN0YXJ0ID0gMDtcbiAgICBpZiAobnVtYmVyWzBdID09PSAnLScpIHtcbiAgICAgIHN0YXJ0Kys7XG4gICAgfVxuXG4gICAgaWYgKGJhc2UgPT09IDE2KSB7XG4gICAgICB0aGlzLl9wYXJzZUhleChudW1iZXIsIHN0YXJ0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fcGFyc2VCYXNlKG51bWJlciwgYmFzZSwgc3RhcnQpO1xuICAgIH1cblxuICAgIGlmIChudW1iZXJbMF0gPT09ICctJykge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDE7XG4gICAgfVxuXG4gICAgdGhpcy5zdHJpcCgpO1xuXG4gICAgaWYgKGVuZGlhbiAhPT0gJ2xlJykgcmV0dXJuO1xuXG4gICAgdGhpcy5faW5pdEFycmF5KHRoaXMudG9BcnJheSgpLCBiYXNlLCBlbmRpYW4pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5faW5pdE51bWJlciA9IGZ1bmN0aW9uIF9pbml0TnVtYmVyIChudW1iZXIsIGJhc2UsIGVuZGlhbikge1xuICAgIGlmIChudW1iZXIgPCAwKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICAgIG51bWJlciA9IC1udW1iZXI7XG4gICAgfVxuICAgIGlmIChudW1iZXIgPCAweDQwMDAwMDApIHtcbiAgICAgIHRoaXMud29yZHMgPSBbIG51bWJlciAmIDB4M2ZmZmZmZiBdO1xuICAgICAgdGhpcy5sZW5ndGggPSAxO1xuICAgIH0gZWxzZSBpZiAobnVtYmVyIDwgMHgxMDAwMDAwMDAwMDAwMCkge1xuICAgICAgdGhpcy53b3JkcyA9IFtcbiAgICAgICAgbnVtYmVyICYgMHgzZmZmZmZmLFxuICAgICAgICAobnVtYmVyIC8gMHg0MDAwMDAwKSAmIDB4M2ZmZmZmZlxuICAgICAgXTtcbiAgICAgIHRoaXMubGVuZ3RoID0gMjtcbiAgICB9IGVsc2Uge1xuICAgICAgYXNzZXJ0KG51bWJlciA8IDB4MjAwMDAwMDAwMDAwMDApOyAvLyAyIF4gNTMgKHVuc2FmZSlcbiAgICAgIHRoaXMud29yZHMgPSBbXG4gICAgICAgIG51bWJlciAmIDB4M2ZmZmZmZixcbiAgICAgICAgKG51bWJlciAvIDB4NDAwMDAwMCkgJiAweDNmZmZmZmYsXG4gICAgICAgIDFcbiAgICAgIF07XG4gICAgICB0aGlzLmxlbmd0aCA9IDM7XG4gICAgfVxuXG4gICAgaWYgKGVuZGlhbiAhPT0gJ2xlJykgcmV0dXJuO1xuXG4gICAgLy8gUmV2ZXJzZSB0aGUgYnl0ZXNcbiAgICB0aGlzLl9pbml0QXJyYXkodGhpcy50b0FycmF5KCksIGJhc2UsIGVuZGlhbik7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl9pbml0QXJyYXkgPSBmdW5jdGlvbiBfaW5pdEFycmF5IChudW1iZXIsIGJhc2UsIGVuZGlhbikge1xuICAgIC8vIFBlcmhhcHMgYSBVaW50OEFycmF5XG4gICAgYXNzZXJ0KHR5cGVvZiBudW1iZXIubGVuZ3RoID09PSAnbnVtYmVyJyk7XG4gICAgaWYgKG51bWJlci5sZW5ndGggPD0gMCkge1xuICAgICAgdGhpcy53b3JkcyA9IFsgMCBdO1xuICAgICAgdGhpcy5sZW5ndGggPSAxO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdGhpcy5sZW5ndGggPSBNYXRoLmNlaWwobnVtYmVyLmxlbmd0aCAvIDMpO1xuICAgIHRoaXMud29yZHMgPSBuZXcgQXJyYXkodGhpcy5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IDA7XG4gICAgfVxuXG4gICAgdmFyIGosIHc7XG4gICAgdmFyIG9mZiA9IDA7XG4gICAgaWYgKGVuZGlhbiA9PT0gJ2JlJykge1xuICAgICAgZm9yIChpID0gbnVtYmVyLmxlbmd0aCAtIDEsIGogPSAwOyBpID49IDA7IGkgLT0gMykge1xuICAgICAgICB3ID0gbnVtYmVyW2ldIHwgKG51bWJlcltpIC0gMV0gPDwgOCkgfCAobnVtYmVyW2kgLSAyXSA8PCAxNik7XG4gICAgICAgIHRoaXMud29yZHNbal0gfD0gKHcgPDwgb2ZmKSAmIDB4M2ZmZmZmZjtcbiAgICAgICAgdGhpcy53b3Jkc1tqICsgMV0gPSAodyA+Pj4gKDI2IC0gb2ZmKSkgJiAweDNmZmZmZmY7XG4gICAgICAgIG9mZiArPSAyNDtcbiAgICAgICAgaWYgKG9mZiA+PSAyNikge1xuICAgICAgICAgIG9mZiAtPSAyNjtcbiAgICAgICAgICBqKys7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGVuZGlhbiA9PT0gJ2xlJykge1xuICAgICAgZm9yIChpID0gMCwgaiA9IDA7IGkgPCBudW1iZXIubGVuZ3RoOyBpICs9IDMpIHtcbiAgICAgICAgdyA9IG51bWJlcltpXSB8IChudW1iZXJbaSArIDFdIDw8IDgpIHwgKG51bWJlcltpICsgMl0gPDwgMTYpO1xuICAgICAgICB0aGlzLndvcmRzW2pdIHw9ICh3IDw8IG9mZikgJiAweDNmZmZmZmY7XG4gICAgICAgIHRoaXMud29yZHNbaiArIDFdID0gKHcgPj4+ICgyNiAtIG9mZikpICYgMHgzZmZmZmZmO1xuICAgICAgICBvZmYgKz0gMjQ7XG4gICAgICAgIGlmIChvZmYgPj0gMjYpIHtcbiAgICAgICAgICBvZmYgLT0gMjY7XG4gICAgICAgICAgaisrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgZnVuY3Rpb24gcGFyc2VIZXggKHN0ciwgc3RhcnQsIGVuZCkge1xuICAgIHZhciByID0gMDtcbiAgICB2YXIgbGVuID0gTWF0aC5taW4oc3RyLmxlbmd0aCwgZW5kKTtcbiAgICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBsZW47IGkrKykge1xuICAgICAgdmFyIGMgPSBzdHIuY2hhckNvZGVBdChpKSAtIDQ4O1xuXG4gICAgICByIDw8PSA0O1xuXG4gICAgICAvLyAnYScgLSAnZidcbiAgICAgIGlmIChjID49IDQ5ICYmIGMgPD0gNTQpIHtcbiAgICAgICAgciB8PSBjIC0gNDkgKyAweGE7XG5cbiAgICAgIC8vICdBJyAtICdGJ1xuICAgICAgfSBlbHNlIGlmIChjID49IDE3ICYmIGMgPD0gMjIpIHtcbiAgICAgICAgciB8PSBjIC0gMTcgKyAweGE7XG5cbiAgICAgIC8vICcwJyAtICc5J1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgciB8PSBjICYgMHhmO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcjtcbiAgfVxuXG4gIEJOLnByb3RvdHlwZS5fcGFyc2VIZXggPSBmdW5jdGlvbiBfcGFyc2VIZXggKG51bWJlciwgc3RhcnQpIHtcbiAgICAvLyBDcmVhdGUgcG9zc2libHkgYmlnZ2VyIGFycmF5IHRvIGVuc3VyZSB0aGF0IGl0IGZpdHMgdGhlIG51bWJlclxuICAgIHRoaXMubGVuZ3RoID0gTWF0aC5jZWlsKChudW1iZXIubGVuZ3RoIC0gc3RhcnQpIC8gNik7XG4gICAgdGhpcy53b3JkcyA9IG5ldyBBcnJheSh0aGlzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gMDtcbiAgICB9XG5cbiAgICB2YXIgaiwgdztcbiAgICAvLyBTY2FuIDI0LWJpdCBjaHVua3MgYW5kIGFkZCB0aGVtIHRvIHRoZSBudW1iZXJcbiAgICB2YXIgb2ZmID0gMDtcbiAgICBmb3IgKGkgPSBudW1iZXIubGVuZ3RoIC0gNiwgaiA9IDA7IGkgPj0gc3RhcnQ7IGkgLT0gNikge1xuICAgICAgdyA9IHBhcnNlSGV4KG51bWJlciwgaSwgaSArIDYpO1xuICAgICAgdGhpcy53b3Jkc1tqXSB8PSAodyA8PCBvZmYpICYgMHgzZmZmZmZmO1xuICAgICAgLy8gTk9URTogYDB4M2ZmZmZmYCBpcyBpbnRlbnRpb25hbCBoZXJlLCAyNmJpdHMgbWF4IHNoaWZ0ICsgMjRiaXQgaGV4IGxpbWJcbiAgICAgIHRoaXMud29yZHNbaiArIDFdIHw9IHcgPj4+ICgyNiAtIG9mZikgJiAweDNmZmZmZjtcbiAgICAgIG9mZiArPSAyNDtcbiAgICAgIGlmIChvZmYgPj0gMjYpIHtcbiAgICAgICAgb2ZmIC09IDI2O1xuICAgICAgICBqKys7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChpICsgNiAhPT0gc3RhcnQpIHtcbiAgICAgIHcgPSBwYXJzZUhleChudW1iZXIsIHN0YXJ0LCBpICsgNik7XG4gICAgICB0aGlzLndvcmRzW2pdIHw9ICh3IDw8IG9mZikgJiAweDNmZmZmZmY7XG4gICAgICB0aGlzLndvcmRzW2ogKyAxXSB8PSB3ID4+PiAoMjYgLSBvZmYpICYgMHgzZmZmZmY7XG4gICAgfVxuICAgIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBmdW5jdGlvbiBwYXJzZUJhc2UgKHN0ciwgc3RhcnQsIGVuZCwgbXVsKSB7XG4gICAgdmFyIHIgPSAwO1xuICAgIHZhciBsZW4gPSBNYXRoLm1pbihzdHIubGVuZ3RoLCBlbmQpO1xuICAgIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICB2YXIgYyA9IHN0ci5jaGFyQ29kZUF0KGkpIC0gNDg7XG5cbiAgICAgIHIgKj0gbXVsO1xuXG4gICAgICAvLyAnYSdcbiAgICAgIGlmIChjID49IDQ5KSB7XG4gICAgICAgIHIgKz0gYyAtIDQ5ICsgMHhhO1xuXG4gICAgICAvLyAnQSdcbiAgICAgIH0gZWxzZSBpZiAoYyA+PSAxNykge1xuICAgICAgICByICs9IGMgLSAxNyArIDB4YTtcblxuICAgICAgLy8gJzAnIC0gJzknXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByICs9IGM7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByO1xuICB9XG5cbiAgQk4ucHJvdG90eXBlLl9wYXJzZUJhc2UgPSBmdW5jdGlvbiBfcGFyc2VCYXNlIChudW1iZXIsIGJhc2UsIHN0YXJ0KSB7XG4gICAgLy8gSW5pdGlhbGl6ZSBhcyB6ZXJvXG4gICAgdGhpcy53b3JkcyA9IFsgMCBdO1xuICAgIHRoaXMubGVuZ3RoID0gMTtcblxuICAgIC8vIEZpbmQgbGVuZ3RoIG9mIGxpbWIgaW4gYmFzZVxuICAgIGZvciAodmFyIGxpbWJMZW4gPSAwLCBsaW1iUG93ID0gMTsgbGltYlBvdyA8PSAweDNmZmZmZmY7IGxpbWJQb3cgKj0gYmFzZSkge1xuICAgICAgbGltYkxlbisrO1xuICAgIH1cbiAgICBsaW1iTGVuLS07XG4gICAgbGltYlBvdyA9IChsaW1iUG93IC8gYmFzZSkgfCAwO1xuXG4gICAgdmFyIHRvdGFsID0gbnVtYmVyLmxlbmd0aCAtIHN0YXJ0O1xuICAgIHZhciBtb2QgPSB0b3RhbCAlIGxpbWJMZW47XG4gICAgdmFyIGVuZCA9IE1hdGgubWluKHRvdGFsLCB0b3RhbCAtIG1vZCkgKyBzdGFydDtcblxuICAgIHZhciB3b3JkID0gMDtcbiAgICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkgKz0gbGltYkxlbikge1xuICAgICAgd29yZCA9IHBhcnNlQmFzZShudW1iZXIsIGksIGkgKyBsaW1iTGVuLCBiYXNlKTtcblxuICAgICAgdGhpcy5pbXVsbihsaW1iUG93KTtcbiAgICAgIGlmICh0aGlzLndvcmRzWzBdICsgd29yZCA8IDB4NDAwMDAwMCkge1xuICAgICAgICB0aGlzLndvcmRzWzBdICs9IHdvcmQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9pYWRkbih3b3JkKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAobW9kICE9PSAwKSB7XG4gICAgICB2YXIgcG93ID0gMTtcbiAgICAgIHdvcmQgPSBwYXJzZUJhc2UobnVtYmVyLCBpLCBudW1iZXIubGVuZ3RoLCBiYXNlKTtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IG1vZDsgaSsrKSB7XG4gICAgICAgIHBvdyAqPSBiYXNlO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmltdWxuKHBvdyk7XG4gICAgICBpZiAodGhpcy53b3Jkc1swXSArIHdvcmQgPCAweDQwMDAwMDApIHtcbiAgICAgICAgdGhpcy53b3Jkc1swXSArPSB3b3JkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5faWFkZG4od29yZCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gY29weSAoZGVzdCkge1xuICAgIGRlc3Qud29yZHMgPSBuZXcgQXJyYXkodGhpcy5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgZGVzdC53b3Jkc1tpXSA9IHRoaXMud29yZHNbaV07XG4gICAgfVxuICAgIGRlc3QubGVuZ3RoID0gdGhpcy5sZW5ndGg7XG4gICAgZGVzdC5uZWdhdGl2ZSA9IHRoaXMubmVnYXRpdmU7XG4gICAgZGVzdC5yZWQgPSB0aGlzLnJlZDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbiBjbG9uZSAoKSB7XG4gICAgdmFyIHIgPSBuZXcgQk4obnVsbCk7XG4gICAgdGhpcy5jb3B5KHIpO1xuICAgIHJldHVybiByO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5fZXhwYW5kID0gZnVuY3Rpb24gX2V4cGFuZCAoc2l6ZSkge1xuICAgIHdoaWxlICh0aGlzLmxlbmd0aCA8IHNpemUpIHtcbiAgICAgIHRoaXMud29yZHNbdGhpcy5sZW5ndGgrK10gPSAwO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvLyBSZW1vdmUgbGVhZGluZyBgMGAgZnJvbSBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLnN0cmlwID0gZnVuY3Rpb24gc3RyaXAgKCkge1xuICAgIHdoaWxlICh0aGlzLmxlbmd0aCA+IDEgJiYgdGhpcy53b3Jkc1t0aGlzLmxlbmd0aCAtIDFdID09PSAwKSB7XG4gICAgICB0aGlzLmxlbmd0aC0tO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fbm9ybVNpZ24oKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX25vcm1TaWduID0gZnVuY3Rpb24gX25vcm1TaWduICgpIHtcbiAgICAvLyAtMCA9IDBcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDEgJiYgdGhpcy53b3Jkc1swXSA9PT0gMCkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pbnNwZWN0ID0gZnVuY3Rpb24gaW5zcGVjdCAoKSB7XG4gICAgcmV0dXJuICh0aGlzLnJlZCA/ICc8Qk4tUjogJyA6ICc8Qk46ICcpICsgdGhpcy50b1N0cmluZygxNikgKyAnPic7XG4gIH07XG5cbiAgLypcblxuICB2YXIgemVyb3MgPSBbXTtcbiAgdmFyIGdyb3VwU2l6ZXMgPSBbXTtcbiAgdmFyIGdyb3VwQmFzZXMgPSBbXTtcblxuICB2YXIgcyA9ICcnO1xuICB2YXIgaSA9IC0xO1xuICB3aGlsZSAoKytpIDwgQk4ud29yZFNpemUpIHtcbiAgICB6ZXJvc1tpXSA9IHM7XG4gICAgcyArPSAnMCc7XG4gIH1cbiAgZ3JvdXBTaXplc1swXSA9IDA7XG4gIGdyb3VwU2l6ZXNbMV0gPSAwO1xuICBncm91cEJhc2VzWzBdID0gMDtcbiAgZ3JvdXBCYXNlc1sxXSA9IDA7XG4gIHZhciBiYXNlID0gMiAtIDE7XG4gIHdoaWxlICgrK2Jhc2UgPCAzNiArIDEpIHtcbiAgICB2YXIgZ3JvdXBTaXplID0gMDtcbiAgICB2YXIgZ3JvdXBCYXNlID0gMTtcbiAgICB3aGlsZSAoZ3JvdXBCYXNlIDwgKDEgPDwgQk4ud29yZFNpemUpIC8gYmFzZSkge1xuICAgICAgZ3JvdXBCYXNlICo9IGJhc2U7XG4gICAgICBncm91cFNpemUgKz0gMTtcbiAgICB9XG4gICAgZ3JvdXBTaXplc1tiYXNlXSA9IGdyb3VwU2l6ZTtcbiAgICBncm91cEJhc2VzW2Jhc2VdID0gZ3JvdXBCYXNlO1xuICB9XG5cbiAgKi9cblxuICB2YXIgemVyb3MgPSBbXG4gICAgJycsXG4gICAgJzAnLFxuICAgICcwMCcsXG4gICAgJzAwMCcsXG4gICAgJzAwMDAnLFxuICAgICcwMDAwMCcsXG4gICAgJzAwMDAwMCcsXG4gICAgJzAwMDAwMDAnLFxuICAgICcwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAnXG4gIF07XG5cbiAgdmFyIGdyb3VwU2l6ZXMgPSBbXG4gICAgMCwgMCxcbiAgICAyNSwgMTYsIDEyLCAxMSwgMTAsIDksIDgsXG4gICAgOCwgNywgNywgNywgNywgNiwgNixcbiAgICA2LCA2LCA2LCA2LCA2LCA1LCA1LFxuICAgIDUsIDUsIDUsIDUsIDUsIDUsIDUsXG4gICAgNSwgNSwgNSwgNSwgNSwgNSwgNVxuICBdO1xuXG4gIHZhciBncm91cEJhc2VzID0gW1xuICAgIDAsIDAsXG4gICAgMzM1NTQ0MzIsIDQzMDQ2NzIxLCAxNjc3NzIxNiwgNDg4MjgxMjUsIDYwNDY2MTc2LCA0MDM1MzYwNywgMTY3NzcyMTYsXG4gICAgNDMwNDY3MjEsIDEwMDAwMDAwLCAxOTQ4NzE3MSwgMzU4MzE4MDgsIDYyNzQ4NTE3LCA3NTI5NTM2LCAxMTM5MDYyNSxcbiAgICAxNjc3NzIxNiwgMjQxMzc1NjksIDM0MDEyMjI0LCA0NzA0NTg4MSwgNjQwMDAwMDAsIDQwODQxMDEsIDUxNTM2MzIsXG4gICAgNjQzNjM0MywgNzk2MjYyNCwgOTc2NTYyNSwgMTE4ODEzNzYsIDE0MzQ4OTA3LCAxNzIxMDM2OCwgMjA1MTExNDksXG4gICAgMjQzMDAwMDAsIDI4NjI5MTUxLCAzMzU1NDQzMiwgMzkxMzUzOTMsIDQ1NDM1NDI0LCA1MjUyMTg3NSwgNjA0NjYxNzZcbiAgXTtcblxuICBCTi5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyAoYmFzZSwgcGFkZGluZykge1xuICAgIGJhc2UgPSBiYXNlIHx8IDEwO1xuICAgIHBhZGRpbmcgPSBwYWRkaW5nIHwgMCB8fCAxO1xuXG4gICAgdmFyIG91dDtcbiAgICBpZiAoYmFzZSA9PT0gMTYgfHwgYmFzZSA9PT0gJ2hleCcpIHtcbiAgICAgIG91dCA9ICcnO1xuICAgICAgdmFyIG9mZiA9IDA7XG4gICAgICB2YXIgY2FycnkgPSAwO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciB3ID0gdGhpcy53b3Jkc1tpXTtcbiAgICAgICAgdmFyIHdvcmQgPSAoKCh3IDw8IG9mZikgfCBjYXJyeSkgJiAweGZmZmZmZikudG9TdHJpbmcoMTYpO1xuICAgICAgICBjYXJyeSA9ICh3ID4+PiAoMjQgLSBvZmYpKSAmIDB4ZmZmZmZmO1xuICAgICAgICBpZiAoY2FycnkgIT09IDAgfHwgaSAhPT0gdGhpcy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgb3V0ID0gemVyb3NbNiAtIHdvcmQubGVuZ3RoXSArIHdvcmQgKyBvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb3V0ID0gd29yZCArIG91dDtcbiAgICAgICAgfVxuICAgICAgICBvZmYgKz0gMjtcbiAgICAgICAgaWYgKG9mZiA+PSAyNikge1xuICAgICAgICAgIG9mZiAtPSAyNjtcbiAgICAgICAgICBpLS07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChjYXJyeSAhPT0gMCkge1xuICAgICAgICBvdXQgPSBjYXJyeS50b1N0cmluZygxNikgKyBvdXQ7XG4gICAgICB9XG4gICAgICB3aGlsZSAob3V0Lmxlbmd0aCAlIHBhZGRpbmcgIT09IDApIHtcbiAgICAgICAgb3V0ID0gJzAnICsgb3V0O1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHtcbiAgICAgICAgb3V0ID0gJy0nICsgb3V0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG5cbiAgICBpZiAoYmFzZSA9PT0gKGJhc2UgfCAwKSAmJiBiYXNlID49IDIgJiYgYmFzZSA8PSAzNikge1xuICAgICAgLy8gdmFyIGdyb3VwU2l6ZSA9IE1hdGguZmxvb3IoQk4ud29yZFNpemUgKiBNYXRoLkxOMiAvIE1hdGgubG9nKGJhc2UpKTtcbiAgICAgIHZhciBncm91cFNpemUgPSBncm91cFNpemVzW2Jhc2VdO1xuICAgICAgLy8gdmFyIGdyb3VwQmFzZSA9IE1hdGgucG93KGJhc2UsIGdyb3VwU2l6ZSk7XG4gICAgICB2YXIgZ3JvdXBCYXNlID0gZ3JvdXBCYXNlc1tiYXNlXTtcbiAgICAgIG91dCA9ICcnO1xuICAgICAgdmFyIGMgPSB0aGlzLmNsb25lKCk7XG4gICAgICBjLm5lZ2F0aXZlID0gMDtcbiAgICAgIHdoaWxlICghYy5pc1plcm8oKSkge1xuICAgICAgICB2YXIgciA9IGMubW9kbihncm91cEJhc2UpLnRvU3RyaW5nKGJhc2UpO1xuICAgICAgICBjID0gYy5pZGl2bihncm91cEJhc2UpO1xuXG4gICAgICAgIGlmICghYy5pc1plcm8oKSkge1xuICAgICAgICAgIG91dCA9IHplcm9zW2dyb3VwU2l6ZSAtIHIubGVuZ3RoXSArIHIgKyBvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb3V0ID0gciArIG91dDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHRoaXMuaXNaZXJvKCkpIHtcbiAgICAgICAgb3V0ID0gJzAnICsgb3V0O1xuICAgICAgfVxuICAgICAgd2hpbGUgKG91dC5sZW5ndGggJSBwYWRkaW5nICE9PSAwKSB7XG4gICAgICAgIG91dCA9ICcwJyArIG91dDtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICAgIG91dCA9ICctJyArIG91dDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuXG4gICAgYXNzZXJ0KGZhbHNlLCAnQmFzZSBzaG91bGQgYmUgYmV0d2VlbiAyIGFuZCAzNicpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS50b051bWJlciA9IGZ1bmN0aW9uIHRvTnVtYmVyICgpIHtcbiAgICB2YXIgcmV0ID0gdGhpcy53b3Jkc1swXTtcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDIpIHtcbiAgICAgIHJldCArPSB0aGlzLndvcmRzWzFdICogMHg0MDAwMDAwO1xuICAgIH0gZWxzZSBpZiAodGhpcy5sZW5ndGggPT09IDMgJiYgdGhpcy53b3Jkc1syXSA9PT0gMHgwMSkge1xuICAgICAgLy8gTk9URTogYXQgdGhpcyBzdGFnZSBpdCBpcyBrbm93biB0aGF0IHRoZSB0b3AgYml0IGlzIHNldFxuICAgICAgcmV0ICs9IDB4MTAwMDAwMDAwMDAwMDAgKyAodGhpcy53b3Jkc1sxXSAqIDB4NDAwMDAwMCk7XG4gICAgfSBlbHNlIGlmICh0aGlzLmxlbmd0aCA+IDIpIHtcbiAgICAgIGFzc2VydChmYWxzZSwgJ051bWJlciBjYW4gb25seSBzYWZlbHkgc3RvcmUgdXAgdG8gNTMgYml0cycpO1xuICAgIH1cbiAgICByZXR1cm4gKHRoaXMubmVnYXRpdmUgIT09IDApID8gLXJldCA6IHJldDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OICgpIHtcbiAgICByZXR1cm4gdGhpcy50b1N0cmluZygxNik7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnRvQnVmZmVyID0gZnVuY3Rpb24gdG9CdWZmZXIgKGVuZGlhbiwgbGVuZ3RoKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBCdWZmZXIgIT09ICd1bmRlZmluZWQnKTtcbiAgICByZXR1cm4gdGhpcy50b0FycmF5TGlrZShCdWZmZXIsIGVuZGlhbiwgbGVuZ3RoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudG9BcnJheSA9IGZ1bmN0aW9uIHRvQXJyYXkgKGVuZGlhbiwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIHRoaXMudG9BcnJheUxpa2UoQXJyYXksIGVuZGlhbiwgbGVuZ3RoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudG9BcnJheUxpa2UgPSBmdW5jdGlvbiB0b0FycmF5TGlrZSAoQXJyYXlUeXBlLCBlbmRpYW4sIGxlbmd0aCkge1xuICAgIHZhciBieXRlTGVuZ3RoID0gdGhpcy5ieXRlTGVuZ3RoKCk7XG4gICAgdmFyIHJlcUxlbmd0aCA9IGxlbmd0aCB8fCBNYXRoLm1heCgxLCBieXRlTGVuZ3RoKTtcbiAgICBhc3NlcnQoYnl0ZUxlbmd0aCA8PSByZXFMZW5ndGgsICdieXRlIGFycmF5IGxvbmdlciB0aGFuIGRlc2lyZWQgbGVuZ3RoJyk7XG4gICAgYXNzZXJ0KHJlcUxlbmd0aCA+IDAsICdSZXF1ZXN0ZWQgYXJyYXkgbGVuZ3RoIDw9IDAnKTtcblxuICAgIHRoaXMuc3RyaXAoKTtcbiAgICB2YXIgbGl0dGxlRW5kaWFuID0gZW5kaWFuID09PSAnbGUnO1xuICAgIHZhciByZXMgPSBuZXcgQXJyYXlUeXBlKHJlcUxlbmd0aCk7XG5cbiAgICB2YXIgYiwgaTtcbiAgICB2YXIgcSA9IHRoaXMuY2xvbmUoKTtcbiAgICBpZiAoIWxpdHRsZUVuZGlhbikge1xuICAgICAgLy8gQXNzdW1lIGJpZy1lbmRpYW5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCByZXFMZW5ndGggLSBieXRlTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcmVzW2ldID0gMDtcbiAgICAgIH1cblxuICAgICAgZm9yIChpID0gMDsgIXEuaXNaZXJvKCk7IGkrKykge1xuICAgICAgICBiID0gcS5hbmRsbigweGZmKTtcbiAgICAgICAgcS5pdXNocm4oOCk7XG5cbiAgICAgICAgcmVzW3JlcUxlbmd0aCAtIGkgLSAxXSA9IGI7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAoaSA9IDA7ICFxLmlzWmVybygpOyBpKyspIHtcbiAgICAgICAgYiA9IHEuYW5kbG4oMHhmZik7XG4gICAgICAgIHEuaXVzaHJuKDgpO1xuXG4gICAgICAgIHJlc1tpXSA9IGI7XG4gICAgICB9XG5cbiAgICAgIGZvciAoOyBpIDwgcmVxTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcmVzW2ldID0gMDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIGlmIChNYXRoLmNsejMyKSB7XG4gICAgQk4ucHJvdG90eXBlLl9jb3VudEJpdHMgPSBmdW5jdGlvbiBfY291bnRCaXRzICh3KSB7XG4gICAgICByZXR1cm4gMzIgLSBNYXRoLmNsejMyKHcpO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgQk4ucHJvdG90eXBlLl9jb3VudEJpdHMgPSBmdW5jdGlvbiBfY291bnRCaXRzICh3KSB7XG4gICAgICB2YXIgdCA9IHc7XG4gICAgICB2YXIgciA9IDA7XG4gICAgICBpZiAodCA+PSAweDEwMDApIHtcbiAgICAgICAgciArPSAxMztcbiAgICAgICAgdCA+Pj49IDEzO1xuICAgICAgfVxuICAgICAgaWYgKHQgPj0gMHg0MCkge1xuICAgICAgICByICs9IDc7XG4gICAgICAgIHQgPj4+PSA3O1xuICAgICAgfVxuICAgICAgaWYgKHQgPj0gMHg4KSB7XG4gICAgICAgIHIgKz0gNDtcbiAgICAgICAgdCA+Pj49IDQ7XG4gICAgICB9XG4gICAgICBpZiAodCA+PSAweDAyKSB7XG4gICAgICAgIHIgKz0gMjtcbiAgICAgICAgdCA+Pj49IDI7XG4gICAgICB9XG4gICAgICByZXR1cm4gciArIHQ7XG4gICAgfTtcbiAgfVxuXG4gIEJOLnByb3RvdHlwZS5femVyb0JpdHMgPSBmdW5jdGlvbiBfemVyb0JpdHMgKHcpIHtcbiAgICAvLyBTaG9ydC1jdXRcbiAgICBpZiAodyA9PT0gMCkgcmV0dXJuIDI2O1xuXG4gICAgdmFyIHQgPSB3O1xuICAgIHZhciByID0gMDtcbiAgICBpZiAoKHQgJiAweDFmZmYpID09PSAwKSB7XG4gICAgICByICs9IDEzO1xuICAgICAgdCA+Pj49IDEzO1xuICAgIH1cbiAgICBpZiAoKHQgJiAweDdmKSA9PT0gMCkge1xuICAgICAgciArPSA3O1xuICAgICAgdCA+Pj49IDc7XG4gICAgfVxuICAgIGlmICgodCAmIDB4ZikgPT09IDApIHtcbiAgICAgIHIgKz0gNDtcbiAgICAgIHQgPj4+PSA0O1xuICAgIH1cbiAgICBpZiAoKHQgJiAweDMpID09PSAwKSB7XG4gICAgICByICs9IDI7XG4gICAgICB0ID4+Pj0gMjtcbiAgICB9XG4gICAgaWYgKCh0ICYgMHgxKSA9PT0gMCkge1xuICAgICAgcisrO1xuICAgIH1cbiAgICByZXR1cm4gcjtcbiAgfTtcblxuICAvLyBSZXR1cm4gbnVtYmVyIG9mIHVzZWQgYml0cyBpbiBhIEJOXG4gIEJOLnByb3RvdHlwZS5iaXRMZW5ndGggPSBmdW5jdGlvbiBiaXRMZW5ndGggKCkge1xuICAgIHZhciB3ID0gdGhpcy53b3Jkc1t0aGlzLmxlbmd0aCAtIDFdO1xuICAgIHZhciBoaSA9IHRoaXMuX2NvdW50Qml0cyh3KTtcbiAgICByZXR1cm4gKHRoaXMubGVuZ3RoIC0gMSkgKiAyNiArIGhpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHRvQml0QXJyYXkgKG51bSkge1xuICAgIHZhciB3ID0gbmV3IEFycmF5KG51bS5iaXRMZW5ndGgoKSk7XG5cbiAgICBmb3IgKHZhciBiaXQgPSAwOyBiaXQgPCB3Lmxlbmd0aDsgYml0KyspIHtcbiAgICAgIHZhciBvZmYgPSAoYml0IC8gMjYpIHwgMDtcbiAgICAgIHZhciB3Yml0ID0gYml0ICUgMjY7XG5cbiAgICAgIHdbYml0XSA9IChudW0ud29yZHNbb2ZmXSAmICgxIDw8IHdiaXQpKSA+Pj4gd2JpdDtcbiAgICB9XG5cbiAgICByZXR1cm4gdztcbiAgfVxuXG4gIC8vIE51bWJlciBvZiB0cmFpbGluZyB6ZXJvIGJpdHNcbiAgQk4ucHJvdG90eXBlLnplcm9CaXRzID0gZnVuY3Rpb24gemVyb0JpdHMgKCkge1xuICAgIGlmICh0aGlzLmlzWmVybygpKSByZXR1cm4gMDtcblxuICAgIHZhciByID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBiID0gdGhpcy5femVyb0JpdHModGhpcy53b3Jkc1tpXSk7XG4gICAgICByICs9IGI7XG4gICAgICBpZiAoYiAhPT0gMjYpIGJyZWFrO1xuICAgIH1cbiAgICByZXR1cm4gcjtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuYnl0ZUxlbmd0aCA9IGZ1bmN0aW9uIGJ5dGVMZW5ndGggKCkge1xuICAgIHJldHVybiBNYXRoLmNlaWwodGhpcy5iaXRMZW5ndGgoKSAvIDgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS50b1R3b3MgPSBmdW5jdGlvbiB0b1R3b3MgKHdpZHRoKSB7XG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIHJldHVybiB0aGlzLmFicygpLmlub3RuKHdpZHRoKS5pYWRkbigxKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZnJvbVR3b3MgPSBmdW5jdGlvbiBmcm9tVHdvcyAod2lkdGgpIHtcbiAgICBpZiAodGhpcy50ZXN0bih3aWR0aCAtIDEpKSB7XG4gICAgICByZXR1cm4gdGhpcy5ub3RuKHdpZHRoKS5pYWRkbigxKS5pbmVnKCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmNsb25lKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmlzTmVnID0gZnVuY3Rpb24gaXNOZWcgKCkge1xuICAgIHJldHVybiB0aGlzLm5lZ2F0aXZlICE9PSAwO1xuICB9O1xuXG4gIC8vIFJldHVybiBuZWdhdGl2ZSBjbG9uZSBvZiBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLm5lZyA9IGZ1bmN0aW9uIG5lZyAoKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pbmVnKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmluZWcgPSBmdW5jdGlvbiBpbmVnICgpIHtcbiAgICBpZiAoIXRoaXMuaXNaZXJvKCkpIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgXj0gMTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvLyBPciBgbnVtYCB3aXRoIGB0aGlzYCBpbi1wbGFjZVxuICBCTi5wcm90b3R5cGUuaXVvciA9IGZ1bmN0aW9uIGl1b3IgKG51bSkge1xuICAgIHdoaWxlICh0aGlzLmxlbmd0aCA8IG51bS5sZW5ndGgpIHtcbiAgICAgIHRoaXMud29yZHNbdGhpcy5sZW5ndGgrK10gPSAwO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gdGhpcy53b3Jkc1tpXSB8IG51bS53b3Jkc1tpXTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pb3IgPSBmdW5jdGlvbiBpb3IgKG51bSkge1xuICAgIGFzc2VydCgodGhpcy5uZWdhdGl2ZSB8IG51bS5uZWdhdGl2ZSkgPT09IDApO1xuICAgIHJldHVybiB0aGlzLml1b3IobnVtKTtcbiAgfTtcblxuICAvLyBPciBgbnVtYCB3aXRoIGB0aGlzYFxuICBCTi5wcm90b3R5cGUub3IgPSBmdW5jdGlvbiBvciAobnVtKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2xvbmUoKS5pb3IobnVtKTtcbiAgICByZXR1cm4gbnVtLmNsb25lKCkuaW9yKHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS51b3IgPSBmdW5jdGlvbiB1b3IgKG51bSkge1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHJldHVybiB0aGlzLmNsb25lKCkuaXVvcihudW0pO1xuICAgIHJldHVybiBudW0uY2xvbmUoKS5pdW9yKHRoaXMpO1xuICB9O1xuXG4gIC8vIEFuZCBgbnVtYCB3aXRoIGB0aGlzYCBpbi1wbGFjZVxuICBCTi5wcm90b3R5cGUuaXVhbmQgPSBmdW5jdGlvbiBpdWFuZCAobnVtKSB7XG4gICAgLy8gYiA9IG1pbi1sZW5ndGgobnVtLCB0aGlzKVxuICAgIHZhciBiO1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHtcbiAgICAgIGIgPSBudW07XG4gICAgfSBlbHNlIHtcbiAgICAgIGIgPSB0aGlzO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYi5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IHRoaXMud29yZHNbaV0gJiBudW0ud29yZHNbaV07XG4gICAgfVxuXG4gICAgdGhpcy5sZW5ndGggPSBiLmxlbmd0aDtcblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmlhbmQgPSBmdW5jdGlvbiBpYW5kIChudW0pIHtcbiAgICBhc3NlcnQoKHRoaXMubmVnYXRpdmUgfCBudW0ubmVnYXRpdmUpID09PSAwKTtcbiAgICByZXR1cm4gdGhpcy5pdWFuZChudW0pO1xuICB9O1xuXG4gIC8vIEFuZCBgbnVtYCB3aXRoIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuYW5kID0gZnVuY3Rpb24gYW5kIChudW0pIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSByZXR1cm4gdGhpcy5jbG9uZSgpLmlhbmQobnVtKTtcbiAgICByZXR1cm4gbnVtLmNsb25lKCkuaWFuZCh0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudWFuZCA9IGZ1bmN0aW9uIHVhbmQgKG51bSkge1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHJldHVybiB0aGlzLmNsb25lKCkuaXVhbmQobnVtKTtcbiAgICByZXR1cm4gbnVtLmNsb25lKCkuaXVhbmQodGhpcyk7XG4gIH07XG5cbiAgLy8gWG9yIGBudW1gIHdpdGggYHRoaXNgIGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pdXhvciA9IGZ1bmN0aW9uIGl1eG9yIChudW0pIHtcbiAgICAvLyBhLmxlbmd0aCA+IGIubGVuZ3RoXG4gICAgdmFyIGE7XG4gICAgdmFyIGI7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkge1xuICAgICAgYSA9IHRoaXM7XG4gICAgICBiID0gbnVtO1xuICAgIH0gZWxzZSB7XG4gICAgICBhID0gbnVtO1xuICAgICAgYiA9IHRoaXM7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBiLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gYS53b3Jkc1tpXSBeIGIud29yZHNbaV07XG4gICAgfVxuXG4gICAgaWYgKHRoaXMgIT09IGEpIHtcbiAgICAgIGZvciAoOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgICB0aGlzLndvcmRzW2ldID0gYS53b3Jkc1tpXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmxlbmd0aCA9IGEubGVuZ3RoO1xuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXhvciA9IGZ1bmN0aW9uIGl4b3IgKG51bSkge1xuICAgIGFzc2VydCgodGhpcy5uZWdhdGl2ZSB8IG51bS5uZWdhdGl2ZSkgPT09IDApO1xuICAgIHJldHVybiB0aGlzLml1eG9yKG51bSk7XG4gIH07XG5cbiAgLy8gWG9yIGBudW1gIHdpdGggYHRoaXNgXG4gIEJOLnByb3RvdHlwZS54b3IgPSBmdW5jdGlvbiB4b3IgKG51bSkge1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHJldHVybiB0aGlzLmNsb25lKCkuaXhvcihudW0pO1xuICAgIHJldHVybiBudW0uY2xvbmUoKS5peG9yKHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS51eG9yID0gZnVuY3Rpb24gdXhvciAobnVtKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2xvbmUoKS5pdXhvcihudW0pO1xuICAgIHJldHVybiBudW0uY2xvbmUoKS5pdXhvcih0aGlzKTtcbiAgfTtcblxuICAvLyBOb3QgYGB0aGlzYGAgd2l0aCBgYHdpZHRoYGAgYml0d2lkdGhcbiAgQk4ucHJvdG90eXBlLmlub3RuID0gZnVuY3Rpb24gaW5vdG4gKHdpZHRoKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiB3aWR0aCA9PT0gJ251bWJlcicgJiYgd2lkdGggPj0gMCk7XG5cbiAgICB2YXIgYnl0ZXNOZWVkZWQgPSBNYXRoLmNlaWwod2lkdGggLyAyNikgfCAwO1xuICAgIHZhciBiaXRzTGVmdCA9IHdpZHRoICUgMjY7XG5cbiAgICAvLyBFeHRlbmQgdGhlIGJ1ZmZlciB3aXRoIGxlYWRpbmcgemVyb2VzXG4gICAgdGhpcy5fZXhwYW5kKGJ5dGVzTmVlZGVkKTtcblxuICAgIGlmIChiaXRzTGVmdCA+IDApIHtcbiAgICAgIGJ5dGVzTmVlZGVkLS07XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIGNvbXBsZXRlIHdvcmRzXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBieXRlc05lZWRlZDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gfnRoaXMud29yZHNbaV0gJiAweDNmZmZmZmY7XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIHRoZSByZXNpZHVlXG4gICAgaWYgKGJpdHNMZWZ0ID4gMCkge1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IH50aGlzLndvcmRzW2ldICYgKDB4M2ZmZmZmZiA+PiAoMjYgLSBiaXRzTGVmdCkpO1xuICAgIH1cblxuICAgIC8vIEFuZCByZW1vdmUgbGVhZGluZyB6ZXJvZXNcbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5ub3RuID0gZnVuY3Rpb24gbm90biAod2lkdGgpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlub3RuKHdpZHRoKTtcbiAgfTtcblxuICAvLyBTZXQgYGJpdGAgb2YgYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5zZXRuID0gZnVuY3Rpb24gc2V0biAoYml0LCB2YWwpIHtcbiAgICBhc3NlcnQodHlwZW9mIGJpdCA9PT0gJ251bWJlcicgJiYgYml0ID49IDApO1xuXG4gICAgdmFyIG9mZiA9IChiaXQgLyAyNikgfCAwO1xuICAgIHZhciB3Yml0ID0gYml0ICUgMjY7XG5cbiAgICB0aGlzLl9leHBhbmQob2ZmICsgMSk7XG5cbiAgICBpZiAodmFsKSB7XG4gICAgICB0aGlzLndvcmRzW29mZl0gPSB0aGlzLndvcmRzW29mZl0gfCAoMSA8PCB3Yml0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy53b3Jkc1tvZmZdID0gdGhpcy53b3Jkc1tvZmZdICYgfigxIDw8IHdiaXQpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgLy8gQWRkIGBudW1gIHRvIGB0aGlzYCBpbi1wbGFjZVxuICBCTi5wcm90b3R5cGUuaWFkZCA9IGZ1bmN0aW9uIGlhZGQgKG51bSkge1xuICAgIHZhciByO1xuXG4gICAgLy8gbmVnYXRpdmUgKyBwb3NpdGl2ZVxuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwICYmIG51bS5uZWdhdGl2ZSA9PT0gMCkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgICByID0gdGhpcy5pc3ViKG51bSk7XG4gICAgICB0aGlzLm5lZ2F0aXZlIF49IDE7XG4gICAgICByZXR1cm4gdGhpcy5fbm9ybVNpZ24oKTtcblxuICAgIC8vIHBvc2l0aXZlICsgbmVnYXRpdmVcbiAgICB9IGVsc2UgaWYgKHRoaXMubmVnYXRpdmUgPT09IDAgJiYgbnVtLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICBudW0ubmVnYXRpdmUgPSAwO1xuICAgICAgciA9IHRoaXMuaXN1YihudW0pO1xuICAgICAgbnVtLm5lZ2F0aXZlID0gMTtcbiAgICAgIHJldHVybiByLl9ub3JtU2lnbigpO1xuICAgIH1cblxuICAgIC8vIGEubGVuZ3RoID4gYi5sZW5ndGhcbiAgICB2YXIgYSwgYjtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSB7XG4gICAgICBhID0gdGhpcztcbiAgICAgIGIgPSBudW07XG4gICAgfSBlbHNlIHtcbiAgICAgIGEgPSBudW07XG4gICAgICBiID0gdGhpcztcbiAgICB9XG5cbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYi5sZW5ndGg7IGkrKykge1xuICAgICAgciA9IChhLndvcmRzW2ldIHwgMCkgKyAoYi53b3Jkc1tpXSB8IDApICsgY2Fycnk7XG4gICAgICB0aGlzLndvcmRzW2ldID0gciAmIDB4M2ZmZmZmZjtcbiAgICAgIGNhcnJ5ID0gciA+Pj4gMjY7XG4gICAgfVxuICAgIGZvciAoOyBjYXJyeSAhPT0gMCAmJiBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgciA9IChhLndvcmRzW2ldIHwgMCkgKyBjYXJyeTtcbiAgICAgIHRoaXMud29yZHNbaV0gPSByICYgMHgzZmZmZmZmO1xuICAgICAgY2FycnkgPSByID4+PiAyNjtcbiAgICB9XG5cbiAgICB0aGlzLmxlbmd0aCA9IGEubGVuZ3RoO1xuICAgIGlmIChjYXJyeSAhPT0gMCkge1xuICAgICAgdGhpcy53b3Jkc1t0aGlzLmxlbmd0aF0gPSBjYXJyeTtcbiAgICAgIHRoaXMubGVuZ3RoKys7XG4gICAgLy8gQ29weSB0aGUgcmVzdCBvZiB0aGUgd29yZHNcbiAgICB9IGVsc2UgaWYgKGEgIT09IHRoaXMpIHtcbiAgICAgIGZvciAoOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgICB0aGlzLndvcmRzW2ldID0gYS53b3Jkc1tpXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvLyBBZGQgYG51bWAgdG8gYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBhZGQgKG51bSkge1xuICAgIHZhciByZXM7XG4gICAgaWYgKG51bS5uZWdhdGl2ZSAhPT0gMCAmJiB0aGlzLm5lZ2F0aXZlID09PSAwKSB7XG4gICAgICBudW0ubmVnYXRpdmUgPSAwO1xuICAgICAgcmVzID0gdGhpcy5zdWIobnVtKTtcbiAgICAgIG51bS5uZWdhdGl2ZSBePSAxO1xuICAgICAgcmV0dXJuIHJlcztcbiAgICB9IGVsc2UgaWYgKG51bS5uZWdhdGl2ZSA9PT0gMCAmJiB0aGlzLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICAgIHJlcyA9IG51bS5zdWIodGhpcyk7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICAgIHJldHVybiByZXM7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2xvbmUoKS5pYWRkKG51bSk7XG5cbiAgICByZXR1cm4gbnVtLmNsb25lKCkuaWFkZCh0aGlzKTtcbiAgfTtcblxuICAvLyBTdWJ0cmFjdCBgbnVtYCBmcm9tIGB0aGlzYCBpbi1wbGFjZVxuICBCTi5wcm90b3R5cGUuaXN1YiA9IGZ1bmN0aW9uIGlzdWIgKG51bSkge1xuICAgIC8vIHRoaXMgLSAoLW51bSkgPSB0aGlzICsgbnVtXG4gICAgaWYgKG51bS5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgbnVtLm5lZ2F0aXZlID0gMDtcbiAgICAgIHZhciByID0gdGhpcy5pYWRkKG51bSk7XG4gICAgICBudW0ubmVnYXRpdmUgPSAxO1xuICAgICAgcmV0dXJuIHIuX25vcm1TaWduKCk7XG5cbiAgICAvLyAtdGhpcyAtIG51bSA9IC0odGhpcyArIG51bSlcbiAgICB9IGVsc2UgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuICAgICAgdGhpcy5pYWRkKG51bSk7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICAgIHJldHVybiB0aGlzLl9ub3JtU2lnbigpO1xuICAgIH1cblxuICAgIC8vIEF0IHRoaXMgcG9pbnQgYm90aCBudW1iZXJzIGFyZSBwb3NpdGl2ZVxuICAgIHZhciBjbXAgPSB0aGlzLmNtcChudW0pO1xuXG4gICAgLy8gT3B0aW1pemF0aW9uIC0gemVyb2lmeVxuICAgIGlmIChjbXAgPT09IDApIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuICAgICAgdGhpcy5sZW5ndGggPSAxO1xuICAgICAgdGhpcy53b3Jkc1swXSA9IDA7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBhID4gYlxuICAgIHZhciBhLCBiO1xuICAgIGlmIChjbXAgPiAwKSB7XG4gICAgICBhID0gdGhpcztcbiAgICAgIGIgPSBudW07XG4gICAgfSBlbHNlIHtcbiAgICAgIGEgPSBudW07XG4gICAgICBiID0gdGhpcztcbiAgICB9XG5cbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYi5sZW5ndGg7IGkrKykge1xuICAgICAgciA9IChhLndvcmRzW2ldIHwgMCkgLSAoYi53b3Jkc1tpXSB8IDApICsgY2Fycnk7XG4gICAgICBjYXJyeSA9IHIgPj4gMjY7XG4gICAgICB0aGlzLndvcmRzW2ldID0gciAmIDB4M2ZmZmZmZjtcbiAgICB9XG4gICAgZm9yICg7IGNhcnJ5ICE9PSAwICYmIGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICByID0gKGEud29yZHNbaV0gfCAwKSArIGNhcnJ5O1xuICAgICAgY2FycnkgPSByID4+IDI2O1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IHIgJiAweDNmZmZmZmY7XG4gICAgfVxuXG4gICAgLy8gQ29weSByZXN0IG9mIHRoZSB3b3Jkc1xuICAgIGlmIChjYXJyeSA9PT0gMCAmJiBpIDwgYS5sZW5ndGggJiYgYSAhPT0gdGhpcykge1xuICAgICAgZm9yICg7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMud29yZHNbaV0gPSBhLndvcmRzW2ldO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMubGVuZ3RoID0gTWF0aC5tYXgodGhpcy5sZW5ndGgsIGkpO1xuXG4gICAgaWYgKGEgIT09IHRoaXMpIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgLy8gU3VidHJhY3QgYG51bWAgZnJvbSBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLnN1YiA9IGZ1bmN0aW9uIHN1YiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pc3ViKG51bSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gc21hbGxNdWxUbyAoc2VsZiwgbnVtLCBvdXQpIHtcbiAgICBvdXQubmVnYXRpdmUgPSBudW0ubmVnYXRpdmUgXiBzZWxmLm5lZ2F0aXZlO1xuICAgIHZhciBsZW4gPSAoc2VsZi5sZW5ndGggKyBudW0ubGVuZ3RoKSB8IDA7XG4gICAgb3V0Lmxlbmd0aCA9IGxlbjtcbiAgICBsZW4gPSAobGVuIC0gMSkgfCAwO1xuXG4gICAgLy8gUGVlbCBvbmUgaXRlcmF0aW9uIChjb21waWxlciBjYW4ndCBkbyBpdCwgYmVjYXVzZSBvZiBjb2RlIGNvbXBsZXhpdHkpXG4gICAgdmFyIGEgPSBzZWxmLndvcmRzWzBdIHwgMDtcbiAgICB2YXIgYiA9IG51bS53b3Jkc1swXSB8IDA7XG4gICAgdmFyIHIgPSBhICogYjtcblxuICAgIHZhciBsbyA9IHIgJiAweDNmZmZmZmY7XG4gICAgdmFyIGNhcnJ5ID0gKHIgLyAweDQwMDAwMDApIHwgMDtcbiAgICBvdXQud29yZHNbMF0gPSBsbztcblxuICAgIGZvciAodmFyIGsgPSAxOyBrIDwgbGVuOyBrKyspIHtcbiAgICAgIC8vIFN1bSBhbGwgd29yZHMgd2l0aCB0aGUgc2FtZSBgaSArIGogPSBrYCBhbmQgYWNjdW11bGF0ZSBgbmNhcnJ5YCxcbiAgICAgIC8vIG5vdGUgdGhhdCBuY2FycnkgY291bGQgYmUgPj0gMHgzZmZmZmZmXG4gICAgICB2YXIgbmNhcnJ5ID0gY2FycnkgPj4+IDI2O1xuICAgICAgdmFyIHJ3b3JkID0gY2FycnkgJiAweDNmZmZmZmY7XG4gICAgICB2YXIgbWF4SiA9IE1hdGgubWluKGssIG51bS5sZW5ndGggLSAxKTtcbiAgICAgIGZvciAodmFyIGogPSBNYXRoLm1heCgwLCBrIC0gc2VsZi5sZW5ndGggKyAxKTsgaiA8PSBtYXhKOyBqKyspIHtcbiAgICAgICAgdmFyIGkgPSAoayAtIGopIHwgMDtcbiAgICAgICAgYSA9IHNlbGYud29yZHNbaV0gfCAwO1xuICAgICAgICBiID0gbnVtLndvcmRzW2pdIHwgMDtcbiAgICAgICAgciA9IGEgKiBiICsgcndvcmQ7XG4gICAgICAgIG5jYXJyeSArPSAociAvIDB4NDAwMDAwMCkgfCAwO1xuICAgICAgICByd29yZCA9IHIgJiAweDNmZmZmZmY7XG4gICAgICB9XG4gICAgICBvdXQud29yZHNba10gPSByd29yZCB8IDA7XG4gICAgICBjYXJyeSA9IG5jYXJyeSB8IDA7XG4gICAgfVxuICAgIGlmIChjYXJyeSAhPT0gMCkge1xuICAgICAgb3V0LndvcmRzW2tdID0gY2FycnkgfCAwO1xuICAgIH0gZWxzZSB7XG4gICAgICBvdXQubGVuZ3RoLS07XG4gICAgfVxuXG4gICAgcmV0dXJuIG91dC5zdHJpcCgpO1xuICB9XG5cbiAgLy8gVE9ETyhpbmR1dG55KTogaXQgbWF5IGJlIHJlYXNvbmFibGUgdG8gb21pdCBpdCBmb3IgdXNlcnMgd2hvIGRvbid0IG5lZWRcbiAgLy8gdG8gd29yayB3aXRoIDI1Ni1iaXQgbnVtYmVycywgb3RoZXJ3aXNlIGl0IGdpdmVzIDIwJSBpbXByb3ZlbWVudCBmb3IgMjU2LWJpdFxuICAvLyBtdWx0aXBsaWNhdGlvbiAobGlrZSBlbGxpcHRpYyBzZWNwMjU2azEpLlxuICB2YXIgY29tYjEwTXVsVG8gPSBmdW5jdGlvbiBjb21iMTBNdWxUbyAoc2VsZiwgbnVtLCBvdXQpIHtcbiAgICB2YXIgYSA9IHNlbGYud29yZHM7XG4gICAgdmFyIGIgPSBudW0ud29yZHM7XG4gICAgdmFyIG8gPSBvdXQud29yZHM7XG4gICAgdmFyIGMgPSAwO1xuICAgIHZhciBsbztcbiAgICB2YXIgbWlkO1xuICAgIHZhciBoaTtcbiAgICB2YXIgYTAgPSBhWzBdIHwgMDtcbiAgICB2YXIgYWwwID0gYTAgJiAweDFmZmY7XG4gICAgdmFyIGFoMCA9IGEwID4+PiAxMztcbiAgICB2YXIgYTEgPSBhWzFdIHwgMDtcbiAgICB2YXIgYWwxID0gYTEgJiAweDFmZmY7XG4gICAgdmFyIGFoMSA9IGExID4+PiAxMztcbiAgICB2YXIgYTIgPSBhWzJdIHwgMDtcbiAgICB2YXIgYWwyID0gYTIgJiAweDFmZmY7XG4gICAgdmFyIGFoMiA9IGEyID4+PiAxMztcbiAgICB2YXIgYTMgPSBhWzNdIHwgMDtcbiAgICB2YXIgYWwzID0gYTMgJiAweDFmZmY7XG4gICAgdmFyIGFoMyA9IGEzID4+PiAxMztcbiAgICB2YXIgYTQgPSBhWzRdIHwgMDtcbiAgICB2YXIgYWw0ID0gYTQgJiAweDFmZmY7XG4gICAgdmFyIGFoNCA9IGE0ID4+PiAxMztcbiAgICB2YXIgYTUgPSBhWzVdIHwgMDtcbiAgICB2YXIgYWw1ID0gYTUgJiAweDFmZmY7XG4gICAgdmFyIGFoNSA9IGE1ID4+PiAxMztcbiAgICB2YXIgYTYgPSBhWzZdIHwgMDtcbiAgICB2YXIgYWw2ID0gYTYgJiAweDFmZmY7XG4gICAgdmFyIGFoNiA9IGE2ID4+PiAxMztcbiAgICB2YXIgYTcgPSBhWzddIHwgMDtcbiAgICB2YXIgYWw3ID0gYTcgJiAweDFmZmY7XG4gICAgdmFyIGFoNyA9IGE3ID4+PiAxMztcbiAgICB2YXIgYTggPSBhWzhdIHwgMDtcbiAgICB2YXIgYWw4ID0gYTggJiAweDFmZmY7XG4gICAgdmFyIGFoOCA9IGE4ID4+PiAxMztcbiAgICB2YXIgYTkgPSBhWzldIHwgMDtcbiAgICB2YXIgYWw5ID0gYTkgJiAweDFmZmY7XG4gICAgdmFyIGFoOSA9IGE5ID4+PiAxMztcbiAgICB2YXIgYjAgPSBiWzBdIHwgMDtcbiAgICB2YXIgYmwwID0gYjAgJiAweDFmZmY7XG4gICAgdmFyIGJoMCA9IGIwID4+PiAxMztcbiAgICB2YXIgYjEgPSBiWzFdIHwgMDtcbiAgICB2YXIgYmwxID0gYjEgJiAweDFmZmY7XG4gICAgdmFyIGJoMSA9IGIxID4+PiAxMztcbiAgICB2YXIgYjIgPSBiWzJdIHwgMDtcbiAgICB2YXIgYmwyID0gYjIgJiAweDFmZmY7XG4gICAgdmFyIGJoMiA9IGIyID4+PiAxMztcbiAgICB2YXIgYjMgPSBiWzNdIHwgMDtcbiAgICB2YXIgYmwzID0gYjMgJiAweDFmZmY7XG4gICAgdmFyIGJoMyA9IGIzID4+PiAxMztcbiAgICB2YXIgYjQgPSBiWzRdIHwgMDtcbiAgICB2YXIgYmw0ID0gYjQgJiAweDFmZmY7XG4gICAgdmFyIGJoNCA9IGI0ID4+PiAxMztcbiAgICB2YXIgYjUgPSBiWzVdIHwgMDtcbiAgICB2YXIgYmw1ID0gYjUgJiAweDFmZmY7XG4gICAgdmFyIGJoNSA9IGI1ID4+PiAxMztcbiAgICB2YXIgYjYgPSBiWzZdIHwgMDtcbiAgICB2YXIgYmw2ID0gYjYgJiAweDFmZmY7XG4gICAgdmFyIGJoNiA9IGI2ID4+PiAxMztcbiAgICB2YXIgYjcgPSBiWzddIHwgMDtcbiAgICB2YXIgYmw3ID0gYjcgJiAweDFmZmY7XG4gICAgdmFyIGJoNyA9IGI3ID4+PiAxMztcbiAgICB2YXIgYjggPSBiWzhdIHwgMDtcbiAgICB2YXIgYmw4ID0gYjggJiAweDFmZmY7XG4gICAgdmFyIGJoOCA9IGI4ID4+PiAxMztcbiAgICB2YXIgYjkgPSBiWzldIHwgMDtcbiAgICB2YXIgYmw5ID0gYjkgJiAweDFmZmY7XG4gICAgdmFyIGJoOSA9IGI5ID4+PiAxMztcblxuICAgIG91dC5uZWdhdGl2ZSA9IHNlbGYubmVnYXRpdmUgXiBudW0ubmVnYXRpdmU7XG4gICAgb3V0Lmxlbmd0aCA9IDE5O1xuICAgIC8qIGsgPSAwICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWwwLCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDAsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDAsIGJoMCk7XG4gICAgdmFyIHcwID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MCA+Pj4gMjYpKSB8IDA7XG4gICAgdzAgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWwxLCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDEsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDEsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwwLCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDAsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMCwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMCwgYmgxKSkgfCAwO1xuICAgIHZhciB3MSA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzEgPj4+IDI2KSkgfCAwO1xuICAgIHcxICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMiAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsMiwgYmwwKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWwyLCBiaDApO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDApKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWgyLCBiaDApO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmwxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsMSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoMSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmgyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDIpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDIpKSB8IDA7XG4gICAgdmFyIHcyID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MiA+Pj4gMjYpKSB8IDA7XG4gICAgdzIgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAzICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWwzLCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDMsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDMsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDMpKSB8IDA7XG4gICAgdmFyIHczID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MyA+Pj4gMjYpKSB8IDA7XG4gICAgdzMgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSA0ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw0LCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDQsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDQsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwzLCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDMsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMywgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMiwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwyLCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDIsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDEsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMSwgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgxLCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgxLCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwwLCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDAsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMCwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMCwgYmg0KSkgfCAwO1xuICAgIHZhciB3NCA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzQgPj4+IDI2KSkgfCAwO1xuICAgIHc0ICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gNSAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsNSwgYmwwKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw1LCBiaDApO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDApKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg1LCBiaDApO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmwxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsMSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoMSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmgyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDIpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDIpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmwzKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmgzKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmw0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsNCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoNCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmg1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDUpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDUpKSB8IDA7XG4gICAgdmFyIHc1ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3NSA+Pj4gMjYpKSB8IDA7XG4gICAgdzUgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSA2ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw2LCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDYsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDYsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDYpKSB8IDA7XG4gICAgdmFyIHc2ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3NiA+Pj4gMjYpKSB8IDA7XG4gICAgdzYgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSA3ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw3LCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDcsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDcsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDQsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNCwgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg0LCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg0LCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwzLCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDMsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMywgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMiwgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwyLCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDIsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDEsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMSwgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgxLCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgxLCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwwLCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDAsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMCwgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMCwgYmg3KSkgfCAwO1xuICAgIHZhciB3NyA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzcgPj4+IDI2KSkgfCAwO1xuICAgIHc3ICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gOCAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOCwgYmwwKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw4LCBiaDApO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg4LCBibDApKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg4LCBiaDApO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmwxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsMSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoMSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmgyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDIpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDIpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmwzKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmgzKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmw0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsNCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoNCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmg1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDUpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDUpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmw2KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmg2KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmw3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsNykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoNykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmg4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDgpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDgpKSB8IDA7XG4gICAgdmFyIHc4ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3OCA+Pj4gMjYpKSB8IDA7XG4gICAgdzggJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSA5ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDkpKSB8IDA7XG4gICAgdmFyIHc5ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3OSA+Pj4gMjYpKSB8IDA7XG4gICAgdzkgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxMCAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmwxKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDEpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDEpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDEpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDQsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNCwgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg0LCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg0LCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwzLCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDMsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMywgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMiwgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwyLCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDIsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDEsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMSwgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgxLCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgxLCBiaDkpKSB8IDA7XG4gICAgdmFyIHcxMCA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzEwID4+PiAyNikpIHwgMDtcbiAgICB3MTAgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxMSAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmwyKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDIpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDIpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDIpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDQsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNCwgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg0LCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg0LCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwzLCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDMsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMywgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMiwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwyLCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDIsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzExID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTEgPj4+IDI2KSkgfCAwO1xuICAgIHcxMSAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDEyICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDMpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoMyk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsMykpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoMyk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDkpKSB8IDA7XG4gICAgdmFyIHcxMiA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzEyID4+PiAyNikpIHwgMDtcbiAgICB3MTIgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxMyAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmw0KTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDQpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDQpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDQpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDQsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNCwgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg0LCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg0LCBiaDkpKSB8IDA7XG4gICAgdmFyIHcxMyA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzEzID4+PiAyNikpIHwgMDtcbiAgICB3MTMgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxNCAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmw1KTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDUpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDUpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDUpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzE0ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTQgPj4+IDI2KSkgfCAwO1xuICAgIHcxNCAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDE1ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDYpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoNik7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsNikpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoNik7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDkpKSB8IDA7XG4gICAgdmFyIHcxNSA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzE1ID4+PiAyNikpIHwgMDtcbiAgICB3MTUgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxNiAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmw3KTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDcpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDcpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDcpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDkpKSB8IDA7XG4gICAgdmFyIHcxNiA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzE2ID4+PiAyNikpIHwgMDtcbiAgICB3MTYgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxNyAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmw4KTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDgpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDgpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDgpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzE3ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTcgPj4+IDI2KSkgfCAwO1xuICAgIHcxNyAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDE4ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDkpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoOSk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsOSkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoOSk7XG4gICAgdmFyIHcxOCA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzE4ID4+PiAyNikpIHwgMDtcbiAgICB3MTggJj0gMHgzZmZmZmZmO1xuICAgIG9bMF0gPSB3MDtcbiAgICBvWzFdID0gdzE7XG4gICAgb1syXSA9IHcyO1xuICAgIG9bM10gPSB3MztcbiAgICBvWzRdID0gdzQ7XG4gICAgb1s1XSA9IHc1O1xuICAgIG9bNl0gPSB3NjtcbiAgICBvWzddID0gdzc7XG4gICAgb1s4XSA9IHc4O1xuICAgIG9bOV0gPSB3OTtcbiAgICBvWzEwXSA9IHcxMDtcbiAgICBvWzExXSA9IHcxMTtcbiAgICBvWzEyXSA9IHcxMjtcbiAgICBvWzEzXSA9IHcxMztcbiAgICBvWzE0XSA9IHcxNDtcbiAgICBvWzE1XSA9IHcxNTtcbiAgICBvWzE2XSA9IHcxNjtcbiAgICBvWzE3XSA9IHcxNztcbiAgICBvWzE4XSA9IHcxODtcbiAgICBpZiAoYyAhPT0gMCkge1xuICAgICAgb1sxOV0gPSBjO1xuICAgICAgb3V0Lmxlbmd0aCsrO1xuICAgIH1cbiAgICByZXR1cm4gb3V0O1xuICB9O1xuXG4gIC8vIFBvbHlmaWxsIGNvbWJcbiAgaWYgKCFNYXRoLmltdWwpIHtcbiAgICBjb21iMTBNdWxUbyA9IHNtYWxsTXVsVG87XG4gIH1cblxuICBmdW5jdGlvbiBiaWdNdWxUbyAoc2VsZiwgbnVtLCBvdXQpIHtcbiAgICBvdXQubmVnYXRpdmUgPSBudW0ubmVnYXRpdmUgXiBzZWxmLm5lZ2F0aXZlO1xuICAgIG91dC5sZW5ndGggPSBzZWxmLmxlbmd0aCArIG51bS5sZW5ndGg7XG5cbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIHZhciBobmNhcnJ5ID0gMDtcbiAgICBmb3IgKHZhciBrID0gMDsgayA8IG91dC5sZW5ndGggLSAxOyBrKyspIHtcbiAgICAgIC8vIFN1bSBhbGwgd29yZHMgd2l0aCB0aGUgc2FtZSBgaSArIGogPSBrYCBhbmQgYWNjdW11bGF0ZSBgbmNhcnJ5YCxcbiAgICAgIC8vIG5vdGUgdGhhdCBuY2FycnkgY291bGQgYmUgPj0gMHgzZmZmZmZmXG4gICAgICB2YXIgbmNhcnJ5ID0gaG5jYXJyeTtcbiAgICAgIGhuY2FycnkgPSAwO1xuICAgICAgdmFyIHJ3b3JkID0gY2FycnkgJiAweDNmZmZmZmY7XG4gICAgICB2YXIgbWF4SiA9IE1hdGgubWluKGssIG51bS5sZW5ndGggLSAxKTtcbiAgICAgIGZvciAodmFyIGogPSBNYXRoLm1heCgwLCBrIC0gc2VsZi5sZW5ndGggKyAxKTsgaiA8PSBtYXhKOyBqKyspIHtcbiAgICAgICAgdmFyIGkgPSBrIC0gajtcbiAgICAgICAgdmFyIGEgPSBzZWxmLndvcmRzW2ldIHwgMDtcbiAgICAgICAgdmFyIGIgPSBudW0ud29yZHNbal0gfCAwO1xuICAgICAgICB2YXIgciA9IGEgKiBiO1xuXG4gICAgICAgIHZhciBsbyA9IHIgJiAweDNmZmZmZmY7XG4gICAgICAgIG5jYXJyeSA9IChuY2FycnkgKyAoKHIgLyAweDQwMDAwMDApIHwgMCkpIHwgMDtcbiAgICAgICAgbG8gPSAobG8gKyByd29yZCkgfCAwO1xuICAgICAgICByd29yZCA9IGxvICYgMHgzZmZmZmZmO1xuICAgICAgICBuY2FycnkgPSAobmNhcnJ5ICsgKGxvID4+PiAyNikpIHwgMDtcblxuICAgICAgICBobmNhcnJ5ICs9IG5jYXJyeSA+Pj4gMjY7XG4gICAgICAgIG5jYXJyeSAmPSAweDNmZmZmZmY7XG4gICAgICB9XG4gICAgICBvdXQud29yZHNba10gPSByd29yZDtcbiAgICAgIGNhcnJ5ID0gbmNhcnJ5O1xuICAgICAgbmNhcnJ5ID0gaG5jYXJyeTtcbiAgICB9XG4gICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICBvdXQud29yZHNba10gPSBjYXJyeTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0Lmxlbmd0aC0tO1xuICAgIH1cblxuICAgIHJldHVybiBvdXQuc3RyaXAoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGp1bWJvTXVsVG8gKHNlbGYsIG51bSwgb3V0KSB7XG4gICAgdmFyIGZmdG0gPSBuZXcgRkZUTSgpO1xuICAgIHJldHVybiBmZnRtLm11bHAoc2VsZiwgbnVtLCBvdXQpO1xuICB9XG5cbiAgQk4ucHJvdG90eXBlLm11bFRvID0gZnVuY3Rpb24gbXVsVG8gKG51bSwgb3V0KSB7XG4gICAgdmFyIHJlcztcbiAgICB2YXIgbGVuID0gdGhpcy5sZW5ndGggKyBudW0ubGVuZ3RoO1xuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMTAgJiYgbnVtLmxlbmd0aCA9PT0gMTApIHtcbiAgICAgIHJlcyA9IGNvbWIxME11bFRvKHRoaXMsIG51bSwgb3V0KTtcbiAgICB9IGVsc2UgaWYgKGxlbiA8IDYzKSB7XG4gICAgICByZXMgPSBzbWFsbE11bFRvKHRoaXMsIG51bSwgb3V0KTtcbiAgICB9IGVsc2UgaWYgKGxlbiA8IDEwMjQpIHtcbiAgICAgIHJlcyA9IGJpZ011bFRvKHRoaXMsIG51bSwgb3V0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzID0ganVtYm9NdWxUbyh0aGlzLCBudW0sIG91dCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICAvLyBDb29sZXktVHVrZXkgYWxnb3JpdGhtIGZvciBGRlRcbiAgLy8gc2xpZ2h0bHkgcmV2aXNpdGVkIHRvIHJlbHkgb24gbG9vcGluZyBpbnN0ZWFkIG9mIHJlY3Vyc2lvblxuXG4gIGZ1bmN0aW9uIEZGVE0gKHgsIHkpIHtcbiAgICB0aGlzLnggPSB4O1xuICAgIHRoaXMueSA9IHk7XG4gIH1cblxuICBGRlRNLnByb3RvdHlwZS5tYWtlUkJUID0gZnVuY3Rpb24gbWFrZVJCVCAoTikge1xuICAgIHZhciB0ID0gbmV3IEFycmF5KE4pO1xuICAgIHZhciBsID0gQk4ucHJvdG90eXBlLl9jb3VudEJpdHMoTikgLSAxO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTjsgaSsrKSB7XG4gICAgICB0W2ldID0gdGhpcy5yZXZCaW4oaSwgbCwgTik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHQ7XG4gIH07XG5cbiAgLy8gUmV0dXJucyBiaW5hcnktcmV2ZXJzZWQgcmVwcmVzZW50YXRpb24gb2YgYHhgXG4gIEZGVE0ucHJvdG90eXBlLnJldkJpbiA9IGZ1bmN0aW9uIHJldkJpbiAoeCwgbCwgTikge1xuICAgIGlmICh4ID09PSAwIHx8IHggPT09IE4gLSAxKSByZXR1cm4geDtcblxuICAgIHZhciByYiA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICAgIHJiIHw9ICh4ICYgMSkgPDwgKGwgLSBpIC0gMSk7XG4gICAgICB4ID4+PSAxO1xuICAgIH1cblxuICAgIHJldHVybiByYjtcbiAgfTtcblxuICAvLyBQZXJmb3JtcyBcInR3ZWVkbGluZ1wiIHBoYXNlLCB0aGVyZWZvcmUgJ2VtdWxhdGluZydcbiAgLy8gYmVoYXZpb3VyIG9mIHRoZSByZWN1cnNpdmUgYWxnb3JpdGhtXG4gIEZGVE0ucHJvdG90eXBlLnBlcm11dGUgPSBmdW5jdGlvbiBwZXJtdXRlIChyYnQsIHJ3cywgaXdzLCBydHdzLCBpdHdzLCBOKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBOOyBpKyspIHtcbiAgICAgIHJ0d3NbaV0gPSByd3NbcmJ0W2ldXTtcbiAgICAgIGl0d3NbaV0gPSBpd3NbcmJ0W2ldXTtcbiAgICB9XG4gIH07XG5cbiAgRkZUTS5wcm90b3R5cGUudHJhbnNmb3JtID0gZnVuY3Rpb24gdHJhbnNmb3JtIChyd3MsIGl3cywgcnR3cywgaXR3cywgTiwgcmJ0KSB7XG4gICAgdGhpcy5wZXJtdXRlKHJidCwgcndzLCBpd3MsIHJ0d3MsIGl0d3MsIE4pO1xuXG4gICAgZm9yICh2YXIgcyA9IDE7IHMgPCBOOyBzIDw8PSAxKSB7XG4gICAgICB2YXIgbCA9IHMgPDwgMTtcblxuICAgICAgdmFyIHJ0d2RmID0gTWF0aC5jb3MoMiAqIE1hdGguUEkgLyBsKTtcbiAgICAgIHZhciBpdHdkZiA9IE1hdGguc2luKDIgKiBNYXRoLlBJIC8gbCk7XG5cbiAgICAgIGZvciAodmFyIHAgPSAwOyBwIDwgTjsgcCArPSBsKSB7XG4gICAgICAgIHZhciBydHdkZl8gPSBydHdkZjtcbiAgICAgICAgdmFyIGl0d2RmXyA9IGl0d2RmO1xuXG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgczsgaisrKSB7XG4gICAgICAgICAgdmFyIHJlID0gcnR3c1twICsgal07XG4gICAgICAgICAgdmFyIGllID0gaXR3c1twICsgal07XG5cbiAgICAgICAgICB2YXIgcm8gPSBydHdzW3AgKyBqICsgc107XG4gICAgICAgICAgdmFyIGlvID0gaXR3c1twICsgaiArIHNdO1xuXG4gICAgICAgICAgdmFyIHJ4ID0gcnR3ZGZfICogcm8gLSBpdHdkZl8gKiBpbztcblxuICAgICAgICAgIGlvID0gcnR3ZGZfICogaW8gKyBpdHdkZl8gKiBybztcbiAgICAgICAgICBybyA9IHJ4O1xuXG4gICAgICAgICAgcnR3c1twICsgal0gPSByZSArIHJvO1xuICAgICAgICAgIGl0d3NbcCArIGpdID0gaWUgKyBpbztcblxuICAgICAgICAgIHJ0d3NbcCArIGogKyBzXSA9IHJlIC0gcm87XG4gICAgICAgICAgaXR3c1twICsgaiArIHNdID0gaWUgLSBpbztcblxuICAgICAgICAgIC8qIGpzaGludCBtYXhkZXB0aCA6IGZhbHNlICovXG4gICAgICAgICAgaWYgKGogIT09IGwpIHtcbiAgICAgICAgICAgIHJ4ID0gcnR3ZGYgKiBydHdkZl8gLSBpdHdkZiAqIGl0d2RmXztcblxuICAgICAgICAgICAgaXR3ZGZfID0gcnR3ZGYgKiBpdHdkZl8gKyBpdHdkZiAqIHJ0d2RmXztcbiAgICAgICAgICAgIHJ0d2RmXyA9IHJ4O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS5ndWVzc0xlbjEzYiA9IGZ1bmN0aW9uIGd1ZXNzTGVuMTNiIChuLCBtKSB7XG4gICAgdmFyIE4gPSBNYXRoLm1heChtLCBuKSB8IDE7XG4gICAgdmFyIG9kZCA9IE4gJiAxO1xuICAgIHZhciBpID0gMDtcbiAgICBmb3IgKE4gPSBOIC8gMiB8IDA7IE47IE4gPSBOID4+PiAxKSB7XG4gICAgICBpKys7XG4gICAgfVxuXG4gICAgcmV0dXJuIDEgPDwgaSArIDEgKyBvZGQ7XG4gIH07XG5cbiAgRkZUTS5wcm90b3R5cGUuY29uanVnYXRlID0gZnVuY3Rpb24gY29uanVnYXRlIChyd3MsIGl3cywgTikge1xuICAgIGlmIChOIDw9IDEpIHJldHVybjtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTiAvIDI7IGkrKykge1xuICAgICAgdmFyIHQgPSByd3NbaV07XG5cbiAgICAgIHJ3c1tpXSA9IHJ3c1tOIC0gaSAtIDFdO1xuICAgICAgcndzW04gLSBpIC0gMV0gPSB0O1xuXG4gICAgICB0ID0gaXdzW2ldO1xuXG4gICAgICBpd3NbaV0gPSAtaXdzW04gLSBpIC0gMV07XG4gICAgICBpd3NbTiAtIGkgLSAxXSA9IC10O1xuICAgIH1cbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS5ub3JtYWxpemUxM2IgPSBmdW5jdGlvbiBub3JtYWxpemUxM2IgKHdzLCBOKSB7XG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IE4gLyAyOyBpKyspIHtcbiAgICAgIHZhciB3ID0gTWF0aC5yb3VuZCh3c1syICogaSArIDFdIC8gTikgKiAweDIwMDAgK1xuICAgICAgICBNYXRoLnJvdW5kKHdzWzIgKiBpXSAvIE4pICtcbiAgICAgICAgY2Fycnk7XG5cbiAgICAgIHdzW2ldID0gdyAmIDB4M2ZmZmZmZjtcblxuICAgICAgaWYgKHcgPCAweDQwMDAwMDApIHtcbiAgICAgICAgY2FycnkgPSAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FycnkgPSB3IC8gMHg0MDAwMDAwIHwgMDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gd3M7XG4gIH07XG5cbiAgRkZUTS5wcm90b3R5cGUuY29udmVydDEzYiA9IGZ1bmN0aW9uIGNvbnZlcnQxM2IgKHdzLCBsZW4sIHJ3cywgTikge1xuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgY2FycnkgPSBjYXJyeSArICh3c1tpXSB8IDApO1xuXG4gICAgICByd3NbMiAqIGldID0gY2FycnkgJiAweDFmZmY7IGNhcnJ5ID0gY2FycnkgPj4+IDEzO1xuICAgICAgcndzWzIgKiBpICsgMV0gPSBjYXJyeSAmIDB4MWZmZjsgY2FycnkgPSBjYXJyeSA+Pj4gMTM7XG4gICAgfVxuXG4gICAgLy8gUGFkIHdpdGggemVyb2VzXG4gICAgZm9yIChpID0gMiAqIGxlbjsgaSA8IE47ICsraSkge1xuICAgICAgcndzW2ldID0gMDtcbiAgICB9XG5cbiAgICBhc3NlcnQoY2FycnkgPT09IDApO1xuICAgIGFzc2VydCgoY2FycnkgJiB+MHgxZmZmKSA9PT0gMCk7XG4gIH07XG5cbiAgRkZUTS5wcm90b3R5cGUuc3R1YiA9IGZ1bmN0aW9uIHN0dWIgKE4pIHtcbiAgICB2YXIgcGggPSBuZXcgQXJyYXkoTik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBOOyBpKyspIHtcbiAgICAgIHBoW2ldID0gMDtcbiAgICB9XG5cbiAgICByZXR1cm4gcGg7XG4gIH07XG5cbiAgRkZUTS5wcm90b3R5cGUubXVscCA9IGZ1bmN0aW9uIG11bHAgKHgsIHksIG91dCkge1xuICAgIHZhciBOID0gMiAqIHRoaXMuZ3Vlc3NMZW4xM2IoeC5sZW5ndGgsIHkubGVuZ3RoKTtcblxuICAgIHZhciByYnQgPSB0aGlzLm1ha2VSQlQoTik7XG5cbiAgICB2YXIgXyA9IHRoaXMuc3R1YihOKTtcblxuICAgIHZhciByd3MgPSBuZXcgQXJyYXkoTik7XG4gICAgdmFyIHJ3c3QgPSBuZXcgQXJyYXkoTik7XG4gICAgdmFyIGl3c3QgPSBuZXcgQXJyYXkoTik7XG5cbiAgICB2YXIgbnJ3cyA9IG5ldyBBcnJheShOKTtcbiAgICB2YXIgbnJ3c3QgPSBuZXcgQXJyYXkoTik7XG4gICAgdmFyIG5pd3N0ID0gbmV3IEFycmF5KE4pO1xuXG4gICAgdmFyIHJtd3MgPSBvdXQud29yZHM7XG4gICAgcm13cy5sZW5ndGggPSBOO1xuXG4gICAgdGhpcy5jb252ZXJ0MTNiKHgud29yZHMsIHgubGVuZ3RoLCByd3MsIE4pO1xuICAgIHRoaXMuY29udmVydDEzYih5LndvcmRzLCB5Lmxlbmd0aCwgbnJ3cywgTik7XG5cbiAgICB0aGlzLnRyYW5zZm9ybShyd3MsIF8sIHJ3c3QsIGl3c3QsIE4sIHJidCk7XG4gICAgdGhpcy50cmFuc2Zvcm0obnJ3cywgXywgbnJ3c3QsIG5pd3N0LCBOLCByYnQpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBOOyBpKyspIHtcbiAgICAgIHZhciByeCA9IHJ3c3RbaV0gKiBucndzdFtpXSAtIGl3c3RbaV0gKiBuaXdzdFtpXTtcbiAgICAgIGl3c3RbaV0gPSByd3N0W2ldICogbml3c3RbaV0gKyBpd3N0W2ldICogbnJ3c3RbaV07XG4gICAgICByd3N0W2ldID0gcng7XG4gICAgfVxuXG4gICAgdGhpcy5jb25qdWdhdGUocndzdCwgaXdzdCwgTik7XG4gICAgdGhpcy50cmFuc2Zvcm0ocndzdCwgaXdzdCwgcm13cywgXywgTiwgcmJ0KTtcbiAgICB0aGlzLmNvbmp1Z2F0ZShybXdzLCBfLCBOKTtcbiAgICB0aGlzLm5vcm1hbGl6ZTEzYihybXdzLCBOKTtcblxuICAgIG91dC5uZWdhdGl2ZSA9IHgubmVnYXRpdmUgXiB5Lm5lZ2F0aXZlO1xuICAgIG91dC5sZW5ndGggPSB4Lmxlbmd0aCArIHkubGVuZ3RoO1xuICAgIHJldHVybiBvdXQuc3RyaXAoKTtcbiAgfTtcblxuICAvLyBNdWx0aXBseSBgdGhpc2AgYnkgYG51bWBcbiAgQk4ucHJvdG90eXBlLm11bCA9IGZ1bmN0aW9uIG11bCAobnVtKSB7XG4gICAgdmFyIG91dCA9IG5ldyBCTihudWxsKTtcbiAgICBvdXQud29yZHMgPSBuZXcgQXJyYXkodGhpcy5sZW5ndGggKyBudW0ubGVuZ3RoKTtcbiAgICByZXR1cm4gdGhpcy5tdWxUbyhudW0sIG91dCk7XG4gIH07XG5cbiAgLy8gTXVsdGlwbHkgZW1wbG95aW5nIEZGVFxuICBCTi5wcm90b3R5cGUubXVsZiA9IGZ1bmN0aW9uIG11bGYgKG51bSkge1xuICAgIHZhciBvdXQgPSBuZXcgQk4obnVsbCk7XG4gICAgb3V0LndvcmRzID0gbmV3IEFycmF5KHRoaXMubGVuZ3RoICsgbnVtLmxlbmd0aCk7XG4gICAgcmV0dXJuIGp1bWJvTXVsVG8odGhpcywgbnVtLCBvdXQpO1xuICB9O1xuXG4gIC8vIEluLXBsYWNlIE11bHRpcGxpY2F0aW9uXG4gIEJOLnByb3RvdHlwZS5pbXVsID0gZnVuY3Rpb24gaW11bCAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5tdWxUbyhudW0sIHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pbXVsbiA9IGZ1bmN0aW9uIGltdWxuIChudW0pIHtcbiAgICBhc3NlcnQodHlwZW9mIG51bSA9PT0gJ251bWJlcicpO1xuICAgIGFzc2VydChudW0gPCAweDQwMDAwMDApO1xuXG4gICAgLy8gQ2FycnlcbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHcgPSAodGhpcy53b3Jkc1tpXSB8IDApICogbnVtO1xuICAgICAgdmFyIGxvID0gKHcgJiAweDNmZmZmZmYpICsgKGNhcnJ5ICYgMHgzZmZmZmZmKTtcbiAgICAgIGNhcnJ5ID4+PSAyNjtcbiAgICAgIGNhcnJ5ICs9ICh3IC8gMHg0MDAwMDAwKSB8IDA7XG4gICAgICAvLyBOT1RFOiBsbyBpcyAyN2JpdCBtYXhpbXVtXG4gICAgICBjYXJyeSArPSBsbyA+Pj4gMjY7XG4gICAgICB0aGlzLndvcmRzW2ldID0gbG8gJiAweDNmZmZmZmY7XG4gICAgfVxuXG4gICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gY2Fycnk7XG4gICAgICB0aGlzLmxlbmd0aCsrO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5tdWxuID0gZnVuY3Rpb24gbXVsbiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pbXVsbihudW0pO1xuICB9O1xuXG4gIC8vIGB0aGlzYCAqIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuc3FyID0gZnVuY3Rpb24gc3FyICgpIHtcbiAgICByZXR1cm4gdGhpcy5tdWwodGhpcyk7XG4gIH07XG5cbiAgLy8gYHRoaXNgICogYHRoaXNgIGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pc3FyID0gZnVuY3Rpb24gaXNxciAoKSB7XG4gICAgcmV0dXJuIHRoaXMuaW11bCh0aGlzLmNsb25lKCkpO1xuICB9O1xuXG4gIC8vIE1hdGgucG93KGB0aGlzYCwgYG51bWApXG4gIEJOLnByb3RvdHlwZS5wb3cgPSBmdW5jdGlvbiBwb3cgKG51bSkge1xuICAgIHZhciB3ID0gdG9CaXRBcnJheShudW0pO1xuICAgIGlmICh3Lmxlbmd0aCA9PT0gMCkgcmV0dXJuIG5ldyBCTigxKTtcblxuICAgIC8vIFNraXAgbGVhZGluZyB6ZXJvZXNcbiAgICB2YXIgcmVzID0gdGhpcztcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHcubGVuZ3RoOyBpKyssIHJlcyA9IHJlcy5zcXIoKSkge1xuICAgICAgaWYgKHdbaV0gIT09IDApIGJyZWFrO1xuICAgIH1cblxuICAgIGlmICgrK2kgPCB3Lmxlbmd0aCkge1xuICAgICAgZm9yICh2YXIgcSA9IHJlcy5zcXIoKTsgaSA8IHcubGVuZ3RoOyBpKyssIHEgPSBxLnNxcigpKSB7XG4gICAgICAgIGlmICh3W2ldID09PSAwKSBjb250aW51ZTtcblxuICAgICAgICByZXMgPSByZXMubXVsKHEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgLy8gU2hpZnQtbGVmdCBpbi1wbGFjZVxuICBCTi5wcm90b3R5cGUuaXVzaGxuID0gZnVuY3Rpb24gaXVzaGxuIChiaXRzKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBiaXRzID09PSAnbnVtYmVyJyAmJiBiaXRzID49IDApO1xuICAgIHZhciByID0gYml0cyAlIDI2O1xuICAgIHZhciBzID0gKGJpdHMgLSByKSAvIDI2O1xuICAgIHZhciBjYXJyeU1hc2sgPSAoMHgzZmZmZmZmID4+PiAoMjYgLSByKSkgPDwgKDI2IC0gcik7XG4gICAgdmFyIGk7XG5cbiAgICBpZiAociAhPT0gMCkge1xuICAgICAgdmFyIGNhcnJ5ID0gMDtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIG5ld0NhcnJ5ID0gdGhpcy53b3Jkc1tpXSAmIGNhcnJ5TWFzaztcbiAgICAgICAgdmFyIGMgPSAoKHRoaXMud29yZHNbaV0gfCAwKSAtIG5ld0NhcnJ5KSA8PCByO1xuICAgICAgICB0aGlzLndvcmRzW2ldID0gYyB8IGNhcnJ5O1xuICAgICAgICBjYXJyeSA9IG5ld0NhcnJ5ID4+PiAoMjYgLSByKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGNhcnJ5KSB7XG4gICAgICAgIHRoaXMud29yZHNbaV0gPSBjYXJyeTtcbiAgICAgICAgdGhpcy5sZW5ndGgrKztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocyAhPT0gMCkge1xuICAgICAgZm9yIChpID0gdGhpcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICB0aGlzLndvcmRzW2kgKyBzXSA9IHRoaXMud29yZHNbaV07XG4gICAgICB9XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBzOyBpKyspIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpXSA9IDA7XG4gICAgICB9XG5cbiAgICAgIHRoaXMubGVuZ3RoICs9IHM7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXNobG4gPSBmdW5jdGlvbiBpc2hsbiAoYml0cykge1xuICAgIC8vIFRPRE8oaW5kdXRueSk6IGltcGxlbWVudCBtZVxuICAgIGFzc2VydCh0aGlzLm5lZ2F0aXZlID09PSAwKTtcbiAgICByZXR1cm4gdGhpcy5pdXNobG4oYml0cyk7XG4gIH07XG5cbiAgLy8gU2hpZnQtcmlnaHQgaW4tcGxhY2VcbiAgLy8gTk9URTogYGhpbnRgIGlzIGEgbG93ZXN0IGJpdCBiZWZvcmUgdHJhaWxpbmcgemVyb2VzXG4gIC8vIE5PVEU6IGlmIGBleHRlbmRlZGAgaXMgcHJlc2VudCAtIGl0IHdpbGwgYmUgZmlsbGVkIHdpdGggZGVzdHJveWVkIGJpdHNcbiAgQk4ucHJvdG90eXBlLml1c2hybiA9IGZ1bmN0aW9uIGl1c2hybiAoYml0cywgaGludCwgZXh0ZW5kZWQpIHtcbiAgICBhc3NlcnQodHlwZW9mIGJpdHMgPT09ICdudW1iZXInICYmIGJpdHMgPj0gMCk7XG4gICAgdmFyIGg7XG4gICAgaWYgKGhpbnQpIHtcbiAgICAgIGggPSAoaGludCAtIChoaW50ICUgMjYpKSAvIDI2O1xuICAgIH0gZWxzZSB7XG4gICAgICBoID0gMDtcbiAgICB9XG5cbiAgICB2YXIgciA9IGJpdHMgJSAyNjtcbiAgICB2YXIgcyA9IE1hdGgubWluKChiaXRzIC0gcikgLyAyNiwgdGhpcy5sZW5ndGgpO1xuICAgIHZhciBtYXNrID0gMHgzZmZmZmZmIF4gKCgweDNmZmZmZmYgPj4+IHIpIDw8IHIpO1xuICAgIHZhciBtYXNrZWRXb3JkcyA9IGV4dGVuZGVkO1xuXG4gICAgaCAtPSBzO1xuICAgIGggPSBNYXRoLm1heCgwLCBoKTtcblxuICAgIC8vIEV4dGVuZGVkIG1vZGUsIGNvcHkgbWFza2VkIHBhcnRcbiAgICBpZiAobWFza2VkV29yZHMpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgczsgaSsrKSB7XG4gICAgICAgIG1hc2tlZFdvcmRzLndvcmRzW2ldID0gdGhpcy53b3Jkc1tpXTtcbiAgICAgIH1cbiAgICAgIG1hc2tlZFdvcmRzLmxlbmd0aCA9IHM7XG4gICAgfVxuXG4gICAgaWYgKHMgPT09IDApIHtcbiAgICAgIC8vIE5vLW9wLCB3ZSBzaG91bGQgbm90IG1vdmUgYW55dGhpbmcgYXQgYWxsXG4gICAgfSBlbHNlIGlmICh0aGlzLmxlbmd0aCA+IHMpIHtcbiAgICAgIHRoaXMubGVuZ3RoIC09IHM7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB0aGlzLndvcmRzW2ldID0gdGhpcy53b3Jkc1tpICsgc107XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMud29yZHNbMF0gPSAwO1xuICAgICAgdGhpcy5sZW5ndGggPSAxO1xuICAgIH1cblxuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yIChpID0gdGhpcy5sZW5ndGggLSAxOyBpID49IDAgJiYgKGNhcnJ5ICE9PSAwIHx8IGkgPj0gaCk7IGktLSkge1xuICAgICAgdmFyIHdvcmQgPSB0aGlzLndvcmRzW2ldIHwgMDtcbiAgICAgIHRoaXMud29yZHNbaV0gPSAoY2FycnkgPDwgKDI2IC0gcikpIHwgKHdvcmQgPj4+IHIpO1xuICAgICAgY2FycnkgPSB3b3JkICYgbWFzaztcbiAgICB9XG5cbiAgICAvLyBQdXNoIGNhcnJpZWQgYml0cyBhcyBhIG1hc2tcbiAgICBpZiAobWFza2VkV29yZHMgJiYgY2FycnkgIT09IDApIHtcbiAgICAgIG1hc2tlZFdvcmRzLndvcmRzW21hc2tlZFdvcmRzLmxlbmd0aCsrXSA9IGNhcnJ5O1xuICAgIH1cblxuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhpcy53b3Jkc1swXSA9IDA7XG4gICAgICB0aGlzLmxlbmd0aCA9IDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXNocm4gPSBmdW5jdGlvbiBpc2hybiAoYml0cywgaGludCwgZXh0ZW5kZWQpIHtcbiAgICAvLyBUT0RPKGluZHV0bnkpOiBpbXBsZW1lbnQgbWVcbiAgICBhc3NlcnQodGhpcy5uZWdhdGl2ZSA9PT0gMCk7XG4gICAgcmV0dXJuIHRoaXMuaXVzaHJuKGJpdHMsIGhpbnQsIGV4dGVuZGVkKTtcbiAgfTtcblxuICAvLyBTaGlmdC1sZWZ0XG4gIEJOLnByb3RvdHlwZS5zaGxuID0gZnVuY3Rpb24gc2hsbiAoYml0cykge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaXNobG4oYml0cyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnVzaGxuID0gZnVuY3Rpb24gdXNobG4gKGJpdHMpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLml1c2hsbihiaXRzKTtcbiAgfTtcblxuICAvLyBTaGlmdC1yaWdodFxuICBCTi5wcm90b3R5cGUuc2hybiA9IGZ1bmN0aW9uIHNocm4gKGJpdHMpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlzaHJuKGJpdHMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS51c2hybiA9IGZ1bmN0aW9uIHVzaHJuIChiaXRzKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pdXNocm4oYml0cyk7XG4gIH07XG5cbiAgLy8gVGVzdCBpZiBuIGJpdCBpcyBzZXRcbiAgQk4ucHJvdG90eXBlLnRlc3RuID0gZnVuY3Rpb24gdGVzdG4gKGJpdCkge1xuICAgIGFzc2VydCh0eXBlb2YgYml0ID09PSAnbnVtYmVyJyAmJiBiaXQgPj0gMCk7XG4gICAgdmFyIHIgPSBiaXQgJSAyNjtcbiAgICB2YXIgcyA9IChiaXQgLSByKSAvIDI2O1xuICAgIHZhciBxID0gMSA8PCByO1xuXG4gICAgLy8gRmFzdCBjYXNlOiBiaXQgaXMgbXVjaCBoaWdoZXIgdGhhbiBhbGwgZXhpc3Rpbmcgd29yZHNcbiAgICBpZiAodGhpcy5sZW5ndGggPD0gcykgcmV0dXJuIGZhbHNlO1xuXG4gICAgLy8gQ2hlY2sgYml0IGFuZCByZXR1cm5cbiAgICB2YXIgdyA9IHRoaXMud29yZHNbc107XG5cbiAgICByZXR1cm4gISEodyAmIHEpO1xuICB9O1xuXG4gIC8vIFJldHVybiBvbmx5IGxvd2VycyBiaXRzIG9mIG51bWJlciAoaW4tcGxhY2UpXG4gIEJOLnByb3RvdHlwZS5pbWFza24gPSBmdW5jdGlvbiBpbWFza24gKGJpdHMpIHtcbiAgICBhc3NlcnQodHlwZW9mIGJpdHMgPT09ICdudW1iZXInICYmIGJpdHMgPj0gMCk7XG4gICAgdmFyIHIgPSBiaXRzICUgMjY7XG4gICAgdmFyIHMgPSAoYml0cyAtIHIpIC8gMjY7XG5cbiAgICBhc3NlcnQodGhpcy5uZWdhdGl2ZSA9PT0gMCwgJ2ltYXNrbiB3b3JrcyBvbmx5IHdpdGggcG9zaXRpdmUgbnVtYmVycycpO1xuXG4gICAgaWYgKHIgIT09IDApIHtcbiAgICAgIHMrKztcbiAgICB9XG4gICAgdGhpcy5sZW5ndGggPSBNYXRoLm1pbihzLCB0aGlzLmxlbmd0aCk7XG5cbiAgICBpZiAociAhPT0gMCkge1xuICAgICAgdmFyIG1hc2sgPSAweDNmZmZmZmYgXiAoKDB4M2ZmZmZmZiA+Pj4gcikgPDwgcik7XG4gICAgICB0aGlzLndvcmRzW3RoaXMubGVuZ3RoIC0gMV0gJj0gbWFzaztcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIC8vIFJldHVybiBvbmx5IGxvd2VycyBiaXRzIG9mIG51bWJlclxuICBCTi5wcm90b3R5cGUubWFza24gPSBmdW5jdGlvbiBtYXNrbiAoYml0cykge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaW1hc2tuKGJpdHMpO1xuICB9O1xuXG4gIC8vIEFkZCBwbGFpbiBudW1iZXIgYG51bWAgdG8gYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5pYWRkbiA9IGZ1bmN0aW9uIGlhZGRuIChudW0pIHtcbiAgICBhc3NlcnQodHlwZW9mIG51bSA9PT0gJ251bWJlcicpO1xuICAgIGFzc2VydChudW0gPCAweDQwMDAwMDApO1xuICAgIGlmIChudW0gPCAwKSByZXR1cm4gdGhpcy5pc3VibigtbnVtKTtcblxuICAgIC8vIFBvc3NpYmxlIHNpZ24gY2hhbmdlXG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMSAmJiAodGhpcy53b3Jkc1swXSB8IDApIDwgbnVtKSB7XG4gICAgICAgIHRoaXMud29yZHNbMF0gPSBudW0gLSAodGhpcy53b3Jkc1swXSB8IDApO1xuICAgICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuICAgICAgdGhpcy5pc3VibihudW0pO1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDE7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBBZGQgd2l0aG91dCBjaGVja3NcbiAgICByZXR1cm4gdGhpcy5faWFkZG4obnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX2lhZGRuID0gZnVuY3Rpb24gX2lhZGRuIChudW0pIHtcbiAgICB0aGlzLndvcmRzWzBdICs9IG51bTtcblxuICAgIC8vIENhcnJ5XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aCAmJiB0aGlzLndvcmRzW2ldID49IDB4NDAwMDAwMDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldIC09IDB4NDAwMDAwMDtcbiAgICAgIGlmIChpID09PSB0aGlzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpICsgMV0gPSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpICsgMV0rKztcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5sZW5ndGggPSBNYXRoLm1heCh0aGlzLmxlbmd0aCwgaSArIDEpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgLy8gU3VidHJhY3QgcGxhaW4gbnVtYmVyIGBudW1gIGZyb20gYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5pc3VibiA9IGZ1bmN0aW9uIGlzdWJuIChudW0pIHtcbiAgICBhc3NlcnQodHlwZW9mIG51bSA9PT0gJ251bWJlcicpO1xuICAgIGFzc2VydChudW0gPCAweDQwMDAwMDApO1xuICAgIGlmIChudW0gPCAwKSByZXR1cm4gdGhpcy5pYWRkbigtbnVtKTtcblxuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICAgIHRoaXMuaWFkZG4obnVtKTtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdGhpcy53b3Jkc1swXSAtPSBudW07XG5cbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDEgJiYgdGhpcy53b3Jkc1swXSA8IDApIHtcbiAgICAgIHRoaXMud29yZHNbMF0gPSAtdGhpcy53b3Jkc1swXTtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBDYXJyeVxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aCAmJiB0aGlzLndvcmRzW2ldIDwgMDsgaSsrKSB7XG4gICAgICAgIHRoaXMud29yZHNbaV0gKz0gMHg0MDAwMDAwO1xuICAgICAgICB0aGlzLndvcmRzW2kgKyAxXSAtPSAxO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmFkZG4gPSBmdW5jdGlvbiBhZGRuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlhZGRuKG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnN1Ym4gPSBmdW5jdGlvbiBzdWJuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlzdWJuKG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmlhYnMgPSBmdW5jdGlvbiBpYWJzICgpIHtcbiAgICB0aGlzLm5lZ2F0aXZlID0gMDtcblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5hYnMgPSBmdW5jdGlvbiBhYnMgKCkge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaWFicygpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5faXNobG5zdWJtdWwgPSBmdW5jdGlvbiBfaXNobG5zdWJtdWwgKG51bSwgbXVsLCBzaGlmdCkge1xuICAgIHZhciBsZW4gPSBudW0ubGVuZ3RoICsgc2hpZnQ7XG4gICAgdmFyIGk7XG5cbiAgICB0aGlzLl9leHBhbmQobGVuKTtcblxuICAgIHZhciB3O1xuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yIChpID0gMDsgaSA8IG51bS5sZW5ndGg7IGkrKykge1xuICAgICAgdyA9ICh0aGlzLndvcmRzW2kgKyBzaGlmdF0gfCAwKSArIGNhcnJ5O1xuICAgICAgdmFyIHJpZ2h0ID0gKG51bS53b3Jkc1tpXSB8IDApICogbXVsO1xuICAgICAgdyAtPSByaWdodCAmIDB4M2ZmZmZmZjtcbiAgICAgIGNhcnJ5ID0gKHcgPj4gMjYpIC0gKChyaWdodCAvIDB4NDAwMDAwMCkgfCAwKTtcbiAgICAgIHRoaXMud29yZHNbaSArIHNoaWZ0XSA9IHcgJiAweDNmZmZmZmY7XG4gICAgfVxuICAgIGZvciAoOyBpIDwgdGhpcy5sZW5ndGggLSBzaGlmdDsgaSsrKSB7XG4gICAgICB3ID0gKHRoaXMud29yZHNbaSArIHNoaWZ0XSB8IDApICsgY2Fycnk7XG4gICAgICBjYXJyeSA9IHcgPj4gMjY7XG4gICAgICB0aGlzLndvcmRzW2kgKyBzaGlmdF0gPSB3ICYgMHgzZmZmZmZmO1xuICAgIH1cblxuICAgIGlmIChjYXJyeSA9PT0gMCkgcmV0dXJuIHRoaXMuc3RyaXAoKTtcblxuICAgIC8vIFN1YnRyYWN0aW9uIG92ZXJmbG93XG4gICAgYXNzZXJ0KGNhcnJ5ID09PSAtMSk7XG4gICAgY2FycnkgPSAwO1xuICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB3ID0gLSh0aGlzLndvcmRzW2ldIHwgMCkgKyBjYXJyeTtcbiAgICAgIGNhcnJ5ID0gdyA+PiAyNjtcbiAgICAgIHRoaXMud29yZHNbaV0gPSB3ICYgMHgzZmZmZmZmO1xuICAgIH1cbiAgICB0aGlzLm5lZ2F0aXZlID0gMTtcblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl93b3JkRGl2ID0gZnVuY3Rpb24gX3dvcmREaXYgKG51bSwgbW9kZSkge1xuICAgIHZhciBzaGlmdCA9IHRoaXMubGVuZ3RoIC0gbnVtLmxlbmd0aDtcblxuICAgIHZhciBhID0gdGhpcy5jbG9uZSgpO1xuICAgIHZhciBiID0gbnVtO1xuXG4gICAgLy8gTm9ybWFsaXplXG4gICAgdmFyIGJoaSA9IGIud29yZHNbYi5sZW5ndGggLSAxXSB8IDA7XG4gICAgdmFyIGJoaUJpdHMgPSB0aGlzLl9jb3VudEJpdHMoYmhpKTtcbiAgICBzaGlmdCA9IDI2IC0gYmhpQml0cztcbiAgICBpZiAoc2hpZnQgIT09IDApIHtcbiAgICAgIGIgPSBiLnVzaGxuKHNoaWZ0KTtcbiAgICAgIGEuaXVzaGxuKHNoaWZ0KTtcbiAgICAgIGJoaSA9IGIud29yZHNbYi5sZW5ndGggLSAxXSB8IDA7XG4gICAgfVxuXG4gICAgLy8gSW5pdGlhbGl6ZSBxdW90aWVudFxuICAgIHZhciBtID0gYS5sZW5ndGggLSBiLmxlbmd0aDtcbiAgICB2YXIgcTtcblxuICAgIGlmIChtb2RlICE9PSAnbW9kJykge1xuICAgICAgcSA9IG5ldyBCTihudWxsKTtcbiAgICAgIHEubGVuZ3RoID0gbSArIDE7XG4gICAgICBxLndvcmRzID0gbmV3IEFycmF5KHEubGVuZ3RoKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcS5sZW5ndGg7IGkrKykge1xuICAgICAgICBxLndvcmRzW2ldID0gMDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgZGlmZiA9IGEuY2xvbmUoKS5faXNobG5zdWJtdWwoYiwgMSwgbSk7XG4gICAgaWYgKGRpZmYubmVnYXRpdmUgPT09IDApIHtcbiAgICAgIGEgPSBkaWZmO1xuICAgICAgaWYgKHEpIHtcbiAgICAgICAgcS53b3Jkc1ttXSA9IDE7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaiA9IG0gLSAxOyBqID49IDA7IGotLSkge1xuICAgICAgdmFyIHFqID0gKGEud29yZHNbYi5sZW5ndGggKyBqXSB8IDApICogMHg0MDAwMDAwICtcbiAgICAgICAgKGEud29yZHNbYi5sZW5ndGggKyBqIC0gMV0gfCAwKTtcblxuICAgICAgLy8gTk9URTogKHFqIC8gYmhpKSBpcyAoMHgzZmZmZmZmICogMHg0MDAwMDAwICsgMHgzZmZmZmZmKSAvIDB4MjAwMDAwMCBtYXhcbiAgICAgIC8vICgweDdmZmZmZmYpXG4gICAgICBxaiA9IE1hdGgubWluKChxaiAvIGJoaSkgfCAwLCAweDNmZmZmZmYpO1xuXG4gICAgICBhLl9pc2hsbnN1Ym11bChiLCBxaiwgaik7XG4gICAgICB3aGlsZSAoYS5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgICBxai0tO1xuICAgICAgICBhLm5lZ2F0aXZlID0gMDtcbiAgICAgICAgYS5faXNobG5zdWJtdWwoYiwgMSwgaik7XG4gICAgICAgIGlmICghYS5pc1plcm8oKSkge1xuICAgICAgICAgIGEubmVnYXRpdmUgXj0gMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHEpIHtcbiAgICAgICAgcS53b3Jkc1tqXSA9IHFqO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAocSkge1xuICAgICAgcS5zdHJpcCgpO1xuICAgIH1cbiAgICBhLnN0cmlwKCk7XG5cbiAgICAvLyBEZW5vcm1hbGl6ZVxuICAgIGlmIChtb2RlICE9PSAnZGl2JyAmJiBzaGlmdCAhPT0gMCkge1xuICAgICAgYS5pdXNocm4oc2hpZnQpO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBkaXY6IHEgfHwgbnVsbCxcbiAgICAgIG1vZDogYVxuICAgIH07XG4gIH07XG5cbiAgLy8gTk9URTogMSkgYG1vZGVgIGNhbiBiZSBzZXQgdG8gYG1vZGAgdG8gcmVxdWVzdCBtb2Qgb25seSxcbiAgLy8gICAgICAgdG8gYGRpdmAgdG8gcmVxdWVzdCBkaXYgb25seSwgb3IgYmUgYWJzZW50IHRvXG4gIC8vICAgICAgIHJlcXVlc3QgYm90aCBkaXYgJiBtb2RcbiAgLy8gICAgICAgMikgYHBvc2l0aXZlYCBpcyB0cnVlIGlmIHVuc2lnbmVkIG1vZCBpcyByZXF1ZXN0ZWRcbiAgQk4ucHJvdG90eXBlLmRpdm1vZCA9IGZ1bmN0aW9uIGRpdm1vZCAobnVtLCBtb2RlLCBwb3NpdGl2ZSkge1xuICAgIGFzc2VydCghbnVtLmlzWmVybygpKTtcblxuICAgIGlmICh0aGlzLmlzWmVybygpKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBkaXY6IG5ldyBCTigwKSxcbiAgICAgICAgbW9kOiBuZXcgQk4oMClcbiAgICAgIH07XG4gICAgfVxuXG4gICAgdmFyIGRpdiwgbW9kLCByZXM7XG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDAgJiYgbnVtLm5lZ2F0aXZlID09PSAwKSB7XG4gICAgICByZXMgPSB0aGlzLm5lZygpLmRpdm1vZChudW0sIG1vZGUpO1xuXG4gICAgICBpZiAobW9kZSAhPT0gJ21vZCcpIHtcbiAgICAgICAgZGl2ID0gcmVzLmRpdi5uZWcoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1vZGUgIT09ICdkaXYnKSB7XG4gICAgICAgIG1vZCA9IHJlcy5tb2QubmVnKCk7XG4gICAgICAgIGlmIChwb3NpdGl2ZSAmJiBtb2QubmVnYXRpdmUgIT09IDApIHtcbiAgICAgICAgICBtb2QuaWFkZChudW0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRpdjogZGl2LFxuICAgICAgICBtb2Q6IG1vZFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5uZWdhdGl2ZSA9PT0gMCAmJiBudW0ubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIHJlcyA9IHRoaXMuZGl2bW9kKG51bS5uZWcoKSwgbW9kZSk7XG5cbiAgICAgIGlmIChtb2RlICE9PSAnbW9kJykge1xuICAgICAgICBkaXYgPSByZXMuZGl2Lm5lZygpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBkaXY6IGRpdixcbiAgICAgICAgbW9kOiByZXMubW9kXG4gICAgICB9O1xuICAgIH1cblxuICAgIGlmICgodGhpcy5uZWdhdGl2ZSAmIG51bS5uZWdhdGl2ZSkgIT09IDApIHtcbiAgICAgIHJlcyA9IHRoaXMubmVnKCkuZGl2bW9kKG51bS5uZWcoKSwgbW9kZSk7XG5cbiAgICAgIGlmIChtb2RlICE9PSAnZGl2Jykge1xuICAgICAgICBtb2QgPSByZXMubW9kLm5lZygpO1xuICAgICAgICBpZiAocG9zaXRpdmUgJiYgbW9kLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICAgICAgbW9kLmlzdWIobnVtKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBkaXY6IHJlcy5kaXYsXG4gICAgICAgIG1vZDogbW9kXG4gICAgICB9O1xuICAgIH1cblxuICAgIC8vIEJvdGggbnVtYmVycyBhcmUgcG9zaXRpdmUgYXQgdGhpcyBwb2ludFxuXG4gICAgLy8gU3RyaXAgYm90aCBudW1iZXJzIHRvIGFwcHJveGltYXRlIHNoaWZ0IHZhbHVlXG4gICAgaWYgKG51bS5sZW5ndGggPiB0aGlzLmxlbmd0aCB8fCB0aGlzLmNtcChudW0pIDwgMCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGl2OiBuZXcgQk4oMCksXG4gICAgICAgIG1vZDogdGhpc1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBWZXJ5IHNob3J0IHJlZHVjdGlvblxuICAgIGlmIChudW0ubGVuZ3RoID09PSAxKSB7XG4gICAgICBpZiAobW9kZSA9PT0gJ2RpdicpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBkaXY6IHRoaXMuZGl2bihudW0ud29yZHNbMF0pLFxuICAgICAgICAgIG1vZDogbnVsbFxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBpZiAobW9kZSA9PT0gJ21vZCcpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBkaXY6IG51bGwsXG4gICAgICAgICAgbW9kOiBuZXcgQk4odGhpcy5tb2RuKG51bS53b3Jkc1swXSkpXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRpdjogdGhpcy5kaXZuKG51bS53b3Jkc1swXSksXG4gICAgICAgIG1vZDogbmV3IEJOKHRoaXMubW9kbihudW0ud29yZHNbMF0pKVxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fd29yZERpdihudW0sIG1vZGUpO1xuICB9O1xuXG4gIC8vIEZpbmQgYHRoaXNgIC8gYG51bWBcbiAgQk4ucHJvdG90eXBlLmRpdiA9IGZ1bmN0aW9uIGRpdiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuZGl2bW9kKG51bSwgJ2RpdicsIGZhbHNlKS5kaXY7XG4gIH07XG5cbiAgLy8gRmluZCBgdGhpc2AgJSBgbnVtYFxuICBCTi5wcm90b3R5cGUubW9kID0gZnVuY3Rpb24gbW9kIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5kaXZtb2QobnVtLCAnbW9kJywgZmFsc2UpLm1vZDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudW1vZCA9IGZ1bmN0aW9uIHVtb2QgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmRpdm1vZChudW0sICdtb2QnLCB0cnVlKS5tb2Q7XG4gIH07XG5cbiAgLy8gRmluZCBSb3VuZChgdGhpc2AgLyBgbnVtYClcbiAgQk4ucHJvdG90eXBlLmRpdlJvdW5kID0gZnVuY3Rpb24gZGl2Um91bmQgKG51bSkge1xuICAgIHZhciBkbSA9IHRoaXMuZGl2bW9kKG51bSk7XG5cbiAgICAvLyBGYXN0IGNhc2UgLSBleGFjdCBkaXZpc2lvblxuICAgIGlmIChkbS5tb2QuaXNaZXJvKCkpIHJldHVybiBkbS5kaXY7XG5cbiAgICB2YXIgbW9kID0gZG0uZGl2Lm5lZ2F0aXZlICE9PSAwID8gZG0ubW9kLmlzdWIobnVtKSA6IGRtLm1vZDtcblxuICAgIHZhciBoYWxmID0gbnVtLnVzaHJuKDEpO1xuICAgIHZhciByMiA9IG51bS5hbmRsbigxKTtcbiAgICB2YXIgY21wID0gbW9kLmNtcChoYWxmKTtcblxuICAgIC8vIFJvdW5kIGRvd25cbiAgICBpZiAoY21wIDwgMCB8fCByMiA9PT0gMSAmJiBjbXAgPT09IDApIHJldHVybiBkbS5kaXY7XG5cbiAgICAvLyBSb3VuZCB1cFxuICAgIHJldHVybiBkbS5kaXYubmVnYXRpdmUgIT09IDAgPyBkbS5kaXYuaXN1Ym4oMSkgOiBkbS5kaXYuaWFkZG4oMSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLm1vZG4gPSBmdW5jdGlvbiBtb2RuIChudW0pIHtcbiAgICBhc3NlcnQobnVtIDw9IDB4M2ZmZmZmZik7XG4gICAgdmFyIHAgPSAoMSA8PCAyNikgJSBudW07XG5cbiAgICB2YXIgYWNjID0gMDtcbiAgICBmb3IgKHZhciBpID0gdGhpcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgYWNjID0gKHAgKiBhY2MgKyAodGhpcy53b3Jkc1tpXSB8IDApKSAlIG51bTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWNjO1xuICB9O1xuXG4gIC8vIEluLXBsYWNlIGRpdmlzaW9uIGJ5IG51bWJlclxuICBCTi5wcm90b3R5cGUuaWRpdm4gPSBmdW5jdGlvbiBpZGl2biAobnVtKSB7XG4gICAgYXNzZXJ0KG51bSA8PSAweDNmZmZmZmYpO1xuXG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICBmb3IgKHZhciBpID0gdGhpcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgdmFyIHcgPSAodGhpcy53b3Jkc1tpXSB8IDApICsgY2FycnkgKiAweDQwMDAwMDA7XG4gICAgICB0aGlzLndvcmRzW2ldID0gKHcgLyBudW0pIHwgMDtcbiAgICAgIGNhcnJ5ID0gdyAlIG51bTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5kaXZuID0gZnVuY3Rpb24gZGl2biAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pZGl2bihudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5lZ2NkID0gZnVuY3Rpb24gZWdjZCAocCkge1xuICAgIGFzc2VydChwLm5lZ2F0aXZlID09PSAwKTtcbiAgICBhc3NlcnQoIXAuaXNaZXJvKCkpO1xuXG4gICAgdmFyIHggPSB0aGlzO1xuICAgIHZhciB5ID0gcC5jbG9uZSgpO1xuXG4gICAgaWYgKHgubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIHggPSB4LnVtb2QocCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHggPSB4LmNsb25lKCk7XG4gICAgfVxuXG4gICAgLy8gQSAqIHggKyBCICogeSA9IHhcbiAgICB2YXIgQSA9IG5ldyBCTigxKTtcbiAgICB2YXIgQiA9IG5ldyBCTigwKTtcblxuICAgIC8vIEMgKiB4ICsgRCAqIHkgPSB5XG4gICAgdmFyIEMgPSBuZXcgQk4oMCk7XG4gICAgdmFyIEQgPSBuZXcgQk4oMSk7XG5cbiAgICB2YXIgZyA9IDA7XG5cbiAgICB3aGlsZSAoeC5pc0V2ZW4oKSAmJiB5LmlzRXZlbigpKSB7XG4gICAgICB4Lml1c2hybigxKTtcbiAgICAgIHkuaXVzaHJuKDEpO1xuICAgICAgKytnO1xuICAgIH1cblxuICAgIHZhciB5cCA9IHkuY2xvbmUoKTtcbiAgICB2YXIgeHAgPSB4LmNsb25lKCk7XG5cbiAgICB3aGlsZSAoIXguaXNaZXJvKCkpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBpbSA9IDE7ICh4LndvcmRzWzBdICYgaW0pID09PSAwICYmIGkgPCAyNjsgKytpLCBpbSA8PD0gMSk7XG4gICAgICBpZiAoaSA+IDApIHtcbiAgICAgICAgeC5pdXNocm4oaSk7XG4gICAgICAgIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgICAgICAgaWYgKEEuaXNPZGQoKSB8fCBCLmlzT2RkKCkpIHtcbiAgICAgICAgICAgIEEuaWFkZCh5cCk7XG4gICAgICAgICAgICBCLmlzdWIoeHApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIEEuaXVzaHJuKDEpO1xuICAgICAgICAgIEIuaXVzaHJuKDEpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGogPSAwLCBqbSA9IDE7ICh5LndvcmRzWzBdICYgam0pID09PSAwICYmIGogPCAyNjsgKytqLCBqbSA8PD0gMSk7XG4gICAgICBpZiAoaiA+IDApIHtcbiAgICAgICAgeS5pdXNocm4oaik7XG4gICAgICAgIHdoaWxlIChqLS0gPiAwKSB7XG4gICAgICAgICAgaWYgKEMuaXNPZGQoKSB8fCBELmlzT2RkKCkpIHtcbiAgICAgICAgICAgIEMuaWFkZCh5cCk7XG4gICAgICAgICAgICBELmlzdWIoeHApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIEMuaXVzaHJuKDEpO1xuICAgICAgICAgIEQuaXVzaHJuKDEpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICh4LmNtcCh5KSA+PSAwKSB7XG4gICAgICAgIHguaXN1Yih5KTtcbiAgICAgICAgQS5pc3ViKEMpO1xuICAgICAgICBCLmlzdWIoRCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB5LmlzdWIoeCk7XG4gICAgICAgIEMuaXN1YihBKTtcbiAgICAgICAgRC5pc3ViKEIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBhOiBDLFxuICAgICAgYjogRCxcbiAgICAgIGdjZDogeS5pdXNobG4oZylcbiAgICB9O1xuICB9O1xuXG4gIC8vIFRoaXMgaXMgcmVkdWNlZCBpbmNhcm5hdGlvbiBvZiB0aGUgYmluYXJ5IEVFQVxuICAvLyBhYm92ZSwgZGVzaWduYXRlZCB0byBpbnZlcnQgbWVtYmVycyBvZiB0aGVcbiAgLy8gX3ByaW1lXyBmaWVsZHMgRihwKSBhdCBhIG1heGltYWwgc3BlZWRcbiAgQk4ucHJvdG90eXBlLl9pbnZtcCA9IGZ1bmN0aW9uIF9pbnZtcCAocCkge1xuICAgIGFzc2VydChwLm5lZ2F0aXZlID09PSAwKTtcbiAgICBhc3NlcnQoIXAuaXNaZXJvKCkpO1xuXG4gICAgdmFyIGEgPSB0aGlzO1xuICAgIHZhciBiID0gcC5jbG9uZSgpO1xuXG4gICAgaWYgKGEubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIGEgPSBhLnVtb2QocCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGEgPSBhLmNsb25lKCk7XG4gICAgfVxuXG4gICAgdmFyIHgxID0gbmV3IEJOKDEpO1xuICAgIHZhciB4MiA9IG5ldyBCTigwKTtcblxuICAgIHZhciBkZWx0YSA9IGIuY2xvbmUoKTtcblxuICAgIHdoaWxlIChhLmNtcG4oMSkgPiAwICYmIGIuY21wbigxKSA+IDApIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBpbSA9IDE7IChhLndvcmRzWzBdICYgaW0pID09PSAwICYmIGkgPCAyNjsgKytpLCBpbSA8PD0gMSk7XG4gICAgICBpZiAoaSA+IDApIHtcbiAgICAgICAgYS5pdXNocm4oaSk7XG4gICAgICAgIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgICAgICAgaWYgKHgxLmlzT2RkKCkpIHtcbiAgICAgICAgICAgIHgxLmlhZGQoZGVsdGEpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHgxLml1c2hybigxKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBqID0gMCwgam0gPSAxOyAoYi53b3Jkc1swXSAmIGptKSA9PT0gMCAmJiBqIDwgMjY7ICsraiwgam0gPDw9IDEpO1xuICAgICAgaWYgKGogPiAwKSB7XG4gICAgICAgIGIuaXVzaHJuKGopO1xuICAgICAgICB3aGlsZSAoai0tID4gMCkge1xuICAgICAgICAgIGlmICh4Mi5pc09kZCgpKSB7XG4gICAgICAgICAgICB4Mi5pYWRkKGRlbHRhKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB4Mi5pdXNocm4oMSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGEuY21wKGIpID49IDApIHtcbiAgICAgICAgYS5pc3ViKGIpO1xuICAgICAgICB4MS5pc3ViKHgyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGIuaXN1YihhKTtcbiAgICAgICAgeDIuaXN1Yih4MSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHJlcztcbiAgICBpZiAoYS5jbXBuKDEpID09PSAwKSB7XG4gICAgICByZXMgPSB4MTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzID0geDI7XG4gICAgfVxuXG4gICAgaWYgKHJlcy5jbXBuKDApIDwgMCkge1xuICAgICAgcmVzLmlhZGQocCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZ2NkID0gZnVuY3Rpb24gZ2NkIChudW0pIHtcbiAgICBpZiAodGhpcy5pc1plcm8oKSkgcmV0dXJuIG51bS5hYnMoKTtcbiAgICBpZiAobnVtLmlzWmVybygpKSByZXR1cm4gdGhpcy5hYnMoKTtcblxuICAgIHZhciBhID0gdGhpcy5jbG9uZSgpO1xuICAgIHZhciBiID0gbnVtLmNsb25lKCk7XG4gICAgYS5uZWdhdGl2ZSA9IDA7XG4gICAgYi5uZWdhdGl2ZSA9IDA7XG5cbiAgICAvLyBSZW1vdmUgY29tbW9uIGZhY3RvciBvZiB0d29cbiAgICBmb3IgKHZhciBzaGlmdCA9IDA7IGEuaXNFdmVuKCkgJiYgYi5pc0V2ZW4oKTsgc2hpZnQrKykge1xuICAgICAgYS5pdXNocm4oMSk7XG4gICAgICBiLml1c2hybigxKTtcbiAgICB9XG5cbiAgICBkbyB7XG4gICAgICB3aGlsZSAoYS5pc0V2ZW4oKSkge1xuICAgICAgICBhLml1c2hybigxKTtcbiAgICAgIH1cbiAgICAgIHdoaWxlIChiLmlzRXZlbigpKSB7XG4gICAgICAgIGIuaXVzaHJuKDEpO1xuICAgICAgfVxuXG4gICAgICB2YXIgciA9IGEuY21wKGIpO1xuICAgICAgaWYgKHIgPCAwKSB7XG4gICAgICAgIC8vIFN3YXAgYGFgIGFuZCBgYmAgdG8gbWFrZSBgYWAgYWx3YXlzIGJpZ2dlciB0aGFuIGBiYFxuICAgICAgICB2YXIgdCA9IGE7XG4gICAgICAgIGEgPSBiO1xuICAgICAgICBiID0gdDtcbiAgICAgIH0gZWxzZSBpZiAociA9PT0gMCB8fCBiLmNtcG4oMSkgPT09IDApIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGEuaXN1YihiKTtcbiAgICB9IHdoaWxlICh0cnVlKTtcblxuICAgIHJldHVybiBiLml1c2hsbihzaGlmdCk7XG4gIH07XG5cbiAgLy8gSW52ZXJ0IG51bWJlciBpbiB0aGUgZmllbGQgRihudW0pXG4gIEJOLnByb3RvdHlwZS5pbnZtID0gZnVuY3Rpb24gaW52bSAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuZWdjZChudW0pLmEudW1vZChudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pc0V2ZW4gPSBmdW5jdGlvbiBpc0V2ZW4gKCkge1xuICAgIHJldHVybiAodGhpcy53b3Jkc1swXSAmIDEpID09PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pc09kZCA9IGZ1bmN0aW9uIGlzT2RkICgpIHtcbiAgICByZXR1cm4gKHRoaXMud29yZHNbMF0gJiAxKSA9PT0gMTtcbiAgfTtcblxuICAvLyBBbmQgZmlyc3Qgd29yZCBhbmQgbnVtXG4gIEJOLnByb3RvdHlwZS5hbmRsbiA9IGZ1bmN0aW9uIGFuZGxuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy53b3Jkc1swXSAmIG51bTtcbiAgfTtcblxuICAvLyBJbmNyZW1lbnQgYXQgdGhlIGJpdCBwb3NpdGlvbiBpbi1saW5lXG4gIEJOLnByb3RvdHlwZS5iaW5jbiA9IGZ1bmN0aW9uIGJpbmNuIChiaXQpIHtcbiAgICBhc3NlcnQodHlwZW9mIGJpdCA9PT0gJ251bWJlcicpO1xuICAgIHZhciByID0gYml0ICUgMjY7XG4gICAgdmFyIHMgPSAoYml0IC0gcikgLyAyNjtcbiAgICB2YXIgcSA9IDEgPDwgcjtcblxuICAgIC8vIEZhc3QgY2FzZTogYml0IGlzIG11Y2ggaGlnaGVyIHRoYW4gYWxsIGV4aXN0aW5nIHdvcmRzXG4gICAgaWYgKHRoaXMubGVuZ3RoIDw9IHMpIHtcbiAgICAgIHRoaXMuX2V4cGFuZChzICsgMSk7XG4gICAgICB0aGlzLndvcmRzW3NdIHw9IHE7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBBZGQgYml0IGFuZCBwcm9wYWdhdGUsIGlmIG5lZWRlZFxuICAgIHZhciBjYXJyeSA9IHE7XG4gICAgZm9yICh2YXIgaSA9IHM7IGNhcnJ5ICE9PSAwICYmIGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdyA9IHRoaXMud29yZHNbaV0gfCAwO1xuICAgICAgdyArPSBjYXJyeTtcbiAgICAgIGNhcnJ5ID0gdyA+Pj4gMjY7XG4gICAgICB3ICY9IDB4M2ZmZmZmZjtcbiAgICAgIHRoaXMud29yZHNbaV0gPSB3O1xuICAgIH1cbiAgICBpZiAoY2FycnkgIT09IDApIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSBjYXJyeTtcbiAgICAgIHRoaXMubGVuZ3RoKys7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pc1plcm8gPSBmdW5jdGlvbiBpc1plcm8gKCkge1xuICAgIHJldHVybiB0aGlzLmxlbmd0aCA9PT0gMSAmJiB0aGlzLndvcmRzWzBdID09PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5jbXBuID0gZnVuY3Rpb24gY21wbiAobnVtKSB7XG4gICAgdmFyIG5lZ2F0aXZlID0gbnVtIDwgMDtcblxuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwICYmICFuZWdhdGl2ZSkgcmV0dXJuIC0xO1xuICAgIGlmICh0aGlzLm5lZ2F0aXZlID09PSAwICYmIG5lZ2F0aXZlKSByZXR1cm4gMTtcblxuICAgIHRoaXMuc3RyaXAoKTtcblxuICAgIHZhciByZXM7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gMSkge1xuICAgICAgcmVzID0gMTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKG5lZ2F0aXZlKSB7XG4gICAgICAgIG51bSA9IC1udW07XG4gICAgICB9XG5cbiAgICAgIGFzc2VydChudW0gPD0gMHgzZmZmZmZmLCAnTnVtYmVyIGlzIHRvbyBiaWcnKTtcblxuICAgICAgdmFyIHcgPSB0aGlzLndvcmRzWzBdIHwgMDtcbiAgICAgIHJlcyA9IHcgPT09IG51bSA/IDAgOiB3IDwgbnVtID8gLTEgOiAxO1xuICAgIH1cbiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkgcmV0dXJuIC1yZXMgfCAwO1xuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgLy8gQ29tcGFyZSB0d28gbnVtYmVycyBhbmQgcmV0dXJuOlxuICAvLyAxIC0gaWYgYHRoaXNgID4gYG51bWBcbiAgLy8gMCAtIGlmIGB0aGlzYCA9PSBgbnVtYFxuICAvLyAtMSAtIGlmIGB0aGlzYCA8IGBudW1gXG4gIEJOLnByb3RvdHlwZS5jbXAgPSBmdW5jdGlvbiBjbXAgKG51bSkge1xuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwICYmIG51bS5uZWdhdGl2ZSA9PT0gMCkgcmV0dXJuIC0xO1xuICAgIGlmICh0aGlzLm5lZ2F0aXZlID09PSAwICYmIG51bS5uZWdhdGl2ZSAhPT0gMCkgcmV0dXJuIDE7XG5cbiAgICB2YXIgcmVzID0gdGhpcy51Y21wKG51bSk7XG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHJldHVybiAtcmVzIHwgMDtcbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIC8vIFVuc2lnbmVkIGNvbXBhcmlzb25cbiAgQk4ucHJvdG90eXBlLnVjbXAgPSBmdW5jdGlvbiB1Y21wIChudW0pIHtcbiAgICAvLyBBdCB0aGlzIHBvaW50IGJvdGggbnVtYmVycyBoYXZlIHRoZSBzYW1lIHNpZ25cbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSByZXR1cm4gMTtcbiAgICBpZiAodGhpcy5sZW5ndGggPCBudW0ubGVuZ3RoKSByZXR1cm4gLTE7XG5cbiAgICB2YXIgcmVzID0gMDtcbiAgICBmb3IgKHZhciBpID0gdGhpcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgdmFyIGEgPSB0aGlzLndvcmRzW2ldIHwgMDtcbiAgICAgIHZhciBiID0gbnVtLndvcmRzW2ldIHwgMDtcblxuICAgICAgaWYgKGEgPT09IGIpIGNvbnRpbnVlO1xuICAgICAgaWYgKGEgPCBiKSB7XG4gICAgICAgIHJlcyA9IC0xO1xuICAgICAgfSBlbHNlIGlmIChhID4gYikge1xuICAgICAgICByZXMgPSAxO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmd0biA9IGZ1bmN0aW9uIGd0biAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wbihudW0pID09PSAxO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5ndCA9IGZ1bmN0aW9uIGd0IChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXAobnVtKSA9PT0gMTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZ3RlbiA9IGZ1bmN0aW9uIGd0ZW4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcG4obnVtKSA+PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5ndGUgPSBmdW5jdGlvbiBndGUgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcChudW0pID49IDA7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmx0biA9IGZ1bmN0aW9uIGx0biAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wbihudW0pID09PSAtMTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUubHQgPSBmdW5jdGlvbiBsdCAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wKG51bSkgPT09IC0xO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5sdGVuID0gZnVuY3Rpb24gbHRlbiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wbihudW0pIDw9IDA7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmx0ZSA9IGZ1bmN0aW9uIGx0ZSAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wKG51bSkgPD0gMDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZXFuID0gZnVuY3Rpb24gZXFuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXBuKG51bSkgPT09IDA7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmVxID0gZnVuY3Rpb24gZXEgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcChudW0pID09PSAwO1xuICB9O1xuXG4gIC8vXG4gIC8vIEEgcmVkdWNlIGNvbnRleHQsIGNvdWxkIGJlIHVzaW5nIG1vbnRnb21lcnkgb3Igc29tZXRoaW5nIGJldHRlciwgZGVwZW5kaW5nXG4gIC8vIG9uIHRoZSBgbWAgaXRzZWxmLlxuICAvL1xuICBCTi5yZWQgPSBmdW5jdGlvbiByZWQgKG51bSkge1xuICAgIHJldHVybiBuZXcgUmVkKG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnRvUmVkID0gZnVuY3Rpb24gdG9SZWQgKGN0eCkge1xuICAgIGFzc2VydCghdGhpcy5yZWQsICdBbHJlYWR5IGEgbnVtYmVyIGluIHJlZHVjdGlvbiBjb250ZXh0Jyk7XG4gICAgYXNzZXJ0KHRoaXMubmVnYXRpdmUgPT09IDAsICdyZWQgd29ya3Mgb25seSB3aXRoIHBvc2l0aXZlcycpO1xuICAgIHJldHVybiBjdHguY29udmVydFRvKHRoaXMpLl9mb3JjZVJlZChjdHgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5mcm9tUmVkID0gZnVuY3Rpb24gZnJvbVJlZCAoKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAnZnJvbVJlZCB3b3JrcyBvbmx5IHdpdGggbnVtYmVycyBpbiByZWR1Y3Rpb24gY29udGV4dCcpO1xuICAgIHJldHVybiB0aGlzLnJlZC5jb252ZXJ0RnJvbSh0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX2ZvcmNlUmVkID0gZnVuY3Rpb24gX2ZvcmNlUmVkIChjdHgpIHtcbiAgICB0aGlzLnJlZCA9IGN0eDtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZm9yY2VSZWQgPSBmdW5jdGlvbiBmb3JjZVJlZCAoY3R4KSB7XG4gICAgYXNzZXJ0KCF0aGlzLnJlZCwgJ0FscmVhZHkgYSBudW1iZXIgaW4gcmVkdWN0aW9uIGNvbnRleHQnKTtcbiAgICByZXR1cm4gdGhpcy5fZm9yY2VSZWQoY3R4KTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkQWRkID0gZnVuY3Rpb24gcmVkQWRkIChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRBZGQgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLmFkZCh0aGlzLCBudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRJQWRkID0gZnVuY3Rpb24gcmVkSUFkZCAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkSUFkZCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuaWFkZCh0aGlzLCBudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRTdWIgPSBmdW5jdGlvbiByZWRTdWIgKG51bSkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZFN1YiB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuc3ViKHRoaXMsIG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZElTdWIgPSBmdW5jdGlvbiByZWRJU3ViIChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRJU3ViIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHJldHVybiB0aGlzLnJlZC5pc3ViKHRoaXMsIG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZFNobCA9IGZ1bmN0aW9uIHJlZFNobCAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkU2hsIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHJldHVybiB0aGlzLnJlZC5zaGwodGhpcywgbnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkTXVsID0gZnVuY3Rpb24gcmVkTXVsIChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRNdWwgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTIodGhpcywgbnVtKTtcbiAgICByZXR1cm4gdGhpcy5yZWQubXVsKHRoaXMsIG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZElNdWwgPSBmdW5jdGlvbiByZWRJTXVsIChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRNdWwgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTIodGhpcywgbnVtKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuaW11bCh0aGlzLCBudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRTcXIgPSBmdW5jdGlvbiByZWRTcXIgKCkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZFNxciB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICB0aGlzLnJlZC5fdmVyaWZ5MSh0aGlzKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuc3FyKHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRJU3FyID0gZnVuY3Rpb24gcmVkSVNxciAoKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkSVNxciB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICB0aGlzLnJlZC5fdmVyaWZ5MSh0aGlzKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuaXNxcih0aGlzKTtcbiAgfTtcblxuICAvLyBTcXVhcmUgcm9vdCBvdmVyIHBcbiAgQk4ucHJvdG90eXBlLnJlZFNxcnQgPSBmdW5jdGlvbiByZWRTcXJ0ICgpIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRTcXJ0IHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHRoaXMucmVkLl92ZXJpZnkxKHRoaXMpO1xuICAgIHJldHVybiB0aGlzLnJlZC5zcXJ0KHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRJbnZtID0gZnVuY3Rpb24gcmVkSW52bSAoKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkSW52bSB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICB0aGlzLnJlZC5fdmVyaWZ5MSh0aGlzKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuaW52bSh0aGlzKTtcbiAgfTtcblxuICAvLyBSZXR1cm4gbmVnYXRpdmUgY2xvbmUgb2YgYHRoaXNgICUgYHJlZCBtb2R1bG9gXG4gIEJOLnByb3RvdHlwZS5yZWROZWcgPSBmdW5jdGlvbiByZWROZWcgKCkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZE5lZyB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICB0aGlzLnJlZC5fdmVyaWZ5MSh0aGlzKTtcbiAgICByZXR1cm4gdGhpcy5yZWQubmVnKHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRQb3cgPSBmdW5jdGlvbiByZWRQb3cgKG51bSkge1xuICAgIGFzc2VydCh0aGlzLnJlZCAmJiAhbnVtLnJlZCwgJ3JlZFBvdyhub3JtYWxOdW0pJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTEodGhpcyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLnBvdyh0aGlzLCBudW0pO1xuICB9O1xuXG4gIC8vIFByaW1lIG51bWJlcnMgd2l0aCBlZmZpY2llbnQgcmVkdWN0aW9uXG4gIHZhciBwcmltZXMgPSB7XG4gICAgazI1NjogbnVsbCxcbiAgICBwMjI0OiBudWxsLFxuICAgIHAxOTI6IG51bGwsXG4gICAgcDI1NTE5OiBudWxsXG4gIH07XG5cbiAgLy8gUHNldWRvLU1lcnNlbm5lIHByaW1lXG4gIGZ1bmN0aW9uIE1QcmltZSAobmFtZSwgcCkge1xuICAgIC8vIFAgPSAyIF4gTiAtIEtcbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgIHRoaXMucCA9IG5ldyBCTihwLCAxNik7XG4gICAgdGhpcy5uID0gdGhpcy5wLmJpdExlbmd0aCgpO1xuICAgIHRoaXMuayA9IG5ldyBCTigxKS5pdXNobG4odGhpcy5uKS5pc3ViKHRoaXMucCk7XG5cbiAgICB0aGlzLnRtcCA9IHRoaXMuX3RtcCgpO1xuICB9XG5cbiAgTVByaW1lLnByb3RvdHlwZS5fdG1wID0gZnVuY3Rpb24gX3RtcCAoKSB7XG4gICAgdmFyIHRtcCA9IG5ldyBCTihudWxsKTtcbiAgICB0bXAud29yZHMgPSBuZXcgQXJyYXkoTWF0aC5jZWlsKHRoaXMubiAvIDEzKSk7XG4gICAgcmV0dXJuIHRtcDtcbiAgfTtcblxuICBNUHJpbWUucHJvdG90eXBlLmlyZWR1Y2UgPSBmdW5jdGlvbiBpcmVkdWNlIChudW0pIHtcbiAgICAvLyBBc3N1bWVzIHRoYXQgYG51bWAgaXMgbGVzcyB0aGFuIGBQXjJgXG4gICAgLy8gbnVtID0gSEkgKiAoMiBeIE4gLSBLKSArIEhJICogSyArIExPID0gSEkgKiBLICsgTE8gKG1vZCBQKVxuICAgIHZhciByID0gbnVtO1xuICAgIHZhciBybGVuO1xuXG4gICAgZG8ge1xuICAgICAgdGhpcy5zcGxpdChyLCB0aGlzLnRtcCk7XG4gICAgICByID0gdGhpcy5pbXVsSyhyKTtcbiAgICAgIHIgPSByLmlhZGQodGhpcy50bXApO1xuICAgICAgcmxlbiA9IHIuYml0TGVuZ3RoKCk7XG4gICAgfSB3aGlsZSAocmxlbiA+IHRoaXMubik7XG5cbiAgICB2YXIgY21wID0gcmxlbiA8IHRoaXMubiA/IC0xIDogci51Y21wKHRoaXMucCk7XG4gICAgaWYgKGNtcCA9PT0gMCkge1xuICAgICAgci53b3Jkc1swXSA9IDA7XG4gICAgICByLmxlbmd0aCA9IDE7XG4gICAgfSBlbHNlIGlmIChjbXAgPiAwKSB7XG4gICAgICByLmlzdWIodGhpcy5wKTtcbiAgICB9IGVsc2Uge1xuICAgICAgci5zdHJpcCgpO1xuICAgIH1cblxuICAgIHJldHVybiByO1xuICB9O1xuXG4gIE1QcmltZS5wcm90b3R5cGUuc3BsaXQgPSBmdW5jdGlvbiBzcGxpdCAoaW5wdXQsIG91dCkge1xuICAgIGlucHV0Lml1c2hybih0aGlzLm4sIDAsIG91dCk7XG4gIH07XG5cbiAgTVByaW1lLnByb3RvdHlwZS5pbXVsSyA9IGZ1bmN0aW9uIGltdWxLIChudW0pIHtcbiAgICByZXR1cm4gbnVtLmltdWwodGhpcy5rKTtcbiAgfTtcblxuICBmdW5jdGlvbiBLMjU2ICgpIHtcbiAgICBNUHJpbWUuY2FsbChcbiAgICAgIHRoaXMsXG4gICAgICAnazI1NicsXG4gICAgICAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmUgZmZmZmZjMmYnKTtcbiAgfVxuICBpbmhlcml0cyhLMjU2LCBNUHJpbWUpO1xuXG4gIEsyNTYucHJvdG90eXBlLnNwbGl0ID0gZnVuY3Rpb24gc3BsaXQgKGlucHV0LCBvdXRwdXQpIHtcbiAgICAvLyAyNTYgPSA5ICogMjYgKyAyMlxuICAgIHZhciBtYXNrID0gMHgzZmZmZmY7XG5cbiAgICB2YXIgb3V0TGVuID0gTWF0aC5taW4oaW5wdXQubGVuZ3RoLCA5KTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG91dExlbjsgaSsrKSB7XG4gICAgICBvdXRwdXQud29yZHNbaV0gPSBpbnB1dC53b3Jkc1tpXTtcbiAgICB9XG4gICAgb3V0cHV0Lmxlbmd0aCA9IG91dExlbjtcblxuICAgIGlmIChpbnB1dC5sZW5ndGggPD0gOSkge1xuICAgICAgaW5wdXQud29yZHNbMF0gPSAwO1xuICAgICAgaW5wdXQubGVuZ3RoID0gMTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBTaGlmdCBieSA5IGxpbWJzXG4gICAgdmFyIHByZXYgPSBpbnB1dC53b3Jkc1s5XTtcbiAgICBvdXRwdXQud29yZHNbb3V0cHV0Lmxlbmd0aCsrXSA9IHByZXYgJiBtYXNrO1xuXG4gICAgZm9yIChpID0gMTA7IGkgPCBpbnB1dC5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIG5leHQgPSBpbnB1dC53b3Jkc1tpXSB8IDA7XG4gICAgICBpbnB1dC53b3Jkc1tpIC0gMTBdID0gKChuZXh0ICYgbWFzaykgPDwgNCkgfCAocHJldiA+Pj4gMjIpO1xuICAgICAgcHJldiA9IG5leHQ7XG4gICAgfVxuICAgIHByZXYgPj4+PSAyMjtcbiAgICBpbnB1dC53b3Jkc1tpIC0gMTBdID0gcHJldjtcbiAgICBpZiAocHJldiA9PT0gMCAmJiBpbnB1dC5sZW5ndGggPiAxMCkge1xuICAgICAgaW5wdXQubGVuZ3RoIC09IDEwO1xuICAgIH0gZWxzZSB7XG4gICAgICBpbnB1dC5sZW5ndGggLT0gOTtcbiAgICB9XG4gIH07XG5cbiAgSzI1Ni5wcm90b3R5cGUuaW11bEsgPSBmdW5jdGlvbiBpbXVsSyAobnVtKSB7XG4gICAgLy8gSyA9IDB4MTAwMDAwM2QxID0gWyAweDQwLCAweDNkMSBdXG4gICAgbnVtLndvcmRzW251bS5sZW5ndGhdID0gMDtcbiAgICBudW0ud29yZHNbbnVtLmxlbmd0aCArIDFdID0gMDtcbiAgICBudW0ubGVuZ3RoICs9IDI7XG5cbiAgICAvLyBib3VuZGVkIGF0OiAweDQwICogMHgzZmZmZmZmICsgMHgzZDAgPSAweDEwMDAwMDM5MFxuICAgIHZhciBsbyA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW0ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB3ID0gbnVtLndvcmRzW2ldIHwgMDtcbiAgICAgIGxvICs9IHcgKiAweDNkMTtcbiAgICAgIG51bS53b3Jkc1tpXSA9IGxvICYgMHgzZmZmZmZmO1xuICAgICAgbG8gPSB3ICogMHg0MCArICgobG8gLyAweDQwMDAwMDApIHwgMCk7XG4gICAgfVxuXG4gICAgLy8gRmFzdCBsZW5ndGggcmVkdWN0aW9uXG4gICAgaWYgKG51bS53b3Jkc1tudW0ubGVuZ3RoIC0gMV0gPT09IDApIHtcbiAgICAgIG51bS5sZW5ndGgtLTtcbiAgICAgIGlmIChudW0ud29yZHNbbnVtLmxlbmd0aCAtIDFdID09PSAwKSB7XG4gICAgICAgIG51bS5sZW5ndGgtLTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bTtcbiAgfTtcblxuICBmdW5jdGlvbiBQMjI0ICgpIHtcbiAgICBNUHJpbWUuY2FsbChcbiAgICAgIHRoaXMsXG4gICAgICAncDIyNCcsXG4gICAgICAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgMDAwMDAwMDAgMDAwMDAwMDAgMDAwMDAwMDEnKTtcbiAgfVxuICBpbmhlcml0cyhQMjI0LCBNUHJpbWUpO1xuXG4gIGZ1bmN0aW9uIFAxOTIgKCkge1xuICAgIE1QcmltZS5jYWxsKFxuICAgICAgdGhpcyxcbiAgICAgICdwMTkyJyxcbiAgICAgICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZSBmZmZmZmZmZiBmZmZmZmZmZicpO1xuICB9XG4gIGluaGVyaXRzKFAxOTIsIE1QcmltZSk7XG5cbiAgZnVuY3Rpb24gUDI1NTE5ICgpIHtcbiAgICAvLyAyIF4gMjU1IC0gMTlcbiAgICBNUHJpbWUuY2FsbChcbiAgICAgIHRoaXMsXG4gICAgICAnMjU1MTknLFxuICAgICAgJzdmZmZmZmZmZmZmZmZmZmYgZmZmZmZmZmZmZmZmZmZmZiBmZmZmZmZmZmZmZmZmZmZmIGZmZmZmZmZmZmZmZmZmZWQnKTtcbiAgfVxuICBpbmhlcml0cyhQMjU1MTksIE1QcmltZSk7XG5cbiAgUDI1NTE5LnByb3RvdHlwZS5pbXVsSyA9IGZ1bmN0aW9uIGltdWxLIChudW0pIHtcbiAgICAvLyBLID0gMHgxM1xuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW0ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBoaSA9IChudW0ud29yZHNbaV0gfCAwKSAqIDB4MTMgKyBjYXJyeTtcbiAgICAgIHZhciBsbyA9IGhpICYgMHgzZmZmZmZmO1xuICAgICAgaGkgPj4+PSAyNjtcblxuICAgICAgbnVtLndvcmRzW2ldID0gbG87XG4gICAgICBjYXJyeSA9IGhpO1xuICAgIH1cbiAgICBpZiAoY2FycnkgIT09IDApIHtcbiAgICAgIG51bS53b3Jkc1tudW0ubGVuZ3RoKytdID0gY2Fycnk7XG4gICAgfVxuICAgIHJldHVybiBudW07XG4gIH07XG5cbiAgLy8gRXhwb3J0ZWQgbW9zdGx5IGZvciB0ZXN0aW5nIHB1cnBvc2VzLCB1c2UgcGxhaW4gbmFtZSBpbnN0ZWFkXG4gIEJOLl9wcmltZSA9IGZ1bmN0aW9uIHByaW1lIChuYW1lKSB7XG4gICAgLy8gQ2FjaGVkIHZlcnNpb24gb2YgcHJpbWVcbiAgICBpZiAocHJpbWVzW25hbWVdKSByZXR1cm4gcHJpbWVzW25hbWVdO1xuXG4gICAgdmFyIHByaW1lO1xuICAgIGlmIChuYW1lID09PSAnazI1NicpIHtcbiAgICAgIHByaW1lID0gbmV3IEsyNTYoKTtcbiAgICB9IGVsc2UgaWYgKG5hbWUgPT09ICdwMjI0Jykge1xuICAgICAgcHJpbWUgPSBuZXcgUDIyNCgpO1xuICAgIH0gZWxzZSBpZiAobmFtZSA9PT0gJ3AxOTInKSB7XG4gICAgICBwcmltZSA9IG5ldyBQMTkyKCk7XG4gICAgfSBlbHNlIGlmIChuYW1lID09PSAncDI1NTE5Jykge1xuICAgICAgcHJpbWUgPSBuZXcgUDI1NTE5KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biBwcmltZSAnICsgbmFtZSk7XG4gICAgfVxuICAgIHByaW1lc1tuYW1lXSA9IHByaW1lO1xuXG4gICAgcmV0dXJuIHByaW1lO1xuICB9O1xuXG4gIC8vXG4gIC8vIEJhc2UgcmVkdWN0aW9uIGVuZ2luZVxuICAvL1xuICBmdW5jdGlvbiBSZWQgKG0pIHtcbiAgICBpZiAodHlwZW9mIG0gPT09ICdzdHJpbmcnKSB7XG4gICAgICB2YXIgcHJpbWUgPSBCTi5fcHJpbWUobSk7XG4gICAgICB0aGlzLm0gPSBwcmltZS5wO1xuICAgICAgdGhpcy5wcmltZSA9IHByaW1lO1xuICAgIH0gZWxzZSB7XG4gICAgICBhc3NlcnQobS5ndG4oMSksICdtb2R1bHVzIG11c3QgYmUgZ3JlYXRlciB0aGFuIDEnKTtcbiAgICAgIHRoaXMubSA9IG07XG4gICAgICB0aGlzLnByaW1lID0gbnVsbDtcbiAgICB9XG4gIH1cblxuICBSZWQucHJvdG90eXBlLl92ZXJpZnkxID0gZnVuY3Rpb24gX3ZlcmlmeTEgKGEpIHtcbiAgICBhc3NlcnQoYS5uZWdhdGl2ZSA9PT0gMCwgJ3JlZCB3b3JrcyBvbmx5IHdpdGggcG9zaXRpdmVzJyk7XG4gICAgYXNzZXJ0KGEucmVkLCAncmVkIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuX3ZlcmlmeTIgPSBmdW5jdGlvbiBfdmVyaWZ5MiAoYSwgYikge1xuICAgIGFzc2VydCgoYS5uZWdhdGl2ZSB8IGIubmVnYXRpdmUpID09PSAwLCAncmVkIHdvcmtzIG9ubHkgd2l0aCBwb3NpdGl2ZXMnKTtcbiAgICBhc3NlcnQoYS5yZWQgJiYgYS5yZWQgPT09IGIucmVkLFxuICAgICAgJ3JlZCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmltb2QgPSBmdW5jdGlvbiBpbW9kIChhKSB7XG4gICAgaWYgKHRoaXMucHJpbWUpIHJldHVybiB0aGlzLnByaW1lLmlyZWR1Y2UoYSkuX2ZvcmNlUmVkKHRoaXMpO1xuICAgIHJldHVybiBhLnVtb2QodGhpcy5tKS5fZm9yY2VSZWQodGhpcyk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5uZWcgPSBmdW5jdGlvbiBuZWcgKGEpIHtcbiAgICBpZiAoYS5pc1plcm8oKSkge1xuICAgICAgcmV0dXJuIGEuY2xvbmUoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5tLnN1YihhKS5fZm9yY2VSZWQodGhpcyk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBhZGQgKGEsIGIpIHtcbiAgICB0aGlzLl92ZXJpZnkyKGEsIGIpO1xuXG4gICAgdmFyIHJlcyA9IGEuYWRkKGIpO1xuICAgIGlmIChyZXMuY21wKHRoaXMubSkgPj0gMCkge1xuICAgICAgcmVzLmlzdWIodGhpcy5tKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcy5fZm9yY2VSZWQodGhpcyk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5pYWRkID0gZnVuY3Rpb24gaWFkZCAoYSwgYikge1xuICAgIHRoaXMuX3ZlcmlmeTIoYSwgYik7XG5cbiAgICB2YXIgcmVzID0gYS5pYWRkKGIpO1xuICAgIGlmIChyZXMuY21wKHRoaXMubSkgPj0gMCkge1xuICAgICAgcmVzLmlzdWIodGhpcy5tKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLnN1YiA9IGZ1bmN0aW9uIHN1YiAoYSwgYikge1xuICAgIHRoaXMuX3ZlcmlmeTIoYSwgYik7XG5cbiAgICB2YXIgcmVzID0gYS5zdWIoYik7XG4gICAgaWYgKHJlcy5jbXBuKDApIDwgMCkge1xuICAgICAgcmVzLmlhZGQodGhpcy5tKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcy5fZm9yY2VSZWQodGhpcyk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5pc3ViID0gZnVuY3Rpb24gaXN1YiAoYSwgYikge1xuICAgIHRoaXMuX3ZlcmlmeTIoYSwgYik7XG5cbiAgICB2YXIgcmVzID0gYS5pc3ViKGIpO1xuICAgIGlmIChyZXMuY21wbigwKSA8IDApIHtcbiAgICAgIHJlcy5pYWRkKHRoaXMubSk7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5zaGwgPSBmdW5jdGlvbiBzaGwgKGEsIG51bSkge1xuICAgIHRoaXMuX3ZlcmlmeTEoYSk7XG4gICAgcmV0dXJuIHRoaXMuaW1vZChhLnVzaGxuKG51bSkpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuaW11bCA9IGZ1bmN0aW9uIGltdWwgKGEsIGIpIHtcbiAgICB0aGlzLl92ZXJpZnkyKGEsIGIpO1xuICAgIHJldHVybiB0aGlzLmltb2QoYS5pbXVsKGIpKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLm11bCA9IGZ1bmN0aW9uIG11bCAoYSwgYikge1xuICAgIHRoaXMuX3ZlcmlmeTIoYSwgYik7XG4gICAgcmV0dXJuIHRoaXMuaW1vZChhLm11bChiKSk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5pc3FyID0gZnVuY3Rpb24gaXNxciAoYSkge1xuICAgIHJldHVybiB0aGlzLmltdWwoYSwgYS5jbG9uZSgpKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLnNxciA9IGZ1bmN0aW9uIHNxciAoYSkge1xuICAgIHJldHVybiB0aGlzLm11bChhLCBhKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLnNxcnQgPSBmdW5jdGlvbiBzcXJ0IChhKSB7XG4gICAgaWYgKGEuaXNaZXJvKCkpIHJldHVybiBhLmNsb25lKCk7XG5cbiAgICB2YXIgbW9kMyA9IHRoaXMubS5hbmRsbigzKTtcbiAgICBhc3NlcnQobW9kMyAlIDIgPT09IDEpO1xuXG4gICAgLy8gRmFzdCBjYXNlXG4gICAgaWYgKG1vZDMgPT09IDMpIHtcbiAgICAgIHZhciBwb3cgPSB0aGlzLm0uYWRkKG5ldyBCTigxKSkuaXVzaHJuKDIpO1xuICAgICAgcmV0dXJuIHRoaXMucG93KGEsIHBvdyk7XG4gICAgfVxuXG4gICAgLy8gVG9uZWxsaS1TaGFua3MgYWxnb3JpdGhtIChUb3RhbGx5IHVub3B0aW1pemVkIGFuZCBzbG93KVxuICAgIC8vXG4gICAgLy8gRmluZCBRIGFuZCBTLCB0aGF0IFEgKiAyIF4gUyA9IChQIC0gMSlcbiAgICB2YXIgcSA9IHRoaXMubS5zdWJuKDEpO1xuICAgIHZhciBzID0gMDtcbiAgICB3aGlsZSAoIXEuaXNaZXJvKCkgJiYgcS5hbmRsbigxKSA9PT0gMCkge1xuICAgICAgcysrO1xuICAgICAgcS5pdXNocm4oMSk7XG4gICAgfVxuICAgIGFzc2VydCghcS5pc1plcm8oKSk7XG5cbiAgICB2YXIgb25lID0gbmV3IEJOKDEpLnRvUmVkKHRoaXMpO1xuICAgIHZhciBuT25lID0gb25lLnJlZE5lZygpO1xuXG4gICAgLy8gRmluZCBxdWFkcmF0aWMgbm9uLXJlc2lkdWVcbiAgICAvLyBOT1RFOiBNYXggaXMgc3VjaCBiZWNhdXNlIG9mIGdlbmVyYWxpemVkIFJpZW1hbm4gaHlwb3RoZXNpcy5cbiAgICB2YXIgbHBvdyA9IHRoaXMubS5zdWJuKDEpLml1c2hybigxKTtcbiAgICB2YXIgeiA9IHRoaXMubS5iaXRMZW5ndGgoKTtcbiAgICB6ID0gbmV3IEJOKDIgKiB6ICogeikudG9SZWQodGhpcyk7XG5cbiAgICB3aGlsZSAodGhpcy5wb3coeiwgbHBvdykuY21wKG5PbmUpICE9PSAwKSB7XG4gICAgICB6LnJlZElBZGQobk9uZSk7XG4gICAgfVxuXG4gICAgdmFyIGMgPSB0aGlzLnBvdyh6LCBxKTtcbiAgICB2YXIgciA9IHRoaXMucG93KGEsIHEuYWRkbigxKS5pdXNocm4oMSkpO1xuICAgIHZhciB0ID0gdGhpcy5wb3coYSwgcSk7XG4gICAgdmFyIG0gPSBzO1xuICAgIHdoaWxlICh0LmNtcChvbmUpICE9PSAwKSB7XG4gICAgICB2YXIgdG1wID0gdDtcbiAgICAgIGZvciAodmFyIGkgPSAwOyB0bXAuY21wKG9uZSkgIT09IDA7IGkrKykge1xuICAgICAgICB0bXAgPSB0bXAucmVkU3FyKCk7XG4gICAgICB9XG4gICAgICBhc3NlcnQoaSA8IG0pO1xuICAgICAgdmFyIGIgPSB0aGlzLnBvdyhjLCBuZXcgQk4oMSkuaXVzaGxuKG0gLSBpIC0gMSkpO1xuXG4gICAgICByID0gci5yZWRNdWwoYik7XG4gICAgICBjID0gYi5yZWRTcXIoKTtcbiAgICAgIHQgPSB0LnJlZE11bChjKTtcbiAgICAgIG0gPSBpO1xuICAgIH1cblxuICAgIHJldHVybiByO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuaW52bSA9IGZ1bmN0aW9uIGludm0gKGEpIHtcbiAgICB2YXIgaW52ID0gYS5faW52bXAodGhpcy5tKTtcbiAgICBpZiAoaW52Lm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICBpbnYubmVnYXRpdmUgPSAwO1xuICAgICAgcmV0dXJuIHRoaXMuaW1vZChpbnYpLnJlZE5lZygpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5pbW9kKGludik7XG4gICAgfVxuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUucG93ID0gZnVuY3Rpb24gcG93IChhLCBudW0pIHtcbiAgICBpZiAobnVtLmlzWmVybygpKSByZXR1cm4gbmV3IEJOKDEpO1xuICAgIGlmIChudW0uY21wbigxKSA9PT0gMCkgcmV0dXJuIGEuY2xvbmUoKTtcblxuICAgIHZhciB3aW5kb3dTaXplID0gNDtcbiAgICB2YXIgd25kID0gbmV3IEFycmF5KDEgPDwgd2luZG93U2l6ZSk7XG4gICAgd25kWzBdID0gbmV3IEJOKDEpLnRvUmVkKHRoaXMpO1xuICAgIHduZFsxXSA9IGE7XG4gICAgZm9yICh2YXIgaSA9IDI7IGkgPCB3bmQubGVuZ3RoOyBpKyspIHtcbiAgICAgIHduZFtpXSA9IHRoaXMubXVsKHduZFtpIC0gMV0sIGEpO1xuICAgIH1cblxuICAgIHZhciByZXMgPSB3bmRbMF07XG4gICAgdmFyIGN1cnJlbnQgPSAwO1xuICAgIHZhciBjdXJyZW50TGVuID0gMDtcbiAgICB2YXIgc3RhcnQgPSBudW0uYml0TGVuZ3RoKCkgJSAyNjtcbiAgICBpZiAoc3RhcnQgPT09IDApIHtcbiAgICAgIHN0YXJ0ID0gMjY7XG4gICAgfVxuXG4gICAgZm9yIChpID0gbnVtLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICB2YXIgd29yZCA9IG51bS53b3Jkc1tpXTtcbiAgICAgIGZvciAodmFyIGogPSBzdGFydCAtIDE7IGogPj0gMDsgai0tKSB7XG4gICAgICAgIHZhciBiaXQgPSAod29yZCA+PiBqKSAmIDE7XG4gICAgICAgIGlmIChyZXMgIT09IHduZFswXSkge1xuICAgICAgICAgIHJlcyA9IHRoaXMuc3FyKHJlcyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYml0ID09PSAwICYmIGN1cnJlbnQgPT09IDApIHtcbiAgICAgICAgICBjdXJyZW50TGVuID0gMDtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGN1cnJlbnQgPDw9IDE7XG4gICAgICAgIGN1cnJlbnQgfD0gYml0O1xuICAgICAgICBjdXJyZW50TGVuKys7XG4gICAgICAgIGlmIChjdXJyZW50TGVuICE9PSB3aW5kb3dTaXplICYmIChpICE9PSAwIHx8IGogIT09IDApKSBjb250aW51ZTtcblxuICAgICAgICByZXMgPSB0aGlzLm11bChyZXMsIHduZFtjdXJyZW50XSk7XG4gICAgICAgIGN1cnJlbnRMZW4gPSAwO1xuICAgICAgICBjdXJyZW50ID0gMDtcbiAgICAgIH1cbiAgICAgIHN0YXJ0ID0gMjY7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmNvbnZlcnRUbyA9IGZ1bmN0aW9uIGNvbnZlcnRUbyAobnVtKSB7XG4gICAgdmFyIHIgPSBudW0udW1vZCh0aGlzLm0pO1xuXG4gICAgcmV0dXJuIHIgPT09IG51bSA/IHIuY2xvbmUoKSA6IHI7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5jb252ZXJ0RnJvbSA9IGZ1bmN0aW9uIGNvbnZlcnRGcm9tIChudW0pIHtcbiAgICB2YXIgcmVzID0gbnVtLmNsb25lKCk7XG4gICAgcmVzLnJlZCA9IG51bGw7XG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICAvL1xuICAvLyBNb250Z29tZXJ5IG1ldGhvZCBlbmdpbmVcbiAgLy9cblxuICBCTi5tb250ID0gZnVuY3Rpb24gbW9udCAobnVtKSB7XG4gICAgcmV0dXJuIG5ldyBNb250KG51bSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gTW9udCAobSkge1xuICAgIFJlZC5jYWxsKHRoaXMsIG0pO1xuXG4gICAgdGhpcy5zaGlmdCA9IHRoaXMubS5iaXRMZW5ndGgoKTtcbiAgICBpZiAodGhpcy5zaGlmdCAlIDI2ICE9PSAwKSB7XG4gICAgICB0aGlzLnNoaWZ0ICs9IDI2IC0gKHRoaXMuc2hpZnQgJSAyNik7XG4gICAgfVxuXG4gICAgdGhpcy5yID0gbmV3IEJOKDEpLml1c2hsbih0aGlzLnNoaWZ0KTtcbiAgICB0aGlzLnIyID0gdGhpcy5pbW9kKHRoaXMuci5zcXIoKSk7XG4gICAgdGhpcy5yaW52ID0gdGhpcy5yLl9pbnZtcCh0aGlzLm0pO1xuXG4gICAgdGhpcy5taW52ID0gdGhpcy5yaW52Lm11bCh0aGlzLnIpLmlzdWJuKDEpLmRpdih0aGlzLm0pO1xuICAgIHRoaXMubWludiA9IHRoaXMubWludi51bW9kKHRoaXMucik7XG4gICAgdGhpcy5taW52ID0gdGhpcy5yLnN1Yih0aGlzLm1pbnYpO1xuICB9XG4gIGluaGVyaXRzKE1vbnQsIFJlZCk7XG5cbiAgTW9udC5wcm90b3R5cGUuY29udmVydFRvID0gZnVuY3Rpb24gY29udmVydFRvIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5pbW9kKG51bS51c2hsbih0aGlzLnNoaWZ0KSk7XG4gIH07XG5cbiAgTW9udC5wcm90b3R5cGUuY29udmVydEZyb20gPSBmdW5jdGlvbiBjb252ZXJ0RnJvbSAobnVtKSB7XG4gICAgdmFyIHIgPSB0aGlzLmltb2QobnVtLm11bCh0aGlzLnJpbnYpKTtcbiAgICByLnJlZCA9IG51bGw7XG4gICAgcmV0dXJuIHI7XG4gIH07XG5cbiAgTW9udC5wcm90b3R5cGUuaW11bCA9IGZ1bmN0aW9uIGltdWwgKGEsIGIpIHtcbiAgICBpZiAoYS5pc1plcm8oKSB8fCBiLmlzWmVybygpKSB7XG4gICAgICBhLndvcmRzWzBdID0gMDtcbiAgICAgIGEubGVuZ3RoID0gMTtcbiAgICAgIHJldHVybiBhO1xuICAgIH1cblxuICAgIHZhciB0ID0gYS5pbXVsKGIpO1xuICAgIHZhciBjID0gdC5tYXNrbih0aGlzLnNoaWZ0KS5tdWwodGhpcy5taW52KS5pbWFza24odGhpcy5zaGlmdCkubXVsKHRoaXMubSk7XG4gICAgdmFyIHUgPSB0LmlzdWIoYykuaXVzaHJuKHRoaXMuc2hpZnQpO1xuICAgIHZhciByZXMgPSB1O1xuXG4gICAgaWYgKHUuY21wKHRoaXMubSkgPj0gMCkge1xuICAgICAgcmVzID0gdS5pc3ViKHRoaXMubSk7XG4gICAgfSBlbHNlIGlmICh1LmNtcG4oMCkgPCAwKSB7XG4gICAgICByZXMgPSB1LmlhZGQodGhpcy5tKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzLl9mb3JjZVJlZCh0aGlzKTtcbiAgfTtcblxuICBNb250LnByb3RvdHlwZS5tdWwgPSBmdW5jdGlvbiBtdWwgKGEsIGIpIHtcbiAgICBpZiAoYS5pc1plcm8oKSB8fCBiLmlzWmVybygpKSByZXR1cm4gbmV3IEJOKDApLl9mb3JjZVJlZCh0aGlzKTtcblxuICAgIHZhciB0ID0gYS5tdWwoYik7XG4gICAgdmFyIGMgPSB0Lm1hc2tuKHRoaXMuc2hpZnQpLm11bCh0aGlzLm1pbnYpLmltYXNrbih0aGlzLnNoaWZ0KS5tdWwodGhpcy5tKTtcbiAgICB2YXIgdSA9IHQuaXN1YihjKS5pdXNocm4odGhpcy5zaGlmdCk7XG4gICAgdmFyIHJlcyA9IHU7XG4gICAgaWYgKHUuY21wKHRoaXMubSkgPj0gMCkge1xuICAgICAgcmVzID0gdS5pc3ViKHRoaXMubSk7XG4gICAgfSBlbHNlIGlmICh1LmNtcG4oMCkgPCAwKSB7XG4gICAgICByZXMgPSB1LmlhZGQodGhpcy5tKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzLl9mb3JjZVJlZCh0aGlzKTtcbiAgfTtcblxuICBNb250LnByb3RvdHlwZS5pbnZtID0gZnVuY3Rpb24gaW52bSAoYSkge1xuICAgIC8vIChBUileLTEgKiBSXjIgPSAoQV4tMSAqIFJeLTEpICogUl4yID0gQV4tMSAqIFJcbiAgICB2YXIgcmVzID0gdGhpcy5pbW9kKGEuX2ludm1wKHRoaXMubSkubXVsKHRoaXMucjIpKTtcbiAgICByZXR1cm4gcmVzLl9mb3JjZVJlZCh0aGlzKTtcbiAgfTtcbn0pKHR5cGVvZiBtb2R1bGUgPT09ICd1bmRlZmluZWQnIHx8IG1vZHVsZSwgdGhpcyk7XG4iLCJ2YXIgcjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiByYW5kKGxlbikge1xuICBpZiAoIXIpXG4gICAgciA9IG5ldyBSYW5kKG51bGwpO1xuXG4gIHJldHVybiByLmdlbmVyYXRlKGxlbik7XG59O1xuXG5mdW5jdGlvbiBSYW5kKHJhbmQpIHtcbiAgdGhpcy5yYW5kID0gcmFuZDtcbn1cbm1vZHVsZS5leHBvcnRzLlJhbmQgPSBSYW5kO1xuXG5SYW5kLnByb3RvdHlwZS5nZW5lcmF0ZSA9IGZ1bmN0aW9uIGdlbmVyYXRlKGxlbikge1xuICByZXR1cm4gdGhpcy5fcmFuZChsZW4pO1xufTtcblxuaWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnKSB7XG4gIGlmICh3aW5kb3cuY3J5cHRvICYmIHdpbmRvdy5jcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKSB7XG4gICAgLy8gTW9kZXJuIGJyb3dzZXJzXG4gICAgUmFuZC5wcm90b3R5cGUuX3JhbmQgPSBmdW5jdGlvbiBfcmFuZChuKSB7XG4gICAgICB2YXIgYXJyID0gbmV3IFVpbnQ4QXJyYXkobik7XG4gICAgICB3aW5kb3cuY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhhcnIpO1xuICAgICAgcmV0dXJuIGFycjtcbiAgICB9O1xuICB9IGVsc2UgaWYgKHdpbmRvdy5tc0NyeXB0byAmJiB3aW5kb3cubXNDcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKSB7XG4gICAgLy8gSUVcbiAgICBSYW5kLnByb3RvdHlwZS5fcmFuZCA9IGZ1bmN0aW9uIF9yYW5kKG4pIHtcbiAgICAgIHZhciBhcnIgPSBuZXcgVWludDhBcnJheShuKTtcbiAgICAgIHdpbmRvdy5tc0NyeXB0by5nZXRSYW5kb21WYWx1ZXMoYXJyKTtcbiAgICAgIHJldHVybiBhcnI7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICAvLyBPbGQganVua1xuICAgIFJhbmQucHJvdG90eXBlLl9yYW5kID0gZnVuY3Rpb24oKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vdCBpbXBsZW1lbnRlZCB5ZXQnKTtcbiAgICB9O1xuICB9XG59IGVsc2Uge1xuICAvLyBOb2RlLmpzIG9yIFdlYiB3b3JrZXJcbiAgdHJ5IHtcbiAgICB2YXIgY3J5cHRvID0gcmVxdWlyZSgnY3J5JyArICdwdG8nKTtcblxuICAgIFJhbmQucHJvdG90eXBlLl9yYW5kID0gZnVuY3Rpb24gX3JhbmQobikge1xuICAgICAgcmV0dXJuIGNyeXB0by5yYW5kb21CeXRlcyhuKTtcbiAgICB9O1xuICB9IGNhdGNoIChlKSB7XG4gICAgLy8gRW11bGF0ZSBjcnlwdG8gQVBJIHVzaW5nIHJhbmR5XG4gICAgUmFuZC5wcm90b3R5cGUuX3JhbmQgPSBmdW5jdGlvbiBfcmFuZChuKSB7XG4gICAgICB2YXIgcmVzID0gbmV3IFVpbnQ4QXJyYXkobik7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlcy5sZW5ndGg7IGkrKylcbiAgICAgICAgcmVzW2ldID0gdGhpcy5yYW5kLmdldEJ5dGUoKTtcbiAgICAgIHJldHVybiByZXM7XG4gICAgfTtcbiAgfVxufVxuIiwidmFyIGJhc2V4ID0gcmVxdWlyZSgnYmFzZS14JylcbnZhciBBTFBIQUJFVCA9ICcxMjM0NTY3ODlBQkNERUZHSEpLTE1OUFFSU1RVVldYWVphYmNkZWZnaGlqa21ub3BxcnN0dXZ3eHl6J1xudmFyIGJhc2U1OCA9IGJhc2V4KEFMUEhBQkVUKVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZW5jb2RlOiBiYXNlNTguZW5jb2RlLFxuICBkZWNvZGU6IGJhc2U1OC5kZWNvZGVcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGVsbGlwdGljID0gZXhwb3J0cztcblxuZWxsaXB0aWMudmVyc2lvbiA9IHJlcXVpcmUoJy4uL3BhY2thZ2UuanNvbicpLnZlcnNpb247XG5lbGxpcHRpYy51dGlscyA9IHJlcXVpcmUoJy4vZWxsaXB0aWMvdXRpbHMnKTtcbmVsbGlwdGljLnJhbmQgPSByZXF1aXJlKCdicm9yYW5kJyk7XG5lbGxpcHRpYy5obWFjRFJCRyA9IHJlcXVpcmUoJy4vZWxsaXB0aWMvaG1hYy1kcmJnJyk7XG5lbGxpcHRpYy5jdXJ2ZSA9IHJlcXVpcmUoJy4vZWxsaXB0aWMvY3VydmUnKTtcbmVsbGlwdGljLmN1cnZlcyA9IHJlcXVpcmUoJy4vZWxsaXB0aWMvY3VydmVzJyk7XG5cbi8vIFByb3RvY29sc1xuZWxsaXB0aWMuZWMgPSByZXF1aXJlKCcuL2VsbGlwdGljL2VjJyk7XG5lbGxpcHRpYy5lZGRzYSA9IHJlcXVpcmUoJy4vZWxsaXB0aWMvZWRkc2EnKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEJOID0gcmVxdWlyZSgnYm4uanMnKTtcbnZhciBlbGxpcHRpYyA9IHJlcXVpcmUoJy4uLy4uL2VsbGlwdGljJyk7XG52YXIgdXRpbHMgPSBlbGxpcHRpYy51dGlscztcbnZhciBnZXROQUYgPSB1dGlscy5nZXROQUY7XG52YXIgZ2V0SlNGID0gdXRpbHMuZ2V0SlNGO1xudmFyIGFzc2VydCA9IHV0aWxzLmFzc2VydDtcblxuZnVuY3Rpb24gQmFzZUN1cnZlKHR5cGUsIGNvbmYpIHtcbiAgdGhpcy50eXBlID0gdHlwZTtcbiAgdGhpcy5wID0gbmV3IEJOKGNvbmYucCwgMTYpO1xuXG4gIC8vIFVzZSBNb250Z29tZXJ5LCB3aGVuIHRoZXJlIGlzIG5vIGZhc3QgcmVkdWN0aW9uIGZvciB0aGUgcHJpbWVcbiAgdGhpcy5yZWQgPSBjb25mLnByaW1lID8gQk4ucmVkKGNvbmYucHJpbWUpIDogQk4ubW9udCh0aGlzLnApO1xuXG4gIC8vIFVzZWZ1bCBmb3IgbWFueSBjdXJ2ZXNcbiAgdGhpcy56ZXJvID0gbmV3IEJOKDApLnRvUmVkKHRoaXMucmVkKTtcbiAgdGhpcy5vbmUgPSBuZXcgQk4oMSkudG9SZWQodGhpcy5yZWQpO1xuICB0aGlzLnR3byA9IG5ldyBCTigyKS50b1JlZCh0aGlzLnJlZCk7XG5cbiAgLy8gQ3VydmUgY29uZmlndXJhdGlvbiwgb3B0aW9uYWxcbiAgdGhpcy5uID0gY29uZi5uICYmIG5ldyBCTihjb25mLm4sIDE2KTtcbiAgdGhpcy5nID0gY29uZi5nICYmIHRoaXMucG9pbnRGcm9tSlNPTihjb25mLmcsIGNvbmYuZ1JlZCk7XG5cbiAgLy8gVGVtcG9yYXJ5IGFycmF5c1xuICB0aGlzLl93bmFmVDEgPSBuZXcgQXJyYXkoNCk7XG4gIHRoaXMuX3duYWZUMiA9IG5ldyBBcnJheSg0KTtcbiAgdGhpcy5fd25hZlQzID0gbmV3IEFycmF5KDQpO1xuICB0aGlzLl93bmFmVDQgPSBuZXcgQXJyYXkoNCk7XG5cbiAgLy8gR2VuZXJhbGl6ZWQgR3JlZyBNYXh3ZWxsJ3MgdHJpY2tcbiAgdmFyIGFkanVzdENvdW50ID0gdGhpcy5uICYmIHRoaXMucC5kaXYodGhpcy5uKTtcbiAgaWYgKCFhZGp1c3RDb3VudCB8fCBhZGp1c3RDb3VudC5jbXBuKDEwMCkgPiAwKSB7XG4gICAgdGhpcy5yZWROID0gbnVsbDtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLl9tYXh3ZWxsVHJpY2sgPSB0cnVlO1xuICAgIHRoaXMucmVkTiA9IHRoaXMubi50b1JlZCh0aGlzLnJlZCk7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gQmFzZUN1cnZlO1xuXG5CYXNlQ3VydmUucHJvdG90eXBlLnBvaW50ID0gZnVuY3Rpb24gcG9pbnQoKSB7XG4gIHRocm93IG5ldyBFcnJvcignTm90IGltcGxlbWVudGVkJyk7XG59O1xuXG5CYXNlQ3VydmUucHJvdG90eXBlLnZhbGlkYXRlID0gZnVuY3Rpb24gdmFsaWRhdGUoKSB7XG4gIHRocm93IG5ldyBFcnJvcignTm90IGltcGxlbWVudGVkJyk7XG59O1xuXG5CYXNlQ3VydmUucHJvdG90eXBlLl9maXhlZE5hZk11bCA9IGZ1bmN0aW9uIF9maXhlZE5hZk11bChwLCBrKSB7XG4gIGFzc2VydChwLnByZWNvbXB1dGVkKTtcbiAgdmFyIGRvdWJsZXMgPSBwLl9nZXREb3VibGVzKCk7XG5cbiAgdmFyIG5hZiA9IGdldE5BRihrLCAxKTtcbiAgdmFyIEkgPSAoMSA8PCAoZG91Ymxlcy5zdGVwICsgMSkpIC0gKGRvdWJsZXMuc3RlcCAlIDIgPT09IDAgPyAyIDogMSk7XG4gIEkgLz0gMztcblxuICAvLyBUcmFuc2xhdGUgaW50byBtb3JlIHdpbmRvd2VkIGZvcm1cbiAgdmFyIHJlcHIgPSBbXTtcbiAgZm9yICh2YXIgaiA9IDA7IGogPCBuYWYubGVuZ3RoOyBqICs9IGRvdWJsZXMuc3RlcCkge1xuICAgIHZhciBuYWZXID0gMDtcbiAgICBmb3IgKHZhciBrID0gaiArIGRvdWJsZXMuc3RlcCAtIDE7IGsgPj0gajsgay0tKVxuICAgICAgbmFmVyA9IChuYWZXIDw8IDEpICsgbmFmW2tdO1xuICAgIHJlcHIucHVzaChuYWZXKTtcbiAgfVxuXG4gIHZhciBhID0gdGhpcy5qcG9pbnQobnVsbCwgbnVsbCwgbnVsbCk7XG4gIHZhciBiID0gdGhpcy5qcG9pbnQobnVsbCwgbnVsbCwgbnVsbCk7XG4gIGZvciAodmFyIGkgPSBJOyBpID4gMDsgaS0tKSB7XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCByZXByLmxlbmd0aDsgaisrKSB7XG4gICAgICB2YXIgbmFmVyA9IHJlcHJbal07XG4gICAgICBpZiAobmFmVyA9PT0gaSlcbiAgICAgICAgYiA9IGIubWl4ZWRBZGQoZG91Ymxlcy5wb2ludHNbal0pO1xuICAgICAgZWxzZSBpZiAobmFmVyA9PT0gLWkpXG4gICAgICAgIGIgPSBiLm1peGVkQWRkKGRvdWJsZXMucG9pbnRzW2pdLm5lZygpKTtcbiAgICB9XG4gICAgYSA9IGEuYWRkKGIpO1xuICB9XG4gIHJldHVybiBhLnRvUCgpO1xufTtcblxuQmFzZUN1cnZlLnByb3RvdHlwZS5fd25hZk11bCA9IGZ1bmN0aW9uIF93bmFmTXVsKHAsIGspIHtcbiAgdmFyIHcgPSA0O1xuXG4gIC8vIFByZWNvbXB1dGUgd2luZG93XG4gIHZhciBuYWZQb2ludHMgPSBwLl9nZXROQUZQb2ludHModyk7XG4gIHcgPSBuYWZQb2ludHMud25kO1xuICB2YXIgd25kID0gbmFmUG9pbnRzLnBvaW50cztcblxuICAvLyBHZXQgTkFGIGZvcm1cbiAgdmFyIG5hZiA9IGdldE5BRihrLCB3KTtcblxuICAvLyBBZGQgYHRoaXNgKihOKzEpIGZvciBldmVyeSB3LU5BRiBpbmRleFxuICB2YXIgYWNjID0gdGhpcy5qcG9pbnQobnVsbCwgbnVsbCwgbnVsbCk7XG4gIGZvciAodmFyIGkgPSBuYWYubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAvLyBDb3VudCB6ZXJvZXNcbiAgICBmb3IgKHZhciBrID0gMDsgaSA+PSAwICYmIG5hZltpXSA9PT0gMDsgaS0tKVxuICAgICAgaysrO1xuICAgIGlmIChpID49IDApXG4gICAgICBrKys7XG4gICAgYWNjID0gYWNjLmRibHAoayk7XG5cbiAgICBpZiAoaSA8IDApXG4gICAgICBicmVhaztcbiAgICB2YXIgeiA9IG5hZltpXTtcbiAgICBhc3NlcnQoeiAhPT0gMCk7XG4gICAgaWYgKHAudHlwZSA9PT0gJ2FmZmluZScpIHtcbiAgICAgIC8vIEogKy0gUFxuICAgICAgaWYgKHogPiAwKVxuICAgICAgICBhY2MgPSBhY2MubWl4ZWRBZGQod25kWyh6IC0gMSkgPj4gMV0pO1xuICAgICAgZWxzZVxuICAgICAgICBhY2MgPSBhY2MubWl4ZWRBZGQod25kWygteiAtIDEpID4+IDFdLm5lZygpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gSiArLSBKXG4gICAgICBpZiAoeiA+IDApXG4gICAgICAgIGFjYyA9IGFjYy5hZGQod25kWyh6IC0gMSkgPj4gMV0pO1xuICAgICAgZWxzZVxuICAgICAgICBhY2MgPSBhY2MuYWRkKHduZFsoLXogLSAxKSA+PiAxXS5uZWcoKSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBwLnR5cGUgPT09ICdhZmZpbmUnID8gYWNjLnRvUCgpIDogYWNjO1xufTtcblxuQmFzZUN1cnZlLnByb3RvdHlwZS5fd25hZk11bEFkZCA9IGZ1bmN0aW9uIF93bmFmTXVsQWRkKGRlZlcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnRzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZWZmcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZW4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgamFjb2JpYW5SZXN1bHQpIHtcbiAgdmFyIHduZFdpZHRoID0gdGhpcy5fd25hZlQxO1xuICB2YXIgd25kID0gdGhpcy5fd25hZlQyO1xuICB2YXIgbmFmID0gdGhpcy5fd25hZlQzO1xuXG4gIC8vIEZpbGwgYWxsIGFycmF5c1xuICB2YXIgbWF4ID0gMDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgIHZhciBwID0gcG9pbnRzW2ldO1xuICAgIHZhciBuYWZQb2ludHMgPSBwLl9nZXROQUZQb2ludHMoZGVmVyk7XG4gICAgd25kV2lkdGhbaV0gPSBuYWZQb2ludHMud25kO1xuICAgIHduZFtpXSA9IG5hZlBvaW50cy5wb2ludHM7XG4gIH1cblxuICAvLyBDb21iIHNtYWxsIHdpbmRvdyBOQUZzXG4gIGZvciAodmFyIGkgPSBsZW4gLSAxOyBpID49IDE7IGkgLT0gMikge1xuICAgIHZhciBhID0gaSAtIDE7XG4gICAgdmFyIGIgPSBpO1xuICAgIGlmICh3bmRXaWR0aFthXSAhPT0gMSB8fCB3bmRXaWR0aFtiXSAhPT0gMSkge1xuICAgICAgbmFmW2FdID0gZ2V0TkFGKGNvZWZmc1thXSwgd25kV2lkdGhbYV0pO1xuICAgICAgbmFmW2JdID0gZ2V0TkFGKGNvZWZmc1tiXSwgd25kV2lkdGhbYl0pO1xuICAgICAgbWF4ID0gTWF0aC5tYXgobmFmW2FdLmxlbmd0aCwgbWF4KTtcbiAgICAgIG1heCA9IE1hdGgubWF4KG5hZltiXS5sZW5ndGgsIG1heCk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICB2YXIgY29tYiA9IFtcbiAgICAgIHBvaW50c1thXSwgLyogMSAqL1xuICAgICAgbnVsbCwgLyogMyAqL1xuICAgICAgbnVsbCwgLyogNSAqL1xuICAgICAgcG9pbnRzW2JdIC8qIDcgKi9cbiAgICBdO1xuXG4gICAgLy8gVHJ5IHRvIGF2b2lkIFByb2plY3RpdmUgcG9pbnRzLCBpZiBwb3NzaWJsZVxuICAgIGlmIChwb2ludHNbYV0ueS5jbXAocG9pbnRzW2JdLnkpID09PSAwKSB7XG4gICAgICBjb21iWzFdID0gcG9pbnRzW2FdLmFkZChwb2ludHNbYl0pO1xuICAgICAgY29tYlsyXSA9IHBvaW50c1thXS50b0ooKS5taXhlZEFkZChwb2ludHNbYl0ubmVnKCkpO1xuICAgIH0gZWxzZSBpZiAocG9pbnRzW2FdLnkuY21wKHBvaW50c1tiXS55LnJlZE5lZygpKSA9PT0gMCkge1xuICAgICAgY29tYlsxXSA9IHBvaW50c1thXS50b0ooKS5taXhlZEFkZChwb2ludHNbYl0pO1xuICAgICAgY29tYlsyXSA9IHBvaW50c1thXS5hZGQocG9pbnRzW2JdLm5lZygpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29tYlsxXSA9IHBvaW50c1thXS50b0ooKS5taXhlZEFkZChwb2ludHNbYl0pO1xuICAgICAgY29tYlsyXSA9IHBvaW50c1thXS50b0ooKS5taXhlZEFkZChwb2ludHNbYl0ubmVnKCkpO1xuICAgIH1cblxuICAgIHZhciBpbmRleCA9IFtcbiAgICAgIC0zLCAvKiAtMSAtMSAqL1xuICAgICAgLTEsIC8qIC0xIDAgKi9cbiAgICAgIC01LCAvKiAtMSAxICovXG4gICAgICAtNywgLyogMCAtMSAqL1xuICAgICAgMCwgLyogMCAwICovXG4gICAgICA3LCAvKiAwIDEgKi9cbiAgICAgIDUsIC8qIDEgLTEgKi9cbiAgICAgIDEsIC8qIDEgMCAqL1xuICAgICAgMyAgLyogMSAxICovXG4gICAgXTtcblxuICAgIHZhciBqc2YgPSBnZXRKU0YoY29lZmZzW2FdLCBjb2VmZnNbYl0pO1xuICAgIG1heCA9IE1hdGgubWF4KGpzZlswXS5sZW5ndGgsIG1heCk7XG4gICAgbmFmW2FdID0gbmV3IEFycmF5KG1heCk7XG4gICAgbmFmW2JdID0gbmV3IEFycmF5KG1heCk7XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCBtYXg7IGorKykge1xuICAgICAgdmFyIGphID0ganNmWzBdW2pdIHwgMDtcbiAgICAgIHZhciBqYiA9IGpzZlsxXVtqXSB8IDA7XG5cbiAgICAgIG5hZlthXVtqXSA9IGluZGV4WyhqYSArIDEpICogMyArIChqYiArIDEpXTtcbiAgICAgIG5hZltiXVtqXSA9IDA7XG4gICAgICB3bmRbYV0gPSBjb21iO1xuICAgIH1cbiAgfVxuXG4gIHZhciBhY2MgPSB0aGlzLmpwb2ludChudWxsLCBudWxsLCBudWxsKTtcbiAgdmFyIHRtcCA9IHRoaXMuX3duYWZUNDtcbiAgZm9yICh2YXIgaSA9IG1heDsgaSA+PSAwOyBpLS0pIHtcbiAgICB2YXIgayA9IDA7XG5cbiAgICB3aGlsZSAoaSA+PSAwKSB7XG4gICAgICB2YXIgemVybyA9IHRydWU7XG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGxlbjsgaisrKSB7XG4gICAgICAgIHRtcFtqXSA9IG5hZltqXVtpXSB8IDA7XG4gICAgICAgIGlmICh0bXBbal0gIT09IDApXG4gICAgICAgICAgemVybyA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKCF6ZXJvKVxuICAgICAgICBicmVhaztcbiAgICAgIGsrKztcbiAgICAgIGktLTtcbiAgICB9XG4gICAgaWYgKGkgPj0gMClcbiAgICAgIGsrKztcbiAgICBhY2MgPSBhY2MuZGJscChrKTtcbiAgICBpZiAoaSA8IDApXG4gICAgICBicmVhaztcblxuICAgIGZvciAodmFyIGogPSAwOyBqIDwgbGVuOyBqKyspIHtcbiAgICAgIHZhciB6ID0gdG1wW2pdO1xuICAgICAgdmFyIHA7XG4gICAgICBpZiAoeiA9PT0gMClcbiAgICAgICAgY29udGludWU7XG4gICAgICBlbHNlIGlmICh6ID4gMClcbiAgICAgICAgcCA9IHduZFtqXVsoeiAtIDEpID4+IDFdO1xuICAgICAgZWxzZSBpZiAoeiA8IDApXG4gICAgICAgIHAgPSB3bmRbal1bKC16IC0gMSkgPj4gMV0ubmVnKCk7XG5cbiAgICAgIGlmIChwLnR5cGUgPT09ICdhZmZpbmUnKVxuICAgICAgICBhY2MgPSBhY2MubWl4ZWRBZGQocCk7XG4gICAgICBlbHNlXG4gICAgICAgIGFjYyA9IGFjYy5hZGQocCk7XG4gICAgfVxuICB9XG4gIC8vIFplcm9pZnkgcmVmZXJlbmNlc1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKVxuICAgIHduZFtpXSA9IG51bGw7XG5cbiAgaWYgKGphY29iaWFuUmVzdWx0KVxuICAgIHJldHVybiBhY2M7XG4gIGVsc2VcbiAgICByZXR1cm4gYWNjLnRvUCgpO1xufTtcblxuZnVuY3Rpb24gQmFzZVBvaW50KGN1cnZlLCB0eXBlKSB7XG4gIHRoaXMuY3VydmUgPSBjdXJ2ZTtcbiAgdGhpcy50eXBlID0gdHlwZTtcbiAgdGhpcy5wcmVjb21wdXRlZCA9IG51bGw7XG59XG5CYXNlQ3VydmUuQmFzZVBvaW50ID0gQmFzZVBvaW50O1xuXG5CYXNlUG9pbnQucHJvdG90eXBlLmVxID0gZnVuY3Rpb24gZXEoLypvdGhlciovKSB7XG4gIHRocm93IG5ldyBFcnJvcignTm90IGltcGxlbWVudGVkJyk7XG59O1xuXG5CYXNlUG9pbnQucHJvdG90eXBlLnZhbGlkYXRlID0gZnVuY3Rpb24gdmFsaWRhdGUoKSB7XG4gIHJldHVybiB0aGlzLmN1cnZlLnZhbGlkYXRlKHRoaXMpO1xufTtcblxuQmFzZUN1cnZlLnByb3RvdHlwZS5kZWNvZGVQb2ludCA9IGZ1bmN0aW9uIGRlY29kZVBvaW50KGJ5dGVzLCBlbmMpIHtcbiAgYnl0ZXMgPSB1dGlscy50b0FycmF5KGJ5dGVzLCBlbmMpO1xuXG4gIHZhciBsZW4gPSB0aGlzLnAuYnl0ZUxlbmd0aCgpO1xuXG4gIC8vIHVuY29tcHJlc3NlZCwgaHlicmlkLW9kZCwgaHlicmlkLWV2ZW5cbiAgaWYgKChieXRlc1swXSA9PT0gMHgwNCB8fCBieXRlc1swXSA9PT0gMHgwNiB8fCBieXRlc1swXSA9PT0gMHgwNykgJiZcbiAgICAgIGJ5dGVzLmxlbmd0aCAtIDEgPT09IDIgKiBsZW4pIHtcbiAgICBpZiAoYnl0ZXNbMF0gPT09IDB4MDYpXG4gICAgICBhc3NlcnQoYnl0ZXNbYnl0ZXMubGVuZ3RoIC0gMV0gJSAyID09PSAwKTtcbiAgICBlbHNlIGlmIChieXRlc1swXSA9PT0gMHgwNylcbiAgICAgIGFzc2VydChieXRlc1tieXRlcy5sZW5ndGggLSAxXSAlIDIgPT09IDEpO1xuXG4gICAgdmFyIHJlcyA9ICB0aGlzLnBvaW50KGJ5dGVzLnNsaWNlKDEsIDEgKyBsZW4pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBieXRlcy5zbGljZSgxICsgbGVuLCAxICsgMiAqIGxlbikpO1xuXG4gICAgcmV0dXJuIHJlcztcbiAgfSBlbHNlIGlmICgoYnl0ZXNbMF0gPT09IDB4MDIgfHwgYnl0ZXNbMF0gPT09IDB4MDMpICYmXG4gICAgICAgICAgICAgIGJ5dGVzLmxlbmd0aCAtIDEgPT09IGxlbikge1xuICAgIHJldHVybiB0aGlzLnBvaW50RnJvbVgoYnl0ZXMuc2xpY2UoMSwgMSArIGxlbiksIGJ5dGVzWzBdID09PSAweDAzKTtcbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gcG9pbnQgZm9ybWF0Jyk7XG59O1xuXG5CYXNlUG9pbnQucHJvdG90eXBlLmVuY29kZUNvbXByZXNzZWQgPSBmdW5jdGlvbiBlbmNvZGVDb21wcmVzc2VkKGVuYykge1xuICByZXR1cm4gdGhpcy5lbmNvZGUoZW5jLCB0cnVlKTtcbn07XG5cbkJhc2VQb2ludC5wcm90b3R5cGUuX2VuY29kZSA9IGZ1bmN0aW9uIF9lbmNvZGUoY29tcGFjdCkge1xuICB2YXIgbGVuID0gdGhpcy5jdXJ2ZS5wLmJ5dGVMZW5ndGgoKTtcbiAgdmFyIHggPSB0aGlzLmdldFgoKS50b0FycmF5KCdiZScsIGxlbik7XG5cbiAgaWYgKGNvbXBhY3QpXG4gICAgcmV0dXJuIFsgdGhpcy5nZXRZKCkuaXNFdmVuKCkgPyAweDAyIDogMHgwMyBdLmNvbmNhdCh4KTtcblxuICByZXR1cm4gWyAweDA0IF0uY29uY2F0KHgsIHRoaXMuZ2V0WSgpLnRvQXJyYXkoJ2JlJywgbGVuKSkgO1xufTtcblxuQmFzZVBvaW50LnByb3RvdHlwZS5lbmNvZGUgPSBmdW5jdGlvbiBlbmNvZGUoZW5jLCBjb21wYWN0KSB7XG4gIHJldHVybiB1dGlscy5lbmNvZGUodGhpcy5fZW5jb2RlKGNvbXBhY3QpLCBlbmMpO1xufTtcblxuQmFzZVBvaW50LnByb3RvdHlwZS5wcmVjb21wdXRlID0gZnVuY3Rpb24gcHJlY29tcHV0ZShwb3dlcikge1xuICBpZiAodGhpcy5wcmVjb21wdXRlZClcbiAgICByZXR1cm4gdGhpcztcblxuICB2YXIgcHJlY29tcHV0ZWQgPSB7XG4gICAgZG91YmxlczogbnVsbCxcbiAgICBuYWY6IG51bGwsXG4gICAgYmV0YTogbnVsbFxuICB9O1xuICBwcmVjb21wdXRlZC5uYWYgPSB0aGlzLl9nZXROQUZQb2ludHMoOCk7XG4gIHByZWNvbXB1dGVkLmRvdWJsZXMgPSB0aGlzLl9nZXREb3VibGVzKDQsIHBvd2VyKTtcbiAgcHJlY29tcHV0ZWQuYmV0YSA9IHRoaXMuX2dldEJldGEoKTtcbiAgdGhpcy5wcmVjb21wdXRlZCA9IHByZWNvbXB1dGVkO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuQmFzZVBvaW50LnByb3RvdHlwZS5faGFzRG91YmxlcyA9IGZ1bmN0aW9uIF9oYXNEb3VibGVzKGspIHtcbiAgaWYgKCF0aGlzLnByZWNvbXB1dGVkKVxuICAgIHJldHVybiBmYWxzZTtcblxuICB2YXIgZG91YmxlcyA9IHRoaXMucHJlY29tcHV0ZWQuZG91YmxlcztcbiAgaWYgKCFkb3VibGVzKVxuICAgIHJldHVybiBmYWxzZTtcblxuICByZXR1cm4gZG91Ymxlcy5wb2ludHMubGVuZ3RoID49IE1hdGguY2VpbCgoay5iaXRMZW5ndGgoKSArIDEpIC8gZG91Ymxlcy5zdGVwKTtcbn07XG5cbkJhc2VQb2ludC5wcm90b3R5cGUuX2dldERvdWJsZXMgPSBmdW5jdGlvbiBfZ2V0RG91YmxlcyhzdGVwLCBwb3dlcikge1xuICBpZiAodGhpcy5wcmVjb21wdXRlZCAmJiB0aGlzLnByZWNvbXB1dGVkLmRvdWJsZXMpXG4gICAgcmV0dXJuIHRoaXMucHJlY29tcHV0ZWQuZG91YmxlcztcblxuICB2YXIgZG91YmxlcyA9IFsgdGhpcyBdO1xuICB2YXIgYWNjID0gdGhpcztcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwb3dlcjsgaSArPSBzdGVwKSB7XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCBzdGVwOyBqKyspXG4gICAgICBhY2MgPSBhY2MuZGJsKCk7XG4gICAgZG91Ymxlcy5wdXNoKGFjYyk7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBzdGVwOiBzdGVwLFxuICAgIHBvaW50czogZG91Ymxlc1xuICB9O1xufTtcblxuQmFzZVBvaW50LnByb3RvdHlwZS5fZ2V0TkFGUG9pbnRzID0gZnVuY3Rpb24gX2dldE5BRlBvaW50cyh3bmQpIHtcbiAgaWYgKHRoaXMucHJlY29tcHV0ZWQgJiYgdGhpcy5wcmVjb21wdXRlZC5uYWYpXG4gICAgcmV0dXJuIHRoaXMucHJlY29tcHV0ZWQubmFmO1xuXG4gIHZhciByZXMgPSBbIHRoaXMgXTtcbiAgdmFyIG1heCA9ICgxIDw8IHduZCkgLSAxO1xuICB2YXIgZGJsID0gbWF4ID09PSAxID8gbnVsbCA6IHRoaXMuZGJsKCk7XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgbWF4OyBpKyspXG4gICAgcmVzW2ldID0gcmVzW2kgLSAxXS5hZGQoZGJsKTtcbiAgcmV0dXJuIHtcbiAgICB3bmQ6IHduZCxcbiAgICBwb2ludHM6IHJlc1xuICB9O1xufTtcblxuQmFzZVBvaW50LnByb3RvdHlwZS5fZ2V0QmV0YSA9IGZ1bmN0aW9uIF9nZXRCZXRhKCkge1xuICByZXR1cm4gbnVsbDtcbn07XG5cbkJhc2VQb2ludC5wcm90b3R5cGUuZGJscCA9IGZ1bmN0aW9uIGRibHAoaykge1xuICB2YXIgciA9IHRoaXM7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgazsgaSsrKVxuICAgIHIgPSByLmRibCgpO1xuICByZXR1cm4gcjtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBjdXJ2ZSA9IHJlcXVpcmUoJy4uL2N1cnZlJyk7XG52YXIgZWxsaXB0aWMgPSByZXF1aXJlKCcuLi8uLi9lbGxpcHRpYycpO1xudmFyIEJOID0gcmVxdWlyZSgnYm4uanMnKTtcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG52YXIgQmFzZSA9IGN1cnZlLmJhc2U7XG5cbnZhciBhc3NlcnQgPSBlbGxpcHRpYy51dGlscy5hc3NlcnQ7XG5cbmZ1bmN0aW9uIEVkd2FyZHNDdXJ2ZShjb25mKSB7XG4gIC8vIE5PVEU6IEltcG9ydGFudCBhcyB3ZSBhcmUgY3JlYXRpbmcgcG9pbnQgaW4gQmFzZS5jYWxsKClcbiAgdGhpcy50d2lzdGVkID0gKGNvbmYuYSB8IDApICE9PSAxO1xuICB0aGlzLm1PbmVBID0gdGhpcy50d2lzdGVkICYmIChjb25mLmEgfCAwKSA9PT0gLTE7XG4gIHRoaXMuZXh0ZW5kZWQgPSB0aGlzLm1PbmVBO1xuXG4gIEJhc2UuY2FsbCh0aGlzLCAnZWR3YXJkcycsIGNvbmYpO1xuXG4gIHRoaXMuYSA9IG5ldyBCTihjb25mLmEsIDE2KS51bW9kKHRoaXMucmVkLm0pO1xuICB0aGlzLmEgPSB0aGlzLmEudG9SZWQodGhpcy5yZWQpO1xuICB0aGlzLmMgPSBuZXcgQk4oY29uZi5jLCAxNikudG9SZWQodGhpcy5yZWQpO1xuICB0aGlzLmMyID0gdGhpcy5jLnJlZFNxcigpO1xuICB0aGlzLmQgPSBuZXcgQk4oY29uZi5kLCAxNikudG9SZWQodGhpcy5yZWQpO1xuICB0aGlzLmRkID0gdGhpcy5kLnJlZEFkZCh0aGlzLmQpO1xuXG4gIGFzc2VydCghdGhpcy50d2lzdGVkIHx8IHRoaXMuYy5mcm9tUmVkKCkuY21wbigxKSA9PT0gMCk7XG4gIHRoaXMub25lQyA9IChjb25mLmMgfCAwKSA9PT0gMTtcbn1cbmluaGVyaXRzKEVkd2FyZHNDdXJ2ZSwgQmFzZSk7XG5tb2R1bGUuZXhwb3J0cyA9IEVkd2FyZHNDdXJ2ZTtcblxuRWR3YXJkc0N1cnZlLnByb3RvdHlwZS5fbXVsQSA9IGZ1bmN0aW9uIF9tdWxBKG51bSkge1xuICBpZiAodGhpcy5tT25lQSlcbiAgICByZXR1cm4gbnVtLnJlZE5lZygpO1xuICBlbHNlXG4gICAgcmV0dXJuIHRoaXMuYS5yZWRNdWwobnVtKTtcbn07XG5cbkVkd2FyZHNDdXJ2ZS5wcm90b3R5cGUuX211bEMgPSBmdW5jdGlvbiBfbXVsQyhudW0pIHtcbiAgaWYgKHRoaXMub25lQylcbiAgICByZXR1cm4gbnVtO1xuICBlbHNlXG4gICAgcmV0dXJuIHRoaXMuYy5yZWRNdWwobnVtKTtcbn07XG5cbi8vIEp1c3QgZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBTaG9ydCBjdXJ2ZVxuRWR3YXJkc0N1cnZlLnByb3RvdHlwZS5qcG9pbnQgPSBmdW5jdGlvbiBqcG9pbnQoeCwgeSwgeiwgdCkge1xuICByZXR1cm4gdGhpcy5wb2ludCh4LCB5LCB6LCB0KTtcbn07XG5cbkVkd2FyZHNDdXJ2ZS5wcm90b3R5cGUucG9pbnRGcm9tWCA9IGZ1bmN0aW9uIHBvaW50RnJvbVgoeCwgb2RkKSB7XG4gIHggPSBuZXcgQk4oeCwgMTYpO1xuICBpZiAoIXgucmVkKVxuICAgIHggPSB4LnRvUmVkKHRoaXMucmVkKTtcblxuICB2YXIgeDIgPSB4LnJlZFNxcigpO1xuICB2YXIgcmhzID0gdGhpcy5jMi5yZWRTdWIodGhpcy5hLnJlZE11bCh4MikpO1xuICB2YXIgbGhzID0gdGhpcy5vbmUucmVkU3ViKHRoaXMuYzIucmVkTXVsKHRoaXMuZCkucmVkTXVsKHgyKSk7XG5cbiAgdmFyIHkyID0gcmhzLnJlZE11bChsaHMucmVkSW52bSgpKTtcbiAgdmFyIHkgPSB5Mi5yZWRTcXJ0KCk7XG4gIGlmICh5LnJlZFNxcigpLnJlZFN1Yih5MikuY21wKHRoaXMuemVybykgIT09IDApXG4gICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIHBvaW50Jyk7XG5cbiAgdmFyIGlzT2RkID0geS5mcm9tUmVkKCkuaXNPZGQoKTtcbiAgaWYgKG9kZCAmJiAhaXNPZGQgfHwgIW9kZCAmJiBpc09kZClcbiAgICB5ID0geS5yZWROZWcoKTtcblxuICByZXR1cm4gdGhpcy5wb2ludCh4LCB5KTtcbn07XG5cbkVkd2FyZHNDdXJ2ZS5wcm90b3R5cGUucG9pbnRGcm9tWSA9IGZ1bmN0aW9uIHBvaW50RnJvbVkoeSwgb2RkKSB7XG4gIHkgPSBuZXcgQk4oeSwgMTYpO1xuICBpZiAoIXkucmVkKVxuICAgIHkgPSB5LnRvUmVkKHRoaXMucmVkKTtcblxuICAvLyB4XjIgPSAoeV4yIC0gMSkgLyAoZCB5XjIgKyAxKVxuICB2YXIgeTIgPSB5LnJlZFNxcigpO1xuICB2YXIgbGhzID0geTIucmVkU3ViKHRoaXMub25lKTtcbiAgdmFyIHJocyA9IHkyLnJlZE11bCh0aGlzLmQpLnJlZEFkZCh0aGlzLm9uZSk7XG4gIHZhciB4MiA9IGxocy5yZWRNdWwocmhzLnJlZEludm0oKSk7XG5cbiAgaWYgKHgyLmNtcCh0aGlzLnplcm8pID09PSAwKSB7XG4gICAgaWYgKG9kZClcbiAgICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBwb2ludCcpO1xuICAgIGVsc2VcbiAgICAgIHJldHVybiB0aGlzLnBvaW50KHRoaXMuemVybywgeSk7XG4gIH1cblxuICB2YXIgeCA9IHgyLnJlZFNxcnQoKTtcbiAgaWYgKHgucmVkU3FyKCkucmVkU3ViKHgyKS5jbXAodGhpcy56ZXJvKSAhPT0gMClcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgcG9pbnQnKTtcblxuICBpZiAoeC5pc09kZCgpICE9PSBvZGQpXG4gICAgeCA9IHgucmVkTmVnKCk7XG5cbiAgcmV0dXJuIHRoaXMucG9pbnQoeCwgeSk7XG59O1xuXG5FZHdhcmRzQ3VydmUucHJvdG90eXBlLnZhbGlkYXRlID0gZnVuY3Rpb24gdmFsaWRhdGUocG9pbnQpIHtcbiAgaWYgKHBvaW50LmlzSW5maW5pdHkoKSlcbiAgICByZXR1cm4gdHJ1ZTtcblxuICAvLyBDdXJ2ZTogQSAqIFheMiArIFleMiA9IENeMiAqICgxICsgRCAqIFheMiAqIFleMilcbiAgcG9pbnQubm9ybWFsaXplKCk7XG5cbiAgdmFyIHgyID0gcG9pbnQueC5yZWRTcXIoKTtcbiAgdmFyIHkyID0gcG9pbnQueS5yZWRTcXIoKTtcbiAgdmFyIGxocyA9IHgyLnJlZE11bCh0aGlzLmEpLnJlZEFkZCh5Mik7XG4gIHZhciByaHMgPSB0aGlzLmMyLnJlZE11bCh0aGlzLm9uZS5yZWRBZGQodGhpcy5kLnJlZE11bCh4MikucmVkTXVsKHkyKSkpO1xuXG4gIHJldHVybiBsaHMuY21wKHJocykgPT09IDA7XG59O1xuXG5mdW5jdGlvbiBQb2ludChjdXJ2ZSwgeCwgeSwgeiwgdCkge1xuICBCYXNlLkJhc2VQb2ludC5jYWxsKHRoaXMsIGN1cnZlLCAncHJvamVjdGl2ZScpO1xuICBpZiAoeCA9PT0gbnVsbCAmJiB5ID09PSBudWxsICYmIHogPT09IG51bGwpIHtcbiAgICB0aGlzLnggPSB0aGlzLmN1cnZlLnplcm87XG4gICAgdGhpcy55ID0gdGhpcy5jdXJ2ZS5vbmU7XG4gICAgdGhpcy56ID0gdGhpcy5jdXJ2ZS5vbmU7XG4gICAgdGhpcy50ID0gdGhpcy5jdXJ2ZS56ZXJvO1xuICAgIHRoaXMuek9uZSA9IHRydWU7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy54ID0gbmV3IEJOKHgsIDE2KTtcbiAgICB0aGlzLnkgPSBuZXcgQk4oeSwgMTYpO1xuICAgIHRoaXMueiA9IHogPyBuZXcgQk4oeiwgMTYpIDogdGhpcy5jdXJ2ZS5vbmU7XG4gICAgdGhpcy50ID0gdCAmJiBuZXcgQk4odCwgMTYpO1xuICAgIGlmICghdGhpcy54LnJlZClcbiAgICAgIHRoaXMueCA9IHRoaXMueC50b1JlZCh0aGlzLmN1cnZlLnJlZCk7XG4gICAgaWYgKCF0aGlzLnkucmVkKVxuICAgICAgdGhpcy55ID0gdGhpcy55LnRvUmVkKHRoaXMuY3VydmUucmVkKTtcbiAgICBpZiAoIXRoaXMuei5yZWQpXG4gICAgICB0aGlzLnogPSB0aGlzLnoudG9SZWQodGhpcy5jdXJ2ZS5yZWQpO1xuICAgIGlmICh0aGlzLnQgJiYgIXRoaXMudC5yZWQpXG4gICAgICB0aGlzLnQgPSB0aGlzLnQudG9SZWQodGhpcy5jdXJ2ZS5yZWQpO1xuICAgIHRoaXMuek9uZSA9IHRoaXMueiA9PT0gdGhpcy5jdXJ2ZS5vbmU7XG5cbiAgICAvLyBVc2UgZXh0ZW5kZWQgY29vcmRpbmF0ZXNcbiAgICBpZiAodGhpcy5jdXJ2ZS5leHRlbmRlZCAmJiAhdGhpcy50KSB7XG4gICAgICB0aGlzLnQgPSB0aGlzLngucmVkTXVsKHRoaXMueSk7XG4gICAgICBpZiAoIXRoaXMuek9uZSlcbiAgICAgICAgdGhpcy50ID0gdGhpcy50LnJlZE11bCh0aGlzLnoucmVkSW52bSgpKTtcbiAgICB9XG4gIH1cbn1cbmluaGVyaXRzKFBvaW50LCBCYXNlLkJhc2VQb2ludCk7XG5cbkVkd2FyZHNDdXJ2ZS5wcm90b3R5cGUucG9pbnRGcm9tSlNPTiA9IGZ1bmN0aW9uIHBvaW50RnJvbUpTT04ob2JqKSB7XG4gIHJldHVybiBQb2ludC5mcm9tSlNPTih0aGlzLCBvYmopO1xufTtcblxuRWR3YXJkc0N1cnZlLnByb3RvdHlwZS5wb2ludCA9IGZ1bmN0aW9uIHBvaW50KHgsIHksIHosIHQpIHtcbiAgcmV0dXJuIG5ldyBQb2ludCh0aGlzLCB4LCB5LCB6LCB0KTtcbn07XG5cblBvaW50LmZyb21KU09OID0gZnVuY3Rpb24gZnJvbUpTT04oY3VydmUsIG9iaikge1xuICByZXR1cm4gbmV3IFBvaW50KGN1cnZlLCBvYmpbMF0sIG9ialsxXSwgb2JqWzJdKTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5pbnNwZWN0ID0gZnVuY3Rpb24gaW5zcGVjdCgpIHtcbiAgaWYgKHRoaXMuaXNJbmZpbml0eSgpKVxuICAgIHJldHVybiAnPEVDIFBvaW50IEluZmluaXR5Pic7XG4gIHJldHVybiAnPEVDIFBvaW50IHg6ICcgKyB0aGlzLnguZnJvbVJlZCgpLnRvU3RyaW5nKDE2LCAyKSArXG4gICAgICAnIHk6ICcgKyB0aGlzLnkuZnJvbVJlZCgpLnRvU3RyaW5nKDE2LCAyKSArXG4gICAgICAnIHo6ICcgKyB0aGlzLnouZnJvbVJlZCgpLnRvU3RyaW5nKDE2LCAyKSArICc+Jztcbn07XG5cblBvaW50LnByb3RvdHlwZS5pc0luZmluaXR5ID0gZnVuY3Rpb24gaXNJbmZpbml0eSgpIHtcbiAgLy8gWFhYIFRoaXMgY29kZSBhc3N1bWVzIHRoYXQgemVybyBpcyBhbHdheXMgemVybyBpbiByZWRcbiAgcmV0dXJuIHRoaXMueC5jbXBuKDApID09PSAwICYmXG4gICAgICAgICB0aGlzLnkuY21wKHRoaXMueikgPT09IDA7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuX2V4dERibCA9IGZ1bmN0aW9uIF9leHREYmwoKSB7XG4gIC8vIGh5cGVyZWxsaXB0aWMub3JnL0VGRC9nMXAvYXV0by10d2lzdGVkLWV4dGVuZGVkLTEuaHRtbFxuICAvLyAgICAgI2RvdWJsaW5nLWRibC0yMDA4LWh3Y2RcbiAgLy8gNE0gKyA0U1xuXG4gIC8vIEEgPSBYMV4yXG4gIHZhciBhID0gdGhpcy54LnJlZFNxcigpO1xuICAvLyBCID0gWTFeMlxuICB2YXIgYiA9IHRoaXMueS5yZWRTcXIoKTtcbiAgLy8gQyA9IDIgKiBaMV4yXG4gIHZhciBjID0gdGhpcy56LnJlZFNxcigpO1xuICBjID0gYy5yZWRJQWRkKGMpO1xuICAvLyBEID0gYSAqIEFcbiAgdmFyIGQgPSB0aGlzLmN1cnZlLl9tdWxBKGEpO1xuICAvLyBFID0gKFgxICsgWTEpXjIgLSBBIC0gQlxuICB2YXIgZSA9IHRoaXMueC5yZWRBZGQodGhpcy55KS5yZWRTcXIoKS5yZWRJU3ViKGEpLnJlZElTdWIoYik7XG4gIC8vIEcgPSBEICsgQlxuICB2YXIgZyA9IGQucmVkQWRkKGIpO1xuICAvLyBGID0gRyAtIENcbiAgdmFyIGYgPSBnLnJlZFN1YihjKTtcbiAgLy8gSCA9IEQgLSBCXG4gIHZhciBoID0gZC5yZWRTdWIoYik7XG4gIC8vIFgzID0gRSAqIEZcbiAgdmFyIG54ID0gZS5yZWRNdWwoZik7XG4gIC8vIFkzID0gRyAqIEhcbiAgdmFyIG55ID0gZy5yZWRNdWwoaCk7XG4gIC8vIFQzID0gRSAqIEhcbiAgdmFyIG50ID0gZS5yZWRNdWwoaCk7XG4gIC8vIFozID0gRiAqIEdcbiAgdmFyIG56ID0gZi5yZWRNdWwoZyk7XG4gIHJldHVybiB0aGlzLmN1cnZlLnBvaW50KG54LCBueSwgbnosIG50KTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5fcHJvakRibCA9IGZ1bmN0aW9uIF9wcm9qRGJsKCkge1xuICAvLyBoeXBlcmVsbGlwdGljLm9yZy9FRkQvZzFwL2F1dG8tdHdpc3RlZC1wcm9qZWN0aXZlLmh0bWxcbiAgLy8gICAgICNkb3VibGluZy1kYmwtMjAwOC1iYmpscFxuICAvLyAgICAgI2RvdWJsaW5nLWRibC0yMDA3LWJsXG4gIC8vIGFuZCBvdGhlcnNcbiAgLy8gR2VuZXJhbGx5IDNNICsgNFMgb3IgMk0gKyA0U1xuXG4gIC8vIEIgPSAoWDEgKyBZMSleMlxuICB2YXIgYiA9IHRoaXMueC5yZWRBZGQodGhpcy55KS5yZWRTcXIoKTtcbiAgLy8gQyA9IFgxXjJcbiAgdmFyIGMgPSB0aGlzLngucmVkU3FyKCk7XG4gIC8vIEQgPSBZMV4yXG4gIHZhciBkID0gdGhpcy55LnJlZFNxcigpO1xuXG4gIHZhciBueDtcbiAgdmFyIG55O1xuICB2YXIgbno7XG4gIGlmICh0aGlzLmN1cnZlLnR3aXN0ZWQpIHtcbiAgICAvLyBFID0gYSAqIENcbiAgICB2YXIgZSA9IHRoaXMuY3VydmUuX211bEEoYyk7XG4gICAgLy8gRiA9IEUgKyBEXG4gICAgdmFyIGYgPSBlLnJlZEFkZChkKTtcbiAgICBpZiAodGhpcy56T25lKSB7XG4gICAgICAvLyBYMyA9IChCIC0gQyAtIEQpICogKEYgLSAyKVxuICAgICAgbnggPSBiLnJlZFN1YihjKS5yZWRTdWIoZCkucmVkTXVsKGYucmVkU3ViKHRoaXMuY3VydmUudHdvKSk7XG4gICAgICAvLyBZMyA9IEYgKiAoRSAtIEQpXG4gICAgICBueSA9IGYucmVkTXVsKGUucmVkU3ViKGQpKTtcbiAgICAgIC8vIFozID0gRl4yIC0gMiAqIEZcbiAgICAgIG56ID0gZi5yZWRTcXIoKS5yZWRTdWIoZikucmVkU3ViKGYpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBIID0gWjFeMlxuICAgICAgdmFyIGggPSB0aGlzLnoucmVkU3FyKCk7XG4gICAgICAvLyBKID0gRiAtIDIgKiBIXG4gICAgICB2YXIgaiA9IGYucmVkU3ViKGgpLnJlZElTdWIoaCk7XG4gICAgICAvLyBYMyA9IChCLUMtRCkqSlxuICAgICAgbnggPSBiLnJlZFN1YihjKS5yZWRJU3ViKGQpLnJlZE11bChqKTtcbiAgICAgIC8vIFkzID0gRiAqIChFIC0gRClcbiAgICAgIG55ID0gZi5yZWRNdWwoZS5yZWRTdWIoZCkpO1xuICAgICAgLy8gWjMgPSBGICogSlxuICAgICAgbnogPSBmLnJlZE11bChqKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gRSA9IEMgKyBEXG4gICAgdmFyIGUgPSBjLnJlZEFkZChkKTtcbiAgICAvLyBIID0gKGMgKiBaMSleMlxuICAgIHZhciBoID0gdGhpcy5jdXJ2ZS5fbXVsQyh0aGlzLmMucmVkTXVsKHRoaXMueikpLnJlZFNxcigpO1xuICAgIC8vIEogPSBFIC0gMiAqIEhcbiAgICB2YXIgaiA9IGUucmVkU3ViKGgpLnJlZFN1YihoKTtcbiAgICAvLyBYMyA9IGMgKiAoQiAtIEUpICogSlxuICAgIG54ID0gdGhpcy5jdXJ2ZS5fbXVsQyhiLnJlZElTdWIoZSkpLnJlZE11bChqKTtcbiAgICAvLyBZMyA9IGMgKiBFICogKEMgLSBEKVxuICAgIG55ID0gdGhpcy5jdXJ2ZS5fbXVsQyhlKS5yZWRNdWwoYy5yZWRJU3ViKGQpKTtcbiAgICAvLyBaMyA9IEUgKiBKXG4gICAgbnogPSBlLnJlZE11bChqKTtcbiAgfVxuICByZXR1cm4gdGhpcy5jdXJ2ZS5wb2ludChueCwgbnksIG56KTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5kYmwgPSBmdW5jdGlvbiBkYmwoKSB7XG4gIGlmICh0aGlzLmlzSW5maW5pdHkoKSlcbiAgICByZXR1cm4gdGhpcztcblxuICAvLyBEb3VibGUgaW4gZXh0ZW5kZWQgY29vcmRpbmF0ZXNcbiAgaWYgKHRoaXMuY3VydmUuZXh0ZW5kZWQpXG4gICAgcmV0dXJuIHRoaXMuX2V4dERibCgpO1xuICBlbHNlXG4gICAgcmV0dXJuIHRoaXMuX3Byb2pEYmwoKTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5fZXh0QWRkID0gZnVuY3Rpb24gX2V4dEFkZChwKSB7XG4gIC8vIGh5cGVyZWxsaXB0aWMub3JnL0VGRC9nMXAvYXV0by10d2lzdGVkLWV4dGVuZGVkLTEuaHRtbFxuICAvLyAgICAgI2FkZGl0aW9uLWFkZC0yMDA4LWh3Y2QtM1xuICAvLyA4TVxuXG4gIC8vIEEgPSAoWTEgLSBYMSkgKiAoWTIgLSBYMilcbiAgdmFyIGEgPSB0aGlzLnkucmVkU3ViKHRoaXMueCkucmVkTXVsKHAueS5yZWRTdWIocC54KSk7XG4gIC8vIEIgPSAoWTEgKyBYMSkgKiAoWTIgKyBYMilcbiAgdmFyIGIgPSB0aGlzLnkucmVkQWRkKHRoaXMueCkucmVkTXVsKHAueS5yZWRBZGQocC54KSk7XG4gIC8vIEMgPSBUMSAqIGsgKiBUMlxuICB2YXIgYyA9IHRoaXMudC5yZWRNdWwodGhpcy5jdXJ2ZS5kZCkucmVkTXVsKHAudCk7XG4gIC8vIEQgPSBaMSAqIDIgKiBaMlxuICB2YXIgZCA9IHRoaXMuei5yZWRNdWwocC56LnJlZEFkZChwLnopKTtcbiAgLy8gRSA9IEIgLSBBXG4gIHZhciBlID0gYi5yZWRTdWIoYSk7XG4gIC8vIEYgPSBEIC0gQ1xuICB2YXIgZiA9IGQucmVkU3ViKGMpO1xuICAvLyBHID0gRCArIENcbiAgdmFyIGcgPSBkLnJlZEFkZChjKTtcbiAgLy8gSCA9IEIgKyBBXG4gIHZhciBoID0gYi5yZWRBZGQoYSk7XG4gIC8vIFgzID0gRSAqIEZcbiAgdmFyIG54ID0gZS5yZWRNdWwoZik7XG4gIC8vIFkzID0gRyAqIEhcbiAgdmFyIG55ID0gZy5yZWRNdWwoaCk7XG4gIC8vIFQzID0gRSAqIEhcbiAgdmFyIG50ID0gZS5yZWRNdWwoaCk7XG4gIC8vIFozID0gRiAqIEdcbiAgdmFyIG56ID0gZi5yZWRNdWwoZyk7XG4gIHJldHVybiB0aGlzLmN1cnZlLnBvaW50KG54LCBueSwgbnosIG50KTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5fcHJvakFkZCA9IGZ1bmN0aW9uIF9wcm9qQWRkKHApIHtcbiAgLy8gaHlwZXJlbGxpcHRpYy5vcmcvRUZEL2cxcC9hdXRvLXR3aXN0ZWQtcHJvamVjdGl2ZS5odG1sXG4gIC8vICAgICAjYWRkaXRpb24tYWRkLTIwMDgtYmJqbHBcbiAgLy8gICAgICNhZGRpdGlvbi1hZGQtMjAwNy1ibFxuICAvLyAxME0gKyAxU1xuXG4gIC8vIEEgPSBaMSAqIFoyXG4gIHZhciBhID0gdGhpcy56LnJlZE11bChwLnopO1xuICAvLyBCID0gQV4yXG4gIHZhciBiID0gYS5yZWRTcXIoKTtcbiAgLy8gQyA9IFgxICogWDJcbiAgdmFyIGMgPSB0aGlzLngucmVkTXVsKHAueCk7XG4gIC8vIEQgPSBZMSAqIFkyXG4gIHZhciBkID0gdGhpcy55LnJlZE11bChwLnkpO1xuICAvLyBFID0gZCAqIEMgKiBEXG4gIHZhciBlID0gdGhpcy5jdXJ2ZS5kLnJlZE11bChjKS5yZWRNdWwoZCk7XG4gIC8vIEYgPSBCIC0gRVxuICB2YXIgZiA9IGIucmVkU3ViKGUpO1xuICAvLyBHID0gQiArIEVcbiAgdmFyIGcgPSBiLnJlZEFkZChlKTtcbiAgLy8gWDMgPSBBICogRiAqICgoWDEgKyBZMSkgKiAoWDIgKyBZMikgLSBDIC0gRClcbiAgdmFyIHRtcCA9IHRoaXMueC5yZWRBZGQodGhpcy55KS5yZWRNdWwocC54LnJlZEFkZChwLnkpKS5yZWRJU3ViKGMpLnJlZElTdWIoZCk7XG4gIHZhciBueCA9IGEucmVkTXVsKGYpLnJlZE11bCh0bXApO1xuICB2YXIgbnk7XG4gIHZhciBuejtcbiAgaWYgKHRoaXMuY3VydmUudHdpc3RlZCkge1xuICAgIC8vIFkzID0gQSAqIEcgKiAoRCAtIGEgKiBDKVxuICAgIG55ID0gYS5yZWRNdWwoZykucmVkTXVsKGQucmVkU3ViKHRoaXMuY3VydmUuX211bEEoYykpKTtcbiAgICAvLyBaMyA9IEYgKiBHXG4gICAgbnogPSBmLnJlZE11bChnKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBZMyA9IEEgKiBHICogKEQgLSBDKVxuICAgIG55ID0gYS5yZWRNdWwoZykucmVkTXVsKGQucmVkU3ViKGMpKTtcbiAgICAvLyBaMyA9IGMgKiBGICogR1xuICAgIG56ID0gdGhpcy5jdXJ2ZS5fbXVsQyhmKS5yZWRNdWwoZyk7XG4gIH1cbiAgcmV0dXJuIHRoaXMuY3VydmUucG9pbnQobngsIG55LCBueik7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gYWRkKHApIHtcbiAgaWYgKHRoaXMuaXNJbmZpbml0eSgpKVxuICAgIHJldHVybiBwO1xuICBpZiAocC5pc0luZmluaXR5KCkpXG4gICAgcmV0dXJuIHRoaXM7XG5cbiAgaWYgKHRoaXMuY3VydmUuZXh0ZW5kZWQpXG4gICAgcmV0dXJuIHRoaXMuX2V4dEFkZChwKTtcbiAgZWxzZVxuICAgIHJldHVybiB0aGlzLl9wcm9qQWRkKHApO1xufTtcblxuUG9pbnQucHJvdG90eXBlLm11bCA9IGZ1bmN0aW9uIG11bChrKSB7XG4gIGlmICh0aGlzLl9oYXNEb3VibGVzKGspKVxuICAgIHJldHVybiB0aGlzLmN1cnZlLl9maXhlZE5hZk11bCh0aGlzLCBrKTtcbiAgZWxzZVxuICAgIHJldHVybiB0aGlzLmN1cnZlLl93bmFmTXVsKHRoaXMsIGspO1xufTtcblxuUG9pbnQucHJvdG90eXBlLm11bEFkZCA9IGZ1bmN0aW9uIG11bEFkZChrMSwgcCwgazIpIHtcbiAgcmV0dXJuIHRoaXMuY3VydmUuX3duYWZNdWxBZGQoMSwgWyB0aGlzLCBwIF0sIFsgazEsIGsyIF0sIDIsIGZhbHNlKTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5qbXVsQWRkID0gZnVuY3Rpb24gam11bEFkZChrMSwgcCwgazIpIHtcbiAgcmV0dXJuIHRoaXMuY3VydmUuX3duYWZNdWxBZGQoMSwgWyB0aGlzLCBwIF0sIFsgazEsIGsyIF0sIDIsIHRydWUpO1xufTtcblxuUG9pbnQucHJvdG90eXBlLm5vcm1hbGl6ZSA9IGZ1bmN0aW9uIG5vcm1hbGl6ZSgpIHtcbiAgaWYgKHRoaXMuek9uZSlcbiAgICByZXR1cm4gdGhpcztcblxuICAvLyBOb3JtYWxpemUgY29vcmRpbmF0ZXNcbiAgdmFyIHppID0gdGhpcy56LnJlZEludm0oKTtcbiAgdGhpcy54ID0gdGhpcy54LnJlZE11bCh6aSk7XG4gIHRoaXMueSA9IHRoaXMueS5yZWRNdWwoemkpO1xuICBpZiAodGhpcy50KVxuICAgIHRoaXMudCA9IHRoaXMudC5yZWRNdWwoemkpO1xuICB0aGlzLnogPSB0aGlzLmN1cnZlLm9uZTtcbiAgdGhpcy56T25lID0gdHJ1ZTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUubmVnID0gZnVuY3Rpb24gbmVnKCkge1xuICByZXR1cm4gdGhpcy5jdXJ2ZS5wb2ludCh0aGlzLngucmVkTmVnKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMueSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy56LFxuICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnQgJiYgdGhpcy50LnJlZE5lZygpKTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5nZXRYID0gZnVuY3Rpb24gZ2V0WCgpIHtcbiAgdGhpcy5ub3JtYWxpemUoKTtcbiAgcmV0dXJuIHRoaXMueC5mcm9tUmVkKCk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuZ2V0WSA9IGZ1bmN0aW9uIGdldFkoKSB7XG4gIHRoaXMubm9ybWFsaXplKCk7XG4gIHJldHVybiB0aGlzLnkuZnJvbVJlZCgpO1xufTtcblxuUG9pbnQucHJvdG90eXBlLmVxID0gZnVuY3Rpb24gZXEob3RoZXIpIHtcbiAgcmV0dXJuIHRoaXMgPT09IG90aGVyIHx8XG4gICAgICAgICB0aGlzLmdldFgoKS5jbXAob3RoZXIuZ2V0WCgpKSA9PT0gMCAmJlxuICAgICAgICAgdGhpcy5nZXRZKCkuY21wKG90aGVyLmdldFkoKSkgPT09IDA7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuZXFYVG9QID0gZnVuY3Rpb24gZXFYVG9QKHgpIHtcbiAgdmFyIHJ4ID0geC50b1JlZCh0aGlzLmN1cnZlLnJlZCkucmVkTXVsKHRoaXMueik7XG4gIGlmICh0aGlzLnguY21wKHJ4KSA9PT0gMClcbiAgICByZXR1cm4gdHJ1ZTtcblxuICB2YXIgeGMgPSB4LmNsb25lKCk7XG4gIHZhciB0ID0gdGhpcy5jdXJ2ZS5yZWROLnJlZE11bCh0aGlzLnopO1xuICBmb3IgKDs7KSB7XG4gICAgeGMuaWFkZCh0aGlzLmN1cnZlLm4pO1xuICAgIGlmICh4Yy5jbXAodGhpcy5jdXJ2ZS5wKSA+PSAwKVxuICAgICAgcmV0dXJuIGZhbHNlO1xuXG4gICAgcngucmVkSUFkZCh0KTtcbiAgICBpZiAodGhpcy54LmNtcChyeCkgPT09IDApXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59O1xuXG4vLyBDb21wYXRpYmlsaXR5IHdpdGggQmFzZUN1cnZlXG5Qb2ludC5wcm90b3R5cGUudG9QID0gUG9pbnQucHJvdG90eXBlLm5vcm1hbGl6ZTtcblBvaW50LnByb3RvdHlwZS5taXhlZEFkZCA9IFBvaW50LnByb3RvdHlwZS5hZGQ7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBjdXJ2ZSA9IGV4cG9ydHM7XG5cbmN1cnZlLmJhc2UgPSByZXF1aXJlKCcuL2Jhc2UnKTtcbmN1cnZlLnNob3J0ID0gcmVxdWlyZSgnLi9zaG9ydCcpO1xuY3VydmUubW9udCA9IHJlcXVpcmUoJy4vbW9udCcpO1xuY3VydmUuZWR3YXJkcyA9IHJlcXVpcmUoJy4vZWR3YXJkcycpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgY3VydmUgPSByZXF1aXJlKCcuLi9jdXJ2ZScpO1xudmFyIEJOID0gcmVxdWlyZSgnYm4uanMnKTtcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG52YXIgQmFzZSA9IGN1cnZlLmJhc2U7XG5cbnZhciBlbGxpcHRpYyA9IHJlcXVpcmUoJy4uLy4uL2VsbGlwdGljJyk7XG52YXIgdXRpbHMgPSBlbGxpcHRpYy51dGlscztcblxuZnVuY3Rpb24gTW9udEN1cnZlKGNvbmYpIHtcbiAgQmFzZS5jYWxsKHRoaXMsICdtb250JywgY29uZik7XG5cbiAgdGhpcy5hID0gbmV3IEJOKGNvbmYuYSwgMTYpLnRvUmVkKHRoaXMucmVkKTtcbiAgdGhpcy5iID0gbmV3IEJOKGNvbmYuYiwgMTYpLnRvUmVkKHRoaXMucmVkKTtcbiAgdGhpcy5pNCA9IG5ldyBCTig0KS50b1JlZCh0aGlzLnJlZCkucmVkSW52bSgpO1xuICB0aGlzLnR3byA9IG5ldyBCTigyKS50b1JlZCh0aGlzLnJlZCk7XG4gIHRoaXMuYTI0ID0gdGhpcy5pNC5yZWRNdWwodGhpcy5hLnJlZEFkZCh0aGlzLnR3bykpO1xufVxuaW5oZXJpdHMoTW9udEN1cnZlLCBCYXNlKTtcbm1vZHVsZS5leHBvcnRzID0gTW9udEN1cnZlO1xuXG5Nb250Q3VydmUucHJvdG90eXBlLnZhbGlkYXRlID0gZnVuY3Rpb24gdmFsaWRhdGUocG9pbnQpIHtcbiAgdmFyIHggPSBwb2ludC5ub3JtYWxpemUoKS54O1xuICB2YXIgeDIgPSB4LnJlZFNxcigpO1xuICB2YXIgcmhzID0geDIucmVkTXVsKHgpLnJlZEFkZCh4Mi5yZWRNdWwodGhpcy5hKSkucmVkQWRkKHgpO1xuICB2YXIgeSA9IHJocy5yZWRTcXJ0KCk7XG5cbiAgcmV0dXJuIHkucmVkU3FyKCkuY21wKHJocykgPT09IDA7XG59O1xuXG5mdW5jdGlvbiBQb2ludChjdXJ2ZSwgeCwgeikge1xuICBCYXNlLkJhc2VQb2ludC5jYWxsKHRoaXMsIGN1cnZlLCAncHJvamVjdGl2ZScpO1xuICBpZiAoeCA9PT0gbnVsbCAmJiB6ID09PSBudWxsKSB7XG4gICAgdGhpcy54ID0gdGhpcy5jdXJ2ZS5vbmU7XG4gICAgdGhpcy56ID0gdGhpcy5jdXJ2ZS56ZXJvO1xuICB9IGVsc2Uge1xuICAgIHRoaXMueCA9IG5ldyBCTih4LCAxNik7XG4gICAgdGhpcy56ID0gbmV3IEJOKHosIDE2KTtcbiAgICBpZiAoIXRoaXMueC5yZWQpXG4gICAgICB0aGlzLnggPSB0aGlzLngudG9SZWQodGhpcy5jdXJ2ZS5yZWQpO1xuICAgIGlmICghdGhpcy56LnJlZClcbiAgICAgIHRoaXMueiA9IHRoaXMuei50b1JlZCh0aGlzLmN1cnZlLnJlZCk7XG4gIH1cbn1cbmluaGVyaXRzKFBvaW50LCBCYXNlLkJhc2VQb2ludCk7XG5cbk1vbnRDdXJ2ZS5wcm90b3R5cGUuZGVjb2RlUG9pbnQgPSBmdW5jdGlvbiBkZWNvZGVQb2ludChieXRlcywgZW5jKSB7XG4gIHJldHVybiB0aGlzLnBvaW50KHV0aWxzLnRvQXJyYXkoYnl0ZXMsIGVuYyksIDEpO1xufTtcblxuTW9udEN1cnZlLnByb3RvdHlwZS5wb2ludCA9IGZ1bmN0aW9uIHBvaW50KHgsIHopIHtcbiAgcmV0dXJuIG5ldyBQb2ludCh0aGlzLCB4LCB6KTtcbn07XG5cbk1vbnRDdXJ2ZS5wcm90b3R5cGUucG9pbnRGcm9tSlNPTiA9IGZ1bmN0aW9uIHBvaW50RnJvbUpTT04ob2JqKSB7XG4gIHJldHVybiBQb2ludC5mcm9tSlNPTih0aGlzLCBvYmopO1xufTtcblxuUG9pbnQucHJvdG90eXBlLnByZWNvbXB1dGUgPSBmdW5jdGlvbiBwcmVjb21wdXRlKCkge1xuICAvLyBOby1vcFxufTtcblxuUG9pbnQucHJvdG90eXBlLl9lbmNvZGUgPSBmdW5jdGlvbiBfZW5jb2RlKCkge1xuICByZXR1cm4gdGhpcy5nZXRYKCkudG9BcnJheSgnYmUnLCB0aGlzLmN1cnZlLnAuYnl0ZUxlbmd0aCgpKTtcbn07XG5cblBvaW50LmZyb21KU09OID0gZnVuY3Rpb24gZnJvbUpTT04oY3VydmUsIG9iaikge1xuICByZXR1cm4gbmV3IFBvaW50KGN1cnZlLCBvYmpbMF0sIG9ialsxXSB8fCBjdXJ2ZS5vbmUpO1xufTtcblxuUG9pbnQucHJvdG90eXBlLmluc3BlY3QgPSBmdW5jdGlvbiBpbnNwZWN0KCkge1xuICBpZiAodGhpcy5pc0luZmluaXR5KCkpXG4gICAgcmV0dXJuICc8RUMgUG9pbnQgSW5maW5pdHk+JztcbiAgcmV0dXJuICc8RUMgUG9pbnQgeDogJyArIHRoaXMueC5mcm9tUmVkKCkudG9TdHJpbmcoMTYsIDIpICtcbiAgICAgICcgejogJyArIHRoaXMuei5mcm9tUmVkKCkudG9TdHJpbmcoMTYsIDIpICsgJz4nO1xufTtcblxuUG9pbnQucHJvdG90eXBlLmlzSW5maW5pdHkgPSBmdW5jdGlvbiBpc0luZmluaXR5KCkge1xuICAvLyBYWFggVGhpcyBjb2RlIGFzc3VtZXMgdGhhdCB6ZXJvIGlzIGFsd2F5cyB6ZXJvIGluIHJlZFxuICByZXR1cm4gdGhpcy56LmNtcG4oMCkgPT09IDA7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuZGJsID0gZnVuY3Rpb24gZGJsKCkge1xuICAvLyBodHRwOi8vaHlwZXJlbGxpcHRpYy5vcmcvRUZEL2cxcC9hdXRvLW1vbnRnb20teHouaHRtbCNkb3VibGluZy1kYmwtMTk4Ny1tLTNcbiAgLy8gMk0gKyAyUyArIDRBXG5cbiAgLy8gQSA9IFgxICsgWjFcbiAgdmFyIGEgPSB0aGlzLngucmVkQWRkKHRoaXMueik7XG4gIC8vIEFBID0gQV4yXG4gIHZhciBhYSA9IGEucmVkU3FyKCk7XG4gIC8vIEIgPSBYMSAtIFoxXG4gIHZhciBiID0gdGhpcy54LnJlZFN1Yih0aGlzLnopO1xuICAvLyBCQiA9IEJeMlxuICB2YXIgYmIgPSBiLnJlZFNxcigpO1xuICAvLyBDID0gQUEgLSBCQlxuICB2YXIgYyA9IGFhLnJlZFN1YihiYik7XG4gIC8vIFgzID0gQUEgKiBCQlxuICB2YXIgbnggPSBhYS5yZWRNdWwoYmIpO1xuICAvLyBaMyA9IEMgKiAoQkIgKyBBMjQgKiBDKVxuICB2YXIgbnogPSBjLnJlZE11bChiYi5yZWRBZGQodGhpcy5jdXJ2ZS5hMjQucmVkTXVsKGMpKSk7XG4gIHJldHVybiB0aGlzLmN1cnZlLnBvaW50KG54LCBueik7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gYWRkKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ05vdCBzdXBwb3J0ZWQgb24gTW9udGdvbWVyeSBjdXJ2ZScpO1xufTtcblxuUG9pbnQucHJvdG90eXBlLmRpZmZBZGQgPSBmdW5jdGlvbiBkaWZmQWRkKHAsIGRpZmYpIHtcbiAgLy8gaHR0cDovL2h5cGVyZWxsaXB0aWMub3JnL0VGRC9nMXAvYXV0by1tb250Z29tLXh6Lmh0bWwjZGlmZmFkZC1kYWRkLTE5ODctbS0zXG4gIC8vIDRNICsgMlMgKyA2QVxuXG4gIC8vIEEgPSBYMiArIFoyXG4gIHZhciBhID0gdGhpcy54LnJlZEFkZCh0aGlzLnopO1xuICAvLyBCID0gWDIgLSBaMlxuICB2YXIgYiA9IHRoaXMueC5yZWRTdWIodGhpcy56KTtcbiAgLy8gQyA9IFgzICsgWjNcbiAgdmFyIGMgPSBwLngucmVkQWRkKHAueik7XG4gIC8vIEQgPSBYMyAtIFozXG4gIHZhciBkID0gcC54LnJlZFN1YihwLnopO1xuICAvLyBEQSA9IEQgKiBBXG4gIHZhciBkYSA9IGQucmVkTXVsKGEpO1xuICAvLyBDQiA9IEMgKiBCXG4gIHZhciBjYiA9IGMucmVkTXVsKGIpO1xuICAvLyBYNSA9IFoxICogKERBICsgQ0IpXjJcbiAgdmFyIG54ID0gZGlmZi56LnJlZE11bChkYS5yZWRBZGQoY2IpLnJlZFNxcigpKTtcbiAgLy8gWjUgPSBYMSAqIChEQSAtIENCKV4yXG4gIHZhciBueiA9IGRpZmYueC5yZWRNdWwoZGEucmVkSVN1YihjYikucmVkU3FyKCkpO1xuICByZXR1cm4gdGhpcy5jdXJ2ZS5wb2ludChueCwgbnopO1xufTtcblxuUG9pbnQucHJvdG90eXBlLm11bCA9IGZ1bmN0aW9uIG11bChrKSB7XG4gIHZhciB0ID0gay5jbG9uZSgpO1xuICB2YXIgYSA9IHRoaXM7IC8vIChOIC8gMikgKiBRICsgUVxuICB2YXIgYiA9IHRoaXMuY3VydmUucG9pbnQobnVsbCwgbnVsbCk7IC8vIChOIC8gMikgKiBRXG4gIHZhciBjID0gdGhpczsgLy8gUVxuXG4gIGZvciAodmFyIGJpdHMgPSBbXTsgdC5jbXBuKDApICE9PSAwOyB0Lml1c2hybigxKSlcbiAgICBiaXRzLnB1c2godC5hbmRsbigxKSk7XG5cbiAgZm9yICh2YXIgaSA9IGJpdHMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICBpZiAoYml0c1tpXSA9PT0gMCkge1xuICAgICAgLy8gTiAqIFEgKyBRID0gKChOIC8gMikgKiBRICsgUSkpICsgKE4gLyAyKSAqIFFcbiAgICAgIGEgPSBhLmRpZmZBZGQoYiwgYyk7XG4gICAgICAvLyBOICogUSA9IDIgKiAoKE4gLyAyKSAqIFEgKyBRKSlcbiAgICAgIGIgPSBiLmRibCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBOICogUSA9ICgoTiAvIDIpICogUSArIFEpICsgKChOIC8gMikgKiBRKVxuICAgICAgYiA9IGEuZGlmZkFkZChiLCBjKTtcbiAgICAgIC8vIE4gKiBRICsgUSA9IDIgKiAoKE4gLyAyKSAqIFEgKyBRKVxuICAgICAgYSA9IGEuZGJsKCk7XG4gICAgfVxuICB9XG4gIHJldHVybiBiO1xufTtcblxuUG9pbnQucHJvdG90eXBlLm11bEFkZCA9IGZ1bmN0aW9uIG11bEFkZCgpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdOb3Qgc3VwcG9ydGVkIG9uIE1vbnRnb21lcnkgY3VydmUnKTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5qdW1sQWRkID0gZnVuY3Rpb24ganVtbEFkZCgpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdOb3Qgc3VwcG9ydGVkIG9uIE1vbnRnb21lcnkgY3VydmUnKTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5lcSA9IGZ1bmN0aW9uIGVxKG90aGVyKSB7XG4gIHJldHVybiB0aGlzLmdldFgoKS5jbXAob3RoZXIuZ2V0WCgpKSA9PT0gMDtcbn07XG5cblBvaW50LnByb3RvdHlwZS5ub3JtYWxpemUgPSBmdW5jdGlvbiBub3JtYWxpemUoKSB7XG4gIHRoaXMueCA9IHRoaXMueC5yZWRNdWwodGhpcy56LnJlZEludm0oKSk7XG4gIHRoaXMueiA9IHRoaXMuY3VydmUub25lO1xuICByZXR1cm4gdGhpcztcbn07XG5cblBvaW50LnByb3RvdHlwZS5nZXRYID0gZnVuY3Rpb24gZ2V0WCgpIHtcbiAgLy8gTm9ybWFsaXplIGNvb3JkaW5hdGVzXG4gIHRoaXMubm9ybWFsaXplKCk7XG5cbiAgcmV0dXJuIHRoaXMueC5mcm9tUmVkKCk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgY3VydmUgPSByZXF1aXJlKCcuLi9jdXJ2ZScpO1xudmFyIGVsbGlwdGljID0gcmVxdWlyZSgnLi4vLi4vZWxsaXB0aWMnKTtcbnZhciBCTiA9IHJlcXVpcmUoJ2JuLmpzJyk7XG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xudmFyIEJhc2UgPSBjdXJ2ZS5iYXNlO1xuXG52YXIgYXNzZXJ0ID0gZWxsaXB0aWMudXRpbHMuYXNzZXJ0O1xuXG5mdW5jdGlvbiBTaG9ydEN1cnZlKGNvbmYpIHtcbiAgQmFzZS5jYWxsKHRoaXMsICdzaG9ydCcsIGNvbmYpO1xuXG4gIHRoaXMuYSA9IG5ldyBCTihjb25mLmEsIDE2KS50b1JlZCh0aGlzLnJlZCk7XG4gIHRoaXMuYiA9IG5ldyBCTihjb25mLmIsIDE2KS50b1JlZCh0aGlzLnJlZCk7XG4gIHRoaXMudGludiA9IHRoaXMudHdvLnJlZEludm0oKTtcblxuICB0aGlzLnplcm9BID0gdGhpcy5hLmZyb21SZWQoKS5jbXBuKDApID09PSAwO1xuICB0aGlzLnRocmVlQSA9IHRoaXMuYS5mcm9tUmVkKCkuc3ViKHRoaXMucCkuY21wbigtMykgPT09IDA7XG5cbiAgLy8gSWYgdGhlIGN1cnZlIGlzIGVuZG9tb3JwaGljLCBwcmVjYWxjdWxhdGUgYmV0YSBhbmQgbGFtYmRhXG4gIHRoaXMuZW5kbyA9IHRoaXMuX2dldEVuZG9tb3JwaGlzbShjb25mKTtcbiAgdGhpcy5fZW5kb1duYWZUMSA9IG5ldyBBcnJheSg0KTtcbiAgdGhpcy5fZW5kb1duYWZUMiA9IG5ldyBBcnJheSg0KTtcbn1cbmluaGVyaXRzKFNob3J0Q3VydmUsIEJhc2UpO1xubW9kdWxlLmV4cG9ydHMgPSBTaG9ydEN1cnZlO1xuXG5TaG9ydEN1cnZlLnByb3RvdHlwZS5fZ2V0RW5kb21vcnBoaXNtID0gZnVuY3Rpb24gX2dldEVuZG9tb3JwaGlzbShjb25mKSB7XG4gIC8vIE5vIGVmZmljaWVudCBlbmRvbW9ycGhpc21cbiAgaWYgKCF0aGlzLnplcm9BIHx8ICF0aGlzLmcgfHwgIXRoaXMubiB8fCB0aGlzLnAubW9kbigzKSAhPT0gMSlcbiAgICByZXR1cm47XG5cbiAgLy8gQ29tcHV0ZSBiZXRhIGFuZCBsYW1iZGEsIHRoYXQgbGFtYmRhICogUCA9IChiZXRhICogUHg7IFB5KVxuICB2YXIgYmV0YTtcbiAgdmFyIGxhbWJkYTtcbiAgaWYgKGNvbmYuYmV0YSkge1xuICAgIGJldGEgPSBuZXcgQk4oY29uZi5iZXRhLCAxNikudG9SZWQodGhpcy5yZWQpO1xuICB9IGVsc2Uge1xuICAgIHZhciBiZXRhcyA9IHRoaXMuX2dldEVuZG9Sb290cyh0aGlzLnApO1xuICAgIC8vIENob29zZSB0aGUgc21hbGxlc3QgYmV0YVxuICAgIGJldGEgPSBiZXRhc1swXS5jbXAoYmV0YXNbMV0pIDwgMCA/IGJldGFzWzBdIDogYmV0YXNbMV07XG4gICAgYmV0YSA9IGJldGEudG9SZWQodGhpcy5yZWQpO1xuICB9XG4gIGlmIChjb25mLmxhbWJkYSkge1xuICAgIGxhbWJkYSA9IG5ldyBCTihjb25mLmxhbWJkYSwgMTYpO1xuICB9IGVsc2Uge1xuICAgIC8vIENob29zZSB0aGUgbGFtYmRhIHRoYXQgaXMgbWF0Y2hpbmcgc2VsZWN0ZWQgYmV0YVxuICAgIHZhciBsYW1iZGFzID0gdGhpcy5fZ2V0RW5kb1Jvb3RzKHRoaXMubik7XG4gICAgaWYgKHRoaXMuZy5tdWwobGFtYmRhc1swXSkueC5jbXAodGhpcy5nLngucmVkTXVsKGJldGEpKSA9PT0gMCkge1xuICAgICAgbGFtYmRhID0gbGFtYmRhc1swXTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGFtYmRhID0gbGFtYmRhc1sxXTtcbiAgICAgIGFzc2VydCh0aGlzLmcubXVsKGxhbWJkYSkueC5jbXAodGhpcy5nLngucmVkTXVsKGJldGEpKSA9PT0gMCk7XG4gICAgfVxuICB9XG5cbiAgLy8gR2V0IGJhc2lzIHZlY3RvcnMsIHVzZWQgZm9yIGJhbGFuY2VkIGxlbmd0aC10d28gcmVwcmVzZW50YXRpb25cbiAgdmFyIGJhc2lzO1xuICBpZiAoY29uZi5iYXNpcykge1xuICAgIGJhc2lzID0gY29uZi5iYXNpcy5tYXAoZnVuY3Rpb24odmVjKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBhOiBuZXcgQk4odmVjLmEsIDE2KSxcbiAgICAgICAgYjogbmV3IEJOKHZlYy5iLCAxNilcbiAgICAgIH07XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgYmFzaXMgPSB0aGlzLl9nZXRFbmRvQmFzaXMobGFtYmRhKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgYmV0YTogYmV0YSxcbiAgICBsYW1iZGE6IGxhbWJkYSxcbiAgICBiYXNpczogYmFzaXNcbiAgfTtcbn07XG5cblNob3J0Q3VydmUucHJvdG90eXBlLl9nZXRFbmRvUm9vdHMgPSBmdW5jdGlvbiBfZ2V0RW5kb1Jvb3RzKG51bSkge1xuICAvLyBGaW5kIHJvb3RzIG9mIGZvciB4XjIgKyB4ICsgMSBpbiBGXG4gIC8vIFJvb3QgPSAoLTEgKy0gU3FydCgtMykpIC8gMlxuICAvL1xuICB2YXIgcmVkID0gbnVtID09PSB0aGlzLnAgPyB0aGlzLnJlZCA6IEJOLm1vbnQobnVtKTtcbiAgdmFyIHRpbnYgPSBuZXcgQk4oMikudG9SZWQocmVkKS5yZWRJbnZtKCk7XG4gIHZhciBudGludiA9IHRpbnYucmVkTmVnKCk7XG5cbiAgdmFyIHMgPSBuZXcgQk4oMykudG9SZWQocmVkKS5yZWROZWcoKS5yZWRTcXJ0KCkucmVkTXVsKHRpbnYpO1xuXG4gIHZhciBsMSA9IG50aW52LnJlZEFkZChzKS5mcm9tUmVkKCk7XG4gIHZhciBsMiA9IG50aW52LnJlZFN1YihzKS5mcm9tUmVkKCk7XG4gIHJldHVybiBbIGwxLCBsMiBdO1xufTtcblxuU2hvcnRDdXJ2ZS5wcm90b3R5cGUuX2dldEVuZG9CYXNpcyA9IGZ1bmN0aW9uIF9nZXRFbmRvQmFzaXMobGFtYmRhKSB7XG4gIC8vIGFwcnhTcXJ0ID49IHNxcnQodGhpcy5uKVxuICB2YXIgYXByeFNxcnQgPSB0aGlzLm4udXNocm4oTWF0aC5mbG9vcih0aGlzLm4uYml0TGVuZ3RoKCkgLyAyKSk7XG5cbiAgLy8gMy43NFxuICAvLyBSdW4gRUdDRCwgdW50aWwgcihMICsgMSkgPCBhcHJ4U3FydFxuICB2YXIgdSA9IGxhbWJkYTtcbiAgdmFyIHYgPSB0aGlzLm4uY2xvbmUoKTtcbiAgdmFyIHgxID0gbmV3IEJOKDEpO1xuICB2YXIgeTEgPSBuZXcgQk4oMCk7XG4gIHZhciB4MiA9IG5ldyBCTigwKTtcbiAgdmFyIHkyID0gbmV3IEJOKDEpO1xuXG4gIC8vIE5PVEU6IGFsbCB2ZWN0b3JzIGFyZSByb290cyBvZjogYSArIGIgKiBsYW1iZGEgPSAwIChtb2QgbilcbiAgdmFyIGEwO1xuICB2YXIgYjA7XG4gIC8vIEZpcnN0IHZlY3RvclxuICB2YXIgYTE7XG4gIHZhciBiMTtcbiAgLy8gU2Vjb25kIHZlY3RvclxuICB2YXIgYTI7XG4gIHZhciBiMjtcblxuICB2YXIgcHJldlI7XG4gIHZhciBpID0gMDtcbiAgdmFyIHI7XG4gIHZhciB4O1xuICB3aGlsZSAodS5jbXBuKDApICE9PSAwKSB7XG4gICAgdmFyIHEgPSB2LmRpdih1KTtcbiAgICByID0gdi5zdWIocS5tdWwodSkpO1xuICAgIHggPSB4Mi5zdWIocS5tdWwoeDEpKTtcbiAgICB2YXIgeSA9IHkyLnN1YihxLm11bCh5MSkpO1xuXG4gICAgaWYgKCFhMSAmJiByLmNtcChhcHJ4U3FydCkgPCAwKSB7XG4gICAgICBhMCA9IHByZXZSLm5lZygpO1xuICAgICAgYjAgPSB4MTtcbiAgICAgIGExID0gci5uZWcoKTtcbiAgICAgIGIxID0geDtcbiAgICB9IGVsc2UgaWYgKGExICYmICsraSA9PT0gMikge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHByZXZSID0gcjtcblxuICAgIHYgPSB1O1xuICAgIHUgPSByO1xuICAgIHgyID0geDE7XG4gICAgeDEgPSB4O1xuICAgIHkyID0geTE7XG4gICAgeTEgPSB5O1xuICB9XG4gIGEyID0gci5uZWcoKTtcbiAgYjIgPSB4O1xuXG4gIHZhciBsZW4xID0gYTEuc3FyKCkuYWRkKGIxLnNxcigpKTtcbiAgdmFyIGxlbjIgPSBhMi5zcXIoKS5hZGQoYjIuc3FyKCkpO1xuICBpZiAobGVuMi5jbXAobGVuMSkgPj0gMCkge1xuICAgIGEyID0gYTA7XG4gICAgYjIgPSBiMDtcbiAgfVxuXG4gIC8vIE5vcm1hbGl6ZSBzaWduc1xuICBpZiAoYTEubmVnYXRpdmUpIHtcbiAgICBhMSA9IGExLm5lZygpO1xuICAgIGIxID0gYjEubmVnKCk7XG4gIH1cbiAgaWYgKGEyLm5lZ2F0aXZlKSB7XG4gICAgYTIgPSBhMi5uZWcoKTtcbiAgICBiMiA9IGIyLm5lZygpO1xuICB9XG5cbiAgcmV0dXJuIFtcbiAgICB7IGE6IGExLCBiOiBiMSB9LFxuICAgIHsgYTogYTIsIGI6IGIyIH1cbiAgXTtcbn07XG5cblNob3J0Q3VydmUucHJvdG90eXBlLl9lbmRvU3BsaXQgPSBmdW5jdGlvbiBfZW5kb1NwbGl0KGspIHtcbiAgdmFyIGJhc2lzID0gdGhpcy5lbmRvLmJhc2lzO1xuICB2YXIgdjEgPSBiYXNpc1swXTtcbiAgdmFyIHYyID0gYmFzaXNbMV07XG5cbiAgdmFyIGMxID0gdjIuYi5tdWwoaykuZGl2Um91bmQodGhpcy5uKTtcbiAgdmFyIGMyID0gdjEuYi5uZWcoKS5tdWwoaykuZGl2Um91bmQodGhpcy5uKTtcblxuICB2YXIgcDEgPSBjMS5tdWwodjEuYSk7XG4gIHZhciBwMiA9IGMyLm11bCh2Mi5hKTtcbiAgdmFyIHExID0gYzEubXVsKHYxLmIpO1xuICB2YXIgcTIgPSBjMi5tdWwodjIuYik7XG5cbiAgLy8gQ2FsY3VsYXRlIGFuc3dlclxuICB2YXIgazEgPSBrLnN1YihwMSkuc3ViKHAyKTtcbiAgdmFyIGsyID0gcTEuYWRkKHEyKS5uZWcoKTtcbiAgcmV0dXJuIHsgazE6IGsxLCBrMjogazIgfTtcbn07XG5cblNob3J0Q3VydmUucHJvdG90eXBlLnBvaW50RnJvbVggPSBmdW5jdGlvbiBwb2ludEZyb21YKHgsIG9kZCkge1xuICB4ID0gbmV3IEJOKHgsIDE2KTtcbiAgaWYgKCF4LnJlZClcbiAgICB4ID0geC50b1JlZCh0aGlzLnJlZCk7XG5cbiAgdmFyIHkyID0geC5yZWRTcXIoKS5yZWRNdWwoeCkucmVkSUFkZCh4LnJlZE11bCh0aGlzLmEpKS5yZWRJQWRkKHRoaXMuYik7XG4gIHZhciB5ID0geTIucmVkU3FydCgpO1xuICBpZiAoeS5yZWRTcXIoKS5yZWRTdWIoeTIpLmNtcCh0aGlzLnplcm8pICE9PSAwKVxuICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBwb2ludCcpO1xuXG4gIC8vIFhYWCBJcyB0aGVyZSBhbnkgd2F5IHRvIHRlbGwgaWYgdGhlIG51bWJlciBpcyBvZGQgd2l0aG91dCBjb252ZXJ0aW5nIGl0XG4gIC8vIHRvIG5vbi1yZWQgZm9ybT9cbiAgdmFyIGlzT2RkID0geS5mcm9tUmVkKCkuaXNPZGQoKTtcbiAgaWYgKG9kZCAmJiAhaXNPZGQgfHwgIW9kZCAmJiBpc09kZClcbiAgICB5ID0geS5yZWROZWcoKTtcblxuICByZXR1cm4gdGhpcy5wb2ludCh4LCB5KTtcbn07XG5cblNob3J0Q3VydmUucHJvdG90eXBlLnZhbGlkYXRlID0gZnVuY3Rpb24gdmFsaWRhdGUocG9pbnQpIHtcbiAgaWYgKHBvaW50LmluZilcbiAgICByZXR1cm4gdHJ1ZTtcblxuICB2YXIgeCA9IHBvaW50Lng7XG4gIHZhciB5ID0gcG9pbnQueTtcblxuICB2YXIgYXggPSB0aGlzLmEucmVkTXVsKHgpO1xuICB2YXIgcmhzID0geC5yZWRTcXIoKS5yZWRNdWwoeCkucmVkSUFkZChheCkucmVkSUFkZCh0aGlzLmIpO1xuICByZXR1cm4geS5yZWRTcXIoKS5yZWRJU3ViKHJocykuY21wbigwKSA9PT0gMDtcbn07XG5cblNob3J0Q3VydmUucHJvdG90eXBlLl9lbmRvV25hZk11bEFkZCA9XG4gICAgZnVuY3Rpb24gX2VuZG9XbmFmTXVsQWRkKHBvaW50cywgY29lZmZzLCBqYWNvYmlhblJlc3VsdCkge1xuICB2YXIgbnBvaW50cyA9IHRoaXMuX2VuZG9XbmFmVDE7XG4gIHZhciBuY29lZmZzID0gdGhpcy5fZW5kb1duYWZUMjtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwb2ludHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc3BsaXQgPSB0aGlzLl9lbmRvU3BsaXQoY29lZmZzW2ldKTtcbiAgICB2YXIgcCA9IHBvaW50c1tpXTtcbiAgICB2YXIgYmV0YSA9IHAuX2dldEJldGEoKTtcblxuICAgIGlmIChzcGxpdC5rMS5uZWdhdGl2ZSkge1xuICAgICAgc3BsaXQuazEuaW5lZygpO1xuICAgICAgcCA9IHAubmVnKHRydWUpO1xuICAgIH1cbiAgICBpZiAoc3BsaXQuazIubmVnYXRpdmUpIHtcbiAgICAgIHNwbGl0LmsyLmluZWcoKTtcbiAgICAgIGJldGEgPSBiZXRhLm5lZyh0cnVlKTtcbiAgICB9XG5cbiAgICBucG9pbnRzW2kgKiAyXSA9IHA7XG4gICAgbnBvaW50c1tpICogMiArIDFdID0gYmV0YTtcbiAgICBuY29lZmZzW2kgKiAyXSA9IHNwbGl0LmsxO1xuICAgIG5jb2VmZnNbaSAqIDIgKyAxXSA9IHNwbGl0LmsyO1xuICB9XG4gIHZhciByZXMgPSB0aGlzLl93bmFmTXVsQWRkKDEsIG5wb2ludHMsIG5jb2VmZnMsIGkgKiAyLCBqYWNvYmlhblJlc3VsdCk7XG5cbiAgLy8gQ2xlYW4tdXAgcmVmZXJlbmNlcyB0byBwb2ludHMgYW5kIGNvZWZmaWNpZW50c1xuICBmb3IgKHZhciBqID0gMDsgaiA8IGkgKiAyOyBqKyspIHtcbiAgICBucG9pbnRzW2pdID0gbnVsbDtcbiAgICBuY29lZmZzW2pdID0gbnVsbDtcbiAgfVxuICByZXR1cm4gcmVzO1xufTtcblxuZnVuY3Rpb24gUG9pbnQoY3VydmUsIHgsIHksIGlzUmVkKSB7XG4gIEJhc2UuQmFzZVBvaW50LmNhbGwodGhpcywgY3VydmUsICdhZmZpbmUnKTtcbiAgaWYgKHggPT09IG51bGwgJiYgeSA9PT0gbnVsbCkge1xuICAgIHRoaXMueCA9IG51bGw7XG4gICAgdGhpcy55ID0gbnVsbDtcbiAgICB0aGlzLmluZiA9IHRydWU7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy54ID0gbmV3IEJOKHgsIDE2KTtcbiAgICB0aGlzLnkgPSBuZXcgQk4oeSwgMTYpO1xuICAgIC8vIEZvcmNlIHJlZGdvbWVyeSByZXByZXNlbnRhdGlvbiB3aGVuIGxvYWRpbmcgZnJvbSBKU09OXG4gICAgaWYgKGlzUmVkKSB7XG4gICAgICB0aGlzLnguZm9yY2VSZWQodGhpcy5jdXJ2ZS5yZWQpO1xuICAgICAgdGhpcy55LmZvcmNlUmVkKHRoaXMuY3VydmUucmVkKTtcbiAgICB9XG4gICAgaWYgKCF0aGlzLngucmVkKVxuICAgICAgdGhpcy54ID0gdGhpcy54LnRvUmVkKHRoaXMuY3VydmUucmVkKTtcbiAgICBpZiAoIXRoaXMueS5yZWQpXG4gICAgICB0aGlzLnkgPSB0aGlzLnkudG9SZWQodGhpcy5jdXJ2ZS5yZWQpO1xuICAgIHRoaXMuaW5mID0gZmFsc2U7XG4gIH1cbn1cbmluaGVyaXRzKFBvaW50LCBCYXNlLkJhc2VQb2ludCk7XG5cblNob3J0Q3VydmUucHJvdG90eXBlLnBvaW50ID0gZnVuY3Rpb24gcG9pbnQoeCwgeSwgaXNSZWQpIHtcbiAgcmV0dXJuIG5ldyBQb2ludCh0aGlzLCB4LCB5LCBpc1JlZCk7XG59O1xuXG5TaG9ydEN1cnZlLnByb3RvdHlwZS5wb2ludEZyb21KU09OID0gZnVuY3Rpb24gcG9pbnRGcm9tSlNPTihvYmosIHJlZCkge1xuICByZXR1cm4gUG9pbnQuZnJvbUpTT04odGhpcywgb2JqLCByZWQpO1xufTtcblxuUG9pbnQucHJvdG90eXBlLl9nZXRCZXRhID0gZnVuY3Rpb24gX2dldEJldGEoKSB7XG4gIGlmICghdGhpcy5jdXJ2ZS5lbmRvKVxuICAgIHJldHVybjtcblxuICB2YXIgcHJlID0gdGhpcy5wcmVjb21wdXRlZDtcbiAgaWYgKHByZSAmJiBwcmUuYmV0YSlcbiAgICByZXR1cm4gcHJlLmJldGE7XG5cbiAgdmFyIGJldGEgPSB0aGlzLmN1cnZlLnBvaW50KHRoaXMueC5yZWRNdWwodGhpcy5jdXJ2ZS5lbmRvLmJldGEpLCB0aGlzLnkpO1xuICBpZiAocHJlKSB7XG4gICAgdmFyIGN1cnZlID0gdGhpcy5jdXJ2ZTtcbiAgICB2YXIgZW5kb011bCA9IGZ1bmN0aW9uKHApIHtcbiAgICAgIHJldHVybiBjdXJ2ZS5wb2ludChwLngucmVkTXVsKGN1cnZlLmVuZG8uYmV0YSksIHAueSk7XG4gICAgfTtcbiAgICBwcmUuYmV0YSA9IGJldGE7XG4gICAgYmV0YS5wcmVjb21wdXRlZCA9IHtcbiAgICAgIGJldGE6IG51bGwsXG4gICAgICBuYWY6IHByZS5uYWYgJiYge1xuICAgICAgICB3bmQ6IHByZS5uYWYud25kLFxuICAgICAgICBwb2ludHM6IHByZS5uYWYucG9pbnRzLm1hcChlbmRvTXVsKVxuICAgICAgfSxcbiAgICAgIGRvdWJsZXM6IHByZS5kb3VibGVzICYmIHtcbiAgICAgICAgc3RlcDogcHJlLmRvdWJsZXMuc3RlcCxcbiAgICAgICAgcG9pbnRzOiBwcmUuZG91Ymxlcy5wb2ludHMubWFwKGVuZG9NdWwpXG4gICAgICB9XG4gICAgfTtcbiAgfVxuICByZXR1cm4gYmV0YTtcbn07XG5cblBvaW50LnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04oKSB7XG4gIGlmICghdGhpcy5wcmVjb21wdXRlZClcbiAgICByZXR1cm4gWyB0aGlzLngsIHRoaXMueSBdO1xuXG4gIHJldHVybiBbIHRoaXMueCwgdGhpcy55LCB0aGlzLnByZWNvbXB1dGVkICYmIHtcbiAgICBkb3VibGVzOiB0aGlzLnByZWNvbXB1dGVkLmRvdWJsZXMgJiYge1xuICAgICAgc3RlcDogdGhpcy5wcmVjb21wdXRlZC5kb3VibGVzLnN0ZXAsXG4gICAgICBwb2ludHM6IHRoaXMucHJlY29tcHV0ZWQuZG91Ymxlcy5wb2ludHMuc2xpY2UoMSlcbiAgICB9LFxuICAgIG5hZjogdGhpcy5wcmVjb21wdXRlZC5uYWYgJiYge1xuICAgICAgd25kOiB0aGlzLnByZWNvbXB1dGVkLm5hZi53bmQsXG4gICAgICBwb2ludHM6IHRoaXMucHJlY29tcHV0ZWQubmFmLnBvaW50cy5zbGljZSgxKVxuICAgIH1cbiAgfSBdO1xufTtcblxuUG9pbnQuZnJvbUpTT04gPSBmdW5jdGlvbiBmcm9tSlNPTihjdXJ2ZSwgb2JqLCByZWQpIHtcbiAgaWYgKHR5cGVvZiBvYmogPT09ICdzdHJpbmcnKVxuICAgIG9iaiA9IEpTT04ucGFyc2Uob2JqKTtcbiAgdmFyIHJlcyA9IGN1cnZlLnBvaW50KG9ialswXSwgb2JqWzFdLCByZWQpO1xuICBpZiAoIW9ialsyXSlcbiAgICByZXR1cm4gcmVzO1xuXG4gIGZ1bmN0aW9uIG9iajJwb2ludChvYmopIHtcbiAgICByZXR1cm4gY3VydmUucG9pbnQob2JqWzBdLCBvYmpbMV0sIHJlZCk7XG4gIH1cblxuICB2YXIgcHJlID0gb2JqWzJdO1xuICByZXMucHJlY29tcHV0ZWQgPSB7XG4gICAgYmV0YTogbnVsbCxcbiAgICBkb3VibGVzOiBwcmUuZG91YmxlcyAmJiB7XG4gICAgICBzdGVwOiBwcmUuZG91Ymxlcy5zdGVwLFxuICAgICAgcG9pbnRzOiBbIHJlcyBdLmNvbmNhdChwcmUuZG91Ymxlcy5wb2ludHMubWFwKG9iajJwb2ludCkpXG4gICAgfSxcbiAgICBuYWY6IHByZS5uYWYgJiYge1xuICAgICAgd25kOiBwcmUubmFmLnduZCxcbiAgICAgIHBvaW50czogWyByZXMgXS5jb25jYXQocHJlLm5hZi5wb2ludHMubWFwKG9iajJwb2ludCkpXG4gICAgfVxuICB9O1xuICByZXR1cm4gcmVzO1xufTtcblxuUG9pbnQucHJvdG90eXBlLmluc3BlY3QgPSBmdW5jdGlvbiBpbnNwZWN0KCkge1xuICBpZiAodGhpcy5pc0luZmluaXR5KCkpXG4gICAgcmV0dXJuICc8RUMgUG9pbnQgSW5maW5pdHk+JztcbiAgcmV0dXJuICc8RUMgUG9pbnQgeDogJyArIHRoaXMueC5mcm9tUmVkKCkudG9TdHJpbmcoMTYsIDIpICtcbiAgICAgICcgeTogJyArIHRoaXMueS5mcm9tUmVkKCkudG9TdHJpbmcoMTYsIDIpICsgJz4nO1xufTtcblxuUG9pbnQucHJvdG90eXBlLmlzSW5maW5pdHkgPSBmdW5jdGlvbiBpc0luZmluaXR5KCkge1xuICByZXR1cm4gdGhpcy5pbmY7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gYWRkKHApIHtcbiAgLy8gTyArIFAgPSBQXG4gIGlmICh0aGlzLmluZilcbiAgICByZXR1cm4gcDtcblxuICAvLyBQICsgTyA9IFBcbiAgaWYgKHAuaW5mKVxuICAgIHJldHVybiB0aGlzO1xuXG4gIC8vIFAgKyBQID0gMlBcbiAgaWYgKHRoaXMuZXEocCkpXG4gICAgcmV0dXJuIHRoaXMuZGJsKCk7XG5cbiAgLy8gUCArICgtUCkgPSBPXG4gIGlmICh0aGlzLm5lZygpLmVxKHApKVxuICAgIHJldHVybiB0aGlzLmN1cnZlLnBvaW50KG51bGwsIG51bGwpO1xuXG4gIC8vIFAgKyBRID0gT1xuICBpZiAodGhpcy54LmNtcChwLngpID09PSAwKVxuICAgIHJldHVybiB0aGlzLmN1cnZlLnBvaW50KG51bGwsIG51bGwpO1xuXG4gIHZhciBjID0gdGhpcy55LnJlZFN1YihwLnkpO1xuICBpZiAoYy5jbXBuKDApICE9PSAwKVxuICAgIGMgPSBjLnJlZE11bCh0aGlzLngucmVkU3ViKHAueCkucmVkSW52bSgpKTtcbiAgdmFyIG54ID0gYy5yZWRTcXIoKS5yZWRJU3ViKHRoaXMueCkucmVkSVN1YihwLngpO1xuICB2YXIgbnkgPSBjLnJlZE11bCh0aGlzLngucmVkU3ViKG54KSkucmVkSVN1Yih0aGlzLnkpO1xuICByZXR1cm4gdGhpcy5jdXJ2ZS5wb2ludChueCwgbnkpO1xufTtcblxuUG9pbnQucHJvdG90eXBlLmRibCA9IGZ1bmN0aW9uIGRibCgpIHtcbiAgaWYgKHRoaXMuaW5mKVxuICAgIHJldHVybiB0aGlzO1xuXG4gIC8vIDJQID0gT1xuICB2YXIgeXMxID0gdGhpcy55LnJlZEFkZCh0aGlzLnkpO1xuICBpZiAoeXMxLmNtcG4oMCkgPT09IDApXG4gICAgcmV0dXJuIHRoaXMuY3VydmUucG9pbnQobnVsbCwgbnVsbCk7XG5cbiAgdmFyIGEgPSB0aGlzLmN1cnZlLmE7XG5cbiAgdmFyIHgyID0gdGhpcy54LnJlZFNxcigpO1xuICB2YXIgZHlpbnYgPSB5czEucmVkSW52bSgpO1xuICB2YXIgYyA9IHgyLnJlZEFkZCh4MikucmVkSUFkZCh4MikucmVkSUFkZChhKS5yZWRNdWwoZHlpbnYpO1xuXG4gIHZhciBueCA9IGMucmVkU3FyKCkucmVkSVN1Yih0aGlzLngucmVkQWRkKHRoaXMueCkpO1xuICB2YXIgbnkgPSBjLnJlZE11bCh0aGlzLngucmVkU3ViKG54KSkucmVkSVN1Yih0aGlzLnkpO1xuICByZXR1cm4gdGhpcy5jdXJ2ZS5wb2ludChueCwgbnkpO1xufTtcblxuUG9pbnQucHJvdG90eXBlLmdldFggPSBmdW5jdGlvbiBnZXRYKCkge1xuICByZXR1cm4gdGhpcy54LmZyb21SZWQoKTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5nZXRZID0gZnVuY3Rpb24gZ2V0WSgpIHtcbiAgcmV0dXJuIHRoaXMueS5mcm9tUmVkKCk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUubXVsID0gZnVuY3Rpb24gbXVsKGspIHtcbiAgayA9IG5ldyBCTihrLCAxNik7XG5cbiAgaWYgKHRoaXMuX2hhc0RvdWJsZXMoaykpXG4gICAgcmV0dXJuIHRoaXMuY3VydmUuX2ZpeGVkTmFmTXVsKHRoaXMsIGspO1xuICBlbHNlIGlmICh0aGlzLmN1cnZlLmVuZG8pXG4gICAgcmV0dXJuIHRoaXMuY3VydmUuX2VuZG9XbmFmTXVsQWRkKFsgdGhpcyBdLCBbIGsgXSk7XG4gIGVsc2VcbiAgICByZXR1cm4gdGhpcy5jdXJ2ZS5fd25hZk11bCh0aGlzLCBrKTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5tdWxBZGQgPSBmdW5jdGlvbiBtdWxBZGQoazEsIHAyLCBrMikge1xuICB2YXIgcG9pbnRzID0gWyB0aGlzLCBwMiBdO1xuICB2YXIgY29lZmZzID0gWyBrMSwgazIgXTtcbiAgaWYgKHRoaXMuY3VydmUuZW5kbylcbiAgICByZXR1cm4gdGhpcy5jdXJ2ZS5fZW5kb1duYWZNdWxBZGQocG9pbnRzLCBjb2VmZnMpO1xuICBlbHNlXG4gICAgcmV0dXJuIHRoaXMuY3VydmUuX3duYWZNdWxBZGQoMSwgcG9pbnRzLCBjb2VmZnMsIDIpO1xufTtcblxuUG9pbnQucHJvdG90eXBlLmptdWxBZGQgPSBmdW5jdGlvbiBqbXVsQWRkKGsxLCBwMiwgazIpIHtcbiAgdmFyIHBvaW50cyA9IFsgdGhpcywgcDIgXTtcbiAgdmFyIGNvZWZmcyA9IFsgazEsIGsyIF07XG4gIGlmICh0aGlzLmN1cnZlLmVuZG8pXG4gICAgcmV0dXJuIHRoaXMuY3VydmUuX2VuZG9XbmFmTXVsQWRkKHBvaW50cywgY29lZmZzLCB0cnVlKTtcbiAgZWxzZVxuICAgIHJldHVybiB0aGlzLmN1cnZlLl93bmFmTXVsQWRkKDEsIHBvaW50cywgY29lZmZzLCAyLCB0cnVlKTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5lcSA9IGZ1bmN0aW9uIGVxKHApIHtcbiAgcmV0dXJuIHRoaXMgPT09IHAgfHxcbiAgICAgICAgIHRoaXMuaW5mID09PSBwLmluZiAmJlxuICAgICAgICAgICAgICh0aGlzLmluZiB8fCB0aGlzLnguY21wKHAueCkgPT09IDAgJiYgdGhpcy55LmNtcChwLnkpID09PSAwKTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5uZWcgPSBmdW5jdGlvbiBuZWcoX3ByZWNvbXB1dGUpIHtcbiAgaWYgKHRoaXMuaW5mKVxuICAgIHJldHVybiB0aGlzO1xuXG4gIHZhciByZXMgPSB0aGlzLmN1cnZlLnBvaW50KHRoaXMueCwgdGhpcy55LnJlZE5lZygpKTtcbiAgaWYgKF9wcmVjb21wdXRlICYmIHRoaXMucHJlY29tcHV0ZWQpIHtcbiAgICB2YXIgcHJlID0gdGhpcy5wcmVjb21wdXRlZDtcbiAgICB2YXIgbmVnYXRlID0gZnVuY3Rpb24ocCkge1xuICAgICAgcmV0dXJuIHAubmVnKCk7XG4gICAgfTtcbiAgICByZXMucHJlY29tcHV0ZWQgPSB7XG4gICAgICBuYWY6IHByZS5uYWYgJiYge1xuICAgICAgICB3bmQ6IHByZS5uYWYud25kLFxuICAgICAgICBwb2ludHM6IHByZS5uYWYucG9pbnRzLm1hcChuZWdhdGUpXG4gICAgICB9LFxuICAgICAgZG91YmxlczogcHJlLmRvdWJsZXMgJiYge1xuICAgICAgICBzdGVwOiBwcmUuZG91Ymxlcy5zdGVwLFxuICAgICAgICBwb2ludHM6IHByZS5kb3VibGVzLnBvaW50cy5tYXAobmVnYXRlKVxuICAgICAgfVxuICAgIH07XG4gIH1cbiAgcmV0dXJuIHJlcztcbn07XG5cblBvaW50LnByb3RvdHlwZS50b0ogPSBmdW5jdGlvbiB0b0ooKSB7XG4gIGlmICh0aGlzLmluZilcbiAgICByZXR1cm4gdGhpcy5jdXJ2ZS5qcG9pbnQobnVsbCwgbnVsbCwgbnVsbCk7XG5cbiAgdmFyIHJlcyA9IHRoaXMuY3VydmUuanBvaW50KHRoaXMueCwgdGhpcy55LCB0aGlzLmN1cnZlLm9uZSk7XG4gIHJldHVybiByZXM7XG59O1xuXG5mdW5jdGlvbiBKUG9pbnQoY3VydmUsIHgsIHksIHopIHtcbiAgQmFzZS5CYXNlUG9pbnQuY2FsbCh0aGlzLCBjdXJ2ZSwgJ2phY29iaWFuJyk7XG4gIGlmICh4ID09PSBudWxsICYmIHkgPT09IG51bGwgJiYgeiA9PT0gbnVsbCkge1xuICAgIHRoaXMueCA9IHRoaXMuY3VydmUub25lO1xuICAgIHRoaXMueSA9IHRoaXMuY3VydmUub25lO1xuICAgIHRoaXMueiA9IG5ldyBCTigwKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLnggPSBuZXcgQk4oeCwgMTYpO1xuICAgIHRoaXMueSA9IG5ldyBCTih5LCAxNik7XG4gICAgdGhpcy56ID0gbmV3IEJOKHosIDE2KTtcbiAgfVxuICBpZiAoIXRoaXMueC5yZWQpXG4gICAgdGhpcy54ID0gdGhpcy54LnRvUmVkKHRoaXMuY3VydmUucmVkKTtcbiAgaWYgKCF0aGlzLnkucmVkKVxuICAgIHRoaXMueSA9IHRoaXMueS50b1JlZCh0aGlzLmN1cnZlLnJlZCk7XG4gIGlmICghdGhpcy56LnJlZClcbiAgICB0aGlzLnogPSB0aGlzLnoudG9SZWQodGhpcy5jdXJ2ZS5yZWQpO1xuXG4gIHRoaXMuek9uZSA9IHRoaXMueiA9PT0gdGhpcy5jdXJ2ZS5vbmU7XG59XG5pbmhlcml0cyhKUG9pbnQsIEJhc2UuQmFzZVBvaW50KTtcblxuU2hvcnRDdXJ2ZS5wcm90b3R5cGUuanBvaW50ID0gZnVuY3Rpb24ganBvaW50KHgsIHksIHopIHtcbiAgcmV0dXJuIG5ldyBKUG9pbnQodGhpcywgeCwgeSwgeik7XG59O1xuXG5KUG9pbnQucHJvdG90eXBlLnRvUCA9IGZ1bmN0aW9uIHRvUCgpIHtcbiAgaWYgKHRoaXMuaXNJbmZpbml0eSgpKVxuICAgIHJldHVybiB0aGlzLmN1cnZlLnBvaW50KG51bGwsIG51bGwpO1xuXG4gIHZhciB6aW52ID0gdGhpcy56LnJlZEludm0oKTtcbiAgdmFyIHppbnYyID0gemludi5yZWRTcXIoKTtcbiAgdmFyIGF4ID0gdGhpcy54LnJlZE11bCh6aW52Mik7XG4gIHZhciBheSA9IHRoaXMueS5yZWRNdWwoemludjIpLnJlZE11bCh6aW52KTtcblxuICByZXR1cm4gdGhpcy5jdXJ2ZS5wb2ludChheCwgYXkpO1xufTtcblxuSlBvaW50LnByb3RvdHlwZS5uZWcgPSBmdW5jdGlvbiBuZWcoKSB7XG4gIHJldHVybiB0aGlzLmN1cnZlLmpwb2ludCh0aGlzLngsIHRoaXMueS5yZWROZWcoKSwgdGhpcy56KTtcbn07XG5cbkpQb2ludC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gYWRkKHApIHtcbiAgLy8gTyArIFAgPSBQXG4gIGlmICh0aGlzLmlzSW5maW5pdHkoKSlcbiAgICByZXR1cm4gcDtcblxuICAvLyBQICsgTyA9IFBcbiAgaWYgKHAuaXNJbmZpbml0eSgpKVxuICAgIHJldHVybiB0aGlzO1xuXG4gIC8vIDEyTSArIDRTICsgN0FcbiAgdmFyIHB6MiA9IHAuei5yZWRTcXIoKTtcbiAgdmFyIHoyID0gdGhpcy56LnJlZFNxcigpO1xuICB2YXIgdTEgPSB0aGlzLngucmVkTXVsKHB6Mik7XG4gIHZhciB1MiA9IHAueC5yZWRNdWwoejIpO1xuICB2YXIgczEgPSB0aGlzLnkucmVkTXVsKHB6Mi5yZWRNdWwocC56KSk7XG4gIHZhciBzMiA9IHAueS5yZWRNdWwoejIucmVkTXVsKHRoaXMueikpO1xuXG4gIHZhciBoID0gdTEucmVkU3ViKHUyKTtcbiAgdmFyIHIgPSBzMS5yZWRTdWIoczIpO1xuICBpZiAoaC5jbXBuKDApID09PSAwKSB7XG4gICAgaWYgKHIuY21wbigwKSAhPT0gMClcbiAgICAgIHJldHVybiB0aGlzLmN1cnZlLmpwb2ludChudWxsLCBudWxsLCBudWxsKTtcbiAgICBlbHNlXG4gICAgICByZXR1cm4gdGhpcy5kYmwoKTtcbiAgfVxuXG4gIHZhciBoMiA9IGgucmVkU3FyKCk7XG4gIHZhciBoMyA9IGgyLnJlZE11bChoKTtcbiAgdmFyIHYgPSB1MS5yZWRNdWwoaDIpO1xuXG4gIHZhciBueCA9IHIucmVkU3FyKCkucmVkSUFkZChoMykucmVkSVN1Yih2KS5yZWRJU3ViKHYpO1xuICB2YXIgbnkgPSByLnJlZE11bCh2LnJlZElTdWIobngpKS5yZWRJU3ViKHMxLnJlZE11bChoMykpO1xuICB2YXIgbnogPSB0aGlzLnoucmVkTXVsKHAueikucmVkTXVsKGgpO1xuXG4gIHJldHVybiB0aGlzLmN1cnZlLmpwb2ludChueCwgbnksIG56KTtcbn07XG5cbkpQb2ludC5wcm90b3R5cGUubWl4ZWRBZGQgPSBmdW5jdGlvbiBtaXhlZEFkZChwKSB7XG4gIC8vIE8gKyBQID0gUFxuICBpZiAodGhpcy5pc0luZmluaXR5KCkpXG4gICAgcmV0dXJuIHAudG9KKCk7XG5cbiAgLy8gUCArIE8gPSBQXG4gIGlmIChwLmlzSW5maW5pdHkoKSlcbiAgICByZXR1cm4gdGhpcztcblxuICAvLyA4TSArIDNTICsgN0FcbiAgdmFyIHoyID0gdGhpcy56LnJlZFNxcigpO1xuICB2YXIgdTEgPSB0aGlzLng7XG4gIHZhciB1MiA9IHAueC5yZWRNdWwoejIpO1xuICB2YXIgczEgPSB0aGlzLnk7XG4gIHZhciBzMiA9IHAueS5yZWRNdWwoejIpLnJlZE11bCh0aGlzLnopO1xuXG4gIHZhciBoID0gdTEucmVkU3ViKHUyKTtcbiAgdmFyIHIgPSBzMS5yZWRTdWIoczIpO1xuICBpZiAoaC5jbXBuKDApID09PSAwKSB7XG4gICAgaWYgKHIuY21wbigwKSAhPT0gMClcbiAgICAgIHJldHVybiB0aGlzLmN1cnZlLmpwb2ludChudWxsLCBudWxsLCBudWxsKTtcbiAgICBlbHNlXG4gICAgICByZXR1cm4gdGhpcy5kYmwoKTtcbiAgfVxuXG4gIHZhciBoMiA9IGgucmVkU3FyKCk7XG4gIHZhciBoMyA9IGgyLnJlZE11bChoKTtcbiAgdmFyIHYgPSB1MS5yZWRNdWwoaDIpO1xuXG4gIHZhciBueCA9IHIucmVkU3FyKCkucmVkSUFkZChoMykucmVkSVN1Yih2KS5yZWRJU3ViKHYpO1xuICB2YXIgbnkgPSByLnJlZE11bCh2LnJlZElTdWIobngpKS5yZWRJU3ViKHMxLnJlZE11bChoMykpO1xuICB2YXIgbnogPSB0aGlzLnoucmVkTXVsKGgpO1xuXG4gIHJldHVybiB0aGlzLmN1cnZlLmpwb2ludChueCwgbnksIG56KTtcbn07XG5cbkpQb2ludC5wcm90b3R5cGUuZGJscCA9IGZ1bmN0aW9uIGRibHAocG93KSB7XG4gIGlmIChwb3cgPT09IDApXG4gICAgcmV0dXJuIHRoaXM7XG4gIGlmICh0aGlzLmlzSW5maW5pdHkoKSlcbiAgICByZXR1cm4gdGhpcztcbiAgaWYgKCFwb3cpXG4gICAgcmV0dXJuIHRoaXMuZGJsKCk7XG5cbiAgaWYgKHRoaXMuY3VydmUuemVyb0EgfHwgdGhpcy5jdXJ2ZS50aHJlZUEpIHtcbiAgICB2YXIgciA9IHRoaXM7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwb3c7IGkrKylcbiAgICAgIHIgPSByLmRibCgpO1xuICAgIHJldHVybiByO1xuICB9XG5cbiAgLy8gMU0gKyAyUyArIDFBICsgTiAqICg0UyArIDVNICsgOEEpXG4gIC8vIE4gPSAxID0+IDZNICsgNlMgKyA5QVxuICB2YXIgYSA9IHRoaXMuY3VydmUuYTtcbiAgdmFyIHRpbnYgPSB0aGlzLmN1cnZlLnRpbnY7XG5cbiAgdmFyIGp4ID0gdGhpcy54O1xuICB2YXIgankgPSB0aGlzLnk7XG4gIHZhciBqeiA9IHRoaXMuejtcbiAgdmFyIGp6NCA9IGp6LnJlZFNxcigpLnJlZFNxcigpO1xuXG4gIC8vIFJldXNlIHJlc3VsdHNcbiAgdmFyIGp5ZCA9IGp5LnJlZEFkZChqeSk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcG93OyBpKyspIHtcbiAgICB2YXIgangyID0gangucmVkU3FyKCk7XG4gICAgdmFyIGp5ZDIgPSBqeWQucmVkU3FyKCk7XG4gICAgdmFyIGp5ZDQgPSBqeWQyLnJlZFNxcigpO1xuICAgIHZhciBjID0gangyLnJlZEFkZChqeDIpLnJlZElBZGQoangyKS5yZWRJQWRkKGEucmVkTXVsKGp6NCkpO1xuXG4gICAgdmFyIHQxID0gangucmVkTXVsKGp5ZDIpO1xuICAgIHZhciBueCA9IGMucmVkU3FyKCkucmVkSVN1Yih0MS5yZWRBZGQodDEpKTtcbiAgICB2YXIgdDIgPSB0MS5yZWRJU3ViKG54KTtcbiAgICB2YXIgZG55ID0gYy5yZWRNdWwodDIpO1xuICAgIGRueSA9IGRueS5yZWRJQWRkKGRueSkucmVkSVN1YihqeWQ0KTtcbiAgICB2YXIgbnogPSBqeWQucmVkTXVsKGp6KTtcbiAgICBpZiAoaSArIDEgPCBwb3cpXG4gICAgICBqejQgPSBqejQucmVkTXVsKGp5ZDQpO1xuXG4gICAganggPSBueDtcbiAgICBqeiA9IG56O1xuICAgIGp5ZCA9IGRueTtcbiAgfVxuXG4gIHJldHVybiB0aGlzLmN1cnZlLmpwb2ludChqeCwganlkLnJlZE11bCh0aW52KSwganopO1xufTtcblxuSlBvaW50LnByb3RvdHlwZS5kYmwgPSBmdW5jdGlvbiBkYmwoKSB7XG4gIGlmICh0aGlzLmlzSW5maW5pdHkoKSlcbiAgICByZXR1cm4gdGhpcztcblxuICBpZiAodGhpcy5jdXJ2ZS56ZXJvQSlcbiAgICByZXR1cm4gdGhpcy5femVyb0RibCgpO1xuICBlbHNlIGlmICh0aGlzLmN1cnZlLnRocmVlQSlcbiAgICByZXR1cm4gdGhpcy5fdGhyZWVEYmwoKTtcbiAgZWxzZVxuICAgIHJldHVybiB0aGlzLl9kYmwoKTtcbn07XG5cbkpQb2ludC5wcm90b3R5cGUuX3plcm9EYmwgPSBmdW5jdGlvbiBfemVyb0RibCgpIHtcbiAgdmFyIG54O1xuICB2YXIgbnk7XG4gIHZhciBuejtcbiAgLy8gWiA9IDFcbiAgaWYgKHRoaXMuek9uZSkge1xuICAgIC8vIGh5cGVyZWxsaXB0aWMub3JnL0VGRC9nMXAvYXV0by1zaG9ydHctamFjb2JpYW4tMC5odG1sXG4gICAgLy8gICAgICNkb3VibGluZy1tZGJsLTIwMDctYmxcbiAgICAvLyAxTSArIDVTICsgMTRBXG5cbiAgICAvLyBYWCA9IFgxXjJcbiAgICB2YXIgeHggPSB0aGlzLngucmVkU3FyKCk7XG4gICAgLy8gWVkgPSBZMV4yXG4gICAgdmFyIHl5ID0gdGhpcy55LnJlZFNxcigpO1xuICAgIC8vIFlZWVkgPSBZWV4yXG4gICAgdmFyIHl5eXkgPSB5eS5yZWRTcXIoKTtcbiAgICAvLyBTID0gMiAqICgoWDEgKyBZWSleMiAtIFhYIC0gWVlZWSlcbiAgICB2YXIgcyA9IHRoaXMueC5yZWRBZGQoeXkpLnJlZFNxcigpLnJlZElTdWIoeHgpLnJlZElTdWIoeXl5eSk7XG4gICAgcyA9IHMucmVkSUFkZChzKTtcbiAgICAvLyBNID0gMyAqIFhYICsgYTsgYSA9IDBcbiAgICB2YXIgbSA9IHh4LnJlZEFkZCh4eCkucmVkSUFkZCh4eCk7XG4gICAgLy8gVCA9IE0gXiAyIC0gMipTXG4gICAgdmFyIHQgPSBtLnJlZFNxcigpLnJlZElTdWIocykucmVkSVN1YihzKTtcblxuICAgIC8vIDggKiBZWVlZXG4gICAgdmFyIHl5eXk4ID0geXl5eS5yZWRJQWRkKHl5eXkpO1xuICAgIHl5eXk4ID0geXl5eTgucmVkSUFkZCh5eXl5OCk7XG4gICAgeXl5eTggPSB5eXl5OC5yZWRJQWRkKHl5eXk4KTtcblxuICAgIC8vIFgzID0gVFxuICAgIG54ID0gdDtcbiAgICAvLyBZMyA9IE0gKiAoUyAtIFQpIC0gOCAqIFlZWVlcbiAgICBueSA9IG0ucmVkTXVsKHMucmVkSVN1Yih0KSkucmVkSVN1Yih5eXl5OCk7XG4gICAgLy8gWjMgPSAyKlkxXG4gICAgbnogPSB0aGlzLnkucmVkQWRkKHRoaXMueSk7XG4gIH0gZWxzZSB7XG4gICAgLy8gaHlwZXJlbGxpcHRpYy5vcmcvRUZEL2cxcC9hdXRvLXNob3J0dy1qYWNvYmlhbi0wLmh0bWxcbiAgICAvLyAgICAgI2RvdWJsaW5nLWRibC0yMDA5LWxcbiAgICAvLyAyTSArIDVTICsgMTNBXG5cbiAgICAvLyBBID0gWDFeMlxuICAgIHZhciBhID0gdGhpcy54LnJlZFNxcigpO1xuICAgIC8vIEIgPSBZMV4yXG4gICAgdmFyIGIgPSB0aGlzLnkucmVkU3FyKCk7XG4gICAgLy8gQyA9IEJeMlxuICAgIHZhciBjID0gYi5yZWRTcXIoKTtcbiAgICAvLyBEID0gMiAqICgoWDEgKyBCKV4yIC0gQSAtIEMpXG4gICAgdmFyIGQgPSB0aGlzLngucmVkQWRkKGIpLnJlZFNxcigpLnJlZElTdWIoYSkucmVkSVN1YihjKTtcbiAgICBkID0gZC5yZWRJQWRkKGQpO1xuICAgIC8vIEUgPSAzICogQVxuICAgIHZhciBlID0gYS5yZWRBZGQoYSkucmVkSUFkZChhKTtcbiAgICAvLyBGID0gRV4yXG4gICAgdmFyIGYgPSBlLnJlZFNxcigpO1xuXG4gICAgLy8gOCAqIENcbiAgICB2YXIgYzggPSBjLnJlZElBZGQoYyk7XG4gICAgYzggPSBjOC5yZWRJQWRkKGM4KTtcbiAgICBjOCA9IGM4LnJlZElBZGQoYzgpO1xuXG4gICAgLy8gWDMgPSBGIC0gMiAqIERcbiAgICBueCA9IGYucmVkSVN1YihkKS5yZWRJU3ViKGQpO1xuICAgIC8vIFkzID0gRSAqIChEIC0gWDMpIC0gOCAqIENcbiAgICBueSA9IGUucmVkTXVsKGQucmVkSVN1YihueCkpLnJlZElTdWIoYzgpO1xuICAgIC8vIFozID0gMiAqIFkxICogWjFcbiAgICBueiA9IHRoaXMueS5yZWRNdWwodGhpcy56KTtcbiAgICBueiA9IG56LnJlZElBZGQobnopO1xuICB9XG5cbiAgcmV0dXJuIHRoaXMuY3VydmUuanBvaW50KG54LCBueSwgbnopO1xufTtcblxuSlBvaW50LnByb3RvdHlwZS5fdGhyZWVEYmwgPSBmdW5jdGlvbiBfdGhyZWVEYmwoKSB7XG4gIHZhciBueDtcbiAgdmFyIG55O1xuICB2YXIgbno7XG4gIC8vIFogPSAxXG4gIGlmICh0aGlzLnpPbmUpIHtcbiAgICAvLyBoeXBlcmVsbGlwdGljLm9yZy9FRkQvZzFwL2F1dG8tc2hvcnR3LWphY29iaWFuLTMuaHRtbFxuICAgIC8vICAgICAjZG91YmxpbmctbWRibC0yMDA3LWJsXG4gICAgLy8gMU0gKyA1UyArIDE1QVxuXG4gICAgLy8gWFggPSBYMV4yXG4gICAgdmFyIHh4ID0gdGhpcy54LnJlZFNxcigpO1xuICAgIC8vIFlZID0gWTFeMlxuICAgIHZhciB5eSA9IHRoaXMueS5yZWRTcXIoKTtcbiAgICAvLyBZWVlZID0gWVleMlxuICAgIHZhciB5eXl5ID0geXkucmVkU3FyKCk7XG4gICAgLy8gUyA9IDIgKiAoKFgxICsgWVkpXjIgLSBYWCAtIFlZWVkpXG4gICAgdmFyIHMgPSB0aGlzLngucmVkQWRkKHl5KS5yZWRTcXIoKS5yZWRJU3ViKHh4KS5yZWRJU3ViKHl5eXkpO1xuICAgIHMgPSBzLnJlZElBZGQocyk7XG4gICAgLy8gTSA9IDMgKiBYWCArIGFcbiAgICB2YXIgbSA9IHh4LnJlZEFkZCh4eCkucmVkSUFkZCh4eCkucmVkSUFkZCh0aGlzLmN1cnZlLmEpO1xuICAgIC8vIFQgPSBNXjIgLSAyICogU1xuICAgIHZhciB0ID0gbS5yZWRTcXIoKS5yZWRJU3ViKHMpLnJlZElTdWIocyk7XG4gICAgLy8gWDMgPSBUXG4gICAgbnggPSB0O1xuICAgIC8vIFkzID0gTSAqIChTIC0gVCkgLSA4ICogWVlZWVxuICAgIHZhciB5eXl5OCA9IHl5eXkucmVkSUFkZCh5eXl5KTtcbiAgICB5eXl5OCA9IHl5eXk4LnJlZElBZGQoeXl5eTgpO1xuICAgIHl5eXk4ID0geXl5eTgucmVkSUFkZCh5eXl5OCk7XG4gICAgbnkgPSBtLnJlZE11bChzLnJlZElTdWIodCkpLnJlZElTdWIoeXl5eTgpO1xuICAgIC8vIFozID0gMiAqIFkxXG4gICAgbnogPSB0aGlzLnkucmVkQWRkKHRoaXMueSk7XG4gIH0gZWxzZSB7XG4gICAgLy8gaHlwZXJlbGxpcHRpYy5vcmcvRUZEL2cxcC9hdXRvLXNob3J0dy1qYWNvYmlhbi0zLmh0bWwjZG91YmxpbmctZGJsLTIwMDEtYlxuICAgIC8vIDNNICsgNVNcblxuICAgIC8vIGRlbHRhID0gWjFeMlxuICAgIHZhciBkZWx0YSA9IHRoaXMuei5yZWRTcXIoKTtcbiAgICAvLyBnYW1tYSA9IFkxXjJcbiAgICB2YXIgZ2FtbWEgPSB0aGlzLnkucmVkU3FyKCk7XG4gICAgLy8gYmV0YSA9IFgxICogZ2FtbWFcbiAgICB2YXIgYmV0YSA9IHRoaXMueC5yZWRNdWwoZ2FtbWEpO1xuICAgIC8vIGFscGhhID0gMyAqIChYMSAtIGRlbHRhKSAqIChYMSArIGRlbHRhKVxuICAgIHZhciBhbHBoYSA9IHRoaXMueC5yZWRTdWIoZGVsdGEpLnJlZE11bCh0aGlzLngucmVkQWRkKGRlbHRhKSk7XG4gICAgYWxwaGEgPSBhbHBoYS5yZWRBZGQoYWxwaGEpLnJlZElBZGQoYWxwaGEpO1xuICAgIC8vIFgzID0gYWxwaGFeMiAtIDggKiBiZXRhXG4gICAgdmFyIGJldGE0ID0gYmV0YS5yZWRJQWRkKGJldGEpO1xuICAgIGJldGE0ID0gYmV0YTQucmVkSUFkZChiZXRhNCk7XG4gICAgdmFyIGJldGE4ID0gYmV0YTQucmVkQWRkKGJldGE0KTtcbiAgICBueCA9IGFscGhhLnJlZFNxcigpLnJlZElTdWIoYmV0YTgpO1xuICAgIC8vIFozID0gKFkxICsgWjEpXjIgLSBnYW1tYSAtIGRlbHRhXG4gICAgbnogPSB0aGlzLnkucmVkQWRkKHRoaXMueikucmVkU3FyKCkucmVkSVN1YihnYW1tYSkucmVkSVN1YihkZWx0YSk7XG4gICAgLy8gWTMgPSBhbHBoYSAqICg0ICogYmV0YSAtIFgzKSAtIDggKiBnYW1tYV4yXG4gICAgdmFyIGdnYW1tYTggPSBnYW1tYS5yZWRTcXIoKTtcbiAgICBnZ2FtbWE4ID0gZ2dhbW1hOC5yZWRJQWRkKGdnYW1tYTgpO1xuICAgIGdnYW1tYTggPSBnZ2FtbWE4LnJlZElBZGQoZ2dhbW1hOCk7XG4gICAgZ2dhbW1hOCA9IGdnYW1tYTgucmVkSUFkZChnZ2FtbWE4KTtcbiAgICBueSA9IGFscGhhLnJlZE11bChiZXRhNC5yZWRJU3ViKG54KSkucmVkSVN1YihnZ2FtbWE4KTtcbiAgfVxuXG4gIHJldHVybiB0aGlzLmN1cnZlLmpwb2ludChueCwgbnksIG56KTtcbn07XG5cbkpQb2ludC5wcm90b3R5cGUuX2RibCA9IGZ1bmN0aW9uIF9kYmwoKSB7XG4gIHZhciBhID0gdGhpcy5jdXJ2ZS5hO1xuXG4gIC8vIDRNICsgNlMgKyAxMEFcbiAgdmFyIGp4ID0gdGhpcy54O1xuICB2YXIgankgPSB0aGlzLnk7XG4gIHZhciBqeiA9IHRoaXMuejtcbiAgdmFyIGp6NCA9IGp6LnJlZFNxcigpLnJlZFNxcigpO1xuXG4gIHZhciBqeDIgPSBqeC5yZWRTcXIoKTtcbiAgdmFyIGp5MiA9IGp5LnJlZFNxcigpO1xuXG4gIHZhciBjID0gangyLnJlZEFkZChqeDIpLnJlZElBZGQoangyKS5yZWRJQWRkKGEucmVkTXVsKGp6NCkpO1xuXG4gIHZhciBqeGQ0ID0gangucmVkQWRkKGp4KTtcbiAganhkNCA9IGp4ZDQucmVkSUFkZChqeGQ0KTtcbiAgdmFyIHQxID0ganhkNC5yZWRNdWwoankyKTtcbiAgdmFyIG54ID0gYy5yZWRTcXIoKS5yZWRJU3ViKHQxLnJlZEFkZCh0MSkpO1xuICB2YXIgdDIgPSB0MS5yZWRJU3ViKG54KTtcblxuICB2YXIganlkOCA9IGp5Mi5yZWRTcXIoKTtcbiAganlkOCA9IGp5ZDgucmVkSUFkZChqeWQ4KTtcbiAganlkOCA9IGp5ZDgucmVkSUFkZChqeWQ4KTtcbiAganlkOCA9IGp5ZDgucmVkSUFkZChqeWQ4KTtcbiAgdmFyIG55ID0gYy5yZWRNdWwodDIpLnJlZElTdWIoanlkOCk7XG4gIHZhciBueiA9IGp5LnJlZEFkZChqeSkucmVkTXVsKGp6KTtcblxuICByZXR1cm4gdGhpcy5jdXJ2ZS5qcG9pbnQobngsIG55LCBueik7XG59O1xuXG5KUG9pbnQucHJvdG90eXBlLnRycGwgPSBmdW5jdGlvbiB0cnBsKCkge1xuICBpZiAoIXRoaXMuY3VydmUuemVyb0EpXG4gICAgcmV0dXJuIHRoaXMuZGJsKCkuYWRkKHRoaXMpO1xuXG4gIC8vIGh5cGVyZWxsaXB0aWMub3JnL0VGRC9nMXAvYXV0by1zaG9ydHctamFjb2JpYW4tMC5odG1sI3RyaXBsaW5nLXRwbC0yMDA3LWJsXG4gIC8vIDVNICsgMTBTICsgLi4uXG5cbiAgLy8gWFggPSBYMV4yXG4gIHZhciB4eCA9IHRoaXMueC5yZWRTcXIoKTtcbiAgLy8gWVkgPSBZMV4yXG4gIHZhciB5eSA9IHRoaXMueS5yZWRTcXIoKTtcbiAgLy8gWlogPSBaMV4yXG4gIHZhciB6eiA9IHRoaXMuei5yZWRTcXIoKTtcbiAgLy8gWVlZWSA9IFlZXjJcbiAgdmFyIHl5eXkgPSB5eS5yZWRTcXIoKTtcbiAgLy8gTSA9IDMgKiBYWCArIGEgKiBaWjI7IGEgPSAwXG4gIHZhciBtID0geHgucmVkQWRkKHh4KS5yZWRJQWRkKHh4KTtcbiAgLy8gTU0gPSBNXjJcbiAgdmFyIG1tID0gbS5yZWRTcXIoKTtcbiAgLy8gRSA9IDYgKiAoKFgxICsgWVkpXjIgLSBYWCAtIFlZWVkpIC0gTU1cbiAgdmFyIGUgPSB0aGlzLngucmVkQWRkKHl5KS5yZWRTcXIoKS5yZWRJU3ViKHh4KS5yZWRJU3ViKHl5eXkpO1xuICBlID0gZS5yZWRJQWRkKGUpO1xuICBlID0gZS5yZWRBZGQoZSkucmVkSUFkZChlKTtcbiAgZSA9IGUucmVkSVN1YihtbSk7XG4gIC8vIEVFID0gRV4yXG4gIHZhciBlZSA9IGUucmVkU3FyKCk7XG4gIC8vIFQgPSAxNipZWVlZXG4gIHZhciB0ID0geXl5eS5yZWRJQWRkKHl5eXkpO1xuICB0ID0gdC5yZWRJQWRkKHQpO1xuICB0ID0gdC5yZWRJQWRkKHQpO1xuICB0ID0gdC5yZWRJQWRkKHQpO1xuICAvLyBVID0gKE0gKyBFKV4yIC0gTU0gLSBFRSAtIFRcbiAgdmFyIHUgPSBtLnJlZElBZGQoZSkucmVkU3FyKCkucmVkSVN1YihtbSkucmVkSVN1YihlZSkucmVkSVN1Yih0KTtcbiAgLy8gWDMgPSA0ICogKFgxICogRUUgLSA0ICogWVkgKiBVKVxuICB2YXIgeXl1NCA9IHl5LnJlZE11bCh1KTtcbiAgeXl1NCA9IHl5dTQucmVkSUFkZCh5eXU0KTtcbiAgeXl1NCA9IHl5dTQucmVkSUFkZCh5eXU0KTtcbiAgdmFyIG54ID0gdGhpcy54LnJlZE11bChlZSkucmVkSVN1Yih5eXU0KTtcbiAgbnggPSBueC5yZWRJQWRkKG54KTtcbiAgbnggPSBueC5yZWRJQWRkKG54KTtcbiAgLy8gWTMgPSA4ICogWTEgKiAoVSAqIChUIC0gVSkgLSBFICogRUUpXG4gIHZhciBueSA9IHRoaXMueS5yZWRNdWwodS5yZWRNdWwodC5yZWRJU3ViKHUpKS5yZWRJU3ViKGUucmVkTXVsKGVlKSkpO1xuICBueSA9IG55LnJlZElBZGQobnkpO1xuICBueSA9IG55LnJlZElBZGQobnkpO1xuICBueSA9IG55LnJlZElBZGQobnkpO1xuICAvLyBaMyA9IChaMSArIEUpXjIgLSBaWiAtIEVFXG4gIHZhciBueiA9IHRoaXMuei5yZWRBZGQoZSkucmVkU3FyKCkucmVkSVN1Yih6eikucmVkSVN1YihlZSk7XG5cbiAgcmV0dXJuIHRoaXMuY3VydmUuanBvaW50KG54LCBueSwgbnopO1xufTtcblxuSlBvaW50LnByb3RvdHlwZS5tdWwgPSBmdW5jdGlvbiBtdWwoaywga2Jhc2UpIHtcbiAgayA9IG5ldyBCTihrLCBrYmFzZSk7XG5cbiAgcmV0dXJuIHRoaXMuY3VydmUuX3duYWZNdWwodGhpcywgayk7XG59O1xuXG5KUG9pbnQucHJvdG90eXBlLmVxID0gZnVuY3Rpb24gZXEocCkge1xuICBpZiAocC50eXBlID09PSAnYWZmaW5lJylcbiAgICByZXR1cm4gdGhpcy5lcShwLnRvSigpKTtcblxuICBpZiAodGhpcyA9PT0gcClcbiAgICByZXR1cm4gdHJ1ZTtcblxuICAvLyB4MSAqIHoyXjIgPT0geDIgKiB6MV4yXG4gIHZhciB6MiA9IHRoaXMuei5yZWRTcXIoKTtcbiAgdmFyIHB6MiA9IHAuei5yZWRTcXIoKTtcbiAgaWYgKHRoaXMueC5yZWRNdWwocHoyKS5yZWRJU3ViKHAueC5yZWRNdWwoejIpKS5jbXBuKDApICE9PSAwKVxuICAgIHJldHVybiBmYWxzZTtcblxuICAvLyB5MSAqIHoyXjMgPT0geTIgKiB6MV4zXG4gIHZhciB6MyA9IHoyLnJlZE11bCh0aGlzLnopO1xuICB2YXIgcHozID0gcHoyLnJlZE11bChwLnopO1xuICByZXR1cm4gdGhpcy55LnJlZE11bChwejMpLnJlZElTdWIocC55LnJlZE11bCh6MykpLmNtcG4oMCkgPT09IDA7XG59O1xuXG5KUG9pbnQucHJvdG90eXBlLmVxWFRvUCA9IGZ1bmN0aW9uIGVxWFRvUCh4KSB7XG4gIHZhciB6cyA9IHRoaXMuei5yZWRTcXIoKTtcbiAgdmFyIHJ4ID0geC50b1JlZCh0aGlzLmN1cnZlLnJlZCkucmVkTXVsKHpzKTtcbiAgaWYgKHRoaXMueC5jbXAocngpID09PSAwKVxuICAgIHJldHVybiB0cnVlO1xuXG4gIHZhciB4YyA9IHguY2xvbmUoKTtcbiAgdmFyIHQgPSB0aGlzLmN1cnZlLnJlZE4ucmVkTXVsKHpzKTtcbiAgZm9yICg7Oykge1xuICAgIHhjLmlhZGQodGhpcy5jdXJ2ZS5uKTtcbiAgICBpZiAoeGMuY21wKHRoaXMuY3VydmUucCkgPj0gMClcbiAgICAgIHJldHVybiBmYWxzZTtcblxuICAgIHJ4LnJlZElBZGQodCk7XG4gICAgaWYgKHRoaXMueC5jbXAocngpID09PSAwKVxuICAgICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufTtcblxuSlBvaW50LnByb3RvdHlwZS5pbnNwZWN0ID0gZnVuY3Rpb24gaW5zcGVjdCgpIHtcbiAgaWYgKHRoaXMuaXNJbmZpbml0eSgpKVxuICAgIHJldHVybiAnPEVDIEpQb2ludCBJbmZpbml0eT4nO1xuICByZXR1cm4gJzxFQyBKUG9pbnQgeDogJyArIHRoaXMueC50b1N0cmluZygxNiwgMikgK1xuICAgICAgJyB5OiAnICsgdGhpcy55LnRvU3RyaW5nKDE2LCAyKSArXG4gICAgICAnIHo6ICcgKyB0aGlzLnoudG9TdHJpbmcoMTYsIDIpICsgJz4nO1xufTtcblxuSlBvaW50LnByb3RvdHlwZS5pc0luZmluaXR5ID0gZnVuY3Rpb24gaXNJbmZpbml0eSgpIHtcbiAgLy8gWFhYIFRoaXMgY29kZSBhc3N1bWVzIHRoYXQgemVybyBpcyBhbHdheXMgemVybyBpbiByZWRcbiAgcmV0dXJuIHRoaXMuei5jbXBuKDApID09PSAwO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGN1cnZlcyA9IGV4cG9ydHM7XG5cbnZhciBoYXNoID0gcmVxdWlyZSgnaGFzaC5qcycpO1xudmFyIGVsbGlwdGljID0gcmVxdWlyZSgnLi4vZWxsaXB0aWMnKTtcblxudmFyIGFzc2VydCA9IGVsbGlwdGljLnV0aWxzLmFzc2VydDtcblxuZnVuY3Rpb24gUHJlc2V0Q3VydmUob3B0aW9ucykge1xuICBpZiAob3B0aW9ucy50eXBlID09PSAnc2hvcnQnKVxuICAgIHRoaXMuY3VydmUgPSBuZXcgZWxsaXB0aWMuY3VydmUuc2hvcnQob3B0aW9ucyk7XG4gIGVsc2UgaWYgKG9wdGlvbnMudHlwZSA9PT0gJ2Vkd2FyZHMnKVxuICAgIHRoaXMuY3VydmUgPSBuZXcgZWxsaXB0aWMuY3VydmUuZWR3YXJkcyhvcHRpb25zKTtcbiAgZWxzZVxuICAgIHRoaXMuY3VydmUgPSBuZXcgZWxsaXB0aWMuY3VydmUubW9udChvcHRpb25zKTtcbiAgdGhpcy5nID0gdGhpcy5jdXJ2ZS5nO1xuICB0aGlzLm4gPSB0aGlzLmN1cnZlLm47XG4gIHRoaXMuaGFzaCA9IG9wdGlvbnMuaGFzaDtcblxuICBhc3NlcnQodGhpcy5nLnZhbGlkYXRlKCksICdJbnZhbGlkIGN1cnZlJyk7XG4gIGFzc2VydCh0aGlzLmcubXVsKHRoaXMubikuaXNJbmZpbml0eSgpLCAnSW52YWxpZCBjdXJ2ZSwgRypOICE9IE8nKTtcbn1cbmN1cnZlcy5QcmVzZXRDdXJ2ZSA9IFByZXNldEN1cnZlO1xuXG5mdW5jdGlvbiBkZWZpbmVDdXJ2ZShuYW1lLCBvcHRpb25zKSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjdXJ2ZXMsIG5hbWUsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGN1cnZlID0gbmV3IFByZXNldEN1cnZlKG9wdGlvbnMpO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGN1cnZlcywgbmFtZSwge1xuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiBjdXJ2ZVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gY3VydmU7XG4gICAgfVxuICB9KTtcbn1cblxuZGVmaW5lQ3VydmUoJ3AxOTInLCB7XG4gIHR5cGU6ICdzaG9ydCcsXG4gIHByaW1lOiAncDE5MicsXG4gIHA6ICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZSBmZmZmZmZmZiBmZmZmZmZmZicsXG4gIGE6ICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZSBmZmZmZmZmZiBmZmZmZmZmYycsXG4gIGI6ICc2NDIxMDUxOSBlNTljODBlNyAwZmE3ZTlhYiA3MjI0MzA0OSBmZWI4ZGVlYyBjMTQ2YjliMScsXG4gIG46ICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiA5OWRlZjgzNiAxNDZiYzliMSBiNGQyMjgzMScsXG4gIGhhc2g6IGhhc2guc2hhMjU2LFxuICBnUmVkOiBmYWxzZSxcbiAgZzogW1xuICAgICcxODhkYTgwZSBiMDMwOTBmNiA3Y2JmMjBlYiA0M2ExODgwMCBmNGZmMGFmZCA4MmZmMTAxMicsXG4gICAgJzA3MTkyYjk1IGZmYzhkYTc4IDYzMTAxMWVkIDZiMjRjZGQ1IDczZjk3N2ExIDFlNzk0ODExJ1xuICBdXG59KTtcblxuZGVmaW5lQ3VydmUoJ3AyMjQnLCB7XG4gIHR5cGU6ICdzaG9ydCcsXG4gIHByaW1lOiAncDIyNCcsXG4gIHA6ICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiAwMDAwMDAwMCAwMDAwMDAwMCAwMDAwMDAwMScsXG4gIGE6ICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZSBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZScsXG4gIGI6ICdiNDA1MGE4NSAwYzA0YjNhYiBmNTQxMzI1NiA1MDQ0YjBiNyBkN2JmZDhiYSAyNzBiMzk0MyAyMzU1ZmZiNCcsXG4gIG46ICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmMTZhMiBlMGI4ZjAzZSAxM2RkMjk0NSA1YzVjMmEzZCcsXG4gIGhhc2g6IGhhc2guc2hhMjU2LFxuICBnUmVkOiBmYWxzZSxcbiAgZzogW1xuICAgICdiNzBlMGNiZCA2YmI0YmY3ZiAzMjEzOTBiOSA0YTAzYzFkMyA1NmMyMTEyMiAzNDMyODBkNiAxMTVjMWQyMScsXG4gICAgJ2JkMzc2Mzg4IGI1ZjcyM2ZiIDRjMjJkZmU2IGNkNDM3NWEwIDVhMDc0NzY0IDQ0ZDU4MTk5IDg1MDA3ZTM0J1xuICBdXG59KTtcblxuZGVmaW5lQ3VydmUoJ3AyNTYnLCB7XG4gIHR5cGU6ICdzaG9ydCcsXG4gIHByaW1lOiBudWxsLFxuICBwOiAnZmZmZmZmZmYgMDAwMDAwMDEgMDAwMDAwMDAgMDAwMDAwMDAgMDAwMDAwMDAgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYnLFxuICBhOiAnZmZmZmZmZmYgMDAwMDAwMDEgMDAwMDAwMDAgMDAwMDAwMDAgMDAwMDAwMDAgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmMnLFxuICBiOiAnNWFjNjM1ZDggYWEzYTkzZTcgYjNlYmJkNTUgNzY5ODg2YmMgNjUxZDA2YjAgY2M1M2IwZjYgM2JjZTNjM2UgMjdkMjYwNGInLFxuICBuOiAnZmZmZmZmZmYgMDAwMDAwMDAgZmZmZmZmZmYgZmZmZmZmZmYgYmNlNmZhYWQgYTcxNzllODQgZjNiOWNhYzIgZmM2MzI1NTEnLFxuICBoYXNoOiBoYXNoLnNoYTI1NixcbiAgZ1JlZDogZmFsc2UsXG4gIGc6IFtcbiAgICAnNmIxN2QxZjIgZTEyYzQyNDcgZjhiY2U2ZTUgNjNhNDQwZjIgNzcwMzdkODEgMmRlYjMzYTAgZjRhMTM5NDUgZDg5OGMyOTYnLFxuICAgICc0ZmUzNDJlMiBmZTFhN2Y5YiA4ZWU3ZWI0YSA3YzBmOWUxNiAyYmNlMzM1NyA2YjMxNWVjZSBjYmI2NDA2OCAzN2JmNTFmNSdcbiAgXVxufSk7XG5cbmRlZmluZUN1cnZlKCdwMzg0Jywge1xuICB0eXBlOiAnc2hvcnQnLFxuICBwcmltZTogbnVsbCxcbiAgcDogJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmICcgK1xuICAgICAnZmZmZmZmZmUgZmZmZmZmZmYgMDAwMDAwMDAgMDAwMDAwMDAgZmZmZmZmZmYnLFxuICBhOiAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgJyArXG4gICAgICdmZmZmZmZmZSBmZmZmZmZmZiAwMDAwMDAwMCAwMDAwMDAwMCBmZmZmZmZmYycsXG4gIGI6ICdiMzMxMmZhNyBlMjNlZTdlNCA5ODhlMDU2YiBlM2Y4MmQxOSAxODFkOWM2ZSBmZTgxNDExMiAwMzE0MDg4ZiAnICtcbiAgICAgJzUwMTM4NzVhIGM2NTYzOThkIDhhMmVkMTlkIDJhODVjOGVkIGQzZWMyYWVmJyxcbiAgbjogJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGM3NjM0ZDgxICcgK1xuICAgICAnZjQzNzJkZGYgNTgxYTBkYjIgNDhiMGE3N2EgZWNlYzE5NmEgY2NjNTI5NzMnLFxuICBoYXNoOiBoYXNoLnNoYTM4NCxcbiAgZ1JlZDogZmFsc2UsXG4gIGc6IFtcbiAgICAnYWE4N2NhMjIgYmU4YjA1MzcgOGViMWM3MWUgZjMyMGFkNzQgNmUxZDNiNjIgOGJhNzliOTggNTlmNzQxZTAgODI1NDJhMzggJyArXG4gICAgJzU1MDJmMjVkIGJmNTUyOTZjIDNhNTQ1ZTM4IDcyNzYwYWI3JyxcbiAgICAnMzYxN2RlNGEgOTYyNjJjNmYgNWQ5ZTk4YmYgOTI5MmRjMjkgZjhmNDFkYmQgMjg5YTE0N2MgZTlkYTMxMTMgYjVmMGI4YzAgJyArXG4gICAgJzBhNjBiMWNlIDFkN2U4MTlkIDdhNDMxZDdjIDkwZWEwZTVmJ1xuICBdXG59KTtcblxuZGVmaW5lQ3VydmUoJ3A1MjEnLCB7XG4gIHR5cGU6ICdzaG9ydCcsXG4gIHByaW1lOiBudWxsLFxuICBwOiAnMDAwMDAxZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgJyArXG4gICAgICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiAnICtcbiAgICAgJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmJyxcbiAgYTogJzAwMDAwMWZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmICcgK1xuICAgICAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgJyArXG4gICAgICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmYycsXG4gIGI6ICcwMDAwMDA1MSA5NTNlYjk2MSA4ZTFjOWExZiA5MjlhMjFhMCBiNjg1NDBlZSBhMmRhNzI1YiAnICtcbiAgICAgJzk5YjMxNWYzIGI4YjQ4OTkxIDhlZjEwOWUxIDU2MTkzOTUxIGVjN2U5MzdiIDE2NTJjMGJkICcgK1xuICAgICAnM2JiMWJmMDcgMzU3M2RmODggM2QyYzM0ZjEgZWY0NTFmZDQgNmI1MDNmMDAnLFxuICBuOiAnMDAwMDAxZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgJyArXG4gICAgICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmYSA1MTg2ODc4MyBiZjJmOTY2YiA3ZmNjMDE0OCAnICtcbiAgICAgJ2Y3MDlhNWQwIDNiYjVjOWI4IDg5OWM0N2FlIGJiNmZiNzFlIDkxMzg2NDA5JyxcbiAgaGFzaDogaGFzaC5zaGE1MTIsXG4gIGdSZWQ6IGZhbHNlLFxuICBnOiBbXG4gICAgJzAwMDAwMGM2IDg1OGUwNmI3IDA0MDRlOWNkIDllM2VjYjY2IDIzOTViNDQyIDljNjQ4MTM5ICcgK1xuICAgICcwNTNmYjUyMSBmODI4YWY2MCA2YjRkM2RiYSBhMTRiNWU3NyBlZmU3NTkyOCBmZTFkYzEyNyAnICtcbiAgICAnYTJmZmE4ZGUgMzM0OGIzYzEgODU2YTQyOWIgZjk3ZTdlMzEgYzJlNWJkNjYnLFxuICAgICcwMDAwMDExOCAzOTI5NmE3OCA5YTNiYzAwNCA1YzhhNWZiNCAyYzdkMWJkOSA5OGY1NDQ0OSAnICtcbiAgICAnNTc5YjQ0NjggMTdhZmJkMTcgMjczZTY2MmMgOTdlZTcyOTkgNWVmNDI2NDAgYzU1MGI5MDEgJyArXG4gICAgJzNmYWQwNzYxIDM1M2M3MDg2IGEyNzJjMjQwIDg4YmU5NDc2IDlmZDE2NjUwJ1xuICBdXG59KTtcblxuZGVmaW5lQ3VydmUoJ2N1cnZlMjU1MTknLCB7XG4gIHR5cGU6ICdtb250JyxcbiAgcHJpbWU6ICdwMjU1MTknLFxuICBwOiAnN2ZmZmZmZmZmZmZmZmZmZiBmZmZmZmZmZmZmZmZmZmZmIGZmZmZmZmZmZmZmZmZmZmYgZmZmZmZmZmZmZmZmZmZlZCcsXG4gIGE6ICc3NmQwNicsXG4gIGI6ICcwJyxcbiAgbjogJzEwMDAwMDAwMDAwMDAwMDAgMDAwMDAwMDAwMDAwMDAwMCAxNGRlZjlkZWEyZjc5Y2Q2IDU4MTI2MzFhNWNmNWQzZWQnLFxuICBoYXNoOiBoYXNoLnNoYTI1NixcbiAgZ1JlZDogZmFsc2UsXG4gIGc6IFtcbiAgICAnOSdcbiAgXVxufSk7XG5cbmRlZmluZUN1cnZlKCdlZDI1NTE5Jywge1xuICB0eXBlOiAnZWR3YXJkcycsXG4gIHByaW1lOiAncDI1NTE5JyxcbiAgcDogJzdmZmZmZmZmZmZmZmZmZmYgZmZmZmZmZmZmZmZmZmZmZiBmZmZmZmZmZmZmZmZmZmZmIGZmZmZmZmZmZmZmZmZmZWQnLFxuICBhOiAnLTEnLFxuICBjOiAnMScsXG4gIC8vIC0xMjE2NjUgKiAoMTIxNjY2XigtMSkpIChtb2QgUClcbiAgZDogJzUyMDM2Y2VlMmI2ZmZlNzMgOGNjNzQwNzk3Nzc5ZTg5OCAwMDcwMGE0ZDQxNDFkOGFiIDc1ZWI0ZGNhMTM1OTc4YTMnLFxuICBuOiAnMTAwMDAwMDAwMDAwMDAwMCAwMDAwMDAwMDAwMDAwMDAwIDE0ZGVmOWRlYTJmNzljZDYgNTgxMjYzMWE1Y2Y1ZDNlZCcsXG4gIGhhc2g6IGhhc2guc2hhMjU2LFxuICBnUmVkOiBmYWxzZSxcbiAgZzogW1xuICAgICcyMTY5MzZkM2NkNmU1M2ZlYzBhNGUyMzFmZGQ2ZGM1YzY5MmNjNzYwOTUyNWE3YjJjOTU2MmQ2MDhmMjVkNTFhJyxcblxuICAgIC8vIDQvNVxuICAgICc2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjU4J1xuICBdXG59KTtcblxudmFyIHByZTtcbnRyeSB7XG4gIHByZSA9IHJlcXVpcmUoJy4vcHJlY29tcHV0ZWQvc2VjcDI1NmsxJyk7XG59IGNhdGNoIChlKSB7XG4gIHByZSA9IHVuZGVmaW5lZDtcbn1cblxuZGVmaW5lQ3VydmUoJ3NlY3AyNTZrMScsIHtcbiAgdHlwZTogJ3Nob3J0JyxcbiAgcHJpbWU6ICdrMjU2JyxcbiAgcDogJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZlIGZmZmZmYzJmJyxcbiAgYTogJzAnLFxuICBiOiAnNycsXG4gIG46ICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZSBiYWFlZGNlNiBhZjQ4YTAzYiBiZmQyNWU4YyBkMDM2NDE0MScsXG4gIGg6ICcxJyxcbiAgaGFzaDogaGFzaC5zaGEyNTYsXG5cbiAgLy8gUHJlY29tcHV0ZWQgZW5kb21vcnBoaXNtXG4gIGJldGE6ICc3YWU5NmEyYjY1N2MwNzEwNmU2NDQ3OWVhYzM0MzRlOTljZjA0OTc1MTJmNTg5OTVjMTM5NmMyODcxOTUwMWVlJyxcbiAgbGFtYmRhOiAnNTM2M2FkNGNjMDVjMzBlMGE1MjYxYzAyODgxMjY0NWExMjJlMjJlYTIwODE2Njc4ZGYwMjk2N2MxYjIzYmQ3MicsXG4gIGJhc2lzOiBbXG4gICAge1xuICAgICAgYTogJzMwODZkMjIxYTdkNDZiY2RlODZjOTBlNDkyODRlYjE1JyxcbiAgICAgIGI6ICctZTQ0MzdlZDYwMTBlODgyODZmNTQ3ZmE5MGFiZmU0YzMnXG4gICAgfSxcbiAgICB7XG4gICAgICBhOiAnMTE0Y2E1MGY3YThlMmYzZjY1N2MxMTA4ZDlkNDRjZmQ4JyxcbiAgICAgIGI6ICczMDg2ZDIyMWE3ZDQ2YmNkZTg2YzkwZTQ5Mjg0ZWIxNSdcbiAgICB9XG4gIF0sXG5cbiAgZ1JlZDogZmFsc2UsXG4gIGc6IFtcbiAgICAnNzliZTY2N2VmOWRjYmJhYzU1YTA2Mjk1Y2U4NzBiMDcwMjliZmNkYjJkY2UyOGQ5NTlmMjgxNWIxNmY4MTc5OCcsXG4gICAgJzQ4M2FkYTc3MjZhM2M0NjU1ZGE0ZmJmYzBlMTEwOGE4ZmQxN2I0NDhhNjg1NTQxOTljNDdkMDhmZmIxMGQ0YjgnLFxuICAgIHByZVxuICBdXG59KTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEJOID0gcmVxdWlyZSgnYm4uanMnKTtcbnZhciBlbGxpcHRpYyA9IHJlcXVpcmUoJy4uLy4uL2VsbGlwdGljJyk7XG52YXIgdXRpbHMgPSBlbGxpcHRpYy51dGlscztcbnZhciBhc3NlcnQgPSB1dGlscy5hc3NlcnQ7XG5cbnZhciBLZXlQYWlyID0gcmVxdWlyZSgnLi9rZXknKTtcbnZhciBTaWduYXR1cmUgPSByZXF1aXJlKCcuL3NpZ25hdHVyZScpO1xuXG5mdW5jdGlvbiBFQyhvcHRpb25zKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBFQykpXG4gICAgcmV0dXJuIG5ldyBFQyhvcHRpb25zKTtcblxuICAvLyBTaG9ydGN1dCBgZWxsaXB0aWMuZWMoY3VydmUtbmFtZSlgXG4gIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ3N0cmluZycpIHtcbiAgICBhc3NlcnQoZWxsaXB0aWMuY3VydmVzLmhhc093blByb3BlcnR5KG9wdGlvbnMpLCAnVW5rbm93biBjdXJ2ZSAnICsgb3B0aW9ucyk7XG5cbiAgICBvcHRpb25zID0gZWxsaXB0aWMuY3VydmVzW29wdGlvbnNdO1xuICB9XG5cbiAgLy8gU2hvcnRjdXQgZm9yIGBlbGxpcHRpYy5lYyhlbGxpcHRpYy5jdXJ2ZXMuY3VydmVOYW1lKWBcbiAgaWYgKG9wdGlvbnMgaW5zdGFuY2VvZiBlbGxpcHRpYy5jdXJ2ZXMuUHJlc2V0Q3VydmUpXG4gICAgb3B0aW9ucyA9IHsgY3VydmU6IG9wdGlvbnMgfTtcblxuICB0aGlzLmN1cnZlID0gb3B0aW9ucy5jdXJ2ZS5jdXJ2ZTtcbiAgdGhpcy5uID0gdGhpcy5jdXJ2ZS5uO1xuICB0aGlzLm5oID0gdGhpcy5uLnVzaHJuKDEpO1xuICB0aGlzLmcgPSB0aGlzLmN1cnZlLmc7XG5cbiAgLy8gUG9pbnQgb24gY3VydmVcbiAgdGhpcy5nID0gb3B0aW9ucy5jdXJ2ZS5nO1xuICB0aGlzLmcucHJlY29tcHV0ZShvcHRpb25zLmN1cnZlLm4uYml0TGVuZ3RoKCkgKyAxKTtcblxuICAvLyBIYXNoIGZvciBmdW5jdGlvbiBmb3IgRFJCR1xuICB0aGlzLmhhc2ggPSBvcHRpb25zLmhhc2ggfHwgb3B0aW9ucy5jdXJ2ZS5oYXNoO1xufVxubW9kdWxlLmV4cG9ydHMgPSBFQztcblxuRUMucHJvdG90eXBlLmtleVBhaXIgPSBmdW5jdGlvbiBrZXlQYWlyKG9wdGlvbnMpIHtcbiAgcmV0dXJuIG5ldyBLZXlQYWlyKHRoaXMsIG9wdGlvbnMpO1xufTtcblxuRUMucHJvdG90eXBlLmtleUZyb21Qcml2YXRlID0gZnVuY3Rpb24ga2V5RnJvbVByaXZhdGUocHJpdiwgZW5jKSB7XG4gIHJldHVybiBLZXlQYWlyLmZyb21Qcml2YXRlKHRoaXMsIHByaXYsIGVuYyk7XG59O1xuXG5FQy5wcm90b3R5cGUua2V5RnJvbVB1YmxpYyA9IGZ1bmN0aW9uIGtleUZyb21QdWJsaWMocHViLCBlbmMpIHtcbiAgcmV0dXJuIEtleVBhaXIuZnJvbVB1YmxpYyh0aGlzLCBwdWIsIGVuYyk7XG59O1xuXG5FQy5wcm90b3R5cGUuZ2VuS2V5UGFpciA9IGZ1bmN0aW9uIGdlbktleVBhaXIob3B0aW9ucykge1xuICBpZiAoIW9wdGlvbnMpXG4gICAgb3B0aW9ucyA9IHt9O1xuXG4gIC8vIEluc3RhbnRpYXRlIEhtYWNfRFJCR1xuICB2YXIgZHJiZyA9IG5ldyBlbGxpcHRpYy5obWFjRFJCRyh7XG4gICAgaGFzaDogdGhpcy5oYXNoLFxuICAgIHBlcnM6IG9wdGlvbnMucGVycyxcbiAgICBlbnRyb3B5OiBvcHRpb25zLmVudHJvcHkgfHwgZWxsaXB0aWMucmFuZCh0aGlzLmhhc2guaG1hY1N0cmVuZ3RoKSxcbiAgICBub25jZTogdGhpcy5uLnRvQXJyYXkoKVxuICB9KTtcblxuICB2YXIgYnl0ZXMgPSB0aGlzLm4uYnl0ZUxlbmd0aCgpO1xuICB2YXIgbnMyID0gdGhpcy5uLnN1YihuZXcgQk4oMikpO1xuICBkbyB7XG4gICAgdmFyIHByaXYgPSBuZXcgQk4oZHJiZy5nZW5lcmF0ZShieXRlcykpO1xuICAgIGlmIChwcml2LmNtcChuczIpID4gMClcbiAgICAgIGNvbnRpbnVlO1xuXG4gICAgcHJpdi5pYWRkbigxKTtcbiAgICByZXR1cm4gdGhpcy5rZXlGcm9tUHJpdmF0ZShwcml2KTtcbiAgfSB3aGlsZSAodHJ1ZSk7XG59O1xuXG5FQy5wcm90b3R5cGUuX3RydW5jYXRlVG9OID0gZnVuY3Rpb24gdHJ1bmNhdGVUb04obXNnLCB0cnVuY09ubHkpIHtcbiAgdmFyIGRlbHRhID0gbXNnLmJ5dGVMZW5ndGgoKSAqIDggLSB0aGlzLm4uYml0TGVuZ3RoKCk7XG4gIGlmIChkZWx0YSA+IDApXG4gICAgbXNnID0gbXNnLnVzaHJuKGRlbHRhKTtcbiAgaWYgKCF0cnVuY09ubHkgJiYgbXNnLmNtcCh0aGlzLm4pID49IDApXG4gICAgcmV0dXJuIG1zZy5zdWIodGhpcy5uKTtcbiAgZWxzZVxuICAgIHJldHVybiBtc2c7XG59O1xuXG5FQy5wcm90b3R5cGUuc2lnbiA9IGZ1bmN0aW9uIHNpZ24obXNnLCBrZXksIGVuYywgb3B0aW9ucykge1xuICBpZiAodHlwZW9mIGVuYyA9PT0gJ29iamVjdCcpIHtcbiAgICBvcHRpb25zID0gZW5jO1xuICAgIGVuYyA9IG51bGw7XG4gIH1cbiAgaWYgKCFvcHRpb25zKVxuICAgIG9wdGlvbnMgPSB7fTtcblxuICBrZXkgPSB0aGlzLmtleUZyb21Qcml2YXRlKGtleSwgZW5jKTtcbiAgbXNnID0gdGhpcy5fdHJ1bmNhdGVUb04obmV3IEJOKG1zZywgMTYpKTtcblxuICAvLyBaZXJvLWV4dGVuZCBrZXkgdG8gcHJvdmlkZSBlbm91Z2ggZW50cm9weVxuICB2YXIgYnl0ZXMgPSB0aGlzLm4uYnl0ZUxlbmd0aCgpO1xuICB2YXIgYmtleSA9IGtleS5nZXRQcml2YXRlKCkudG9BcnJheSgnYmUnLCBieXRlcyk7XG5cbiAgLy8gWmVyby1leHRlbmQgbm9uY2UgdG8gaGF2ZSB0aGUgc2FtZSBieXRlIHNpemUgYXMgTlxuICB2YXIgbm9uY2UgPSBtc2cudG9BcnJheSgnYmUnLCBieXRlcyk7XG5cbiAgLy8gSW5zdGFudGlhdGUgSG1hY19EUkJHXG4gIHZhciBkcmJnID0gbmV3IGVsbGlwdGljLmhtYWNEUkJHKHtcbiAgICBoYXNoOiB0aGlzLmhhc2gsXG4gICAgZW50cm9weTogYmtleSxcbiAgICBub25jZTogbm9uY2UsXG4gICAgcGVyczogb3B0aW9ucy5wZXJzLFxuICAgIHBlcnNFbmM6IG9wdGlvbnMucGVyc0VuY1xuICB9KTtcblxuICAvLyBOdW1iZXIgb2YgYnl0ZXMgdG8gZ2VuZXJhdGVcbiAgdmFyIG5zMSA9IHRoaXMubi5zdWIobmV3IEJOKDEpKTtcblxuICBmb3IgKHZhciBpdGVyID0gMDsgdHJ1ZTsgaXRlcisrKSB7XG4gICAgdmFyIGsgPSBvcHRpb25zLmsgP1xuICAgICAgICBvcHRpb25zLmsoaXRlcikgOlxuICAgICAgICBuZXcgQk4oZHJiZy5nZW5lcmF0ZSh0aGlzLm4uYnl0ZUxlbmd0aCgpKSk7XG4gICAgayA9IHRoaXMuX3RydW5jYXRlVG9OKGssIHRydWUpO1xuICAgIGlmIChrLmNtcG4oMSkgPD0gMCB8fCBrLmNtcChuczEpID49IDApXG4gICAgICBjb250aW51ZTtcblxuICAgIHZhciBrcCA9IHRoaXMuZy5tdWwoayk7XG4gICAgaWYgKGtwLmlzSW5maW5pdHkoKSlcbiAgICAgIGNvbnRpbnVlO1xuXG4gICAgdmFyIGtwWCA9IGtwLmdldFgoKTtcbiAgICB2YXIgciA9IGtwWC51bW9kKHRoaXMubik7XG4gICAgaWYgKHIuY21wbigwKSA9PT0gMClcbiAgICAgIGNvbnRpbnVlO1xuXG4gICAgdmFyIHMgPSBrLmludm0odGhpcy5uKS5tdWwoci5tdWwoa2V5LmdldFByaXZhdGUoKSkuaWFkZChtc2cpKTtcbiAgICBzID0gcy51bW9kKHRoaXMubik7XG4gICAgaWYgKHMuY21wbigwKSA9PT0gMClcbiAgICAgIGNvbnRpbnVlO1xuXG4gICAgdmFyIHJlY292ZXJ5UGFyYW0gPSAoa3AuZ2V0WSgpLmlzT2RkKCkgPyAxIDogMCkgfFxuICAgICAgICAgICAgICAgICAgICAgICAgKGtwWC5jbXAocikgIT09IDAgPyAyIDogMCk7XG5cbiAgICAvLyBVc2UgY29tcGxlbWVudCBvZiBgc2AsIGlmIGl0IGlzID4gYG4gLyAyYFxuICAgIGlmIChvcHRpb25zLmNhbm9uaWNhbCAmJiBzLmNtcCh0aGlzLm5oKSA+IDApIHtcbiAgICAgIHMgPSB0aGlzLm4uc3ViKHMpO1xuICAgICAgcmVjb3ZlcnlQYXJhbSBePSAxO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgU2lnbmF0dXJlKHsgcjogciwgczogcywgcmVjb3ZlcnlQYXJhbTogcmVjb3ZlcnlQYXJhbSB9KTtcbiAgfVxufTtcblxuRUMucHJvdG90eXBlLnZlcmlmeSA9IGZ1bmN0aW9uIHZlcmlmeShtc2csIHNpZ25hdHVyZSwga2V5LCBlbmMpIHtcbiAgbXNnID0gdGhpcy5fdHJ1bmNhdGVUb04obmV3IEJOKG1zZywgMTYpKTtcbiAga2V5ID0gdGhpcy5rZXlGcm9tUHVibGljKGtleSwgZW5jKTtcbiAgc2lnbmF0dXJlID0gbmV3IFNpZ25hdHVyZShzaWduYXR1cmUsICdoZXgnKTtcblxuICAvLyBQZXJmb3JtIHByaW1pdGl2ZSB2YWx1ZXMgdmFsaWRhdGlvblxuICB2YXIgciA9IHNpZ25hdHVyZS5yO1xuICB2YXIgcyA9IHNpZ25hdHVyZS5zO1xuICBpZiAoci5jbXBuKDEpIDwgMCB8fCByLmNtcCh0aGlzLm4pID49IDApXG4gICAgcmV0dXJuIGZhbHNlO1xuICBpZiAocy5jbXBuKDEpIDwgMCB8fCBzLmNtcCh0aGlzLm4pID49IDApXG4gICAgcmV0dXJuIGZhbHNlO1xuXG4gIC8vIFZhbGlkYXRlIHNpZ25hdHVyZVxuICB2YXIgc2ludiA9IHMuaW52bSh0aGlzLm4pO1xuICB2YXIgdTEgPSBzaW52Lm11bChtc2cpLnVtb2QodGhpcy5uKTtcbiAgdmFyIHUyID0gc2ludi5tdWwocikudW1vZCh0aGlzLm4pO1xuXG4gIGlmICghdGhpcy5jdXJ2ZS5fbWF4d2VsbFRyaWNrKSB7XG4gICAgdmFyIHAgPSB0aGlzLmcubXVsQWRkKHUxLCBrZXkuZ2V0UHVibGljKCksIHUyKTtcbiAgICBpZiAocC5pc0luZmluaXR5KCkpXG4gICAgICByZXR1cm4gZmFsc2U7XG5cbiAgICByZXR1cm4gcC5nZXRYKCkudW1vZCh0aGlzLm4pLmNtcChyKSA9PT0gMDtcbiAgfVxuXG4gIC8vIE5PVEU6IEdyZWcgTWF4d2VsbCdzIHRyaWNrLCBpbnNwaXJlZCBieTpcbiAgLy8gaHR0cHM6Ly9naXQuaW8vdmFkM0tcblxuICB2YXIgcCA9IHRoaXMuZy5qbXVsQWRkKHUxLCBrZXkuZ2V0UHVibGljKCksIHUyKTtcbiAgaWYgKHAuaXNJbmZpbml0eSgpKVxuICAgIHJldHVybiBmYWxzZTtcblxuICAvLyBDb21wYXJlIGBwLnhgIG9mIEphY29iaWFuIHBvaW50IHdpdGggYHJgLFxuICAvLyB0aGlzIHdpbGwgZG8gYHAueCA9PSByICogcC56XjJgIGluc3RlYWQgb2YgbXVsdGlwbHlpbmcgYHAueGAgYnkgdGhlXG4gIC8vIGludmVyc2Ugb2YgYHAuel4yYFxuICByZXR1cm4gcC5lcVhUb1Aocik7XG59O1xuXG5FQy5wcm90b3R5cGUucmVjb3ZlclB1YktleSA9IGZ1bmN0aW9uKG1zZywgc2lnbmF0dXJlLCBqLCBlbmMpIHtcbiAgYXNzZXJ0KCgzICYgaikgPT09IGosICdUaGUgcmVjb3ZlcnkgcGFyYW0gaXMgbW9yZSB0aGFuIHR3byBiaXRzJyk7XG4gIHNpZ25hdHVyZSA9IG5ldyBTaWduYXR1cmUoc2lnbmF0dXJlLCBlbmMpO1xuXG4gIHZhciBuID0gdGhpcy5uO1xuICB2YXIgZSA9IG5ldyBCTihtc2cpO1xuICB2YXIgciA9IHNpZ25hdHVyZS5yO1xuICB2YXIgcyA9IHNpZ25hdHVyZS5zO1xuXG4gIC8vIEEgc2V0IExTQiBzaWduaWZpZXMgdGhhdCB0aGUgeS1jb29yZGluYXRlIGlzIG9kZFxuICB2YXIgaXNZT2RkID0gaiAmIDE7XG4gIHZhciBpc1NlY29uZEtleSA9IGogPj4gMTtcbiAgaWYgKHIuY21wKHRoaXMuY3VydmUucC51bW9kKHRoaXMuY3VydmUubikpID49IDAgJiYgaXNTZWNvbmRLZXkpXG4gICAgdGhyb3cgbmV3IEVycm9yKCdVbmFibGUgdG8gZmluZCBzZW5jb25kIGtleSBjYW5kaW5hdGUnKTtcblxuICAvLyAxLjEuIExldCB4ID0gciArIGpuLlxuICBpZiAoaXNTZWNvbmRLZXkpXG4gICAgciA9IHRoaXMuY3VydmUucG9pbnRGcm9tWChyLmFkZCh0aGlzLmN1cnZlLm4pLCBpc1lPZGQpO1xuICBlbHNlXG4gICAgciA9IHRoaXMuY3VydmUucG9pbnRGcm9tWChyLCBpc1lPZGQpO1xuXG4gIHZhciBlTmVnID0gbi5zdWIoZSk7XG5cbiAgLy8gMS42LjEgQ29tcHV0ZSBRID0gcl4tMSAoc1IgLSAgZUcpXG4gIC8vICAgICAgICAgICAgICAgUSA9IHJeLTEgKHNSICsgLWVHKVxuICB2YXIgckludiA9IHNpZ25hdHVyZS5yLmludm0obik7XG4gIHJldHVybiB0aGlzLmcubXVsQWRkKGVOZWcsIHIsIHMpLm11bChySW52KTtcbn07XG5cbkVDLnByb3RvdHlwZS5nZXRLZXlSZWNvdmVyeVBhcmFtID0gZnVuY3Rpb24oZSwgc2lnbmF0dXJlLCBRLCBlbmMpIHtcbiAgc2lnbmF0dXJlID0gbmV3IFNpZ25hdHVyZShzaWduYXR1cmUsIGVuYyk7XG4gIGlmIChzaWduYXR1cmUucmVjb3ZlcnlQYXJhbSAhPT0gbnVsbClcbiAgICByZXR1cm4gc2lnbmF0dXJlLnJlY292ZXJ5UGFyYW07XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCA0OyBpKyspIHtcbiAgICB2YXIgUXByaW1lO1xuICAgIHRyeSB7XG4gICAgICBRcHJpbWUgPSB0aGlzLnJlY292ZXJQdWJLZXkoZSwgc2lnbmF0dXJlLCBpKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBpZiAoUXByaW1lLmVxKFEpKVxuICAgICAgcmV0dXJuIGk7XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKCdVbmFibGUgdG8gZmluZCB2YWxpZCByZWNvdmVyeSBmYWN0b3InKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBCTiA9IHJlcXVpcmUoJ2JuLmpzJyk7XG5cbmZ1bmN0aW9uIEtleVBhaXIoZWMsIG9wdGlvbnMpIHtcbiAgdGhpcy5lYyA9IGVjO1xuICB0aGlzLnByaXYgPSBudWxsO1xuICB0aGlzLnB1YiA9IG51bGw7XG5cbiAgLy8gS2V5UGFpcihlYywgeyBwcml2OiAuLi4sIHB1YjogLi4uIH0pXG4gIGlmIChvcHRpb25zLnByaXYpXG4gICAgdGhpcy5faW1wb3J0UHJpdmF0ZShvcHRpb25zLnByaXYsIG9wdGlvbnMucHJpdkVuYyk7XG4gIGlmIChvcHRpb25zLnB1YilcbiAgICB0aGlzLl9pbXBvcnRQdWJsaWMob3B0aW9ucy5wdWIsIG9wdGlvbnMucHViRW5jKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gS2V5UGFpcjtcblxuS2V5UGFpci5mcm9tUHVibGljID0gZnVuY3Rpb24gZnJvbVB1YmxpYyhlYywgcHViLCBlbmMpIHtcbiAgaWYgKHB1YiBpbnN0YW5jZW9mIEtleVBhaXIpXG4gICAgcmV0dXJuIHB1YjtcblxuICByZXR1cm4gbmV3IEtleVBhaXIoZWMsIHtcbiAgICBwdWI6IHB1YixcbiAgICBwdWJFbmM6IGVuY1xuICB9KTtcbn07XG5cbktleVBhaXIuZnJvbVByaXZhdGUgPSBmdW5jdGlvbiBmcm9tUHJpdmF0ZShlYywgcHJpdiwgZW5jKSB7XG4gIGlmIChwcml2IGluc3RhbmNlb2YgS2V5UGFpcilcbiAgICByZXR1cm4gcHJpdjtcblxuICByZXR1cm4gbmV3IEtleVBhaXIoZWMsIHtcbiAgICBwcml2OiBwcml2LFxuICAgIHByaXZFbmM6IGVuY1xuICB9KTtcbn07XG5cbktleVBhaXIucHJvdG90eXBlLnZhbGlkYXRlID0gZnVuY3Rpb24gdmFsaWRhdGUoKSB7XG4gIHZhciBwdWIgPSB0aGlzLmdldFB1YmxpYygpO1xuXG4gIGlmIChwdWIuaXNJbmZpbml0eSgpKVxuICAgIHJldHVybiB7IHJlc3VsdDogZmFsc2UsIHJlYXNvbjogJ0ludmFsaWQgcHVibGljIGtleScgfTtcbiAgaWYgKCFwdWIudmFsaWRhdGUoKSlcbiAgICByZXR1cm4geyByZXN1bHQ6IGZhbHNlLCByZWFzb246ICdQdWJsaWMga2V5IGlzIG5vdCBhIHBvaW50JyB9O1xuICBpZiAoIXB1Yi5tdWwodGhpcy5lYy5jdXJ2ZS5uKS5pc0luZmluaXR5KCkpXG4gICAgcmV0dXJuIHsgcmVzdWx0OiBmYWxzZSwgcmVhc29uOiAnUHVibGljIGtleSAqIE4gIT0gTycgfTtcblxuICByZXR1cm4geyByZXN1bHQ6IHRydWUsIHJlYXNvbjogbnVsbCB9O1xufTtcblxuS2V5UGFpci5wcm90b3R5cGUuZ2V0UHVibGljID0gZnVuY3Rpb24gZ2V0UHVibGljKGNvbXBhY3QsIGVuYykge1xuICAvLyBjb21wYWN0IGlzIG9wdGlvbmFsIGFyZ3VtZW50XG4gIGlmICh0eXBlb2YgY29tcGFjdCA9PT0gJ3N0cmluZycpIHtcbiAgICBlbmMgPSBjb21wYWN0O1xuICAgIGNvbXBhY3QgPSBudWxsO1xuICB9XG5cbiAgaWYgKCF0aGlzLnB1YilcbiAgICB0aGlzLnB1YiA9IHRoaXMuZWMuZy5tdWwodGhpcy5wcml2KTtcblxuICBpZiAoIWVuYylcbiAgICByZXR1cm4gdGhpcy5wdWI7XG5cbiAgcmV0dXJuIHRoaXMucHViLmVuY29kZShlbmMsIGNvbXBhY3QpO1xufTtcblxuS2V5UGFpci5wcm90b3R5cGUuZ2V0UHJpdmF0ZSA9IGZ1bmN0aW9uIGdldFByaXZhdGUoZW5jKSB7XG4gIGlmIChlbmMgPT09ICdoZXgnKVxuICAgIHJldHVybiB0aGlzLnByaXYudG9TdHJpbmcoMTYsIDIpO1xuICBlbHNlXG4gICAgcmV0dXJuIHRoaXMucHJpdjtcbn07XG5cbktleVBhaXIucHJvdG90eXBlLl9pbXBvcnRQcml2YXRlID0gZnVuY3Rpb24gX2ltcG9ydFByaXZhdGUoa2V5LCBlbmMpIHtcbiAgdGhpcy5wcml2ID0gbmV3IEJOKGtleSwgZW5jIHx8IDE2KTtcblxuICAvLyBFbnN1cmUgdGhhdCB0aGUgcHJpdiB3b24ndCBiZSBiaWdnZXIgdGhhbiBuLCBvdGhlcndpc2Ugd2UgbWF5IGZhaWxcbiAgLy8gaW4gZml4ZWQgbXVsdGlwbGljYXRpb24gbWV0aG9kXG4gIHRoaXMucHJpdiA9IHRoaXMucHJpdi51bW9kKHRoaXMuZWMuY3VydmUubik7XG59O1xuXG5LZXlQYWlyLnByb3RvdHlwZS5faW1wb3J0UHVibGljID0gZnVuY3Rpb24gX2ltcG9ydFB1YmxpYyhrZXksIGVuYykge1xuICBpZiAoa2V5LnggfHwga2V5LnkpIHtcbiAgICB0aGlzLnB1YiA9IHRoaXMuZWMuY3VydmUucG9pbnQoa2V5LngsIGtleS55KTtcbiAgICByZXR1cm47XG4gIH1cbiAgdGhpcy5wdWIgPSB0aGlzLmVjLmN1cnZlLmRlY29kZVBvaW50KGtleSwgZW5jKTtcbn07XG5cbi8vIEVDREhcbktleVBhaXIucHJvdG90eXBlLmRlcml2ZSA9IGZ1bmN0aW9uIGRlcml2ZShwdWIpIHtcbiAgcmV0dXJuIHB1Yi5tdWwodGhpcy5wcml2KS5nZXRYKCk7XG59O1xuXG4vLyBFQ0RTQVxuS2V5UGFpci5wcm90b3R5cGUuc2lnbiA9IGZ1bmN0aW9uIHNpZ24obXNnLCBlbmMsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHRoaXMuZWMuc2lnbihtc2csIHRoaXMsIGVuYywgb3B0aW9ucyk7XG59O1xuXG5LZXlQYWlyLnByb3RvdHlwZS52ZXJpZnkgPSBmdW5jdGlvbiB2ZXJpZnkobXNnLCBzaWduYXR1cmUpIHtcbiAgcmV0dXJuIHRoaXMuZWMudmVyaWZ5KG1zZywgc2lnbmF0dXJlLCB0aGlzKTtcbn07XG5cbktleVBhaXIucHJvdG90eXBlLmluc3BlY3QgPSBmdW5jdGlvbiBpbnNwZWN0KCkge1xuICByZXR1cm4gJzxLZXkgcHJpdjogJyArICh0aGlzLnByaXYgJiYgdGhpcy5wcml2LnRvU3RyaW5nKDE2LCAyKSkgK1xuICAgICAgICAgJyBwdWI6ICcgKyAodGhpcy5wdWIgJiYgdGhpcy5wdWIuaW5zcGVjdCgpKSArICcgPic7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQk4gPSByZXF1aXJlKCdibi5qcycpO1xuXG52YXIgZWxsaXB0aWMgPSByZXF1aXJlKCcuLi8uLi9lbGxpcHRpYycpO1xudmFyIHV0aWxzID0gZWxsaXB0aWMudXRpbHM7XG52YXIgYXNzZXJ0ID0gdXRpbHMuYXNzZXJ0O1xuXG5mdW5jdGlvbiBTaWduYXR1cmUob3B0aW9ucywgZW5jKSB7XG4gIGlmIChvcHRpb25zIGluc3RhbmNlb2YgU2lnbmF0dXJlKVxuICAgIHJldHVybiBvcHRpb25zO1xuXG4gIGlmICh0aGlzLl9pbXBvcnRERVIob3B0aW9ucywgZW5jKSlcbiAgICByZXR1cm47XG5cbiAgYXNzZXJ0KG9wdGlvbnMuciAmJiBvcHRpb25zLnMsICdTaWduYXR1cmUgd2l0aG91dCByIG9yIHMnKTtcbiAgdGhpcy5yID0gbmV3IEJOKG9wdGlvbnMuciwgMTYpO1xuICB0aGlzLnMgPSBuZXcgQk4ob3B0aW9ucy5zLCAxNik7XG4gIGlmIChvcHRpb25zLnJlY292ZXJ5UGFyYW0gPT09IHVuZGVmaW5lZClcbiAgICB0aGlzLnJlY292ZXJ5UGFyYW0gPSBudWxsO1xuICBlbHNlXG4gICAgdGhpcy5yZWNvdmVyeVBhcmFtID0gb3B0aW9ucy5yZWNvdmVyeVBhcmFtO1xufVxubW9kdWxlLmV4cG9ydHMgPSBTaWduYXR1cmU7XG5cbmZ1bmN0aW9uIFBvc2l0aW9uKCkge1xuICB0aGlzLnBsYWNlID0gMDtcbn1cblxuZnVuY3Rpb24gZ2V0TGVuZ3RoKGJ1ZiwgcCkge1xuICB2YXIgaW5pdGlhbCA9IGJ1ZltwLnBsYWNlKytdO1xuICBpZiAoIShpbml0aWFsICYgMHg4MCkpIHtcbiAgICByZXR1cm4gaW5pdGlhbDtcbiAgfVxuICB2YXIgb2N0ZXRMZW4gPSBpbml0aWFsICYgMHhmO1xuICB2YXIgdmFsID0gMDtcbiAgZm9yICh2YXIgaSA9IDAsIG9mZiA9IHAucGxhY2U7IGkgPCBvY3RldExlbjsgaSsrLCBvZmYrKykge1xuICAgIHZhbCA8PD0gODtcbiAgICB2YWwgfD0gYnVmW29mZl07XG4gIH1cbiAgcC5wbGFjZSA9IG9mZjtcbiAgcmV0dXJuIHZhbDtcbn1cblxuZnVuY3Rpb24gcm1QYWRkaW5nKGJ1Zikge1xuICB2YXIgaSA9IDA7XG4gIHZhciBsZW4gPSBidWYubGVuZ3RoIC0gMTtcbiAgd2hpbGUgKCFidWZbaV0gJiYgIShidWZbaSArIDFdICYgMHg4MCkgJiYgaSA8IGxlbikge1xuICAgIGkrKztcbiAgfVxuICBpZiAoaSA9PT0gMCkge1xuICAgIHJldHVybiBidWY7XG4gIH1cbiAgcmV0dXJuIGJ1Zi5zbGljZShpKTtcbn1cblxuU2lnbmF0dXJlLnByb3RvdHlwZS5faW1wb3J0REVSID0gZnVuY3Rpb24gX2ltcG9ydERFUihkYXRhLCBlbmMpIHtcbiAgZGF0YSA9IHV0aWxzLnRvQXJyYXkoZGF0YSwgZW5jKTtcbiAgdmFyIHAgPSBuZXcgUG9zaXRpb24oKTtcbiAgaWYgKGRhdGFbcC5wbGFjZSsrXSAhPT0gMHgzMCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgbGVuID0gZ2V0TGVuZ3RoKGRhdGEsIHApO1xuICBpZiAoKGxlbiArIHAucGxhY2UpICE9PSBkYXRhLmxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAoZGF0YVtwLnBsYWNlKytdICE9PSAweDAyKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBybGVuID0gZ2V0TGVuZ3RoKGRhdGEsIHApO1xuICB2YXIgciA9IGRhdGEuc2xpY2UocC5wbGFjZSwgcmxlbiArIHAucGxhY2UpO1xuICBwLnBsYWNlICs9IHJsZW47XG4gIGlmIChkYXRhW3AucGxhY2UrK10gIT09IDB4MDIpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHNsZW4gPSBnZXRMZW5ndGgoZGF0YSwgcCk7XG4gIGlmIChkYXRhLmxlbmd0aCAhPT0gc2xlbiArIHAucGxhY2UpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHMgPSBkYXRhLnNsaWNlKHAucGxhY2UsIHNsZW4gKyBwLnBsYWNlKTtcbiAgaWYgKHJbMF0gPT09IDAgJiYgKHJbMV0gJiAweDgwKSkge1xuICAgIHIgPSByLnNsaWNlKDEpO1xuICB9XG4gIGlmIChzWzBdID09PSAwICYmIChzWzFdICYgMHg4MCkpIHtcbiAgICBzID0gcy5zbGljZSgxKTtcbiAgfVxuXG4gIHRoaXMuciA9IG5ldyBCTihyKTtcbiAgdGhpcy5zID0gbmV3IEJOKHMpO1xuICB0aGlzLnJlY292ZXJ5UGFyYW0gPSBudWxsO1xuXG4gIHJldHVybiB0cnVlO1xufTtcblxuZnVuY3Rpb24gY29uc3RydWN0TGVuZ3RoKGFyciwgbGVuKSB7XG4gIGlmIChsZW4gPCAweDgwKSB7XG4gICAgYXJyLnB1c2gobGVuKTtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIG9jdGV0cyA9IDEgKyAoTWF0aC5sb2cobGVuKSAvIE1hdGguTE4yID4+PiAzKTtcbiAgYXJyLnB1c2gob2N0ZXRzIHwgMHg4MCk7XG4gIHdoaWxlICgtLW9jdGV0cykge1xuICAgIGFyci5wdXNoKChsZW4gPj4+IChvY3RldHMgPDwgMykpICYgMHhmZik7XG4gIH1cbiAgYXJyLnB1c2gobGVuKTtcbn1cblxuU2lnbmF0dXJlLnByb3RvdHlwZS50b0RFUiA9IGZ1bmN0aW9uIHRvREVSKGVuYykge1xuICB2YXIgciA9IHRoaXMuci50b0FycmF5KCk7XG4gIHZhciBzID0gdGhpcy5zLnRvQXJyYXkoKTtcblxuICAvLyBQYWQgdmFsdWVzXG4gIGlmIChyWzBdICYgMHg4MClcbiAgICByID0gWyAwIF0uY29uY2F0KHIpO1xuICAvLyBQYWQgdmFsdWVzXG4gIGlmIChzWzBdICYgMHg4MClcbiAgICBzID0gWyAwIF0uY29uY2F0KHMpO1xuXG4gIHIgPSBybVBhZGRpbmcocik7XG4gIHMgPSBybVBhZGRpbmcocyk7XG5cbiAgd2hpbGUgKCFzWzBdICYmICEoc1sxXSAmIDB4ODApKSB7XG4gICAgcyA9IHMuc2xpY2UoMSk7XG4gIH1cbiAgdmFyIGFyciA9IFsgMHgwMiBdO1xuICBjb25zdHJ1Y3RMZW5ndGgoYXJyLCByLmxlbmd0aCk7XG4gIGFyciA9IGFyci5jb25jYXQocik7XG4gIGFyci5wdXNoKDB4MDIpO1xuICBjb25zdHJ1Y3RMZW5ndGgoYXJyLCBzLmxlbmd0aCk7XG4gIHZhciBiYWNrSGFsZiA9IGFyci5jb25jYXQocyk7XG4gIHZhciByZXMgPSBbIDB4MzAgXTtcbiAgY29uc3RydWN0TGVuZ3RoKHJlcywgYmFja0hhbGYubGVuZ3RoKTtcbiAgcmVzID0gcmVzLmNvbmNhdChiYWNrSGFsZik7XG4gIHJldHVybiB1dGlscy5lbmNvZGUocmVzLCBlbmMpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGhhc2ggPSByZXF1aXJlKCdoYXNoLmpzJyk7XG52YXIgZWxsaXB0aWMgPSByZXF1aXJlKCcuLi8uLi9lbGxpcHRpYycpO1xudmFyIHV0aWxzID0gZWxsaXB0aWMudXRpbHM7XG52YXIgYXNzZXJ0ID0gdXRpbHMuYXNzZXJ0O1xudmFyIHBhcnNlQnl0ZXMgPSB1dGlscy5wYXJzZUJ5dGVzO1xudmFyIEtleVBhaXIgPSByZXF1aXJlKCcuL2tleScpO1xudmFyIFNpZ25hdHVyZSA9IHJlcXVpcmUoJy4vc2lnbmF0dXJlJyk7XG5cbmZ1bmN0aW9uIEVERFNBKGN1cnZlKSB7XG4gIGFzc2VydChjdXJ2ZSA9PT0gJ2VkMjU1MTknLCAnb25seSB0ZXN0ZWQgd2l0aCBlZDI1NTE5IHNvIGZhcicpO1xuXG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBFRERTQSkpXG4gICAgcmV0dXJuIG5ldyBFRERTQShjdXJ2ZSk7XG5cbiAgdmFyIGN1cnZlID0gZWxsaXB0aWMuY3VydmVzW2N1cnZlXS5jdXJ2ZTtcbiAgdGhpcy5jdXJ2ZSA9IGN1cnZlO1xuICB0aGlzLmcgPSBjdXJ2ZS5nO1xuICB0aGlzLmcucHJlY29tcHV0ZShjdXJ2ZS5uLmJpdExlbmd0aCgpICsgMSk7XG5cbiAgdGhpcy5wb2ludENsYXNzID0gY3VydmUucG9pbnQoKS5jb25zdHJ1Y3RvcjtcbiAgdGhpcy5lbmNvZGluZ0xlbmd0aCA9IE1hdGguY2VpbChjdXJ2ZS5uLmJpdExlbmd0aCgpIC8gOCk7XG4gIHRoaXMuaGFzaCA9IGhhc2guc2hhNTEyO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEVERFNBO1xuXG4vKipcbiogQHBhcmFtIHtBcnJheXxTdHJpbmd9IG1lc3NhZ2UgLSBtZXNzYWdlIGJ5dGVzXG4qIEBwYXJhbSB7QXJyYXl8U3RyaW5nfEtleVBhaXJ9IHNlY3JldCAtIHNlY3JldCBieXRlcyBvciBhIGtleXBhaXJcbiogQHJldHVybnMge1NpZ25hdHVyZX0gLSBzaWduYXR1cmVcbiovXG5FRERTQS5wcm90b3R5cGUuc2lnbiA9IGZ1bmN0aW9uIHNpZ24obWVzc2FnZSwgc2VjcmV0KSB7XG4gIG1lc3NhZ2UgPSBwYXJzZUJ5dGVzKG1lc3NhZ2UpO1xuICB2YXIga2V5ID0gdGhpcy5rZXlGcm9tU2VjcmV0KHNlY3JldCk7XG4gIHZhciByID0gdGhpcy5oYXNoSW50KGtleS5tZXNzYWdlUHJlZml4KCksIG1lc3NhZ2UpO1xuICB2YXIgUiA9IHRoaXMuZy5tdWwocik7XG4gIHZhciBSZW5jb2RlZCA9IHRoaXMuZW5jb2RlUG9pbnQoUik7XG4gIHZhciBzXyA9IHRoaXMuaGFzaEludChSZW5jb2RlZCwga2V5LnB1YkJ5dGVzKCksIG1lc3NhZ2UpXG4gICAgICAgICAgICAgICAubXVsKGtleS5wcml2KCkpO1xuICB2YXIgUyA9IHIuYWRkKHNfKS51bW9kKHRoaXMuY3VydmUubik7XG4gIHJldHVybiB0aGlzLm1ha2VTaWduYXR1cmUoeyBSOiBSLCBTOiBTLCBSZW5jb2RlZDogUmVuY29kZWQgfSk7XG59O1xuXG4vKipcbiogQHBhcmFtIHtBcnJheX0gbWVzc2FnZSAtIG1lc3NhZ2UgYnl0ZXNcbiogQHBhcmFtIHtBcnJheXxTdHJpbmd8U2lnbmF0dXJlfSBzaWcgLSBzaWcgYnl0ZXNcbiogQHBhcmFtIHtBcnJheXxTdHJpbmd8UG9pbnR8S2V5UGFpcn0gcHViIC0gcHVibGljIGtleVxuKiBAcmV0dXJucyB7Qm9vbGVhbn0gLSB0cnVlIGlmIHB1YmxpYyBrZXkgbWF0Y2hlcyBzaWcgb2YgbWVzc2FnZVxuKi9cbkVERFNBLnByb3RvdHlwZS52ZXJpZnkgPSBmdW5jdGlvbiB2ZXJpZnkobWVzc2FnZSwgc2lnLCBwdWIpIHtcbiAgbWVzc2FnZSA9IHBhcnNlQnl0ZXMobWVzc2FnZSk7XG4gIHNpZyA9IHRoaXMubWFrZVNpZ25hdHVyZShzaWcpO1xuICB2YXIga2V5ID0gdGhpcy5rZXlGcm9tUHVibGljKHB1Yik7XG4gIHZhciBoID0gdGhpcy5oYXNoSW50KHNpZy5SZW5jb2RlZCgpLCBrZXkucHViQnl0ZXMoKSwgbWVzc2FnZSk7XG4gIHZhciBTRyA9IHRoaXMuZy5tdWwoc2lnLlMoKSk7XG4gIHZhciBScGx1c0FoID0gc2lnLlIoKS5hZGQoa2V5LnB1YigpLm11bChoKSk7XG4gIHJldHVybiBScGx1c0FoLmVxKFNHKTtcbn07XG5cbkVERFNBLnByb3RvdHlwZS5oYXNoSW50ID0gZnVuY3Rpb24gaGFzaEludCgpIHtcbiAgdmFyIGhhc2ggPSB0aGlzLmhhc2goKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspXG4gICAgaGFzaC51cGRhdGUoYXJndW1lbnRzW2ldKTtcbiAgcmV0dXJuIHV0aWxzLmludEZyb21MRShoYXNoLmRpZ2VzdCgpKS51bW9kKHRoaXMuY3VydmUubik7XG59O1xuXG5FRERTQS5wcm90b3R5cGUua2V5RnJvbVB1YmxpYyA9IGZ1bmN0aW9uIGtleUZyb21QdWJsaWMocHViKSB7XG4gIHJldHVybiBLZXlQYWlyLmZyb21QdWJsaWModGhpcywgcHViKTtcbn07XG5cbkVERFNBLnByb3RvdHlwZS5rZXlGcm9tU2VjcmV0ID0gZnVuY3Rpb24ga2V5RnJvbVNlY3JldChzZWNyZXQpIHtcbiAgcmV0dXJuIEtleVBhaXIuZnJvbVNlY3JldCh0aGlzLCBzZWNyZXQpO1xufTtcblxuRUREU0EucHJvdG90eXBlLm1ha2VTaWduYXR1cmUgPSBmdW5jdGlvbiBtYWtlU2lnbmF0dXJlKHNpZykge1xuICBpZiAoc2lnIGluc3RhbmNlb2YgU2lnbmF0dXJlKVxuICAgIHJldHVybiBzaWc7XG4gIHJldHVybiBuZXcgU2lnbmF0dXJlKHRoaXMsIHNpZyk7XG59O1xuXG4vKipcbiogKiBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvZHJhZnQtam9zZWZzc29uLWVkZHNhLWVkMjU1MTktMDMjc2VjdGlvbi01LjJcbipcbiogRUREU0EgZGVmaW5lcyBtZXRob2RzIGZvciBlbmNvZGluZyBhbmQgZGVjb2RpbmcgcG9pbnRzIGFuZCBpbnRlZ2Vycy4gVGhlc2UgYXJlXG4qIGhlbHBlciBjb252ZW5pZW5jZSBtZXRob2RzLCB0aGF0IHBhc3MgYWxvbmcgdG8gdXRpbGl0eSBmdW5jdGlvbnMgaW1wbGllZFxuKiBwYXJhbWV0ZXJzLlxuKlxuKi9cbkVERFNBLnByb3RvdHlwZS5lbmNvZGVQb2ludCA9IGZ1bmN0aW9uIGVuY29kZVBvaW50KHBvaW50KSB7XG4gIHZhciBlbmMgPSBwb2ludC5nZXRZKCkudG9BcnJheSgnbGUnLCB0aGlzLmVuY29kaW5nTGVuZ3RoKTtcbiAgZW5jW3RoaXMuZW5jb2RpbmdMZW5ndGggLSAxXSB8PSBwb2ludC5nZXRYKCkuaXNPZGQoKSA/IDB4ODAgOiAwO1xuICByZXR1cm4gZW5jO1xufTtcblxuRUREU0EucHJvdG90eXBlLmRlY29kZVBvaW50ID0gZnVuY3Rpb24gZGVjb2RlUG9pbnQoYnl0ZXMpIHtcbiAgYnl0ZXMgPSB1dGlscy5wYXJzZUJ5dGVzKGJ5dGVzKTtcblxuICB2YXIgbGFzdEl4ID0gYnl0ZXMubGVuZ3RoIC0gMTtcbiAgdmFyIG5vcm1lZCA9IGJ5dGVzLnNsaWNlKDAsIGxhc3RJeCkuY29uY2F0KGJ5dGVzW2xhc3RJeF0gJiB+MHg4MCk7XG4gIHZhciB4SXNPZGQgPSAoYnl0ZXNbbGFzdEl4XSAmIDB4ODApICE9PSAwO1xuXG4gIHZhciB5ID0gdXRpbHMuaW50RnJvbUxFKG5vcm1lZCk7XG4gIHJldHVybiB0aGlzLmN1cnZlLnBvaW50RnJvbVkoeSwgeElzT2RkKTtcbn07XG5cbkVERFNBLnByb3RvdHlwZS5lbmNvZGVJbnQgPSBmdW5jdGlvbiBlbmNvZGVJbnQobnVtKSB7XG4gIHJldHVybiBudW0udG9BcnJheSgnbGUnLCB0aGlzLmVuY29kaW5nTGVuZ3RoKTtcbn07XG5cbkVERFNBLnByb3RvdHlwZS5kZWNvZGVJbnQgPSBmdW5jdGlvbiBkZWNvZGVJbnQoYnl0ZXMpIHtcbiAgcmV0dXJuIHV0aWxzLmludEZyb21MRShieXRlcyk7XG59O1xuXG5FRERTQS5wcm90b3R5cGUuaXNQb2ludCA9IGZ1bmN0aW9uIGlzUG9pbnQodmFsKSB7XG4gIHJldHVybiB2YWwgaW5zdGFuY2VvZiB0aGlzLnBvaW50Q2xhc3M7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZWxsaXB0aWMgPSByZXF1aXJlKCcuLi8uLi9lbGxpcHRpYycpO1xudmFyIHV0aWxzID0gZWxsaXB0aWMudXRpbHM7XG52YXIgYXNzZXJ0ID0gdXRpbHMuYXNzZXJ0O1xudmFyIHBhcnNlQnl0ZXMgPSB1dGlscy5wYXJzZUJ5dGVzO1xudmFyIGNhY2hlZFByb3BlcnR5ID0gdXRpbHMuY2FjaGVkUHJvcGVydHk7XG5cbi8qKlxuKiBAcGFyYW0ge0VERFNBfSBlZGRzYSAtIGluc3RhbmNlXG4qIEBwYXJhbSB7T2JqZWN0fSBwYXJhbXMgLSBwdWJsaWMvcHJpdmF0ZSBrZXkgcGFyYW1ldGVyc1xuKlxuKiBAcGFyYW0ge0FycmF5PEJ5dGU+fSBbcGFyYW1zLnNlY3JldF0gLSBzZWNyZXQgc2VlZCBieXRlc1xuKiBAcGFyYW0ge1BvaW50fSBbcGFyYW1zLnB1Yl0gLSBwdWJsaWMga2V5IHBvaW50IChha2EgYEFgIGluIGVkZHNhIHRlcm1zKVxuKiBAcGFyYW0ge0FycmF5PEJ5dGU+fSBbcGFyYW1zLnB1Yl0gLSBwdWJsaWMga2V5IHBvaW50IGVuY29kZWQgYXMgYnl0ZXNcbipcbiovXG5mdW5jdGlvbiBLZXlQYWlyKGVkZHNhLCBwYXJhbXMpIHtcbiAgdGhpcy5lZGRzYSA9IGVkZHNhO1xuICB0aGlzLl9zZWNyZXQgPSBwYXJzZUJ5dGVzKHBhcmFtcy5zZWNyZXQpO1xuICBpZiAoZWRkc2EuaXNQb2ludChwYXJhbXMucHViKSlcbiAgICB0aGlzLl9wdWIgPSBwYXJhbXMucHViO1xuICBlbHNlXG4gICAgdGhpcy5fcHViQnl0ZXMgPSBwYXJzZUJ5dGVzKHBhcmFtcy5wdWIpO1xufVxuXG5LZXlQYWlyLmZyb21QdWJsaWMgPSBmdW5jdGlvbiBmcm9tUHVibGljKGVkZHNhLCBwdWIpIHtcbiAgaWYgKHB1YiBpbnN0YW5jZW9mIEtleVBhaXIpXG4gICAgcmV0dXJuIHB1YjtcbiAgcmV0dXJuIG5ldyBLZXlQYWlyKGVkZHNhLCB7IHB1YjogcHViIH0pO1xufTtcblxuS2V5UGFpci5mcm9tU2VjcmV0ID0gZnVuY3Rpb24gZnJvbVNlY3JldChlZGRzYSwgc2VjcmV0KSB7XG4gIGlmIChzZWNyZXQgaW5zdGFuY2VvZiBLZXlQYWlyKVxuICAgIHJldHVybiBzZWNyZXQ7XG4gIHJldHVybiBuZXcgS2V5UGFpcihlZGRzYSwgeyBzZWNyZXQ6IHNlY3JldCB9KTtcbn07XG5cbktleVBhaXIucHJvdG90eXBlLnNlY3JldCA9IGZ1bmN0aW9uIHNlY3JldCgpIHtcbiAgcmV0dXJuIHRoaXMuX3NlY3JldDtcbn07XG5cbmNhY2hlZFByb3BlcnR5KEtleVBhaXIsICdwdWJCeXRlcycsIGZ1bmN0aW9uIHB1YkJ5dGVzKCkge1xuICByZXR1cm4gdGhpcy5lZGRzYS5lbmNvZGVQb2ludCh0aGlzLnB1YigpKTtcbn0pO1xuXG5jYWNoZWRQcm9wZXJ0eShLZXlQYWlyLCAncHViJywgZnVuY3Rpb24gcHViKCkge1xuICBpZiAodGhpcy5fcHViQnl0ZXMpXG4gICAgcmV0dXJuIHRoaXMuZWRkc2EuZGVjb2RlUG9pbnQodGhpcy5fcHViQnl0ZXMpO1xuICByZXR1cm4gdGhpcy5lZGRzYS5nLm11bCh0aGlzLnByaXYoKSk7XG59KTtcblxuY2FjaGVkUHJvcGVydHkoS2V5UGFpciwgJ3ByaXZCeXRlcycsIGZ1bmN0aW9uIHByaXZCeXRlcygpIHtcbiAgdmFyIGVkZHNhID0gdGhpcy5lZGRzYTtcbiAgdmFyIGhhc2ggPSB0aGlzLmhhc2goKTtcbiAgdmFyIGxhc3RJeCA9IGVkZHNhLmVuY29kaW5nTGVuZ3RoIC0gMTtcblxuICB2YXIgYSA9IGhhc2guc2xpY2UoMCwgZWRkc2EuZW5jb2RpbmdMZW5ndGgpO1xuICBhWzBdICY9IDI0ODtcbiAgYVtsYXN0SXhdICY9IDEyNztcbiAgYVtsYXN0SXhdIHw9IDY0O1xuXG4gIHJldHVybiBhO1xufSk7XG5cbmNhY2hlZFByb3BlcnR5KEtleVBhaXIsICdwcml2JywgZnVuY3Rpb24gcHJpdigpIHtcbiAgcmV0dXJuIHRoaXMuZWRkc2EuZGVjb2RlSW50KHRoaXMucHJpdkJ5dGVzKCkpO1xufSk7XG5cbmNhY2hlZFByb3BlcnR5KEtleVBhaXIsICdoYXNoJywgZnVuY3Rpb24gaGFzaCgpIHtcbiAgcmV0dXJuIHRoaXMuZWRkc2EuaGFzaCgpLnVwZGF0ZSh0aGlzLnNlY3JldCgpKS5kaWdlc3QoKTtcbn0pO1xuXG5jYWNoZWRQcm9wZXJ0eShLZXlQYWlyLCAnbWVzc2FnZVByZWZpeCcsIGZ1bmN0aW9uIG1lc3NhZ2VQcmVmaXgoKSB7XG4gIHJldHVybiB0aGlzLmhhc2goKS5zbGljZSh0aGlzLmVkZHNhLmVuY29kaW5nTGVuZ3RoKTtcbn0pO1xuXG5LZXlQYWlyLnByb3RvdHlwZS5zaWduID0gZnVuY3Rpb24gc2lnbihtZXNzYWdlKSB7XG4gIGFzc2VydCh0aGlzLl9zZWNyZXQsICdLZXlQYWlyIGNhbiBvbmx5IHZlcmlmeScpO1xuICByZXR1cm4gdGhpcy5lZGRzYS5zaWduKG1lc3NhZ2UsIHRoaXMpO1xufTtcblxuS2V5UGFpci5wcm90b3R5cGUudmVyaWZ5ID0gZnVuY3Rpb24gdmVyaWZ5KG1lc3NhZ2UsIHNpZykge1xuICByZXR1cm4gdGhpcy5lZGRzYS52ZXJpZnkobWVzc2FnZSwgc2lnLCB0aGlzKTtcbn07XG5cbktleVBhaXIucHJvdG90eXBlLmdldFNlY3JldCA9IGZ1bmN0aW9uIGdldFNlY3JldChlbmMpIHtcbiAgYXNzZXJ0KHRoaXMuX3NlY3JldCwgJ0tleVBhaXIgaXMgcHVibGljIG9ubHknKTtcbiAgcmV0dXJuIHV0aWxzLmVuY29kZSh0aGlzLnNlY3JldCgpLCBlbmMpO1xufTtcblxuS2V5UGFpci5wcm90b3R5cGUuZ2V0UHVibGljID0gZnVuY3Rpb24gZ2V0UHVibGljKGVuYykge1xuICByZXR1cm4gdXRpbHMuZW5jb2RlKHRoaXMucHViQnl0ZXMoKSwgZW5jKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gS2V5UGFpcjtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEJOID0gcmVxdWlyZSgnYm4uanMnKTtcbnZhciBlbGxpcHRpYyA9IHJlcXVpcmUoJy4uLy4uL2VsbGlwdGljJyk7XG52YXIgdXRpbHMgPSBlbGxpcHRpYy51dGlscztcbnZhciBhc3NlcnQgPSB1dGlscy5hc3NlcnQ7XG52YXIgY2FjaGVkUHJvcGVydHkgPSB1dGlscy5jYWNoZWRQcm9wZXJ0eTtcbnZhciBwYXJzZUJ5dGVzID0gdXRpbHMucGFyc2VCeXRlcztcblxuLyoqXG4qIEBwYXJhbSB7RUREU0F9IGVkZHNhIC0gZWRkc2EgaW5zdGFuY2VcbiogQHBhcmFtIHtBcnJheTxCeXRlcz58T2JqZWN0fSBzaWcgLVxuKiBAcGFyYW0ge0FycmF5PEJ5dGVzPnxQb2ludH0gW3NpZy5SXSAtIFIgcG9pbnQgYXMgUG9pbnQgb3IgYnl0ZXNcbiogQHBhcmFtIHtBcnJheTxCeXRlcz58Ym59IFtzaWcuU10gLSBTIHNjYWxhciBhcyBibiBvciBieXRlc1xuKiBAcGFyYW0ge0FycmF5PEJ5dGVzPn0gW3NpZy5SZW5jb2RlZF0gLSBSIHBvaW50IGVuY29kZWRcbiogQHBhcmFtIHtBcnJheTxCeXRlcz59IFtzaWcuU2VuY29kZWRdIC0gUyBzY2FsYXIgZW5jb2RlZFxuKi9cbmZ1bmN0aW9uIFNpZ25hdHVyZShlZGRzYSwgc2lnKSB7XG4gIHRoaXMuZWRkc2EgPSBlZGRzYTtcblxuICBpZiAodHlwZW9mIHNpZyAhPT0gJ29iamVjdCcpXG4gICAgc2lnID0gcGFyc2VCeXRlcyhzaWcpO1xuXG4gIGlmIChBcnJheS5pc0FycmF5KHNpZykpIHtcbiAgICBzaWcgPSB7XG4gICAgICBSOiBzaWcuc2xpY2UoMCwgZWRkc2EuZW5jb2RpbmdMZW5ndGgpLFxuICAgICAgUzogc2lnLnNsaWNlKGVkZHNhLmVuY29kaW5nTGVuZ3RoKVxuICAgIH07XG4gIH1cblxuICBhc3NlcnQoc2lnLlIgJiYgc2lnLlMsICdTaWduYXR1cmUgd2l0aG91dCBSIG9yIFMnKTtcblxuICBpZiAoZWRkc2EuaXNQb2ludChzaWcuUikpXG4gICAgdGhpcy5fUiA9IHNpZy5SO1xuICBpZiAoc2lnLlMgaW5zdGFuY2VvZiBCTilcbiAgICB0aGlzLl9TID0gc2lnLlM7XG5cbiAgdGhpcy5fUmVuY29kZWQgPSBBcnJheS5pc0FycmF5KHNpZy5SKSA/IHNpZy5SIDogc2lnLlJlbmNvZGVkO1xuICB0aGlzLl9TZW5jb2RlZCA9IEFycmF5LmlzQXJyYXkoc2lnLlMpID8gc2lnLlMgOiBzaWcuU2VuY29kZWQ7XG59XG5cbmNhY2hlZFByb3BlcnR5KFNpZ25hdHVyZSwgJ1MnLCBmdW5jdGlvbiBTKCkge1xuICByZXR1cm4gdGhpcy5lZGRzYS5kZWNvZGVJbnQodGhpcy5TZW5jb2RlZCgpKTtcbn0pO1xuXG5jYWNoZWRQcm9wZXJ0eShTaWduYXR1cmUsICdSJywgZnVuY3Rpb24gUigpIHtcbiAgcmV0dXJuIHRoaXMuZWRkc2EuZGVjb2RlUG9pbnQodGhpcy5SZW5jb2RlZCgpKTtcbn0pO1xuXG5jYWNoZWRQcm9wZXJ0eShTaWduYXR1cmUsICdSZW5jb2RlZCcsIGZ1bmN0aW9uIFJlbmNvZGVkKCkge1xuICByZXR1cm4gdGhpcy5lZGRzYS5lbmNvZGVQb2ludCh0aGlzLlIoKSk7XG59KTtcblxuY2FjaGVkUHJvcGVydHkoU2lnbmF0dXJlLCAnU2VuY29kZWQnLCBmdW5jdGlvbiBTZW5jb2RlZCgpIHtcbiAgcmV0dXJuIHRoaXMuZWRkc2EuZW5jb2RlSW50KHRoaXMuUygpKTtcbn0pO1xuXG5TaWduYXR1cmUucHJvdG90eXBlLnRvQnl0ZXMgPSBmdW5jdGlvbiB0b0J5dGVzKCkge1xuICByZXR1cm4gdGhpcy5SZW5jb2RlZCgpLmNvbmNhdCh0aGlzLlNlbmNvZGVkKCkpO1xufTtcblxuU2lnbmF0dXJlLnByb3RvdHlwZS50b0hleCA9IGZ1bmN0aW9uIHRvSGV4KCkge1xuICByZXR1cm4gdXRpbHMuZW5jb2RlKHRoaXMudG9CeXRlcygpLCAnaGV4JykudG9VcHBlckNhc2UoKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gU2lnbmF0dXJlO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaGFzaCA9IHJlcXVpcmUoJ2hhc2guanMnKTtcbnZhciBlbGxpcHRpYyA9IHJlcXVpcmUoJy4uL2VsbGlwdGljJyk7XG52YXIgdXRpbHMgPSBlbGxpcHRpYy51dGlscztcbnZhciBhc3NlcnQgPSB1dGlscy5hc3NlcnQ7XG5cbmZ1bmN0aW9uIEhtYWNEUkJHKG9wdGlvbnMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIEhtYWNEUkJHKSlcbiAgICByZXR1cm4gbmV3IEhtYWNEUkJHKG9wdGlvbnMpO1xuICB0aGlzLmhhc2ggPSBvcHRpb25zLmhhc2g7XG4gIHRoaXMucHJlZFJlc2lzdCA9ICEhb3B0aW9ucy5wcmVkUmVzaXN0O1xuXG4gIHRoaXMub3V0TGVuID0gdGhpcy5oYXNoLm91dFNpemU7XG4gIHRoaXMubWluRW50cm9weSA9IG9wdGlvbnMubWluRW50cm9weSB8fCB0aGlzLmhhc2guaG1hY1N0cmVuZ3RoO1xuXG4gIHRoaXMucmVzZWVkID0gbnVsbDtcbiAgdGhpcy5yZXNlZWRJbnRlcnZhbCA9IG51bGw7XG4gIHRoaXMuSyA9IG51bGw7XG4gIHRoaXMuViA9IG51bGw7XG5cbiAgdmFyIGVudHJvcHkgPSB1dGlscy50b0FycmF5KG9wdGlvbnMuZW50cm9weSwgb3B0aW9ucy5lbnRyb3B5RW5jKTtcbiAgdmFyIG5vbmNlID0gdXRpbHMudG9BcnJheShvcHRpb25zLm5vbmNlLCBvcHRpb25zLm5vbmNlRW5jKTtcbiAgdmFyIHBlcnMgPSB1dGlscy50b0FycmF5KG9wdGlvbnMucGVycywgb3B0aW9ucy5wZXJzRW5jKTtcbiAgYXNzZXJ0KGVudHJvcHkubGVuZ3RoID49ICh0aGlzLm1pbkVudHJvcHkgLyA4KSxcbiAgICAgICAgICdOb3QgZW5vdWdoIGVudHJvcHkuIE1pbmltdW0gaXM6ICcgKyB0aGlzLm1pbkVudHJvcHkgKyAnIGJpdHMnKTtcbiAgdGhpcy5faW5pdChlbnRyb3B5LCBub25jZSwgcGVycyk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IEhtYWNEUkJHO1xuXG5IbWFjRFJCRy5wcm90b3R5cGUuX2luaXQgPSBmdW5jdGlvbiBpbml0KGVudHJvcHksIG5vbmNlLCBwZXJzKSB7XG4gIHZhciBzZWVkID0gZW50cm9weS5jb25jYXQobm9uY2UpLmNvbmNhdChwZXJzKTtcblxuICB0aGlzLksgPSBuZXcgQXJyYXkodGhpcy5vdXRMZW4gLyA4KTtcbiAgdGhpcy5WID0gbmV3IEFycmF5KHRoaXMub3V0TGVuIC8gOCk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5WLmxlbmd0aDsgaSsrKSB7XG4gICAgdGhpcy5LW2ldID0gMHgwMDtcbiAgICB0aGlzLlZbaV0gPSAweDAxO1xuICB9XG5cbiAgdGhpcy5fdXBkYXRlKHNlZWQpO1xuICB0aGlzLnJlc2VlZCA9IDE7XG4gIHRoaXMucmVzZWVkSW50ZXJ2YWwgPSAweDEwMDAwMDAwMDAwMDA7ICAvLyAyXjQ4XG59O1xuXG5IbWFjRFJCRy5wcm90b3R5cGUuX2htYWMgPSBmdW5jdGlvbiBobWFjKCkge1xuICByZXR1cm4gbmV3IGhhc2guaG1hYyh0aGlzLmhhc2gsIHRoaXMuSyk7XG59O1xuXG5IbWFjRFJCRy5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZShzZWVkKSB7XG4gIHZhciBrbWFjID0gdGhpcy5faG1hYygpXG4gICAgICAgICAgICAgICAgIC51cGRhdGUodGhpcy5WKVxuICAgICAgICAgICAgICAgICAudXBkYXRlKFsgMHgwMCBdKTtcbiAgaWYgKHNlZWQpXG4gICAga21hYyA9IGttYWMudXBkYXRlKHNlZWQpO1xuICB0aGlzLksgPSBrbWFjLmRpZ2VzdCgpO1xuICB0aGlzLlYgPSB0aGlzLl9obWFjKCkudXBkYXRlKHRoaXMuVikuZGlnZXN0KCk7XG4gIGlmICghc2VlZClcbiAgICByZXR1cm47XG5cbiAgdGhpcy5LID0gdGhpcy5faG1hYygpXG4gICAgICAgICAgICAgICAudXBkYXRlKHRoaXMuVilcbiAgICAgICAgICAgICAgIC51cGRhdGUoWyAweDAxIF0pXG4gICAgICAgICAgICAgICAudXBkYXRlKHNlZWQpXG4gICAgICAgICAgICAgICAuZGlnZXN0KCk7XG4gIHRoaXMuViA9IHRoaXMuX2htYWMoKS51cGRhdGUodGhpcy5WKS5kaWdlc3QoKTtcbn07XG5cbkhtYWNEUkJHLnByb3RvdHlwZS5yZXNlZWQgPSBmdW5jdGlvbiByZXNlZWQoZW50cm9weSwgZW50cm9weUVuYywgYWRkLCBhZGRFbmMpIHtcbiAgLy8gT3B0aW9uYWwgZW50cm9weSBlbmNcbiAgaWYgKHR5cGVvZiBlbnRyb3B5RW5jICE9PSAnc3RyaW5nJykge1xuICAgIGFkZEVuYyA9IGFkZDtcbiAgICBhZGQgPSBlbnRyb3B5RW5jO1xuICAgIGVudHJvcHlFbmMgPSBudWxsO1xuICB9XG5cbiAgZW50cm9weSA9IHV0aWxzLnRvQnVmZmVyKGVudHJvcHksIGVudHJvcHlFbmMpO1xuICBhZGQgPSB1dGlscy50b0J1ZmZlcihhZGQsIGFkZEVuYyk7XG5cbiAgYXNzZXJ0KGVudHJvcHkubGVuZ3RoID49ICh0aGlzLm1pbkVudHJvcHkgLyA4KSxcbiAgICAgICAgICdOb3QgZW5vdWdoIGVudHJvcHkuIE1pbmltdW0gaXM6ICcgKyB0aGlzLm1pbkVudHJvcHkgKyAnIGJpdHMnKTtcblxuICB0aGlzLl91cGRhdGUoZW50cm9weS5jb25jYXQoYWRkIHx8IFtdKSk7XG4gIHRoaXMucmVzZWVkID0gMTtcbn07XG5cbkhtYWNEUkJHLnByb3RvdHlwZS5nZW5lcmF0ZSA9IGZ1bmN0aW9uIGdlbmVyYXRlKGxlbiwgZW5jLCBhZGQsIGFkZEVuYykge1xuICBpZiAodGhpcy5yZXNlZWQgPiB0aGlzLnJlc2VlZEludGVydmFsKVxuICAgIHRocm93IG5ldyBFcnJvcignUmVzZWVkIGlzIHJlcXVpcmVkJyk7XG5cbiAgLy8gT3B0aW9uYWwgZW5jb2RpbmdcbiAgaWYgKHR5cGVvZiBlbmMgIT09ICdzdHJpbmcnKSB7XG4gICAgYWRkRW5jID0gYWRkO1xuICAgIGFkZCA9IGVuYztcbiAgICBlbmMgPSBudWxsO1xuICB9XG5cbiAgLy8gT3B0aW9uYWwgYWRkaXRpb25hbCBkYXRhXG4gIGlmIChhZGQpIHtcbiAgICBhZGQgPSB1dGlscy50b0FycmF5KGFkZCwgYWRkRW5jKTtcbiAgICB0aGlzLl91cGRhdGUoYWRkKTtcbiAgfVxuXG4gIHZhciB0ZW1wID0gW107XG4gIHdoaWxlICh0ZW1wLmxlbmd0aCA8IGxlbikge1xuICAgIHRoaXMuViA9IHRoaXMuX2htYWMoKS51cGRhdGUodGhpcy5WKS5kaWdlc3QoKTtcbiAgICB0ZW1wID0gdGVtcC5jb25jYXQodGhpcy5WKTtcbiAgfVxuXG4gIHZhciByZXMgPSB0ZW1wLnNsaWNlKDAsIGxlbik7XG4gIHRoaXMuX3VwZGF0ZShhZGQpO1xuICB0aGlzLnJlc2VlZCsrO1xuICByZXR1cm4gdXRpbHMuZW5jb2RlKHJlcywgZW5jKTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHtcbiAgZG91Ymxlczoge1xuICAgIHN0ZXA6IDQsXG4gICAgcG9pbnRzOiBbXG4gICAgICBbXG4gICAgICAgICdlNjBmY2U5M2I1OWU5ZWM1MzAxMWFhYmMyMWMyM2U5N2IyYTMxMzY5Yjg3YTVhZTljNDRlZTg5ZTJhNmRlYzBhJyxcbiAgICAgICAgJ2Y3ZTM1MDczOTllNTk1OTI5ZGI5OWYzNGY1NzkzNzEwMTI5Njg5MWU0NGQyM2YwYmUxZjMyY2NlNjk2MTY4MjEnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnODI4MjI2MzIxMmM2MDlkOWVhMmE2ZTNlMTcyZGUyMzhkOGMzOWNhYmQ1YWMxY2ExMDY0NmUyM2ZkNWY1MTUwOCcsXG4gICAgICAgICcxMWY4YTgwOTg1NTdkZmU0NWU4MjU2ZTgzMGI2MGFjZTYyZDYxM2FjMmY3YjE3YmVkMzFiNmVhZmY2ZTI2Y2FmJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzE3NWUxNTlmNzI4Yjg2NWE3MmY5OWNjNmM2ZmM4NDZkZTBiOTM4MzNmZDIyMjJlZDczZmNlNWI1NTFlNWI3MzknLFxuICAgICAgICAnZDM1MDZlMGQ5ZTNjNzllYmE0ZWY5N2E1MWZmNzFmNWVhY2I1OTU1YWRkMjQzNDVjNmVmYTZmZmVlOWZlZDY5NSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICczNjNkOTBkNDQ3YjAwYzljOTljZWFjMDViNjI2MmVlMDUzNDQxYzdlNTU1NTJmZmU1MjZiYWQ4ZjgzZmY0NjQwJyxcbiAgICAgICAgJzRlMjczYWRmYzczMjIyMTk1M2I0NDUzOTdmMzM2MzE0NWI5YTg5MDA4MTk5ZWNiNjIwMDNjN2YzYmVlOWRlOSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc4YjRiNWYxNjVkZjNjMmJlOGM2MjQ0YjViNzQ1NjM4ODQzZTRhNzgxYTE1YmNkMWI2OWY3OWE1NWRmZmRmODBjJyxcbiAgICAgICAgJzRhYWQwYTZmNjhkMzA4YjRiM2ZiZDc4MTNhYjBkYTA0ZjllMzM2NTQ2MTYyZWU1NmIzZWZmMGM2NWZkNGZkMzYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNzIzY2JhYTZlNWRiOTk2ZDZiZjc3MWMwMGJkNTQ4YzdiNzAwZGJmZmE2YzBlNzdiY2I2MTE1OTI1MjMyZmNkYScsXG4gICAgICAgICc5NmU4NjdiNTU5NWNjNDk4YTkyMTEzNzQ4ODgyNGQ2ZTI2NjBhMDY1Mzc3OTQ5NDgwMWRjMDY5ZDllYjM5ZjVmJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2VlYmZhNGQ0OTNiZWJmOThiYTVmZWVjODEyYzJkM2I1MDk0Nzk2MTIzN2E5MTk4MzlhNTMzZWNhMGU3ZGQ3ZmEnLFxuICAgICAgICAnNWQ5YThjYTM5NzBlZjBmMjY5ZWU3ZWRhZjE3ODA4OWQ5YWU0Y2RjM2E3MTFmNzEyZGRmZDRmZGFlMWRlODk5OSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICcxMDBmNDRkYTY5NmU3MTY3Mjc5MWQwYTA5YjdiZGU0NTlmMTIxNWEyOWIzYzAzYmZlZmQ3ODM1YjM5YTQ4ZGIwJyxcbiAgICAgICAgJ2NkZDllMTMxOTJhMDBiNzcyZWM4ZjMzMDBjMDkwNjY2YjdmZjRhMThmZjUxOTVhYzBmYmQ1Y2Q2MmJjNjVhMDknXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZTEwMzFiZTI2MmM3ZWQxYjFkYzkyMjdhNGEwNGMwMTdhNzdmOGQ0NDY0ZjNiMzg1MmM4YWNkZTZlNTM0ZmQyZCcsXG4gICAgICAgICc5ZDcwNjE5Mjg5NDA0MDVlNmJiNmE0MTc2NTk3NTM1YWYyOTJkZDQxOWUxY2VkNzlhNDRmMThmMjk0NTZhMDBkJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2ZlZWE2Y2FlNDZkNTViNTMwYWMyODM5ZjE0M2JkN2VjNWNmOGIyNjZhNDFkNmFmNTJkNWU2ODhkOTA5NDY5NmQnLFxuICAgICAgICAnZTU3YzZiNmM5N2RjZTFiYWIwNmU0ZTEyYmYzZWNkNWM5ODFjODk1N2NjNDE0NDJkMzE1NWRlYmYxODA5MDA4OCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdkYTY3YTkxZDkxMDQ5Y2RjYjM2N2JlNGJlNmZmY2EzY2ZlZWQ2NTdkODA4NTgzZGUzM2ZhOTc4YmMxZWM2Y2IxJyxcbiAgICAgICAgJzliYWNhYTM1NDgxNjQyYmM0MWY0NjNmN2VjOTc4MGU1ZGVjN2FkYzUwOGY3NDBhMTdlOWVhOGUyN2E2OGJlMWQnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNTM5MDRmYWEwYjMzNGNkZGE2ZTAwMDkzNWVmMjIxNTFlYzA4ZDBmN2JiMTEwNjlmNTc1NDVjY2MxYTM3YjdjMCcsXG4gICAgICAgICc1YmMwODdkMGJjODAxMDZkODhjOWVjY2FjMjBkM2MxYzEzOTk5OTgxZTE0NDM0Njk5ZGNiMDk2YjAyMjc3MWM4J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzhlN2JjZDBiZDM1OTgzYTc3MTljY2E3NzY0Y2E5MDY3NzliNTNhMDQzYTliOGJjYWVmZjk1OWY0M2FkODYwNDcnLFxuICAgICAgICAnMTBiNzc3MGIyYTNkYTRiMzk0MDMxMDQyMGNhOTUxNDU3OWU4OGUyZTQ3ZmQ2OGIzZWExMDA0N2U4NDYwMzcyYSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICczODVlZWQzNGMxY2RmZjIxZTZkMDgxODY4OWI4MWJkZTcxYTdmNGYxODM5N2U2NjkwYTg0MWUxNTk5YzQzODYyJyxcbiAgICAgICAgJzI4M2JlYmMzZThlYTIzZjU2NzAxZGUxOWU5ZWJmNDU3NmIzMDRlZWMyMDg2ZGM4Y2MwNDU4ZmU1NTQyZTU0NTMnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNmY5ZDliODAzZWNmMTkxNjM3YzczYTQ0MTNkZmExODBmZGRmODRhNTk0N2ZiYzljNjA2ZWQ4NmMzZmFjM2E3JyxcbiAgICAgICAgJzdjODBjNjhlNjAzMDU5YmE2OWI4ZTJhMzBlNDVjNGQ0N2VhNGRkMmY1YzI4MTAwMmQ4Njg5MDYwM2E4NDIxNjAnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMzMyMmQ0MDEyNDNjNGUyNTgyYTIxNDdjMTA0ZDZlY2JmNzc0ZDE2M2RiMGY1ZTUzMTNiN2UwZTc0MmQwZTZiZCcsXG4gICAgICAgICc1NmU3MDc5N2U5NjY0ZWY1YmZiMDE5YmM0ZGRhZjliNzI4MDVmNjNlYTI4NzNhZjYyNGYzYTJlOTZjMjhiMmEwJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzg1NjcyYzdkMmRlMGI3ZGEyYmQxNzcwZDg5NjY1ODY4NzQxYjNmOWFmNzY0MzM5NzcyMWQ3NGQyODEzNGFiODMnLFxuICAgICAgICAnN2M0ODFiOWI1YjQzYjJlYjYzNzQwNDliZmE2MmMyZTVlNzdmMTdmY2M1Mjk4ZjQ0YzhlMzA5NGY3OTAzMTNhNidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc5NDhiZjgwOWIxOTg4YTQ2YjA2YzlmMTkxOTQxM2IxMGY5MjI2YzYwZjY2ODgzMmZmZDk1OWFmNjBjODJhMGEnLFxuICAgICAgICAnNTNhNTYyODU2ZGNiNjY0NmRjNmI3NGM1ZDFjMzQxOGM2ZDRkZmYwOGM5N2NkMmJlZDRjYjdmODhkOGM4ZTU4OSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc2MjYwY2U3ZjQ2MTgwMWMzNGYwNjdjZTBmMDI4NzNhOGYxYjBlNDRkZmM2OTc1MmFjY2VjZDgxOWYzOGZkOGU4JyxcbiAgICAgICAgJ2JjMmRhODJiNmZhNWI1NzFhN2YwOTA0OTc3NmExZWY3ZWNkMjkyMjM4MDUxYzE5OGMxYTg0ZTk1YjJiNGFlMTcnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZTUwMzdkZTBhZmMxZDhkNDNkODM0ODQxNGJiZjQxMDMwNDNlYzhmNTc1YmZkYzQzMjk1M2NjOGQyMDM3ZmEyZCcsXG4gICAgICAgICc0NTcxNTM0YmFhOTRkM2I1ZjlmOThkMDlmYjk5MGJkZGJkNWY1YjAzZWM0ODFmMTBlMGU1ZGM4NDFkNzU1YmRhJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2UwNjM3MmIwZjRhMjA3YWRmNWVhOTA1ZThmMTc3MWI0ZTdlOGRiZDFjNmE2YzViNzI1ODY2YTBhZTRmY2U3MjUnLFxuICAgICAgICAnN2E5MDg5NzRiY2UxOGNmZTEyYTI3YmIyYWQ1YTQ4OGNkNzQ4NGE3Nzg3MTA0ODcwYjI3MDM0Zjk0ZWVlMzFkZCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICcyMTNjN2E3MTVjZDVkNDUzNThkMGJiZjlkYzBjZTAyMjA0YjEwYmRkZTJhM2Y1ODU0MGFkNjkwOGQwNTU5NzU0JyxcbiAgICAgICAgJzRiNmRhZDBiNWFlNDYyNTA3MDEzYWQwNjI0NWJhMTkwYmI0ODUwZjVmMzZhN2VlZGRmZjJjMjc1MzRiNDU4ZjInXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNGU3YzI3MmE3YWY0YjM0ZThkYmI5MzUyYTU0MTlhODdlMjgzOGM3MGFkYzYyY2RkZjBjYzNhM2IwOGZiZDUzYycsXG4gICAgICAgICcxNzc0OWM3NjZjOWQwYjE4ZTE2ZmQwOWY2ZGVmNjgxYjUzMGI5NjE0YmZmN2RkMzNlMGIzOTQxODE3ZGNhYWU2J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2ZlYTc0ZTNkYmU3NzhiMWIxMGYyMzhhZDYxNjg2YWE1Yzc2ZTNkYjJiZTQzMDU3NjMyNDI3ZTI4NDBmYjI3YjYnLFxuICAgICAgICAnNmUwNTY4ZGI5YjBiMTMyOTdjZjY3NGRlY2NiNmFmOTMxMjZiNTk2Yjk3M2Y3Yjc3NzAxZDNkYjdmMjNjYjk2ZidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc3NmU2NDExM2Y2NzdjZjBlMTBhMjU3MGQ1OTk5NjhkMzE1NDRlMTc5Yjc2MDQzMjk1MmMwMmE0NDE3YmRkZTM5JyxcbiAgICAgICAgJ2M5MGRkZjhkZWU0ZTk1Y2Y1NzcwNjZkNzA2ODFmMGQzNWUyYTMzZDJiNTZkMjAzMmI0YjE3NTJkMTkwMWFjMDEnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnYzczOGM1NmIwM2IyYWJlMWU4MjgxYmFhNzQzZjhmOWE4ZjdjYzY0M2RmMjZjYmVlM2FiMTUwMjQyYmNiYjg5MScsXG4gICAgICAgICc4OTNmYjU3ODk1MWFkMjUzN2Y3MThmMmVhY2JmYmJiYjgyMzE0ZWVmNzg4MGNmZTkxN2U3MzVkOTY5OWE4NGMzJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2Q4OTU2MjY1NDhiNjViODFlMjY0Yzc2MzdjOTcyODc3ZDFkNzJlNWYzYTkyNTAxNDM3MmU5ZjY1ODhmNmMxNGInLFxuICAgICAgICAnZmViZmFhMzhmMmJjN2VhZTcyOGVjNjA4MThjMzQwZWIwMzQyOGQ2MzJiYjA2N2UxNzkzNjNlZDc1ZDdkOTkxZidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdiOGRhOTQwMzJhOTU3NTE4ZWIwZjY0MzM1NzFlODc2MWNlZmZjNzM2OTNlODRlZGQ0OTE1MGE1NjRmNjc2ZTAzJyxcbiAgICAgICAgJzI4MDRkZmE0NDgwNWExZTRkN2M5OWNjOTc2MjgwOGIwOTJjYzU4NGQ5NWZmM2I1MTE0ODhlNGU3NGVmZGY2ZTcnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZTgwZmVhMTQ0NDFmYjMzYTdkOGFkYWI5NDc1ZDdmYWIyMDE5ZWZmYjUxNTZhNzkyZjFhMTE3NzhlM2MwZGY1ZCcsXG4gICAgICAgICdlZWQxZGU3ZjYzOGUwMDc3MWU4OTc2OGNhM2NhOTQ0NzJkMTU1ZTgwYWYzMjJlYTlmY2I0MjkxYjZhYzllYzc4J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2EzMDE2OTdiZGZjZDcwNDMxM2JhNDhlNTFkNTY3NTQzZjJhMTgyMDMxZWZkNjkxNWRkYzA3YmJjYzRlMTYwNzAnLFxuICAgICAgICAnNzM3MGY5MWNmYjY3ZTRmNTA4MTgwOWZhMjVkNDBmOWIxNzM1ZGJmN2MwYTExYTEzMGMwZDFhMDQxZTE3N2VhMSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc5MGFkODViMzg5ZDZiOTM2NDYzZjlkMDUxMjY3OGRlMjA4Y2MzMzBiMTEzMDdmZmZhYjdhYzYzZTNmYjA0ZWQ0JyxcbiAgICAgICAgJ2U1MDdhMzYyMGEzODI2MWFmZmRjYmQ5NDI3MjIyYjgzOWFlZmFiZTE1ODI4OTRkOTkxZDRkNDhjYjZlZjE1MCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc4ZjY4YjlkMmY2M2I1ZjMzOTIzOWMxYWQ5ODFmMTYyZWU4OGM1Njc4NzIzZWEzMzUxYjdiNDQ0YzllYzRjMGRhJyxcbiAgICAgICAgJzY2MmE5ZjJkYmEwNjM5ODZkZTFkOTBjMmI2YmUyMTVkYmJlYTJjZmU5NTUxMGJmZGYyM2NiZjc5NTAxZmZmODInXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZTRmM2ZiMDE3NmFmODVkNjVmZjk5ZmY5MTk4YzM2MDkxZjQ4ZTg2NTAzNjgxZTNlNjY4NmZkNTA1MzIzMWUxMScsXG4gICAgICAgICcxZTYzNjMzYWQwZWY0ZjFjMTY2MWE2ZDBlYTAyYjcyODZjYzdlNzRlYzk1MWQxYzk4MjJjMzg1NzZmZWI3M2JjJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzhjMDBmYTliMThlYmYzMzFlYjk2MTUzN2E0NWE0MjY2YzcwMzRmMmYwZDRlMWQwNzE2ZmI2ZWFlMjBlYWUyOWUnLFxuICAgICAgICAnZWZhNDcyNjdmZWE1MjFhMWE5ZGMzNDNhMzczNmM5NzRjMmZhZGFmYTgxZTM2YzU0ZTdkMmE0YzY2NzAyNDE0YidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdlN2EyNmNlNjlkZDQ4MjlmM2UxMGNlYzBhOWU5OGVkMzE0M2QwODRmMzA4YjkyYzA5OTdmZGRmYzYwY2IzZTQxJyxcbiAgICAgICAgJzJhNzU4ZTMwMGZhNzk4NGI0NzFiMDA2YTFhYWZiYjE4ZDBhNmIyYzA0MjBlODNlMjBlOGE5NDIxY2YyY2ZkNTEnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnYjY0NTllMGVlMzY2MmVjOGQyMzU0MGMyMjNiY2JkYzU3MWNiY2I5NjdkNzk0MjRmM2NmMjllYjNkZTZiODBlZicsXG4gICAgICAgICc2N2M4NzZkMDZmM2UwNmRlMWRhZGYxNmU1NjYxZGIzYzRiM2FlNmQ0OGUzNWIyZmYzMGJmMGI2MWE3MWJhNDUnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZDY4YTgwYzgyODBiYjg0MDc5MzIzNGFhMTE4ZjA2MjMxZDZmMWZjNjdlNzNjNWE1ZGVkYTBmNWI0OTY5NDNlOCcsXG4gICAgICAgICdkYjhiYTlmZmY0YjU4NmQwMGM0YjFmOTE3N2IwZTI4YjViMGU3YjhmNzg0NTI5NWEyOTRjODQyNjZiMTMzMTIwJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzMyNGFlZDdkZjY1YzgwNDI1MmRjMDI3MDkwN2EzMGIwOTYxMmFlYjk3MzQ0OWNlYTQwOTU5ODBmYzI4ZDNkNWQnLFxuICAgICAgICAnNjQ4YTM2NTc3NGI2MWYyZmYxMzBjMGMzNWFlYzFmNGYxOTIxM2IwYzdlMzMyODQzOTY3MjI0YWY5NmFiN2M4NCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc0ZGY5YzE0OTE5Y2RlNjFmNmQ1MWRmZGJlNWZlZTVkY2VlYzQxNDNiYThkMWNhODg4ZThiZDM3M2ZkMDU0Yzk2JyxcbiAgICAgICAgJzM1ZWM1MTA5MmQ4NzI4MDUwOTc0YzIzYTFkODVkNGI1ZDUwNmNkYzI4ODQ5MDE5MmViYWMwNmNhZDEwZDVkJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzljMzkxOWE4NGE0NzQ4NzBmYWVkOGE5YzFjYzY2MDIxNTIzNDg5MDU0ZDdmMDMwOGNiZmM5OWM4YWMxZjk4Y2QnLFxuICAgICAgICAnZGRiODRmMGY0YTRkZGQ1NzU4NGYwNDRiZjI2MGU2NDE5MDUzMjZmNzZjNjRjOGU2YmU3ZTVlMDNkNGZjNTk5ZCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc2MDU3MTcwYjFkZDEyZmRmOGRlMDVmMjgxZDhlMDZiYjkxZTE0OTNhOGI5MWQ0Y2M1YTIxMzgyMTIwYTk1OWU1JyxcbiAgICAgICAgJzlhMWFmMGIyNmE2YTQ4MDdhZGQ5YTJkYWY3MWRmMjYyNDY1MTUyYmMzZWUyNGM2NWU4OTliZTkzMjM4NWEyYTgnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnYTU3NmRmOGUyM2EwODQxMTQyMTQzOWE0NTE4ZGEzMTg4MGNlZjBmYmE3ZDRkZjEyYjFhNjk3M2VlY2I5NDI2NicsXG4gICAgICAgICc0MGE2YmYyMGU3NjY0MGIyYzkyYjk3YWZlNThjZDgyYzQzMmUxMGE3ZjUxNGQ5ZjNlZThiZTExYWUxYjI4ZWM4J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzc3NzhhNzhjMjhkZWMzZTMwYTA1ZmU5NjI5ZGU4YzM4YmIzMGQxZjVjZjlhM2EyMDhmNzYzODg5YmU1OGFkNzEnLFxuICAgICAgICAnMzQ2MjZkOWFiNWE1YjIyZmY3MDk4ZTEyZjJmZjU4MDA4N2IzODQxMWZmMjRhYzU2M2I1MTNmYzFmZDlmNDNhYydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc5Mjg5NTVlZTYzN2E4NDQ2MzcyOWZkMzBlN2FmZDJlZDVmOTYyNzRlNWFkN2U1Y2IwOWVkYTljMDZkOTAzYWMnLFxuICAgICAgICAnYzI1NjIxMDAzZDNmNDJhODI3Yjc4YTEzMDkzYTk1ZWVhYzNkMjZlZmE4YThkODNmYzUxODBlOTM1YmNkMDkxZidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc4NWQwZmVmM2VjNmRiMTA5Mzk5MDY0ZjNhMGUzYjI4NTU2NDViNGE5MDdhZDM1NDUyN2FhZTc1MTYzZDgyNzUxJyxcbiAgICAgICAgJzFmMDM2NDg0MTNhMzhjMGJlMjlkNDk2ZTU4MmNmNTY2M2U4NzUxZTk2ODc3MzMxNTgyYzIzN2EyNGViMWY5NjInXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZmYyYjBkY2U5N2VlY2U5N2MxYzliNjA0MTc5OGI4NWRmZGZiNmQ4ODgyZGEyMDMwOGY1NDA0ODI0NTI2MDg3ZScsXG4gICAgICAgICc0OTNkMTNmZWY1MjRiYTE4OGFmNGM0ZGM1NGQwNzkzNmM3YjdlZDZmYjkwZTJjZWIyYzk1MWUwMWYwYzI5OTA3J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzgyN2ZiYmU0YjFlODgwZWE5ZWQyYjJlNjMwMWIyMTJiNTdmMWVlMTQ4Y2Q2ZGQyODc4MGU1ZTJjZjg1NmUyNDEnLFxuICAgICAgICAnYzYwZjljOTIzYzcyN2IwYjcxYmVmMmM2N2QxZDEyNjg3ZmY3YTYzMTg2OTAzMTY2ZDYwNWI2OGJhZWMyOTNlYydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdlYWE2NDlmMjFmNTFiZGJhZTdiZTRhZTM0Y2U2ZTUyMTdhNThmZGNlN2Y0N2Y5YWE3ZjNiNThmYTIxMjBlMmIzJyxcbiAgICAgICAgJ2JlMzI3OWVkNWJiYmIwM2FjNjlhODBmODk4NzlhYTVhMDFhNmI5NjVmMTNmN2U1OWQ0N2E1MzA1YmE1YWQ5M2QnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZTRhNDJkNDNjNWNmMTY5ZDkzOTFkZjZkZWNmNDJlZTU0MWI2ZDhmMGM5YTEzNzQwMWUyMzYzMmRkYTM0ZDI0ZicsXG4gICAgICAgICc0ZDlmOTJlNzE2ZDFjNzM1MjZmYzk5Y2NmYjhhZDM0Y2U4ODZlZWRmYThkOGU0ZjEzYTdmNzEzMWRlYmE5NDE0J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzFlYzgwZmVmMzYwY2JkZDk1NDE2MGZhZGFiMzUyYjZiOTJiNTM1NzZhODhmZWE0OTQ3MTczYjlkNDMwMGJmMTknLFxuICAgICAgICAnYWVlZmU5Mzc1NmI1MzQwZDJmM2E0OTU4YTdhYmJmNWUwMTQ2ZTc3ZjYyOTVhMDdiNjcxY2RjMWNjMTA3Y2VmZCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICcxNDZhNzc4YzA0NjcwYzJmOTFiMDBhZjQ2ODBkZmE4YmNlMzQ5MDcxN2Q1OGJhODg5ZGRiNTkyODM2NjY0MmJlJyxcbiAgICAgICAgJ2IzMThlMGVjMzM1NDAyOGFkZDY2OTgyN2Y5ZDRiMjg3MGFhYTk3MWQyZjdlNWVkMWQwYjI5NzQ4M2Q4M2VmZDAnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZmE1MGMwZjYxZDIyZTVmMDdlM2FjZWJiMWFhMDdiMTI4ZDAwMTIyMDlhMjhiOTc3NmQ3NmE4NzkzMTgwZWVmOScsXG4gICAgICAgICc2Yjg0YzY5MjIzOTdlYmE5YjcyY2QyODcyMjgxYTY4YTVlNjgzMjkzYTU3YTIxM2IzOGNkOGQ3ZDNmNGYyODExJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2RhMWQ2MWQwY2E3MjFhMTFiMWE1YmY2YjdkODhlODQyMWEyODhhYjVkNWJiYTUyMjBlNTNkMzJiNWYwNjdlYzInLFxuICAgICAgICAnODE1N2Y1NWE3Yzk5MzA2Yzc5YzA3NjYxNjFjOTFlMjk2NmE3Mzg5OWQyNzliNDhhNjU1ZmJhMGYxYWQ4MzZmMSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdhOGUyODJmZjBjOTcwNjkwNzIxNWZmOThlOGZkNDE2NjE1MzExZGUwNDQ2ZjFlMDYyYTczYjA2MTBkMDY0ZTEzJyxcbiAgICAgICAgJzdmOTczNTViOGRiODFjMDlhYmZiN2YzYzViMjUxNTg4OGI2NzlhM2U1MGRkNmJkNmNlZjdjNzMxMTFmNGNjMGMnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMTc0YTUzYjljOWEyODU4NzJkMzllNTZlNjkxM2NhYjE1ZDU5YjFmYTUxMjUwOGMwMjJmMzgyZGU4MzE5NDk3YycsXG4gICAgICAgICdjY2M5ZGMzN2FiZmM5YzE2NTdiNDE1NWYyYzQ3ZjllNjY0NmIzYTFkOGNiOTg1NDM4M2RhMTNhYzA3OWFmYTczJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzk1OTM5Njk4MTk0Mzc4NWMzZDNlNTdlZGY1MDE4Y2RiZTAzOWU3MzBlNDkxOGIzZDg4NGZkZmYwOTQ3NWI3YmEnLFxuICAgICAgICAnMmU3ZTU1Mjg4OGMzMzFkZDhiYTAzODZhNGI5Y2Q2ODQ5YzY1M2Y2NGM4NzA5Mzg1ZTliOGFiZjg3NTI0ZjJmZCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdkMmE2M2E1MGFlNDAxZTU2ZDY0NWExMTUzYjEwOWE4ZmNjYTBhNDNkNTYxZmJhMmRiYjUxMzQwYzlkODJiMTUxJyxcbiAgICAgICAgJ2U4MmQ4NmZiNjQ0M2ZjYjc1NjVhZWU1OGIyOTQ4MjIwYTcwZjc1MGFmNDg0Y2E1MmQ0MTQyMTc0ZGNmODk0MDUnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNjQ1ODdlMjMzNTQ3MWViODkwZWU3ODk2ZDdjZmRjODY2YmFjYmRiZDM4MzkzMTdiMzQzNmY5YjQ1NjE3ZTA3MycsXG4gICAgICAgICdkOTlmY2RkNWJmNjkwMmUyYWU5NmRkNjQ0N2MyOTlhMTg1YjkwYTM5MTMzYWVhYjM1ODI5OWU1ZTlmYWY2NTg5J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzg0ODFiZGUwZTRlNGQ4ODViM2E1NDZkM2U1NDlkZTA0MmYwYWE2Y2VhMjUwZTdmZDM1OGQ2Yzg2ZGQ0NWU0NTgnLFxuICAgICAgICAnMzhlZTdiOGNiYTU0MDRkZDg0YTI1YmYzOWNlY2IyY2E5MDBhNzljNDJiMjYyZTU1NmQ2NGIxYjU5Nzc5MDU3ZSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICcxMzQ2NGE1N2E3ODEwMmFhNjJiNjk3OWFlODE3ZjQ2MzdmZmNmZWQzYzRiMWNlMzBiY2Q2MzAzZjZjYWY2NjZiJyxcbiAgICAgICAgJzY5YmUxNTkwMDQ2MTQ1ODBlZjdlNDMzNDUzY2NiMGNhNDhmMzAwYTgxZDA5NDJlMTNmNDk1YTkwN2Y2ZWNjMjcnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnYmM0YTlkZjViNzEzZmUyZTlhZWY0MzBiY2MxZGM5N2EwY2Q5Y2NlZGUyZjI4NTg4Y2FkYTNhMGQyZDgzZjM2NicsXG4gICAgICAgICdkM2E4MWNhNmU3ODVjMDYzODM5MzdhZGY0Yjc5OGNhYTZlOGE5ZmJmYTU0N2IxNmQ3NThkNjY2NTgxZjMzYzEnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnOGMyOGE5N2JmODI5OGJjMGQyM2Q4Yzc0OTQ1MmEzMmU2OTRiNjVlMzBhOTQ3MmEzOTU0YWIzMGZlNTMyNGNhYScsXG4gICAgICAgICc0MGEzMDQ2M2EzMzA1MTkzMzc4ZmVkZjMxZjdjYzBlYjdhZTc4NGYwNDUxY2I5NDU5ZTcxZGM3M2NiZWY5NDgyJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzhlYTk2NjYxMzk1MjdhOGMxZGQ5NGNlNGYwNzFmZDIzYzhiMzUwYzVhNGJiMzM3NDhjNGJhMTExZmFjY2FlMCcsXG4gICAgICAgICc2MjBlZmFiYmM4ZWUyNzgyZTI0ZTdjMGNmYjk1YzVkNzM1Yjc4M2JlOWNmMGY4ZTk1NWFmMzRhMzBlNjJiOTQ1J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2RkMzYyNWZhZWY1YmEwNjA3NDY2OTcxNmJiZDM3ODhkODliZGRlODE1OTU5OTY4MDkyZjc2Y2M0ZWI5YTk3ODcnLFxuICAgICAgICAnN2ExODhmYTM1MjBlMzBkNDYxZGEyNTAxMDQ1NzMxY2E5NDE0NjE5ODI4ODMzOTU5MzdmNjhkMDBjNjQ0YTU3MydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdmNzEwZDc5ZDllYjk2MjI5N2U0ZjYyMzJiNDBlOGY3ZmViMmJjNjM4MTQ2MTRkNjkyYzEyZGU3NTI0MDgyMjFlJyxcbiAgICAgICAgJ2VhOThlNjcyMzJkM2IzMjk1ZDNiNTM1NTMyMTE1Y2NhYzg2MTJjNzIxODUxNjE3NTI2YWU0N2E5Yzc3YmZjODInXG4gICAgICBdXG4gICAgXVxuICB9LFxuICBuYWY6IHtcbiAgICB3bmQ6IDcsXG4gICAgcG9pbnRzOiBbXG4gICAgICBbXG4gICAgICAgICdmOTMwOGEwMTkyNThjMzEwNDkzNDRmODVmODlkNTIyOWI1MzFjODQ1ODM2Zjk5YjA4NjAxZjExM2JjZTAzNmY5JyxcbiAgICAgICAgJzM4OGY3YjBmNjMyZGU4MTQwZmUzMzdlNjJhMzdmMzU2NjUwMGE5OTkzNGMyMjMxYjZjYjlmZDc1ODRiOGU2NzInXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMmY4YmRlNGQxYTA3MjA5MzU1YjRhNzI1MGE1YzUxMjhlODhiODRiZGRjNjE5YWI3Y2JhOGQ1NjliMjQwZWZlNCcsXG4gICAgICAgICdkOGFjMjIyNjM2ZTVlM2Q2ZDRkYmE5ZGRhNmM5YzQyNmY3ODgyNzFiYWIwZDY4NDBkY2E4N2QzYWE2YWM2MmQ2J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzVjYmRmMDY0NmU1ZGI0ZWFhMzk4ZjM2NWYyZWE3YTBlM2Q0MTliN2UwMzMwZTM5Y2U5MmJkZGVkY2FjNGY5YmMnLFxuICAgICAgICAnNmFlYmNhNDBiYTI1NTk2MGEzMTc4ZDZkODYxYTU0ZGJhODEzZDBiODEzZmRlN2I1YTUwODI2MjgwODcyNjRkYSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdhY2Q0ODRlMmYwYzdmNjUzMDlhZDE3OGE5ZjU1OWFiZGUwOTc5Njk3NGM1N2U3MTRjMzVmMTEwZGZjMjdjY2JlJyxcbiAgICAgICAgJ2NjMzM4OTIxYjBhN2Q5ZmQ2NDM4MDk3MTc2M2I2MWU5YWRkODg4YTQzNzVmOGUwZjA1Y2MyNjJhYzY0ZjljMzcnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNzc0YWU3Zjg1OGE5NDExZTVlZjQyNDZiNzBjNjVhYWM1NjQ5OTgwYmU1YzE3ODkxYmJlYzE3ODk1ZGEwMDhjYicsXG4gICAgICAgICdkOTg0YTAzMmViNmI1ZTE5MDI0M2RkNTZkN2I3YjM2NTM3MmRiMWUyZGZmOWQ2YTgzMDFkNzRjOWM5NTNjNjFiJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2YyODc3M2MyZDk3NTI4OGJjN2QxZDIwNWMzNzQ4NjUxYjA3NWZiYzY2MTBlNThjZGRlZWRkZjhmMTk0MDVhYTgnLFxuICAgICAgICAnYWIwOTAyZThkODgwYTg5NzU4MjEyZWI2NWNkYWY0NzNhMWEwNmRhNTIxZmE5MWYyOWI1Y2I1MmRiMDNlZDgxJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2Q3OTI0ZDRmN2Q0M2VhOTY1YTQ2NWFlMzA5NWZmNDExMzFlNTk0NmYzYzg1Zjc5ZTQ0YWRiY2Y4ZTI3ZTA4MGUnLFxuICAgICAgICAnNTgxZTI4NzJhODZjNzJhNjgzODQyZWMyMjhjYzZkZWZlYTQwYWYyYmQ4OTZkM2E1YzUwNGRjOWZmNmEyNmI1OCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdkZWZkZWE0Y2RiNjc3NzUwYTQyMGZlZTgwN2VhY2YyMWViOTg5OGFlNzliOTc2ODc2NmU0ZmFhMDRhMmQ0YTM0JyxcbiAgICAgICAgJzQyMTFhYjA2OTQ2MzUxNjhlOTk3YjBlYWQyYTkzZGFlY2VkMWY0YTA0YTk1YzBmNmNmYjE5OWY2OWU1NmViNzcnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMmI0ZWEwYTc5N2E0NDNkMjkzZWY1Y2ZmNDQ0ZjQ5NzlmMDZhY2ZlYmQ3ZTg2ZDI3NzQ3NTY1NjEzODM4NWI2YycsXG4gICAgICAgICc4NWU4OWJjMDM3OTQ1ZDkzYjM0MzA4M2I1YTFjODYxMzFhMDFmNjBjNTAyNjk3NjNiNTcwYzg1NGU1YzA5YjdhJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzM1MmJiZjRhNGNkZDEyNTY0ZjkzZmEzMzJjZTMzMzMwMWQ5YWQ0MDI3MWY4MTA3MTgxMzQwYWVmMjViZTU5ZDUnLFxuICAgICAgICAnMzIxZWI0MDc1MzQ4ZjUzNGQ1OWMxODI1OWRkYTNlMWY0YTFiM2IyZTcxYjEwMzljNjdiZDNkOGJjZjgxOTk4YydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICcyZmEyMTA0ZDZiMzhkMTFiMDIzMDAxMDU1OTg3OTEyNGU0MmFiOGRmZWZmNWZmMjlkYzljZGFkZDRlY2FjYzNmJyxcbiAgICAgICAgJzJkZTEwNjgyOTVkZDg2NWI2NDU2OTMzNWJkNWRkODAxODFkNzBlY2ZjODgyNjQ4NDIzYmE3NmI1MzJiN2Q2NydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc5MjQ4Mjc5YjA5YjRkNjhkYWIyMWE5YjA2NmVkZGE4MzI2M2MzZDg0ZTA5NTcyZTI2OWNhMGNkN2Y1NDUzNzE0JyxcbiAgICAgICAgJzczMDE2ZjdiZjIzNGFhZGU1ZDFhYTcxYmRlYTJiMWZmM2ZjMGRlMmE4ODc5MTJmZmU1NGEzMmNlOTdjYjM0MDInXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZGFlZDRmMmJlM2E4YmYyNzhlNzAxMzJmYjBiZWI3NTIyZjU3MGUxNDRiZjYxNWMwN2U5OTZkNDQzZGVlODcyOScsXG4gICAgICAgICdhNjlkY2U0YTdkNmM5OGU4ZDRhMWFjYTg3ZWY4ZDcwMDNmODNjMjMwZjNhZmE3MjZhYjQwZTUyMjkwYmUxYzU1J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2M0NGQxMmM3MDY1ZDgxMmU4YWNmMjhkN2NiYjE5ZjkwMTFlY2Q5ZTlmZGYyODFiMGU2YTNiNWU4N2QyMmU3ZGInLFxuICAgICAgICAnMjExOWE0NjBjZTMyNmNkYzc2YzQ1OTI2Yzk4MmZkYWMwZTEwNmU4NjFlZGY2MWM1YTAzOTA2M2YwZTBlNjQ4MidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc2YTI0NWJmNmRjNjk4NTA0Yzg5YTIwY2ZkZWQ2MDg1MzE1MmI2OTUzMzZjMjgwNjNiNjFjNjVjYmQyNjllNmI0JyxcbiAgICAgICAgJ2UwMjJjZjQyYzJiZDRhNzA4YjNmNTEyNmYxNmEyNGFkOGIzM2JhNDhkMDQyM2I2ZWZkNWU2MzQ4MTAwZDhhODInXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMTY5N2ZmYTZmZDlkZTYyN2MwNzdlM2QyZmU1NDEwODRjZTEzMzAwYjBiZWMxMTQ2Zjk1YWU1N2YwZDBiZDZhNScsXG4gICAgICAgICdiOWMzOThmMTg2ODA2ZjVkMjc1NjE1MDZlNDU1NzQzM2EyY2YxNTAwOWU0OThhZTdhZGVlOWQ2M2QwMWIyMzk2J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzYwNWJkYjAxOTk4MTcxOGI5ODZkMGYwN2U4MzRjYjBkOWRlYjgzNjBmZmI3ZjYxZGY5ODIzNDVlZjI3YTc0NzknLFxuICAgICAgICAnMjk3MmQyZGU0ZjhkMjA2ODFhNzhkOTNlYzk2ZmUyM2MyNmJmYWU4NGZiMTRkYjQzYjAxZTFlOTA1NmI4YzQ5J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzYyZDE0ZGFiNDE1MGJmNDk3NDAyZmRjNDVhMjE1ZTEwZGNiMDFjMzU0OTU5YjEwY2ZlMzFjN2U5ZDg3ZmYzM2QnLFxuICAgICAgICAnODBmYzA2YmQ4Y2M1YjAxMDk4MDg4YTE5NTBlZWQwZGIwMWFhMTMyOTY3YWI0NzIyMzVmNTY0MjQ4M2IyNWVhZidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc4MGM2MGFkMDA0MGYyN2RhZGU1YjRiMDZjNDA4ZTU2YjJjNTBlOWY1NmI5YjhiNDI1ZTU1NWMyZjg2MzA4YjZmJyxcbiAgICAgICAgJzFjMzgzMDNmMWNjNWMzMGYyNmU2NmJhZDdmZTcyZjcwYTY1ZWVkNGNiZTcwMjRlYjFhYTAxZjU2NDMwYmQ1N2EnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnN2E5Mzc1YWQ2MTY3YWQ1NGFhNzRjNjM0OGNjNTRkMzQ0Y2M1ZGM5NDg3ZDg0NzA0OWQ1ZWFiYjBmYTAzYzhmYicsXG4gICAgICAgICdkMGUzZmE5ZWNhODcyNjkwOTU1OWUwZDc5MjY5MDQ2YmRjNTllYTEwYzcwY2UyYjAyZDQ5OWVjMjI0ZGM3ZjcnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZDUyOGVjZDliNjk2YjU0YzkwN2E5ZWQwNDU0NDdhNzliYjQwOGVjMzliNjhkZjUwNGJiNTFmNDU5YmMzZmZjOScsXG4gICAgICAgICdlZWNmNDEyNTMxMzZlNWY5OTk2NmYyMTg4MWZkNjU2ZWJjNDM0NTQwNWM1MjBkYmMwNjM0NjViNTIxNDA5OTMzJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzQ5MzcwYTRiNWY0MzQxMmVhMjVmNTE0ZThlY2RhZDA1MjY2MTE1ZTRhN2VjYjEzODcyMzE4MDhmOGI0NTk2MycsXG4gICAgICAgICc3NThmM2Y0MWFmZDZlZDQyOGIzMDgxYjA1MTJmZDYyYTU0YzNmM2FmYmI1YjY3NjRiNjUzMDUyYTEyOTQ5YzlhJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzc3ZjIzMDkzNmVlODhjYmJkNzNkZjkzMGQ2NDcwMmVmODgxZDgxMWUwZTE0OThlMmYxYzEzZWIxZmMzNDVkNzQnLFxuICAgICAgICAnOTU4ZWY0MmE3ODg2YjY0MDBhMDgyNjZlOWJhMWIzNzg5NmM5NTMzMGQ5NzA3N2NiYmU4ZWIzYzc2NzFjNjBkNidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdmMmRhYzk5MWNjNGNlNGI5ZWE0NDg4N2U1YzdjMGJjZTU4YzgwMDc0YWI5ZDRkYmFlYjI4NTMxYjc3MzlmNTMwJyxcbiAgICAgICAgJ2UwZGVkYzliM2IyZjhkYWQ0ZGExZjMyZGVjMjUzMWRmOWViNWZiZWIwNTk4ZTRmZDFhMTE3ZGJhNzAzYTNjMzcnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNDYzYjNkOWY2NjI2MjFmYjFiNGJlOGZiYmUyNTIwMTI1YTIxNmNkZmM5ZGFlM2RlYmNiYTQ4NTBjNjkwZDQ1YicsXG4gICAgICAgICc1ZWQ0MzBkNzhjMjk2YzM1NDMxMTQzMDZkZDg2MjJkN2M2MjJlMjdjOTcwYTFkZTMxY2IzNzdiMDFhZjczMDdlJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2YxNmY4MDQyNDRlNDZlMmEwOTIzMmQ0YWZmM2I1OTk3NmI5OGZhYzE0MzI4YTJkMWEzMjQ5NmI0OTk5OGYyNDcnLFxuICAgICAgICAnY2VkYWJkOWI4MjIwM2Y3ZTEzZDIwNmZjZGY0ZTMzZDkyYTZjNTNjMjZlNWNjZTI2ZDY1Nzk5NjJjNGUzMWRmNidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdjYWY3NTQyNzJkYzg0NTYzYjAzNTJiN2ExNDMxMWFmNTVkMjQ1MzE1YWNlMjdjNjUzNjllMTVmNzE1MWQ0MWQxJyxcbiAgICAgICAgJ2NiNDc0NjYwZWYzNWY1ZjJhNDFiNjQzZmE1ZTQ2MDU3NWY0ZmE5Yjc5NjIyMzJhNWMzMmY5MDgzMThhMDQ0NzYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMjYwMGNhNGIyODJjYjk4NmY4NWQwZjE3MDk5NzlkOGI0NGEwOWMwN2NiODZkN2MxMjQ0OTdiYzg2ZjA4MjEyMCcsXG4gICAgICAgICc0MTE5Yjg4NzUzYzE1YmQ2YTY5M2IwM2ZjZGRiYjQ1ZDVhYzZiZTc0YWI1ZjBlZjQ0YjBiZTk0NzVhN2U0YjQwJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzc2MzVjYTcyZDdlODQzMmMzMzhlYzUzY2QxMjIyMGJjMDFjNDg2ODVlMjRmN2RjOGM2MDJhNzc0Njk5OGU0MzUnLFxuICAgICAgICAnOTFiNjQ5NjA5NDg5ZDYxM2QxZDVlNTkwZjc4ZTZkNzRlY2ZjMDYxZDU3MDQ4YmFkOWU3NmYzMDJjNWI5YzYxJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzc1NGUzMjM5ZjMyNTU3MGNkYmJmNGE4N2RlZWU4YTY2YjdmMmIzMzQ3OWQ0NjhmYmMxYTUwNzQzYmY1NmNjMTgnLFxuICAgICAgICAnNjczZmI4NmU1YmRhMzBmYjNjZDBlZDMwNGVhNDlhMDIzZWUzM2QwMTk3YTY5NWQwYzVkOTgwOTNjNTM2NjgzJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2UzZTZiZDEwNzFhMWU5NmFmZjU3ODU5YzgyZDU3MGYwMzMwODAwNjYxZDFjOTUyZjlmZTI2OTQ2OTFkOWI5ZTgnLFxuICAgICAgICAnNTljOWUwYmJhMzk0ZTc2ZjQwYzBhYTU4Mzc5YTNjYjZhNWEyMjgzOTkzZTkwYzQxNjcwMDJhZjQ5MjBlMzdmNSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICcxODZiNDgzZDA1NmEwMzM4MjZhZTczZDg4ZjczMjk4NWM0Y2NiMWYzMmJhMzVmNGI0Y2M0N2ZkY2YwNGFhNmViJyxcbiAgICAgICAgJzNiOTUyZDMyYzY3Y2Y3N2UyZTE3NDQ2ZTIwNDE4MGFiMjFmYjgwOTA4OTUxMzhiNGE0YTc5N2Y4NmU4MDg4OGInXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZGY5ZDcwYTZiOTg3NmNlNTQ0Yzk4NTYxZjRiZTRmNzI1NDQyZTZkMmI3MzdkOWM5MWE4MzIxNzI0Y2UwOTYzZicsXG4gICAgICAgICc1NWViMmRhZmQ4NGQ2Y2NkNWY4NjJiNzg1ZGMzOWQ0YWIxNTcyMjI3MjBlZjlkYTIxN2I4YzQ1Y2YyYmEyNDE3J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzVlZGQ1Y2MyM2M1MWU4N2E0OTdjYTgxNWQ1ZGNlMGY4YWI1MjU1NGY4NDllZDg5OTVkZTY0YzVmMzRjZTcxNDMnLFxuICAgICAgICAnZWZhZTljOGRiYzE0MTMwNjYxZThjZWMwMzBjODlhZDBjMTNjNjZjMGQxN2EyOTA1Y2RjNzA2YWI3Mzk5YTg2OCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICcyOTA3OThjMmI2NDc2ODMwZGExMmZlMDIyODdlOWU3NzdhYTNmYmExYzM1NWIxN2E3MjJkMzYyZjg0NjE0ZmJhJyxcbiAgICAgICAgJ2UzOGRhNzZkY2Q0NDA2MjE5ODhkMDBiY2Y3OWFmMjVkNWIyOWMwOTRkYjJhMjMxNDZkMDAzYWZkNDE5NDNlN2EnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnYWYzYzQyM2E5NWQ5ZjViMzA1NDc1NGVmYTE1MGFjMzljZDI5NTUyZmUzNjAyNTczNjJkZmRlY2VmNDA1M2I0NScsXG4gICAgICAgICdmOThhM2ZkODMxZWIyYjc0OWE5M2IwZTZmMzVjZmI0MGM4Y2Q1YWE2NjdhMTU1ODFiYzJmZWRlZDQ5OGZkOWM2J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzc2NmRiYjI0ZDEzNGU3NDVjY2NhYTI4Yzk5YmYyNzQ5MDZiYjY2YjI2ZGNmOThkZjhkMmZlZDUwZDg4NDI0OWEnLFxuICAgICAgICAnNzQ0YjExNTJlYWNiZTVlMzhkY2M4ODc5ODBkYTM4Yjg5NzU4NGE2NWZhMDZjZWRkMmM5MjRmOTdjYmFjNTk5NidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc1OWRiZjQ2ZjhjOTQ3NTliYTIxMjc3YzMzNzg0ZjQxNjQ1ZjdiNDRmNmM1OTZhNThjZTkyZTY2NjE5MWFiZTNlJyxcbiAgICAgICAgJ2M1MzRhZDQ0MTc1ZmJjMzAwZjRlYTZjZTY0ODMwOWEwNDJjZTczOWE3OTE5Nzk4Y2Q4NWUyMTZjNGEzMDdmNmUnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZjEzYWRhOTUxMDNjNDUzNzMwNWU2OTFlNzRlOWE0YThkZDY0N2U3MTFhOTVlNzNjYjYyZGM2MDE4Y2ZkODdiOCcsXG4gICAgICAgICdlMTM4MTdiNDRlZTE0ZGU2NjNiZjRiYzgwODM0MWYzMjY5NDllMjFhNmE3NWMyNTcwNzc4NDE5YmRhZjU3MzNkJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzc3NTRiNGZhMGU4YWNlZDA2ZDQxNjdhMmM1OWNjYTRjZGExODY5YzA2ZWJhZGZiNjQ4ODU1MDAxNWE4ODUyMmMnLFxuICAgICAgICAnMzBlOTNlODY0ZTY2OWQ4MjIyNGI5NjdjMzAyMGI4ZmE4ZDFlNGUzNTBiNmNiY2M1MzdhNDhiNTc4NDExNjNhMidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc5NDhkY2FkZjU5OTBlMDQ4YWEzODc0ZDQ2YWJlZjlkNzAxODU4Zjk1ZGU4MDQxZDJhNjgyOGM5OWUyMjYyNTE5JyxcbiAgICAgICAgJ2U0OTFhNDI1MzdmNmU1OTdkNWQyOGEzMjI0YjFiYzI1ZGY5MTU0ZWZiZDJlZjFkMmNiYmEyY2FlNTM0N2Q1N2UnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNzk2MjQxNDQ1MGM3NmMxNjg5YzdiNDhmODIwMmVjMzdmYjIyNGNmNWFjMGJmYTE1NzAzMjhhOGEzZDdjNzdhYicsXG4gICAgICAgICcxMDBiNjEwZWM0ZmZiNDc2MGQ1YzFmYzEzM2VmNmY2YjEyNTA3YTA1MWYwNGFjNTc2MGFmYTViMjlkYjgzNDM3J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzM1MTQwODc4MzQ5NjRiNTRiMTViMTYwNjQ0ZDkxNTQ4NWExNjk3NzIyNWI4ODQ3YmIwZGQwODUxMzdlYzQ3Y2EnLFxuICAgICAgICAnZWYwYWZiYjIwNTYyMDU0NDhlMTY1MmM0OGU4MTI3ZmM2MDM5ZTc3YzE1YzIzNzhiN2U3ZDE1YTBkZTI5MzMxMSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdkM2NjMzBhZDZiNDgzZTRiYzc5Y2UyYzlkZDhiYzU0OTkzZTk0N2ViOGRmNzg3YjQ0Mjk0M2QzZjdiNTI3ZWFmJyxcbiAgICAgICAgJzhiMzc4YTIyZDgyNzI3OGQ4OWM1ZTliZThmOTUwOGFlM2MyYWQ0NjI5MDM1ODYzMGFmYjM0ZGIwNGVlZGUwYTQnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMTYyNGQ4NDc4MDczMjg2MGNlMWM3OGZjYmZlZmUwOGIyYjI5ODIzZGI5MTNmNjQ5Mzk3NWJhMGZmNDg0NzYxMCcsXG4gICAgICAgICc2ODY1MWNmOWI2ZGE5MDNlMDkxNDQ0OGM2Y2Q5ZDRjYTg5Njg3OGY1MjgyYmU0YzhjYzA2ZTJhNDA0MDc4NTc1J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzczM2NlODBkYTk1NWE4YTI2OTAyYzk1NjMzZTYyYTk4NTE5MjQ3NGI1YWYyMDdkYTZkZjdiNGZkNWZjNjFjZDQnLFxuICAgICAgICAnZjU0MzVhMmJkMmJhZGY3ZDQ4NWE0ZDhiOGRiOWZjY2UzZTFlZjhlMDIwMWU0NTc4YzU0NjczYmMxZGM1ZWExZCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICcxNWQ5NDQxMjU0OTQ1MDY0Y2YxYTFjMzNiYmQzYjQ5Zjg5NjZjNTA5MjE3MWU2OTllZjI1OGRmYWI4MWMwNDVjJyxcbiAgICAgICAgJ2Q1NmViMzBiNjk0NjNlNzIzNGY1MTM3YjczYjg0MTc3NDM0ODAwYmFjZWJmYzY4NWZjMzdiYmU5ZWZlNDA3MGQnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnYTFkMGZjZjJlYzlkZTY3NWI2MTIxMzZlNWNlNzBkMjcxYzIxNDE3YzlkMmI4YWFhYWMxMzg1OTlkMDcxNzk0MCcsXG4gICAgICAgICdlZGQ3N2Y1MGJjYjVhM2NhYjJlOTA3MzczMDk2NjdmMjY0MTQ2MmE1NDA3MGYzZDUxOTIxMmQzOWMxOTdhNjI5J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2UyMmZiZTE1YzBhZjhjY2M1NzgwYzA3MzVmODRkYmU5YTc5MGJhZGVlODI0NWMwNmM3Y2EzNzMzMWNiMzY5ODAnLFxuICAgICAgICAnYTg1NWJhYmFkNWNkNjBjODhiNDMwYTY5ZjUzYTFhN2EzODI4OTE1NDk2NDc5OWJlNDNkMDZkNzdkMzFkYTA2J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzMxMTA5MWRkOTg2MGU4ZTIwZWUxMzQ3M2MxMTU1ZjVmNjk2MzVlMzk0NzA0ZWFhNzQwMDk0NTIyNDZjZmE5YjMnLFxuICAgICAgICAnNjZkYjY1NmY4N2QxZjA0ZmZmZDFmMDQ3ODhjMDY4MzA4NzFlYzVhNjRmZWVlNjg1YmQ4MGYwYjEyODZkODM3NCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICczNGMxZmQwNGQzMDFiZTg5YjMxYzA0NDJkM2U2YWMyNDg4MzkyOGI0NWE5MzQwNzgxODY3ZDQyMzJlYzJkYmRmJyxcbiAgICAgICAgJzk0MTQ2ODVlOTdiMWI1OTU0YmQ0NmY3MzAxNzQxMzZkNTdmMWNlZWI0ODc0NDNkYzUzMjE4NTdiYTczYWJlZSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdmMjE5ZWE1ZDZiNTQ3MDFjMWMxNGRlNWI1NTdlYjQyYThkMTNmM2FiYmNkMDhhZmZjYzJhNWU2YjA0OWI4ZDYzJyxcbiAgICAgICAgJzRjYjk1OTU3ZTgzZDQwYjBmNzNhZjQ1NDRjY2NmNmIxZjRiMDhkM2MwN2IyN2ZiOGQ4YzI5NjJhNDAwNzY2ZDEnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZDdiODc0MGY3NGE4ZmJhYWIxZjY4M2RiOGY0NWRlMjY1NDNhNTQ5MGJjYTYyNzA4NzIzNjkxMjQ2OWEwYjQ0OCcsXG4gICAgICAgICdmYTc3OTY4MTI4ZDljOTJlZTEwMTBmMzM3YWQ0NzE3ZWZmMTVkYjVlZDNjMDQ5YjM0MTFlMDMxNWVhYTQ1OTNiJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzMyZDMxYzIyMmY4ZjZmMGVmODZmN2M5OGQzYTMzMzVlYWQ1YmNkMzJhYmRkOTQyODlmZTRkMzA5MWFhODI0YmYnLFxuICAgICAgICAnNWYzMDMyZjU4OTIxNTZlMzljY2QzZDc5MTViOWUxZGEyZTZkYWM5ZTZmMjZlOTYxMTE4ZDE0Yjg0NjJlMTY2MSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc3NDYxZjM3MTkxNGFiMzI2NzEwNDVhMTU1ZDk4MzFlYTg3OTNkNzdjZDU5NTkyYzQzNDBmODZjYmMxODM0N2I1JyxcbiAgICAgICAgJzhlYzBiYTIzOGI5NmJlYzBjYmRkZGNhZTBhYTQ0MjU0MmVlZTFmZjUwYzk4NmVhNmIzOTg0N2IzY2MwOTJmZjYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZWUwNzlhZGIxZGYxODYwMDc0MzU2YTI1YWEzODIwNmE2ZDcxNmIyYzNlNjc0NTNkMjg3Njk4YmFkN2IyYjJkNicsXG4gICAgICAgICc4ZGMyNDEyYWFmZTNiZTVjNGM1ZjM3ZTBlY2M1ZjlmNmE0NDY5ODlhZjA0YzRlMjVlYmFhYzQ3OWVjMWM4YzFlJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzE2ZWM5M2U0NDdlYzgzZjA0NjdiMTgzMDJlZTYyMGY3ZTY1ZGUzMzE4NzRjOWRjNzJiZmQ4NjE2YmE5ZGE2YjUnLFxuICAgICAgICAnNWU0NjMxMTUwZTYyZmI0MGQwZThjMmE3Y2E1ODA0YTM5ZDU4MTg2YTUwZTQ5NzEzOTYyNjc3OGUyNWIwNjc0ZCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdlYWE1Zjk4MGMyNDVmNmYwMzg5NzgyOTBhZmE3MGI2YmQ4ODU1ODk3Zjk4YjZhYTQ4NWI5NjA2NWQ1MzdiZDk5JyxcbiAgICAgICAgJ2Y2NWY1ZDNlMjkyYzJlMDgxOWE1MjgzOTFjOTk0NjI0ZDc4NDg2OWQ3ZTZlYTY3ZmIxODA0MTAyNGVkYzA3ZGMnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNzhjOTQwNzU0NGFjMTMyNjkyZWUxOTEwYTAyNDM5OTU4YWUwNDg3NzE1MTM0MmVhOTZjNGI2YjM1YTQ5ZjUxJyxcbiAgICAgICAgJ2YzZTAzMTkxNjllYjliODVkNTQwNDc5NTUzOWE1ZTY4ZmExZmJkNTgzYzA2NGQyNDYyYjY3NWYxOTRhM2RkYjQnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNDk0ZjRiZTIxOWExYTc3MDE2ZGNkODM4NDMxYWVhMDAwMWNkYzhhZTdhNmZjNjg4NzI2NTc4ZDk3MDI4NTdhNScsXG4gICAgICAgICc0MjI0MmE5NjkyODNhNWYzMzliYTdmMDc1ZTM2YmEyYWY5MjVjZTMwZDc2N2VkNmU1NWY0YjAzMTg4MGQ1NjJjJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2E1OThhODAzMGRhNmQ4NmM2YmM3ZjJmNTE0NGVhNTQ5ZDI4MjExZWE1OGZhYTcwZWJmNGMxZTY2NWMxZmU5YjUnLFxuICAgICAgICAnMjA0YjVkNmY4NDgyMmMzMDdlNGI0YTcxNDA3MzdhZWMyM2ZjNjNiNjViMzVmODZhMTAwMjZkYmQyZDg2NGU2YidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdjNDE5MTYzNjVhYmIyYjVkMDkxOTJmNWYyZGJlYWZlYzIwOGYwMjBmMTI1NzBhMTg0ZGJhZGMzZTU4NTk1OTk3JyxcbiAgICAgICAgJzRmMTQzNTFkMDA4N2VmYTQ5ZDI0NWIzMjg5ODQ5ODlkNWNhZjk0NTBmMzRiZmMwZWQxNmU5NmI1OGZhOTkxMydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc4NDFkNjA2M2E1ODZmYTQ3NWE3MjQ2MDRkYTAzYmM1YjkyYTJlMGQyZTBhMzZhY2ZlNGM3M2E1NTE0NzQyODgxJyxcbiAgICAgICAgJzczODY3ZjU5YzA2NTllODE5MDRmOWExYzc1NDM2OThlNjI1NjJkNjc0NGMxNjljZTdhMzZkZTAxYThkNjE1NCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc1ZTk1YmIzOTlhNjk3MWQzNzYwMjY5NDdmODliZGUyZjI4MmIzMzgxMDkyOGJlNGRlZDExMmFjNGQ3MGUyMGQ1JyxcbiAgICAgICAgJzM5ZjIzZjM2NjgwOTA4NWJlZWJmYzcxMTgxMzEzNzc1YTk5YzlhZWQ3ZDhiYTM4YjE2MTM4NGM3NDYwMTI4NjUnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMzZlNDY0MWE1Mzk0OGZkNDc2YzM5ZjhhOTlmZDk3NGU1ZWMwNzU2NGI1MzE1ZDhiZjk5NDcxYmNhMGVmMmY2NicsXG4gICAgICAgICdkMjQyNGIxYjFhYmU0ZWI4MTY0MjI3YjA4NWM5YWE5NDU2ZWExMzQ5M2ZkNTYzZTA2ZmQ1MWNmNTY5NGM3OGZjJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzMzNjU4MWVhN2JmYmJiMjkwYzE5MWEyZjUwN2E0MWNmNTY0Mzg0MjE3MGU5MTRmYWVhYjI3YzJjNTc5ZjcyNicsXG4gICAgICAgICdlYWQxMjE2ODU5NWZlMWJlOTkyNTIxMjliNmU1NmIzMzkxZjdhYjE0MTBjZDFlMGVmM2RjZGNhYmQyZmRhMjI0J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzhhYjg5ODE2ZGFkZmQ2YjZhMWYyNjM0ZmNmMDBlYzg0MDM3ODEwMjVlZDY4OTBjNDg0OTc0MjcwNmJkNDNlZGUnLFxuICAgICAgICAnNmZkY2VmMDlmMmY2ZDBhMDQ0ZTY1NGFlZjYyNDEzNmY1MDNkNDU5YzNlODk4NDU4NThhNDdhOTEyOWNkZDI0ZSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICcxZTMzZjFhNzQ2YzljNTc3ODEzMzM0NGQ5Mjk5ZmNhYTIwYjA5MzhlOGFjZmYyNTQ0YmI0MDI4NGI4YzVmYjk0JyxcbiAgICAgICAgJzYwNjYwMjU3ZGQxMWIzYWE5YzhlZDYxOGQyNGVkZmYyMzA2ZDMyMGYxZDAzMDEwZTMzYTdkMjA1N2YzYjNiNidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc4NWI3YzFkY2IzY2VjMWI3ZWU3ZjMwZGVkNzlkZDIwYTBlZDFmNGNjMThjYmNmY2ZhNDEwMzYxZmQ4ZjA4ZjMxJyxcbiAgICAgICAgJzNkOThhOWNkZDAyNmRkNDNmMzkwNDhmMjVhODg0N2Y0ZmNhZmFkMTg5NWQ3YTYzM2M2ZmVkM2MzNWU5OTk1MTEnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMjlkZjlmYmQ4ZDllNDY1MDkyNzVmNGIxMjVkNmQ0NWQ3ZmJlOWEzYjg3OGE3YWY4NzJhMjgwMDY2MWFjNWY1MScsXG4gICAgICAgICdiNGM0ZmU5OWM3NzVhNjA2ZTJkODg2MjE3OTEzOWZmZGE2MWRjODYxYzAxOWU1NWNkMjg3NmViMmEyN2Q4NGInXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnYTBiMWNhZTA2YjBhODQ3YTNmZWE2ZTY3MWFhZjhhZGZkZmU1OGNhMmY3NjgxMDVjODA4MmIyZTQ0OWZjZTI1MicsXG4gICAgICAgICdhZTQzNDEwMmVkZGUwOTU4ZWM0YjE5ZDkxN2E2YTI4ZTZiNzJkYTE4MzRhZmYwZTY1MGYwNDk1MDNhMjk2Y2YyJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzRlOGNlYWZiOWIzZTlhMTM2ZGM3ZmY2N2U4NDAyOTViNDk5ZGZiM2IyMTMzZTRiYTExM2YyZTRjMGUxMjFlNScsXG4gICAgICAgICdjZjIxNzQxMThjOGI2ZDdhNGI0OGY2ZDUzNGNlNWM3OTQyMmMwODZhNjM0NjA1MDJiODI3Y2U2MmEzMjY2ODNjJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2QyNGE0NGUwNDdlMTliNmY1YWZiODFjN2NhMmY2OTA4MGE1MDc2Njg5YTAxMDkxOWY0MjcyNWMyYjc4OWEzM2InLFxuICAgICAgICAnNmZiOGQ1NTkxYjQ2NmY4ZmM2M2RiNTBmMWMwZjFjNjkwMTNmOTk2ODg3YjgyNDRkMmNkZWM0MTdhZmVhOGZhMydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdlYTAxNjA2YTdhNmM5Y2RkMjQ5ZmRmY2ZhY2I5OTU4NDAwMWVkZDI4YWJiYWI3N2I1MTA0ZTk4ZThlM2IzNWQ0JyxcbiAgICAgICAgJzMyMmFmNDkwOGM3MzEyYjBjZmJmZTM2OWY3YTdiM2NkYjdkNDQ5NGJjMjgyMzcwMGNmZDY1MjE4OGEzZWE5OGQnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnYWY4YWRkYmYyYjY2MWM4YTZjNjMyODY1NWViOTY2NTEyNTIwMDdkOGM1ZWEzMWJlNGFkMTk2ZGU4Y2UyMTMxZicsXG4gICAgICAgICc2NzQ5ZTY3YzAyOWI4NWY1MmEwMzRlYWZkMDk2ODM2YjI1MjA4MTg2ODBlMjZhYzhmM2RmYmNkYjcxNzQ5NzAwJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2UzYWUxOTc0NTY2Y2EwNmNjNTE2ZDQ3ZTBmYjE2NWE2NzRhM2RhYmNmY2ExNWU3MjJmMGUzNDUwZjQ1ODg5JyxcbiAgICAgICAgJzJhZWFiZTdlNDUzMTUxMDExNjIxN2YwN2JmNGQwNzMwMGRlOTdlNDg3NGY4MWY1MzM0MjBhNzJlZWIwYmQ2YTQnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNTkxZWUzNTUzMTNkOTk3MjFjZjY5OTNmZmVkMWUzZTMwMTk5M2ZmM2VkMjU4ODAyMDc1ZWE4Y2VkMzk3ZTI0NicsXG4gICAgICAgICdiMGVhNTU4YTExM2MzMGJlYTYwZmM0Nzc1NDYwYzc5MDFmZjBiMDUzZDI1Y2EyYmRlZWU5OGYxYTRiZTVkMTk2J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzExMzk2ZDU1ZmRhNTRjNDlmMTlhYTk3MzE4ZDhkYTYxZmE4NTg0ZTQ3YjA4NDk0NTA3N2NmMDMyNTViNTI5ODQnLFxuICAgICAgICAnOTk4Yzc0YThjZDQ1YWMwMTI4OWQ1ODMzYTdiZWI0NzQ0ZmY1MzZiMDFiMjU3YmU0YzU3NjdiZWE5M2VhNTdhNCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICczYzVkMmExYmEzOWM1YTE3OTAwMDA3MzhjOWUwYzQwYjhkY2RmZDU0Njg3NTRiNjQwNTU0MDE1N2UwMTdhYTdhJyxcbiAgICAgICAgJ2IyMjg0Mjc5OTk1YTM0ZTJmOWQ0ZGU3Mzk2ZmMxOGI4MGY5YjhiOWZkZDI3MGY2NjYxZjc5Y2E0YzgxYmQyNTcnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnY2M4NzA0YjhhNjBhMGRlZmEzYTk5YTcyOTlmMmU5YzNmYmMzOTVhZmIwNGFjMDc4NDI1ZWY4YTE3OTNjYzAzMCcsXG4gICAgICAgICdiZGQ0NjAzOWZlZWQxNzg4MWQxZTA4NjJkYjM0N2Y4Y2YzOTViNzRmYzRiY2RjNGU5NDBiNzRlM2FjMWYxYjEzJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2M1MzNlNGY3ZWE4NTU1YWFjZDk3NzdhYzVjYWQyOWI5N2RkNGRlZmNjYzUzZWU3ZWEyMDQxMTliMjg4OWIxOTcnLFxuICAgICAgICAnNmYwYTI1NmJjNWVmZGY0MjlhMmZiNjI0MmYxYTQzYTJkOWI5MjViYjRhNGIzYTI2YmI4ZTBmNDVlYjU5NjA5NidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdjMTRmOGYyY2NiMjdkNmYxMDlmNmQwOGQwM2NjOTZhNjliYThjMzRlZWMwN2JiY2Y1NjZkNDhlMzNkYTY1OTMnLFxuICAgICAgICAnYzM1OWQ2OTIzYmIzOThmN2ZkNDQ3M2UxNmZlMWMyODQ3NWI3NDBkZDA5ODA3NWU2YzBlODY0OTExM2RjM2EzOCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdhNmNiYzMwNDZiYzZhNDUwYmFjMjQ3ODlmYTE3MTE1YTRjOTczOWVkNzVmOGYyMWNlNDQxZjcyZTBiOTBlNmVmJyxcbiAgICAgICAgJzIxYWU3ZjQ2ODBlODg5YmIxMzA2MTllMmMwZjk1YTM2MGNlYjU3M2M3MDYwMzEzOTg2MmFmZDYxN2ZhOWI5ZidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICczNDdkNmQ5YTAyYzQ4OTI3ZWJmYjg2YzEzNTliMWNhZjEzMGEzYzAyNjdkMTFjZTYzNDRiMzlmOTlkNDNjYzM4JyxcbiAgICAgICAgJzYwZWE3ZjYxYTM1MzUyNGQxYzk4N2Y2ZWNlYzkyZjA4NmQ1NjVhYjY4Nzg3MGNiMTI2ODlmZjFlMzFjNzQ0NDgnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZGE2NTQ1ZDIxODFkYjhkOTgzZjdkY2IzNzVlZjU4NjZkNDdjNjdiMWJmMzFjOGNmODU1ZWY3NDM3YjcyNjU2YScsXG4gICAgICAgICc0OWI5NjcxNWFiNjg3OGE3OWU3OGYwN2NlNTY4MGM1ZDY2NzMwNTFiNDkzNWJkODk3ZmVhODI0Yjc3ZGMyMDhhJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2M0MDc0N2NjOWQwMTJjYjFhMTNiODE0ODMwOWM2ZGU3ZWMyNWQ2OTQ1ZDY1NzE0NmI5ZDU5OTRiOGZlYjExMTEnLFxuICAgICAgICAnNWNhNTYwNzUzYmUyYTEyZmM2ZGU2Y2FmMmNiNDg5NTY1ZGI5MzYxNTZiOTUxNGUxYmI1ZTgzMDM3ZTBmYTJkNCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc0ZTQyYzhlYzgyYzk5Nzk4Y2NmM2E2MTBiZTg3MGU3ODMzOGM3ZjcxMzM0OGJkMzRjODIwM2VmNDAzN2YzNTAyJyxcbiAgICAgICAgJzc1NzFkNzRlZTVlMGZiOTJhN2E4YjMzYTA3NzgzMzQxYTU0OTIxNDRjYzU0YmNjNDBhOTQ0NzM2OTM2MDY0MzcnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMzc3NWFiNzA4OWJjNmFmODIzYWJhMmUxYWY3MGIyMzZkMjUxY2FkYjBjODY3NDMyODc1MjJhMWIzYjBkZWRlYScsXG4gICAgICAgICdiZTUyZDEwN2JjZmEwOWQ4YmNiOTczNmE4MjhjZmE3ZmFjOGRiMTdiZjdhNzZhMmM0MmFkOTYxNDA5MDE4Y2Y3J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2NlZTMxY2JmN2UzNGVjMzc5ZDk0ZmI4MTRkM2Q3NzVhZDk1NDU5NWQxMzE0YmE4ODQ2OTU5ZTNlODJmNzRlMjYnLFxuICAgICAgICAnOGZkNjRhMTRjMDZiNTg5YzI2Yjk0N2FlMmJjZjZiZmEwMTQ5ZWYwYmUxNGVkNGQ4MGY0NDhhMDFjNDNiMWM2ZCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdiNGY5ZWFlYTA5YjY5MTc2MTlmNmVhNmE0ZWI1NDY0ZWZkZGI1OGZkNDViMWViZWZjZGMxYTAxZDA4YjQ3OTg2JyxcbiAgICAgICAgJzM5ZTVjOTkyNWI1YTU0YjA3NDMzYTRmMThjNjE3MjZmOGJiMTMxYzAxMmNhNTQyZWIyNGE4YWMwNzIwMDY4MmEnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZDQyNjNkZmMzZDJkZjkyM2EwMTc5YTQ4OTY2ZDMwY2U4NGUyNTE1YWZjM2RjY2MxYjc3OTA3NzkyZWJjYzYwZScsXG4gICAgICAgICc2MmRmYWYwN2EwZjc4ZmViMzBlMzBkNjI5NTg1M2NlMTg5ZTEyNzc2MGFkNmNmN2ZhZTE2NGUxMjJhMjA4ZDU0J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzQ4NDU3NTI0ODIwZmE2NWE0ZjhkMzVlYjY5MzA4NTdjMDAzMmFjYzBhNGEyZGU0MjIyMzNlZWRhODk3NjEyYzQnLFxuICAgICAgICAnMjVhNzQ4YWIzNjc5NzlkOTg3MzNjMzhhMWZhMWMyZTdkYzZjYzA3ZGIyZDYwYTlhZTdhNzZhYWE0OWJkMGY3NydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdkZmVlZWYxODgxMTAxZjJjYjExNjQ0ZjNhMmFmZGZjMjA0NWUxOTkxOTE1MjkyM2YzNjdhMTc2N2MxMWNjZWRhJyxcbiAgICAgICAgJ2VjZmI3MDU2Y2YxZGUwNDJmOTQyMGJhYjM5Njc5M2MwYzM5MGJkZTc0YjRiYmRmZjE2YTgzYWUwOWE5YTc1MTcnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNmQ3ZWY2YjE3NTQzZjgzNzNjNTczZjQ0ZTFmMzg5ODM1ZDg5YmNiYzYwNjJjZWQzNmM4MmRmODNiOGZhZTg1OScsXG4gICAgICAgICdjZDQ1MGVjMzM1NDM4OTg2ZGZlZmExMGM1N2ZlYTliY2M1MjFhMDk1OWIyZDgwYmJmNzRiMTkwZGNhNzEyZDEwJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2U3NTYwNWQ1OTEwMmE1YTI2ODQ1MDBkM2I5OTFmMmUzZjNjODhiOTMyMjU1NDcwMzVhZjI1YWY2NmUwNDU0MWYnLFxuICAgICAgICAnZjVjNTQ3NTRhOGY3MWVlNTQwYjliNDg3Mjg0NzNlMzE0ZjcyOWFjNTMwOGIwNjkzODM2MDk5MGUyYmZhZDEyNSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdlYjk4NjYwZjRjNGRmYWEwNmEyYmU0NTNkNTAyMGJjOTlhMGMyZTYwYWJlMzg4NDU3ZGQ0M2ZlZmIxZWQ2MjBjJyxcbiAgICAgICAgJzZjYjlhODg3NmQ5Y2I4NTIwNjA5YWYzYWRkMjZjZDIwYTBhN2NkOGE5NDExMTMxY2U4NWY0NDEwMDA5OTIyM2UnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMTNlODdiMDI3ZDg1MTRkMzU5MzlmMmU2ODkyYjE5OTIyMTU0NTk2OTQxODg4MzM2ZGMzNTYzZTNiOGRiYTk0MicsXG4gICAgICAgICdmZWY1YTNjNjgwNTlhNmRlYzVkNjI0MTE0YmYxZTkxYWFjMmI5ZGE1NjhkNmFiZWIyNTcwZDU1NjQ2YjhhZGYxJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2VlMTYzMDI2ZTlmZDZmZTAxN2MzOGYwNmE1YmU2ZmMxMjU0MjRiMzcxY2UyNzA4ZTdiZjQ0OTE2OTFlNTc2NGEnLFxuICAgICAgICAnMWFjYjI1MGYyNTVkZDYxYzQzZDk0Y2NjNjcwZDBmNThmNDlhZTNmYTE1Yjk2NjIzZTU0MzBkYTBhZDZjNjJiMidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdiMjY4ZjVlZjlhZDUxZTRkNzhkZTNhNzUwYzJkYzg5YjFlNjI2ZDQzNTA1ODY3OTk5OTMyZTVkYjMzYWYzZDgwJyxcbiAgICAgICAgJzVmMzEwZDRiM2M5OWI5ZWJiMTlmNzdkNDFjMWRlZTAxOGNmMGQzNGZkNDE5MTYxNDAwM2U5NDVhMTIxNmU0MjMnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZmYwN2YzMTE4YTlkZjAzNWU5ZmFkODVlYjZjN2JmZTQyYjAyZjAxY2E5OWNlZWEzYmY3ZmZkYmE5M2M0NzUwZCcsXG4gICAgICAgICc0MzgxMzZkNjAzZTg1OGEzYTVjNDQwYzM4ZWNjYmFkZGMxZDI5NDIxMTRlMmVkZGQ0NzQwZDA5OGNlZDFmMGQ4J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzhkOGI5ODU1YzdjMDUyYTM0MTQ2ZmQyMGZmYjY1OGJlYTRiOWY2OWUwZDgyNWViZWMxNmU4YzNjZTJiNTI2YTEnLFxuICAgICAgICAnY2RiNTU5ZWVkYzJkNzlmOTI2YmFmNDRmYjg0ZWE0ZDQ0YmNmNTBmZWU1MWQ3Y2ViMzBlMmU3ZjQ2MzAzNjc1OCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc1MmRiMGI1Mzg0ZGZiZjA1YmZhOWQ0NzJkN2FlMjZkZmU0Yjg1MWNlY2E5MWIxZWJhNTQyNjMxODBkYTMyYjYzJyxcbiAgICAgICAgJ2MzYjk5N2QwNTBlZTVkNDIzZWJhZjY2YTZkYjlmNTdiMzE4MGM5MDI4NzU2NzlkZTkyNGI2OWQ4NGE3YjM3NSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdlNjJmOTQ5MGQzZDUxZGE2Mzk1ZWZkMjRlODA5MTljYzdkMGYyOWMzZjNmYTQ4YzZmZmY1NDNiZWNiZDQzMzUyJyxcbiAgICAgICAgJzZkODlhZDdiYTQ4NzZiMGIyMmMyY2EyODBjNjgyODYyZjM0MmM4NTkxZjFkYWY1MTcwZTA3YmZkOWNjYWZhN2QnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnN2YzMGVhMjQ3NmIzOTliNDk1NzUwOWM4OGY3N2QwMTkxYWZhMmZmNWNiN2IxNGZkNmQ4ZTdkNjVhYWFiMTE5MycsXG4gICAgICAgICdjYTVlZjdkNGIyMzFjOTRjM2IxNTM4OWE1ZjYzMTFlOWRhZmY3YmI2N2IxMDNlOTg4MGVmNGJmZjYzN2FjYWVjJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzUwOThmZjFlMWQ5ZjE0ZmI0NmEyMTBmYWRhNmM5MDNmZWYwZmI3YjRhMWRkMWQ5YWM2MGEwMzYxODAwYjdhMDAnLFxuICAgICAgICAnOTczMTE0MWQ4MWZjOGY4MDg0ZDM3YzZlNzU0MjAwNmIzZWUxYjQwZDYwZGZlNTM2MmE1YjEzMmZkMTdkZGMwJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzMyYjc4YzdkZTllZTUxMmE3Mjg5NWJlNmI5Y2JlZmE2ZTJmM2M0Y2NjZTQ0NWM5NmI5ZjJjODFlMjc3OGFkNTgnLFxuICAgICAgICAnZWUxODQ5ZjUxM2RmNzFlMzJlZmMzODk2ZWUyODI2MGM3M2JiODA1NDdhZTIyNzViYTQ5NzIzNzc5NGM4NzUzYydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdlMmNiNzRmZGRjOGU5ZmJjZDA3NmVlZjJhN2M3MmIwY2UzN2Q1MGYwODI2OWRmYzA3NGI1ODE1NTA1NDdhNGY3JyxcbiAgICAgICAgJ2QzYWEyZWQ3MWM5ZGQyMjQ3YTYyZGYwNjI3MzZlYjBiYWRkZWE5ZTM2MTIyZDJiZTg2NDFhYmNiMDA1Y2M0YTQnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnODQzODQ0NzU2NmQ0ZDdiZWRhZGMyOTk0OTZhYjM1NzQyNjAwOWEzNWYyMzVjYjE0MWJlMGQ5OWNkMTBhZTNhOCcsXG4gICAgICAgICdjNGUxMDIwOTE2OTgwYTRkYTVkMDFhYzVlNmFkMzMwNzM0ZWYwZDc5MDY2MzFjNGYyMzkwNDI2YjJlZGQ3OTFmJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzQxNjJkNDg4Yjg5NDAyMDM5YjU4NGM2ZmM2YzMwODg3MDU4N2Q5YzQ2ZjY2MGI4NzhhYjY1YzgyYzcxMWQ2N2UnLFxuICAgICAgICAnNjcxNjNlOTAzMjM2Mjg5Zjc3NmYyMmMyNWZiOGEzYWZjMTczMmYyYjg0YjRlOTVkYmRhNDdhZTVhMDg1MjY0OSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICczZmFkM2ZhODRjYWYwZjM0ZjBmODliZmQyZGNmNTRmYzE3NWQ3NjdhZWMzZTUwNjg0ZjNiYTRhNGJmNWY2ODNkJyxcbiAgICAgICAgJ2NkMWJjN2NiNmNjNDA3YmIyZjBjYTY0N2M3MThhNzMwY2Y3MTg3MmU3ZDBkMmE1M2ZhMjBlZmNkZmU2MTgyNidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc2NzRmMjYwMGEzMDA3YTAwNTY4YzFhN2NlMDVkMDgxNmMxZmI4NGJmMTM3MDc5OGYxYzY5NTMyZmFlYjFhODZiJyxcbiAgICAgICAgJzI5OWQyMWY5NDEzZjMzYjNlZGY0M2IyNTcwMDQ1ODBiNzBkYjU3ZGEwYjE4MjI1OWUwOWVlY2M2OWUwZDM4YTUnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZDMyZjRkYTU0YWRlNzRhYmI4MWI4MTVhZDFmYjNiMjYzZDgyZDZjNjkyNzE0YmNmZjg3ZDI5YmQ1ZWU5ZjA4ZicsXG4gICAgICAgICdmOTQyOWU3MzhiOGU1M2I5NjhlOTkwMTZjMDU5NzA3NzgyZTE0ZjQ1MzUzNTlkNTgyZmM0MTY5MTBiM2VlYTg3J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzMwZTRlNjcwNDM1Mzg1NTU2ZTU5MzY1NzEzNTg0NWQzNmZiYjY5MzFmNzJiMDhjYjFlZDk1NGYxZTNjZTNmZjYnLFxuICAgICAgICAnNDYyZjliY2U2MTk4OTg2Mzg0OTkzNTAxMTNiYmM5YjEwYTg3OGQzNWRhNzA3NDBkYzY5NWE1NTllYjg4ZGI3YidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdiZTIwNjIwMDNjNTFjYzMwMDQ2ODI5MDQzMzBlNGRlZTdmM2RjZDEwYjAxZTU4MGJmMTk3MWIwNGQ0Y2FkMjk3JyxcbiAgICAgICAgJzYyMTg4YmM0OWQ2MWU1NDI4NTczZDQ4YTc0ZTFjNjU1YjFjNjEwOTA5MDU2ODJhMGQ1NTU4ZWQ3MmRjY2I5YmMnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnOTMxNDQ0MjNhY2UzNDUxZWQyOWUwZmI5YWMyYWYyMTFjYjZlODRhNjAxZGY1OTkzYzQxOTg1OWZmZjVkZjA0YScsXG4gICAgICAgICc3YzEwZGZiMTY0YzM0MjVmNWM3MWEzZjlkNzk5MjAzOGYxMDY1MjI0ZjcyYmI5ZDFkOTAyYTZkMTMwMzdiNDdjJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2IwMTVmODA0NGY1ZmNiZGNmMjFjYTI2ZDZjMzRmYjgxOTc4MjkyMDVjN2I3ZDJhN2NiNjY0MThjMTU3YjExMmMnLFxuICAgICAgICAnYWI4YzFlMDg2ZDA0ZTgxMzc0NGE2NTViMmRmOGQ1ZjgzYjNjZGM2ZmFhMzA4OGMxZDNhZWExNDU0ZTNhMWQ1ZidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdkNWU5ZTFkYTY0OWQ5N2Q4OWU0ODY4MTE3YTQ2NWEzYTRmOGExOGRlNTdhMTQwZDM2YjNmMmFmMzQxYTIxYjUyJyxcbiAgICAgICAgJzRjYjA0NDM3ZjM5MWVkNzMxMTFhMTNjYzFkNGRkMGRiMTY5MzQ2NWMyMjQwNDgwZDg5NTVlODU5MmYyNzQ0N2EnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZDNhZTQxMDQ3ZGQ3Y2EwNjVkYmY4ZWQ3N2I5OTI0Mzk5ODMwMDVjZDcyZTE2ZDZmOTk2YTUzMTZkMzY5NjZiYicsXG4gICAgICAgICdiZDFhZWIyMWFkMjJlYmIyMmExMGYwMzAzNDE3YzZkOTY0ZjhjZGQ3ZGYwYWNhNjE0YjEwZGMxNGQxMjVhYzQ2J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzQ2M2UyNzYzZDg4NWY5NThmYzY2Y2RkMjI4MDBmMGE0ODcxOTdkMGE4MmUzNzdiNDlmODBhZjg3Yzg5N2IwNjUnLFxuICAgICAgICAnYmZlZmFjZGIwZTVkMGZkN2RmM2EzMTFhOTRkZTA2MmIyNmI4MGM2MWZiYzk3NTA4Yjc5OTkyNjcxZWY3Y2E3ZidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc3OTg1ZmRmZDEyN2MwNTY3YzZmNTNlYzFiYjYzZWMzMTU4ZTU5N2M0MGJmZTc0N2M4M2NkZGZjOTEwNjQxOTE3JyxcbiAgICAgICAgJzYwM2MxMmRhZjNkOTg2MmVmMmIyNWZlMWRlMjg5YWVkMjRlZDI5MWUwZWM2NzA4NzAzYTViZDU2N2YzMmVkMDMnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNzRhMWFkNmI1Zjc2ZTM5ZGIyZGQyNDk0MTBlYWM3Zjk5ZTc0YzU5Y2I4M2QyZDBlZDVmZjE1NDNkYTc3MDNlOScsXG4gICAgICAgICdjYzYxNTdlZjE4YzljNjNjZDYxOTNkODM2MzFiYmVhMDA5M2UwOTY4OTQyZThjMzNkNTczN2ZkNzkwZTBkYjA4J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzMwNjgyYTUwNzAzMzc1ZjYwMmQ0MTY2NjRiYTE5YjdmYzliYWI0MmM3Mjc0NzQ2M2E3MWQwODk2YjIyZjZkYTMnLFxuICAgICAgICAnNTUzZTA0ZjZiMDE4YjRmYTZjOGYzOWU3ZjMxMWQzMTc2MjkwZDBlMGYxOWNhNzNmMTc3MTRkOTk3N2EyMmZmOCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc5ZTIxNThmMGQ3YzBkNWYyNmMzNzkxZWZlZmE3OTU5NzY1NGU3YTJiMjQ2NGY1MmIxZWU2YzEzNDc3NjllZjU3JyxcbiAgICAgICAgJzcxMmZjZGQxYjkwNTNmMDkwMDNhMzQ4MWZhNzc2MmU5ZmZkN2M4ZWYzNWEzODUwOWUyZmJmMjYyOTAwODM3MydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICcxNzZlMjY5ODlhNDNjOWNmZWJhNDAyOWMyMDI1MzhjMjgxNzJlNTY2ZTNjNGZjZTczMjI4NTdmM2JlMzI3ZDY2JyxcbiAgICAgICAgJ2VkOGNjOWQwNGIyOWViODc3ZDI3MGI0ODc4ZGM0M2MxOWFlZmQzMWY0ZWVlMDllZTdiNDc4MzRjMWZhNGIxYzMnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNzVkNDZlZmVhMzc3MWU2ZTY4YWJiODlhMTNhZDc0N2VjZjE4OTIzOTNkZmM0ZjFiNzAwNDc4OGM1MDM3NGRhOCcsXG4gICAgICAgICc5ODUyMzkwYTk5NTA3Njc5ZmQwYjg2ZmQyYjM5YTg2OGQ3ZWZjMjIxNTEzNDZlMWEzY2E0NzI2NTg2YTZiZWQ4J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzgwOWEyMGM2N2Q2NDkwMGZmYjY5OGM0YzgyNWY2ZDVmMjMxMGZiMDQ1MWM4NjkzNDViNzMxOWY2NDU2MDU3MjEnLFxuICAgICAgICAnOWU5OTQ5ODBkOTkxN2UyMmI3NmIwNjE5MjdmYTA0MTQzZDA5NmNjYzU0OTYzZTZhNWViZmE1ZjNmOGUyODZjMSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICcxYjM4OTAzYTQzZjdmMTE0ZWQ0NTAwYjRlYWM3MDgzZmRlZmVjZTFjZjI5YzYzNTI4ZDU2MzQ0NmY5NzJjMTgwJyxcbiAgICAgICAgJzQwMzZlZGM5MzFhNjBhZTg4OTM1M2Y3N2ZkNTNkZTRhMjcwOGIyNmI2ZjVkYTcyYWQzMzk0MTE5ZGFmNDA4ZjknXG4gICAgICBdXG4gICAgXVxuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSBleHBvcnRzO1xudmFyIEJOID0gcmVxdWlyZSgnYm4uanMnKTtcblxudXRpbHMuYXNzZXJ0ID0gZnVuY3Rpb24gYXNzZXJ0KHZhbCwgbXNnKSB7XG4gIGlmICghdmFsKVxuICAgIHRocm93IG5ldyBFcnJvcihtc2cgfHwgJ0Fzc2VydGlvbiBmYWlsZWQnKTtcbn07XG5cbmZ1bmN0aW9uIHRvQXJyYXkobXNnLCBlbmMpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkobXNnKSlcbiAgICByZXR1cm4gbXNnLnNsaWNlKCk7XG4gIGlmICghbXNnKVxuICAgIHJldHVybiBbXTtcbiAgdmFyIHJlcyA9IFtdO1xuICBpZiAodHlwZW9mIG1zZyAhPT0gJ3N0cmluZycpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1zZy5sZW5ndGg7IGkrKylcbiAgICAgIHJlc1tpXSA9IG1zZ1tpXSB8IDA7XG4gICAgcmV0dXJuIHJlcztcbiAgfVxuICBpZiAoIWVuYykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbXNnLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgYyA9IG1zZy5jaGFyQ29kZUF0KGkpO1xuICAgICAgdmFyIGhpID0gYyA+PiA4O1xuICAgICAgdmFyIGxvID0gYyAmIDB4ZmY7XG4gICAgICBpZiAoaGkpXG4gICAgICAgIHJlcy5wdXNoKGhpLCBsbyk7XG4gICAgICBlbHNlXG4gICAgICAgIHJlcy5wdXNoKGxvKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoZW5jID09PSAnaGV4Jykge1xuICAgIG1zZyA9IG1zZy5yZXBsYWNlKC9bXmEtejAtOV0rL2lnLCAnJyk7XG4gICAgaWYgKG1zZy5sZW5ndGggJSAyICE9PSAwKVxuICAgICAgbXNnID0gJzAnICsgbXNnO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbXNnLmxlbmd0aDsgaSArPSAyKVxuICAgICAgcmVzLnB1c2gocGFyc2VJbnQobXNnW2ldICsgbXNnW2kgKyAxXSwgMTYpKTtcbiAgfVxuICByZXR1cm4gcmVzO1xufVxudXRpbHMudG9BcnJheSA9IHRvQXJyYXk7XG5cbmZ1bmN0aW9uIHplcm8yKHdvcmQpIHtcbiAgaWYgKHdvcmQubGVuZ3RoID09PSAxKVxuICAgIHJldHVybiAnMCcgKyB3b3JkO1xuICBlbHNlXG4gICAgcmV0dXJuIHdvcmQ7XG59XG51dGlscy56ZXJvMiA9IHplcm8yO1xuXG5mdW5jdGlvbiB0b0hleChtc2cpIHtcbiAgdmFyIHJlcyA9ICcnO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IG1zZy5sZW5ndGg7IGkrKylcbiAgICByZXMgKz0gemVybzIobXNnW2ldLnRvU3RyaW5nKDE2KSk7XG4gIHJldHVybiByZXM7XG59XG51dGlscy50b0hleCA9IHRvSGV4O1xuXG51dGlscy5lbmNvZGUgPSBmdW5jdGlvbiBlbmNvZGUoYXJyLCBlbmMpIHtcbiAgaWYgKGVuYyA9PT0gJ2hleCcpXG4gICAgcmV0dXJuIHRvSGV4KGFycik7XG4gIGVsc2VcbiAgICByZXR1cm4gYXJyO1xufTtcblxuLy8gUmVwcmVzZW50IG51bSBpbiBhIHctTkFGIGZvcm1cbmZ1bmN0aW9uIGdldE5BRihudW0sIHcpIHtcbiAgdmFyIG5hZiA9IFtdO1xuICB2YXIgd3MgPSAxIDw8ICh3ICsgMSk7XG4gIHZhciBrID0gbnVtLmNsb25lKCk7XG4gIHdoaWxlIChrLmNtcG4oMSkgPj0gMCkge1xuICAgIHZhciB6O1xuICAgIGlmIChrLmlzT2RkKCkpIHtcbiAgICAgIHZhciBtb2QgPSBrLmFuZGxuKHdzIC0gMSk7XG4gICAgICBpZiAobW9kID4gKHdzID4+IDEpIC0gMSlcbiAgICAgICAgeiA9ICh3cyA+PiAxKSAtIG1vZDtcbiAgICAgIGVsc2VcbiAgICAgICAgeiA9IG1vZDtcbiAgICAgIGsuaXN1Ym4oeik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHogPSAwO1xuICAgIH1cbiAgICBuYWYucHVzaCh6KTtcblxuICAgIC8vIE9wdGltaXphdGlvbiwgc2hpZnQgYnkgd29yZCBpZiBwb3NzaWJsZVxuICAgIHZhciBzaGlmdCA9IChrLmNtcG4oMCkgIT09IDAgJiYgay5hbmRsbih3cyAtIDEpID09PSAwKSA/ICh3ICsgMSkgOiAxO1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgc2hpZnQ7IGkrKylcbiAgICAgIG5hZi5wdXNoKDApO1xuICAgIGsuaXVzaHJuKHNoaWZ0KTtcbiAgfVxuXG4gIHJldHVybiBuYWY7XG59XG51dGlscy5nZXROQUYgPSBnZXROQUY7XG5cbi8vIFJlcHJlc2VudCBrMSwgazIgaW4gYSBKb2ludCBTcGFyc2UgRm9ybVxuZnVuY3Rpb24gZ2V0SlNGKGsxLCBrMikge1xuICB2YXIganNmID0gW1xuICAgIFtdLFxuICAgIFtdXG4gIF07XG5cbiAgazEgPSBrMS5jbG9uZSgpO1xuICBrMiA9IGsyLmNsb25lKCk7XG4gIHZhciBkMSA9IDA7XG4gIHZhciBkMiA9IDA7XG4gIHdoaWxlIChrMS5jbXBuKC1kMSkgPiAwIHx8IGsyLmNtcG4oLWQyKSA+IDApIHtcblxuICAgIC8vIEZpcnN0IHBoYXNlXG4gICAgdmFyIG0xNCA9IChrMS5hbmRsbigzKSArIGQxKSAmIDM7XG4gICAgdmFyIG0yNCA9IChrMi5hbmRsbigzKSArIGQyKSAmIDM7XG4gICAgaWYgKG0xNCA9PT0gMylcbiAgICAgIG0xNCA9IC0xO1xuICAgIGlmIChtMjQgPT09IDMpXG4gICAgICBtMjQgPSAtMTtcbiAgICB2YXIgdTE7XG4gICAgaWYgKChtMTQgJiAxKSA9PT0gMCkge1xuICAgICAgdTEgPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgbTggPSAoazEuYW5kbG4oNykgKyBkMSkgJiA3O1xuICAgICAgaWYgKChtOCA9PT0gMyB8fCBtOCA9PT0gNSkgJiYgbTI0ID09PSAyKVxuICAgICAgICB1MSA9IC1tMTQ7XG4gICAgICBlbHNlXG4gICAgICAgIHUxID0gbTE0O1xuICAgIH1cbiAgICBqc2ZbMF0ucHVzaCh1MSk7XG5cbiAgICB2YXIgdTI7XG4gICAgaWYgKChtMjQgJiAxKSA9PT0gMCkge1xuICAgICAgdTIgPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgbTggPSAoazIuYW5kbG4oNykgKyBkMikgJiA3O1xuICAgICAgaWYgKChtOCA9PT0gMyB8fCBtOCA9PT0gNSkgJiYgbTE0ID09PSAyKVxuICAgICAgICB1MiA9IC1tMjQ7XG4gICAgICBlbHNlXG4gICAgICAgIHUyID0gbTI0O1xuICAgIH1cbiAgICBqc2ZbMV0ucHVzaCh1Mik7XG5cbiAgICAvLyBTZWNvbmQgcGhhc2VcbiAgICBpZiAoMiAqIGQxID09PSB1MSArIDEpXG4gICAgICBkMSA9IDEgLSBkMTtcbiAgICBpZiAoMiAqIGQyID09PSB1MiArIDEpXG4gICAgICBkMiA9IDEgLSBkMjtcbiAgICBrMS5pdXNocm4oMSk7XG4gICAgazIuaXVzaHJuKDEpO1xuICB9XG5cbiAgcmV0dXJuIGpzZjtcbn1cbnV0aWxzLmdldEpTRiA9IGdldEpTRjtcblxuZnVuY3Rpb24gY2FjaGVkUHJvcGVydHkob2JqLCBuYW1lLCBjb21wdXRlcikge1xuICB2YXIga2V5ID0gJ18nICsgbmFtZTtcbiAgb2JqLnByb3RvdHlwZVtuYW1lXSA9IGZ1bmN0aW9uIGNhY2hlZFByb3BlcnR5KCkge1xuICAgIHJldHVybiB0aGlzW2tleV0gIT09IHVuZGVmaW5lZCA/IHRoaXNba2V5XSA6XG4gICAgICAgICAgIHRoaXNba2V5XSA9IGNvbXB1dGVyLmNhbGwodGhpcyk7XG4gIH07XG59XG51dGlscy5jYWNoZWRQcm9wZXJ0eSA9IGNhY2hlZFByb3BlcnR5O1xuXG5mdW5jdGlvbiBwYXJzZUJ5dGVzKGJ5dGVzKSB7XG4gIHJldHVybiB0eXBlb2YgYnl0ZXMgPT09ICdzdHJpbmcnID8gdXRpbHMudG9BcnJheShieXRlcywgJ2hleCcpIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBieXRlcztcbn1cbnV0aWxzLnBhcnNlQnl0ZXMgPSBwYXJzZUJ5dGVzO1xuXG5mdW5jdGlvbiBpbnRGcm9tTEUoYnl0ZXMpIHtcbiAgcmV0dXJuIG5ldyBCTihieXRlcywgJ2hleCcsICdsZScpO1xufVxudXRpbHMuaW50RnJvbUxFID0gaW50RnJvbUxFO1xuXG4iLCJtb2R1bGUuZXhwb3J0cz17XG4gIFwiX2FyZ3NcIjogW1xuICAgIFtcbiAgICAgIHtcbiAgICAgICAgXCJyYXdcIjogXCJlbGxpcHRpY0BodHRwczovL3JlZ2lzdHJ5Lm5wbWpzLm9yZy9lbGxpcHRpYy8tL2VsbGlwdGljLTYuMy4xLnRnelwiLFxuICAgICAgICBcInNjb3BlXCI6IG51bGwsXG4gICAgICAgIFwiZXNjYXBlZE5hbWVcIjogXCJlbGxpcHRpY1wiLFxuICAgICAgICBcIm5hbWVcIjogXCJlbGxpcHRpY1wiLFxuICAgICAgICBcInJhd1NwZWNcIjogXCJodHRwczovL3JlZ2lzdHJ5Lm5wbWpzLm9yZy9lbGxpcHRpYy8tL2VsbGlwdGljLTYuMy4xLnRnelwiLFxuICAgICAgICBcInNwZWNcIjogXCJodHRwczovL3JlZ2lzdHJ5Lm5wbWpzLm9yZy9lbGxpcHRpYy8tL2VsbGlwdGljLTYuMy4xLnRnelwiLFxuICAgICAgICBcInR5cGVcIjogXCJyZW1vdGVcIlxuICAgICAgfSxcbiAgICAgIFwiL2hvbWUvaWx1dnBvb2wxOS9EZXNrdG9wL3hidC95b3Vycy1jaGFubmVscy9ub2RlX21vZHVsZXMveW91cnMtYml0Y29pblwiXG4gICAgXVxuICBdLFxuICBcIl9mcm9tXCI6IFwiZWxsaXB0aWNANi4zLjFcIixcbiAgXCJfaWRcIjogXCJlbGxpcHRpY0A2LjMuMVwiLFxuICBcIl9pbkNhY2hlXCI6IHRydWUsXG4gIFwiX2xvY2F0aW9uXCI6IFwiL3lvdXJzLWJpdGNvaW4vZWxsaXB0aWNcIixcbiAgXCJfcGhhbnRvbUNoaWxkcmVuXCI6IHt9LFxuICBcIl9yZXF1ZXN0ZWRcIjoge1xuICAgIFwicmF3XCI6IFwiZWxsaXB0aWNAaHR0cHM6Ly9yZWdpc3RyeS5ucG1qcy5vcmcvZWxsaXB0aWMvLS9lbGxpcHRpYy02LjMuMS50Z3pcIixcbiAgICBcInNjb3BlXCI6IG51bGwsXG4gICAgXCJlc2NhcGVkTmFtZVwiOiBcImVsbGlwdGljXCIsXG4gICAgXCJuYW1lXCI6IFwiZWxsaXB0aWNcIixcbiAgICBcInJhd1NwZWNcIjogXCJodHRwczovL3JlZ2lzdHJ5Lm5wbWpzLm9yZy9lbGxpcHRpYy8tL2VsbGlwdGljLTYuMy4xLnRnelwiLFxuICAgIFwic3BlY1wiOiBcImh0dHBzOi8vcmVnaXN0cnkubnBtanMub3JnL2VsbGlwdGljLy0vZWxsaXB0aWMtNi4zLjEudGd6XCIsXG4gICAgXCJ0eXBlXCI6IFwicmVtb3RlXCJcbiAgfSxcbiAgXCJfcmVxdWlyZWRCeVwiOiBbXG4gICAgXCIveW91cnMtYml0Y29pblwiLFxuICAgIFwiL3lvdXJzLWJpdGNvaW4vYnJvd3NlcmlmeS1zaWduXCIsXG4gICAgXCIveW91cnMtYml0Y29pbi9jcmVhdGUtZWNkaFwiXG4gIF0sXG4gIFwiX3Jlc29sdmVkXCI6IFwiaHR0cHM6Ly9yZWdpc3RyeS5ucG1qcy5vcmcvZWxsaXB0aWMvLS9lbGxpcHRpYy02LjMuMS50Z3pcIixcbiAgXCJfc2hhc3VtXCI6IFwiMTc3ODFmMjEwOWFiMGVjNjg2YjE0NmJkY2ZmNWQyZThjNmFlY2VkYVwiLFxuICBcIl9zaHJpbmt3cmFwXCI6IG51bGwsXG4gIFwiX3NwZWNcIjogXCJlbGxpcHRpY0BodHRwczovL3JlZ2lzdHJ5Lm5wbWpzLm9yZy9lbGxpcHRpYy8tL2VsbGlwdGljLTYuMy4xLnRnelwiLFxuICBcIl93aGVyZVwiOiBcIi9ob21lL2lsdXZwb29sMTkvRGVza3RvcC94YnQveW91cnMtY2hhbm5lbHMvbm9kZV9tb2R1bGVzL3lvdXJzLWJpdGNvaW5cIixcbiAgXCJhdXRob3JcIjoge1xuICAgIFwibmFtZVwiOiBcIkZlZG9yIEluZHV0bnlcIixcbiAgICBcImVtYWlsXCI6IFwiZmVkb3JAaW5kdXRueS5jb21cIlxuICB9LFxuICBcImJ1Z3NcIjoge1xuICAgIFwidXJsXCI6IFwiaHR0cHM6Ly9naXRodWIuY29tL2luZHV0bnkvZWxsaXB0aWMvaXNzdWVzXCJcbiAgfSxcbiAgXCJkZXBlbmRlbmNpZXNcIjoge1xuICAgIFwiYm4uanNcIjogXCJeNC40LjBcIixcbiAgICBcImJyb3JhbmRcIjogXCJeMS4wLjFcIixcbiAgICBcImhhc2guanNcIjogXCJeMS4wLjBcIixcbiAgICBcImluaGVyaXRzXCI6IFwiXjIuMC4xXCJcbiAgfSxcbiAgXCJkZXNjcmlwdGlvblwiOiBcIkVDIGNyeXB0b2dyYXBoeVwiLFxuICBcImRldkRlcGVuZGVuY2llc1wiOiB7XG4gICAgXCJicmZzXCI6IFwiXjEuNC4zXCIsXG4gICAgXCJjb3ZlcmFsbHNcIjogXCJeMi4xMS4zXCIsXG4gICAgXCJncnVudFwiOiBcIl4wLjQuNVwiLFxuICAgIFwiZ3J1bnQtYnJvd3NlcmlmeVwiOiBcIl41LjAuMFwiLFxuICAgIFwiZ3J1bnQtY29udHJpYi1jb25uZWN0XCI6IFwiXjEuMC4wXCIsXG4gICAgXCJncnVudC1jb250cmliLWNvcHlcIjogXCJeMS4wLjBcIixcbiAgICBcImdydW50LWNvbnRyaWItdWdsaWZ5XCI6IFwiXjEuMC4xXCIsXG4gICAgXCJncnVudC1tb2NoYS1pc3RhbmJ1bFwiOiBcIl4zLjAuMVwiLFxuICAgIFwiZ3J1bnQtc2F1Y2VsYWJzXCI6IFwiXjguNi4yXCIsXG4gICAgXCJpc3RhbmJ1bFwiOiBcIl4wLjQuMlwiLFxuICAgIFwianNjc1wiOiBcIl4yLjkuMFwiLFxuICAgIFwianNoaW50XCI6IFwiXjIuNi4wXCIsXG4gICAgXCJtb2NoYVwiOiBcIl4yLjEuMFwiXG4gIH0sXG4gIFwiZmlsZXNcIjogW1xuICAgIFwibGliXCJcbiAgXSxcbiAgXCJob21lcGFnZVwiOiBcImh0dHBzOi8vZ2l0aHViLmNvbS9pbmR1dG55L2VsbGlwdGljXCIsXG4gIFwia2V5d29yZHNcIjogW1xuICAgIFwiRUNcIixcbiAgICBcIkVsbGlwdGljXCIsXG4gICAgXCJjdXJ2ZVwiLFxuICAgIFwiQ3J5cHRvZ3JhcGh5XCJcbiAgXSxcbiAgXCJsaWNlbnNlXCI6IFwiTUlUXCIsXG4gIFwibWFpblwiOiBcImxpYi9lbGxpcHRpYy5qc1wiLFxuICBcIm5hbWVcIjogXCJlbGxpcHRpY1wiLFxuICBcIm9wdGlvbmFsRGVwZW5kZW5jaWVzXCI6IHt9LFxuICBcInJlYWRtZVwiOiBcIiMgRWxsaXB0aWMgWyFbQnVpbGQgU3RhdHVzXShodHRwczovL3NlY3VyZS50cmF2aXMtY2kub3JnL2luZHV0bnkvZWxsaXB0aWMucG5nKV0oaHR0cDovL3RyYXZpcy1jaS5vcmcvaW5kdXRueS9lbGxpcHRpYykgWyFbQ292ZXJhZ2UgU3RhdHVzXShodHRwczovL2NvdmVyYWxscy5pby9yZXBvcy9pbmR1dG55L2VsbGlwdGljL2JhZGdlLnN2Zz9icmFuY2g9bWFzdGVyJnNlcnZpY2U9Z2l0aHViKV0oaHR0cHM6Ly9jb3ZlcmFsbHMuaW8vZ2l0aHViL2luZHV0bnkvZWxsaXB0aWM/YnJhbmNoPW1hc3RlcikgWyFbQ29kZSBDbGltYXRlXShodHRwczovL2NvZGVjbGltYXRlLmNvbS9naXRodWIvaW5kdXRueS9lbGxpcHRpYy9iYWRnZXMvZ3BhLnN2ZyldKGh0dHBzOi8vY29kZWNsaW1hdGUuY29tL2dpdGh1Yi9pbmR1dG55L2VsbGlwdGljKVxcblxcblshW1NhdWNlbGFicyBUZXN0IFN0YXR1c10oaHR0cHM6Ly9zYXVjZWxhYnMuY29tL2Jyb3dzZXItbWF0cml4L2doLWluZHV0bnktZWxsaXB0aWMuc3ZnKV0oaHR0cHM6Ly9zYXVjZWxhYnMuY29tL3UvZ2gtaW5kdXRueS1lbGxpcHRpYylcXG5cXG5GYXN0IGVsbGlwdGljLWN1cnZlIGNyeXB0b2dyYXBoeSBpbiBhIHBsYWluIGphdmFzY3JpcHQgaW1wbGVtZW50YXRpb24uXFxuXFxuTk9URTogUGxlYXNlIHRha2UgYSBsb29rIGF0IGh0dHA6Ly9zYWZlY3VydmVzLmNyLnlwLnRvLyBiZWZvcmUgY2hvb3NpbmcgYSBjdXJ2ZVxcbmZvciB5b3VyIGNyeXB0b2dyYXBoeSBvcGVyYXRpb25zLlxcblxcbiMjIEluY2VudGl2ZVxcblxcbkVDQyBpcyBtdWNoIHNsb3dlciB0aGFuIHJlZ3VsYXIgUlNBIGNyeXB0b2dyYXBoeSwgdGhlIEpTIGltcGxlbWVudGF0aW9ucyBhcmVcXG5ldmVuIG1vcmUgc2xvd2VyLlxcblxcbiMjIEJlbmNobWFya3NcXG5cXG5gYGBiYXNoXFxuJCBub2RlIGJlbmNobWFya3MvaW5kZXguanNcXG5CZW5jaG1hcmtpbmc6IHNpZ25cXG5lbGxpcHRpYyNzaWduIHggMjYyIG9wcy9zZWMgwrEwLjUxJSAoMTc3IHJ1bnMgc2FtcGxlZClcXG5lY2NqcyNzaWduIHggNTUuOTEgb3BzL3NlYyDCsTAuOTAlICgxNDQgcnVucyBzYW1wbGVkKVxcbi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxcbkZhc3Rlc3QgaXMgZWxsaXB0aWMjc2lnblxcbj09PT09PT09PT09PT09PT09PT09PT09PVxcbkJlbmNobWFya2luZzogdmVyaWZ5XFxuZWxsaXB0aWMjdmVyaWZ5IHggMTEzIG9wcy9zZWMgwrEwLjUwJSAoMTY2IHJ1bnMgc2FtcGxlZClcXG5lY2NqcyN2ZXJpZnkgeCA0OC41NiBvcHMvc2VjIMKxMC4zNiUgKDEyNSBydW5zIHNhbXBsZWQpXFxuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXFxuRmFzdGVzdCBpcyBlbGxpcHRpYyN2ZXJpZnlcXG49PT09PT09PT09PT09PT09PT09PT09PT1cXG5CZW5jaG1hcmtpbmc6IGdlblxcbmVsbGlwdGljI2dlbiB4IDI5NCBvcHMvc2VjIMKxMC40MyUgKDE3NiBydW5zIHNhbXBsZWQpXFxuZWNjanMjZ2VuIHggNjIuMjUgb3BzL3NlYyDCsTAuNjMlICgxMjkgcnVucyBzYW1wbGVkKVxcbi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxcbkZhc3Rlc3QgaXMgZWxsaXB0aWMjZ2VuXFxuPT09PT09PT09PT09PT09PT09PT09PT09XFxuQmVuY2htYXJraW5nOiBlY2RoXFxuZWxsaXB0aWMjZWNkaCB4IDEzNiBvcHMvc2VjIMKxMC44NSUgKDE1NiBydW5zIHNhbXBsZWQpXFxuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXFxuRmFzdGVzdCBpcyBlbGxpcHRpYyNlY2RoXFxuPT09PT09PT09PT09PT09PT09PT09PT09XFxuYGBgXFxuXFxuIyMgQVBJXFxuXFxuIyMjIEVDRFNBXFxuXFxuYGBgamF2YXNjcmlwdFxcbnZhciBFQyA9IHJlcXVpcmUoJ2VsbGlwdGljJykuZWM7XFxuXFxuLy8gQ3JlYXRlIGFuZCBpbml0aWFsaXplIEVDIGNvbnRleHRcXG4vLyAoYmV0dGVyIGRvIGl0IG9uY2UgYW5kIHJldXNlIGl0KVxcbnZhciBlYyA9IG5ldyBFQygnc2VjcDI1NmsxJyk7XFxuXFxuLy8gR2VuZXJhdGUga2V5c1xcbnZhciBrZXkgPSBlYy5nZW5LZXlQYWlyKCk7XFxuXFxuLy8gU2lnbiBtZXNzYWdlIChtdXN0IGJlIGFuIGFycmF5LCBvciBpdCdsbCBiZSB0cmVhdGVkIGFzIGEgaGV4IHNlcXVlbmNlKVxcbnZhciBtc2cgPSBbIDAsIDEsIDIsIDMsIDQsIDUsIDYsIDcsIDgsIDksIDEwIF07XFxudmFyIHNpZ25hdHVyZSA9IGtleS5zaWduKG1zZyk7XFxuXFxuLy8gRXhwb3J0IERFUiBlbmNvZGVkIHNpZ25hdHVyZSBpbiBBcnJheVxcbnZhciBkZXJTaWduID0gc2lnbmF0dXJlLnRvREVSKCk7XFxuXFxuLy8gVmVyaWZ5IHNpZ25hdHVyZVxcbmNvbnNvbGUubG9nKGtleS52ZXJpZnkobXNnLCBkZXJTaWduKSk7XFxuXFxuLy8gQ0hFQ0sgV0lUSCBOTyBQUklWQVRFIEtFWVxcblxcbi8vIFB1YmxpYyBrZXkgYXMgJzA0ICsgeCArIHknXFxudmFyIHB1YiA9ICcwNGJiMWZhMy4uLic7XFxuXFxuLy8gU2lnbmF0dXJlIE1VU1QgYmUgZWl0aGVyOlxcbi8vIDEpIGhleC1zdHJpbmcgb2YgREVSLWVuY29kZWQgc2lnbmF0dXJlOyBvclxcbi8vIDIpIERFUi1lbmNvZGVkIHNpZ25hdHVyZSBhcyBidWZmZXI7IG9yXFxuLy8gMykgb2JqZWN0IHdpdGggdHdvIGhleC1zdHJpbmcgcHJvcGVydGllcyAociBhbmQgcylcXG5cXG52YXIgc2lnbmF0dXJlID0gJ2IxMDJhYy4uLic7IC8vIGNhc2UgMVxcbnZhciBzaWduYXR1cmUgPSBuZXcgQnVmZmVyKCcuLi4nKTsgLy8gY2FzZSAyXFxudmFyIHNpZ25hdHVyZSA9IHsgcjogJ2IxZmMuLi4nLCBzOiAnOWM0Mi4uLicgfTsgLy8gY2FzZSAzXFxuXFxuLy8gSW1wb3J0IHB1YmxpYyBrZXlcXG52YXIga2V5ID0gZWMua2V5RnJvbVB1YmxpYyhwdWIsICdoZXgnKTtcXG5cXG4vLyBWZXJpZnkgc2lnbmF0dXJlXFxuY29uc29sZS5sb2coa2V5LnZlcmlmeShtc2csIHNpZ25hdHVyZSkpO1xcbmBgYFxcblxcbiMjIyBFZERTQVxcblxcbmBgYGphdmFzY3JpcHRcXG52YXIgRWREU0EgPSByZXF1aXJlKCdlbGxpcHRpYycpLmVkZHNhO1xcblxcbi8vIENyZWF0ZSBhbmQgaW5pdGlhbGl6ZSBFZERTQSBjb250ZXh0XFxuLy8gKGJldHRlciBkbyBpdCBvbmNlIGFuZCByZXVzZSBpdClcXG52YXIgZWMgPSBuZXcgRWREU0EoJ2VkMjU1MTknKTtcXG5cXG4vLyBDcmVhdGUga2V5IHBhaXIgZnJvbSBzZWNyZXRcXG52YXIga2V5ID0gZWMua2V5RnJvbVNlY3JldCgnNjkzZTNjLi4uJyk7IC8vIGhleCBzdHJpbmcsIGFycmF5IG9yIEJ1ZmZlclxcblxcbi8vIFNpZ24gbWVzc2FnZSAobXVzdCBiZSBhbiBhcnJheSwgb3IgaXQnbGwgYmUgdHJlYXRlZCBhcyBhIGhleCBzZXF1ZW5jZSlcXG52YXIgbXNnID0gWyAwLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5LCAxMCBdO1xcbnZhciBzaWduYXR1cmUgPSBrZXkuc2lnbihtc2cpLnRvSGV4KCk7XFxuXFxuLy8gVmVyaWZ5IHNpZ25hdHVyZVxcbmNvbnNvbGUubG9nKGtleS52ZXJpZnkobXNnLCBzaWduYXR1cmUpKTtcXG5cXG4vLyBDSEVDSyBXSVRIIE5PIFBSSVZBVEUgS0VZXFxuXFxuLy8gSW1wb3J0IHB1YmxpYyBrZXlcXG52YXIgcHViID0gJzBhMWFmNjM4Li4uJztcXG52YXIga2V5ID0gZWMua2V5RnJvbVB1YmxpYyhwdWIsICdoZXgnKTtcXG5cXG4vLyBWZXJpZnkgc2lnbmF0dXJlXFxudmFyIHNpZ25hdHVyZSA9ICc3MGJlZDEuLi4nO1xcbmNvbnNvbGUubG9nKGtleS52ZXJpZnkobXNnLCBzaWduYXR1cmUpKTtcXG5gYGBcXG5cXG4jIyMgRUNESFxcblxcbmBgYGphdmFzY3JpcHRcXG4vLyBHZW5lcmF0ZSBrZXlzXFxudmFyIGtleTEgPSBlYy5nZW5LZXlQYWlyKCk7XFxudmFyIGtleTIgPSBlYy5nZW5LZXlQYWlyKCk7XFxuXFxudmFyIHNoYXJlZDEgPSBrZXkxLmRlcml2ZShrZXkyLmdldFB1YmxpYygpKTtcXG52YXIgc2hhcmVkMiA9IGtleTIuZGVyaXZlKGtleTEuZ2V0UHVibGljKCkpO1xcblxcbmNvbnNvbGUubG9nKCdCb3RoIHNoYXJlZCBzZWNyZXRzIGFyZSBCTiBpbnN0YW5jZXMnKTtcXG5jb25zb2xlLmxvZyhzaGFyZWQxLnRvU3RyaW5nKDE2KSk7XFxuY29uc29sZS5sb2coc2hhcmVkMi50b1N0cmluZygxNikpO1xcbmBgYFxcblxcbk5PVEU6IGAuZGVyaXZlKClgIHJldHVybnMgYSBbQk5dWzFdIGluc3RhbmNlLlxcblxcbiMjIFN1cHBvcnRlZCBjdXJ2ZXNcXG5cXG5FbGxpcHRpYy5qcyBzdXBwb3J0IGZvbGxvd2luZyBjdXJ2ZSB0eXBlczpcXG5cXG4qIFNob3J0IFdlaWVyc3RyYXNzXFxuKiBNb250Z29tZXJ5XFxuKiBFZHdhcmRzXFxuKiBUd2lzdGVkIEVkd2FyZHNcXG5cXG5Gb2xsb3dpbmcgY3VydmUgJ3ByZXNldHMnIGFyZSBlbWJlZGRlZCBpbnRvIHRoZSBsaWJyYXJ5OlxcblxcbiogYHNlY3AyNTZrMWBcXG4qIGBwMTkyYFxcbiogYHAyMjRgXFxuKiBgcDI1NmBcXG4qIGBwMzg0YFxcbiogYHA1MjFgXFxuKiBgY3VydmUyNTUxOWBcXG4qIGBlZDI1NTE5YFxcblxcbk5PVEU6IFRoYXQgYGN1cnZlMjU1MTlgIGNvdWxkIG5vdCBiZSB1c2VkIGZvciBFQ0RTQSwgdXNlIGBlZDI1NTE5YCBpbnN0ZWFkLlxcblxcbiMjIyBJbXBsZW1lbnRhdGlvbiBkZXRhaWxzXFxuXFxuRUNEU0EgaXMgdXNpbmcgZGV0ZXJtaW5pc3RpYyBga2AgdmFsdWUgZ2VuZXJhdGlvbiBhcyBwZXIgW1JGQzY5NzldWzBdLiBNb3N0IG9mXFxudGhlIGN1cnZlIG9wZXJhdGlvbnMgYXJlIHBlcmZvcm1lZCBvbiBub24tYWZmaW5lIGNvb3JkaW5hdGVzIChlaXRoZXIgcHJvamVjdGl2ZVxcbm9yIGV4dGVuZGVkKSwgdmFyaW91cyB3aW5kb3dpbmcgdGVjaG5pcXVlcyBhcmUgdXNlZCBmb3IgZGlmZmVyZW50IGNhc2VzLlxcblxcbkFsbCBvcGVyYXRpb25zIGFyZSBwZXJmb3JtZWQgaW4gcmVkdWN0aW9uIGNvbnRleHQgdXNpbmcgW2JuLmpzXVsxXSwgaGFzaGluZyBpc1xcbnByb3ZpZGVkIGJ5IFtoYXNoLmpzXVsyXVxcblxcbiMjIyBSZWxhdGVkIHByb2plY3RzXFxuXFxuKiBbZWNjcnlwdG9dWzNdOiBpc29tb3JwaGljIGltcGxlbWVudGF0aW9uIG9mIEVDRFNBLCBFQ0RIIGFuZCBFQ0lFUyBmb3IgYm90aFxcbiAgYnJvd3NlcmlmeSBhbmQgbm9kZSAodXNlcyBgZWxsaXB0aWNgIGZvciBicm93c2VyIGFuZCBbc2VjcDI1NmsxLW5vZGVdWzRdIGZvclxcbiAgbm9kZSlcXG5cXG4jIyMjIExJQ0VOU0VcXG5cXG5UaGlzIHNvZnR3YXJlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cXG5cXG5Db3B5cmlnaHQgRmVkb3IgSW5kdXRueSwgMjAxNC5cXG5cXG5QZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxcbmNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcXG5cXFwiU29mdHdhcmVcXFwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXFxud2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxcbmRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcXG5wZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcXG5mb2xsb3dpbmcgY29uZGl0aW9uczpcXG5cXG5UaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxcbmluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxcblxcblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcXFwiQVMgSVNcXFwiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXFxuT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxcbk1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cXG5OTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcXG5EQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1JcXG5PVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXFxuVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cXG5cXG5bMF06IGh0dHA6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzY5NzlcXG5bMV06IGh0dHBzOi8vZ2l0aHViLmNvbS9pbmR1dG55L2JuLmpzXFxuWzJdOiBodHRwczovL2dpdGh1Yi5jb20vaW5kdXRueS9oYXNoLmpzXFxuWzNdOiBodHRwczovL2dpdGh1Yi5jb20vYml0Y2hhbi9lY2NyeXB0b1xcbls0XTogaHR0cHM6Ly9naXRodWIuY29tL3dhbmRlcmVyL3NlY3AyNTZrMS1ub2RlXFxuXCIsXG4gIFwicmVhZG1lRmlsZW5hbWVcIjogXCJSRUFETUUubWRcIixcbiAgXCJyZXBvc2l0b3J5XCI6IHtcbiAgICBcInR5cGVcIjogXCJnaXRcIixcbiAgICBcInVybFwiOiBcImdpdCtzc2g6Ly9naXRAZ2l0aHViLmNvbS9pbmR1dG55L2VsbGlwdGljLmdpdFwiXG4gIH0sXG4gIFwic2NyaXB0c1wiOiB7XG4gICAgXCJqc2NzXCI6IFwianNjcyBiZW5jaG1hcmtzLyouanMgbGliLyouanMgbGliLyoqLyouanMgbGliLyoqLyoqLyouanMgdGVzdC9pbmRleC5qc1wiLFxuICAgIFwianNoaW50XCI6IFwianNjcyBiZW5jaG1hcmtzLyouanMgbGliLyouanMgbGliLyoqLyouanMgbGliLyoqLyoqLyouanMgdGVzdC9pbmRleC5qc1wiLFxuICAgIFwibGludFwiOiBcIm5wbSBydW4ganNjcyAmJiBucG0gcnVuIGpzaGludFwiLFxuICAgIFwidGVzdFwiOiBcIm5wbSBydW4gbGludCAmJiBucG0gcnVuIHVuaXRcIixcbiAgICBcInVuaXRcIjogXCJpc3RhbmJ1bCB0ZXN0IF9tb2NoYSAtLXJlcG9ydGVyPXNwZWMgdGVzdC9pbmRleC5qc1wiLFxuICAgIFwidmVyc2lvblwiOiBcImdydW50IGRpc3QgJiYgZ2l0IGFkZCBkaXN0L1wiXG4gIH0sXG4gIFwidmVyc2lvblwiOiBcIjYuMy4xXCJcbn1cbiIsInZhciBoYXNoID0gZXhwb3J0cztcblxuaGFzaC51dGlscyA9IHJlcXVpcmUoJy4vaGFzaC91dGlscycpO1xuaGFzaC5jb21tb24gPSByZXF1aXJlKCcuL2hhc2gvY29tbW9uJyk7XG5oYXNoLnNoYSA9IHJlcXVpcmUoJy4vaGFzaC9zaGEnKTtcbmhhc2gucmlwZW1kID0gcmVxdWlyZSgnLi9oYXNoL3JpcGVtZCcpO1xuaGFzaC5obWFjID0gcmVxdWlyZSgnLi9oYXNoL2htYWMnKTtcblxuLy8gUHJveHkgaGFzaCBmdW5jdGlvbnMgdG8gdGhlIG1haW4gb2JqZWN0XG5oYXNoLnNoYTEgPSBoYXNoLnNoYS5zaGExO1xuaGFzaC5zaGEyNTYgPSBoYXNoLnNoYS5zaGEyNTY7XG5oYXNoLnNoYTIyNCA9IGhhc2guc2hhLnNoYTIyNDtcbmhhc2guc2hhMzg0ID0gaGFzaC5zaGEuc2hhMzg0O1xuaGFzaC5zaGE1MTIgPSBoYXNoLnNoYS5zaGE1MTI7XG5oYXNoLnJpcGVtZDE2MCA9IGhhc2gucmlwZW1kLnJpcGVtZDE2MDtcbiIsInZhciBoYXNoID0gcmVxdWlyZSgnLi4vaGFzaCcpO1xudmFyIHV0aWxzID0gaGFzaC51dGlscztcbnZhciBhc3NlcnQgPSB1dGlscy5hc3NlcnQ7XG5cbmZ1bmN0aW9uIEJsb2NrSGFzaCgpIHtcbiAgdGhpcy5wZW5kaW5nID0gbnVsbDtcbiAgdGhpcy5wZW5kaW5nVG90YWwgPSAwO1xuICB0aGlzLmJsb2NrU2l6ZSA9IHRoaXMuY29uc3RydWN0b3IuYmxvY2tTaXplO1xuICB0aGlzLm91dFNpemUgPSB0aGlzLmNvbnN0cnVjdG9yLm91dFNpemU7XG4gIHRoaXMuaG1hY1N0cmVuZ3RoID0gdGhpcy5jb25zdHJ1Y3Rvci5obWFjU3RyZW5ndGg7XG4gIHRoaXMucGFkTGVuZ3RoID0gdGhpcy5jb25zdHJ1Y3Rvci5wYWRMZW5ndGggLyA4O1xuICB0aGlzLmVuZGlhbiA9ICdiaWcnO1xuXG4gIHRoaXMuX2RlbHRhOCA9IHRoaXMuYmxvY2tTaXplIC8gODtcbiAgdGhpcy5fZGVsdGEzMiA9IHRoaXMuYmxvY2tTaXplIC8gMzI7XG59XG5leHBvcnRzLkJsb2NrSGFzaCA9IEJsb2NrSGFzaDtcblxuQmxvY2tIYXNoLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUobXNnLCBlbmMpIHtcbiAgLy8gQ29udmVydCBtZXNzYWdlIHRvIGFycmF5LCBwYWQgaXQsIGFuZCBqb2luIGludG8gMzJiaXQgYmxvY2tzXG4gIG1zZyA9IHV0aWxzLnRvQXJyYXkobXNnLCBlbmMpO1xuICBpZiAoIXRoaXMucGVuZGluZylcbiAgICB0aGlzLnBlbmRpbmcgPSBtc2c7XG4gIGVsc2VcbiAgICB0aGlzLnBlbmRpbmcgPSB0aGlzLnBlbmRpbmcuY29uY2F0KG1zZyk7XG4gIHRoaXMucGVuZGluZ1RvdGFsICs9IG1zZy5sZW5ndGg7XG5cbiAgLy8gRW5vdWdoIGRhdGEsIHRyeSB1cGRhdGluZ1xuICBpZiAodGhpcy5wZW5kaW5nLmxlbmd0aCA+PSB0aGlzLl9kZWx0YTgpIHtcbiAgICBtc2cgPSB0aGlzLnBlbmRpbmc7XG5cbiAgICAvLyBQcm9jZXNzIHBlbmRpbmcgZGF0YSBpbiBibG9ja3NcbiAgICB2YXIgciA9IG1zZy5sZW5ndGggJSB0aGlzLl9kZWx0YTg7XG4gICAgdGhpcy5wZW5kaW5nID0gbXNnLnNsaWNlKG1zZy5sZW5ndGggLSByLCBtc2cubGVuZ3RoKTtcbiAgICBpZiAodGhpcy5wZW5kaW5nLmxlbmd0aCA9PT0gMClcbiAgICAgIHRoaXMucGVuZGluZyA9IG51bGw7XG5cbiAgICBtc2cgPSB1dGlscy5qb2luMzIobXNnLCAwLCBtc2cubGVuZ3RoIC0gciwgdGhpcy5lbmRpYW4pO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbXNnLmxlbmd0aDsgaSArPSB0aGlzLl9kZWx0YTMyKVxuICAgICAgdGhpcy5fdXBkYXRlKG1zZywgaSwgaSArIHRoaXMuX2RlbHRhMzIpO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5CbG9ja0hhc2gucHJvdG90eXBlLmRpZ2VzdCA9IGZ1bmN0aW9uIGRpZ2VzdChlbmMpIHtcbiAgdGhpcy51cGRhdGUodGhpcy5fcGFkKCkpO1xuICBhc3NlcnQodGhpcy5wZW5kaW5nID09PSBudWxsKTtcblxuICByZXR1cm4gdGhpcy5fZGlnZXN0KGVuYyk7XG59O1xuXG5CbG9ja0hhc2gucHJvdG90eXBlLl9wYWQgPSBmdW5jdGlvbiBwYWQoKSB7XG4gIHZhciBsZW4gPSB0aGlzLnBlbmRpbmdUb3RhbDtcbiAgdmFyIGJ5dGVzID0gdGhpcy5fZGVsdGE4O1xuICB2YXIgayA9IGJ5dGVzIC0gKChsZW4gKyB0aGlzLnBhZExlbmd0aCkgJSBieXRlcyk7XG4gIHZhciByZXMgPSBuZXcgQXJyYXkoayArIHRoaXMucGFkTGVuZ3RoKTtcbiAgcmVzWzBdID0gMHg4MDtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBrOyBpKyspXG4gICAgcmVzW2ldID0gMDtcblxuICAvLyBBcHBlbmQgbGVuZ3RoXG4gIGxlbiA8PD0gMztcbiAgaWYgKHRoaXMuZW5kaWFuID09PSAnYmlnJykge1xuICAgIGZvciAodmFyIHQgPSA4OyB0IDwgdGhpcy5wYWRMZW5ndGg7IHQrKylcbiAgICAgIHJlc1tpKytdID0gMDtcblxuICAgIHJlc1tpKytdID0gMDtcbiAgICByZXNbaSsrXSA9IDA7XG4gICAgcmVzW2krK10gPSAwO1xuICAgIHJlc1tpKytdID0gMDtcbiAgICByZXNbaSsrXSA9IChsZW4gPj4+IDI0KSAmIDB4ZmY7XG4gICAgcmVzW2krK10gPSAobGVuID4+PiAxNikgJiAweGZmO1xuICAgIHJlc1tpKytdID0gKGxlbiA+Pj4gOCkgJiAweGZmO1xuICAgIHJlc1tpKytdID0gbGVuICYgMHhmZjtcbiAgfSBlbHNlIHtcbiAgICByZXNbaSsrXSA9IGxlbiAmIDB4ZmY7XG4gICAgcmVzW2krK10gPSAobGVuID4+PiA4KSAmIDB4ZmY7XG4gICAgcmVzW2krK10gPSAobGVuID4+PiAxNikgJiAweGZmO1xuICAgIHJlc1tpKytdID0gKGxlbiA+Pj4gMjQpICYgMHhmZjtcbiAgICByZXNbaSsrXSA9IDA7XG4gICAgcmVzW2krK10gPSAwO1xuICAgIHJlc1tpKytdID0gMDtcbiAgICByZXNbaSsrXSA9IDA7XG5cbiAgICBmb3IgKHZhciB0ID0gODsgdCA8IHRoaXMucGFkTGVuZ3RoOyB0KyspXG4gICAgICByZXNbaSsrXSA9IDA7XG4gIH1cblxuICByZXR1cm4gcmVzO1xufTtcbiIsInZhciBobWFjID0gZXhwb3J0cztcblxudmFyIGhhc2ggPSByZXF1aXJlKCcuLi9oYXNoJyk7XG52YXIgdXRpbHMgPSBoYXNoLnV0aWxzO1xudmFyIGFzc2VydCA9IHV0aWxzLmFzc2VydDtcblxuZnVuY3Rpb24gSG1hYyhoYXNoLCBrZXksIGVuYykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgSG1hYykpXG4gICAgcmV0dXJuIG5ldyBIbWFjKGhhc2gsIGtleSwgZW5jKTtcbiAgdGhpcy5IYXNoID0gaGFzaDtcbiAgdGhpcy5ibG9ja1NpemUgPSBoYXNoLmJsb2NrU2l6ZSAvIDg7XG4gIHRoaXMub3V0U2l6ZSA9IGhhc2gub3V0U2l6ZSAvIDg7XG4gIHRoaXMuaW5uZXIgPSBudWxsO1xuICB0aGlzLm91dGVyID0gbnVsbDtcblxuICB0aGlzLl9pbml0KHV0aWxzLnRvQXJyYXkoa2V5LCBlbmMpKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gSG1hYztcblxuSG1hYy5wcm90b3R5cGUuX2luaXQgPSBmdW5jdGlvbiBpbml0KGtleSkge1xuICAvLyBTaG9ydGVuIGtleSwgaWYgbmVlZGVkXG4gIGlmIChrZXkubGVuZ3RoID4gdGhpcy5ibG9ja1NpemUpXG4gICAga2V5ID0gbmV3IHRoaXMuSGFzaCgpLnVwZGF0ZShrZXkpLmRpZ2VzdCgpO1xuICBhc3NlcnQoa2V5Lmxlbmd0aCA8PSB0aGlzLmJsb2NrU2l6ZSk7XG5cbiAgLy8gQWRkIHBhZGRpbmcgdG8ga2V5XG4gIGZvciAodmFyIGkgPSBrZXkubGVuZ3RoOyBpIDwgdGhpcy5ibG9ja1NpemU7IGkrKylcbiAgICBrZXkucHVzaCgwKTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleS5sZW5ndGg7IGkrKylcbiAgICBrZXlbaV0gXj0gMHgzNjtcbiAgdGhpcy5pbm5lciA9IG5ldyB0aGlzLkhhc2goKS51cGRhdGUoa2V5KTtcblxuICAvLyAweDM2IF4gMHg1YyA9IDB4NmFcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXkubGVuZ3RoOyBpKyspXG4gICAga2V5W2ldIF49IDB4NmE7XG4gIHRoaXMub3V0ZXIgPSBuZXcgdGhpcy5IYXNoKCkudXBkYXRlKGtleSk7XG59O1xuXG5IbWFjLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUobXNnLCBlbmMpIHtcbiAgdGhpcy5pbm5lci51cGRhdGUobXNnLCBlbmMpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbkhtYWMucHJvdG90eXBlLmRpZ2VzdCA9IGZ1bmN0aW9uIGRpZ2VzdChlbmMpIHtcbiAgdGhpcy5vdXRlci51cGRhdGUodGhpcy5pbm5lci5kaWdlc3QoKSk7XG4gIHJldHVybiB0aGlzLm91dGVyLmRpZ2VzdChlbmMpO1xufTtcbiIsInZhciBoYXNoID0gcmVxdWlyZSgnLi4vaGFzaCcpO1xudmFyIHV0aWxzID0gaGFzaC51dGlscztcblxudmFyIHJvdGwzMiA9IHV0aWxzLnJvdGwzMjtcbnZhciBzdW0zMiA9IHV0aWxzLnN1bTMyO1xudmFyIHN1bTMyXzMgPSB1dGlscy5zdW0zMl8zO1xudmFyIHN1bTMyXzQgPSB1dGlscy5zdW0zMl80O1xudmFyIEJsb2NrSGFzaCA9IGhhc2guY29tbW9uLkJsb2NrSGFzaDtcblxuZnVuY3Rpb24gUklQRU1EMTYwKCkge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgUklQRU1EMTYwKSlcbiAgICByZXR1cm4gbmV3IFJJUEVNRDE2MCgpO1xuXG4gIEJsb2NrSGFzaC5jYWxsKHRoaXMpO1xuXG4gIHRoaXMuaCA9IFsgMHg2NzQ1MjMwMSwgMHhlZmNkYWI4OSwgMHg5OGJhZGNmZSwgMHgxMDMyNTQ3NiwgMHhjM2QyZTFmMCBdO1xuICB0aGlzLmVuZGlhbiA9ICdsaXR0bGUnO1xufVxudXRpbHMuaW5oZXJpdHMoUklQRU1EMTYwLCBCbG9ja0hhc2gpO1xuZXhwb3J0cy5yaXBlbWQxNjAgPSBSSVBFTUQxNjA7XG5cblJJUEVNRDE2MC5ibG9ja1NpemUgPSA1MTI7XG5SSVBFTUQxNjAub3V0U2l6ZSA9IDE2MDtcblJJUEVNRDE2MC5obWFjU3RyZW5ndGggPSAxOTI7XG5SSVBFTUQxNjAucGFkTGVuZ3RoID0gNjQ7XG5cblJJUEVNRDE2MC5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZShtc2csIHN0YXJ0KSB7XG4gIHZhciBBID0gdGhpcy5oWzBdO1xuICB2YXIgQiA9IHRoaXMuaFsxXTtcbiAgdmFyIEMgPSB0aGlzLmhbMl07XG4gIHZhciBEID0gdGhpcy5oWzNdO1xuICB2YXIgRSA9IHRoaXMuaFs0XTtcbiAgdmFyIEFoID0gQTtcbiAgdmFyIEJoID0gQjtcbiAgdmFyIENoID0gQztcbiAgdmFyIERoID0gRDtcbiAgdmFyIEVoID0gRTtcbiAgZm9yICh2YXIgaiA9IDA7IGogPCA4MDsgaisrKSB7XG4gICAgdmFyIFQgPSBzdW0zMihcbiAgICAgIHJvdGwzMihcbiAgICAgICAgc3VtMzJfNChBLCBmKGosIEIsIEMsIEQpLCBtc2dbcltqXSArIHN0YXJ0XSwgSyhqKSksXG4gICAgICAgIHNbal0pLFxuICAgICAgRSk7XG4gICAgQSA9IEU7XG4gICAgRSA9IEQ7XG4gICAgRCA9IHJvdGwzMihDLCAxMCk7XG4gICAgQyA9IEI7XG4gICAgQiA9IFQ7XG4gICAgVCA9IHN1bTMyKFxuICAgICAgcm90bDMyKFxuICAgICAgICBzdW0zMl80KEFoLCBmKDc5IC0gaiwgQmgsIENoLCBEaCksIG1zZ1tyaFtqXSArIHN0YXJ0XSwgS2goaikpLFxuICAgICAgICBzaFtqXSksXG4gICAgICBFaCk7XG4gICAgQWggPSBFaDtcbiAgICBFaCA9IERoO1xuICAgIERoID0gcm90bDMyKENoLCAxMCk7XG4gICAgQ2ggPSBCaDtcbiAgICBCaCA9IFQ7XG4gIH1cbiAgVCA9IHN1bTMyXzModGhpcy5oWzFdLCBDLCBEaCk7XG4gIHRoaXMuaFsxXSA9IHN1bTMyXzModGhpcy5oWzJdLCBELCBFaCk7XG4gIHRoaXMuaFsyXSA9IHN1bTMyXzModGhpcy5oWzNdLCBFLCBBaCk7XG4gIHRoaXMuaFszXSA9IHN1bTMyXzModGhpcy5oWzRdLCBBLCBCaCk7XG4gIHRoaXMuaFs0XSA9IHN1bTMyXzModGhpcy5oWzBdLCBCLCBDaCk7XG4gIHRoaXMuaFswXSA9IFQ7XG59O1xuXG5SSVBFTUQxNjAucHJvdG90eXBlLl9kaWdlc3QgPSBmdW5jdGlvbiBkaWdlc3QoZW5jKSB7XG4gIGlmIChlbmMgPT09ICdoZXgnKVxuICAgIHJldHVybiB1dGlscy50b0hleDMyKHRoaXMuaCwgJ2xpdHRsZScpO1xuICBlbHNlXG4gICAgcmV0dXJuIHV0aWxzLnNwbGl0MzIodGhpcy5oLCAnbGl0dGxlJyk7XG59O1xuXG5mdW5jdGlvbiBmKGosIHgsIHksIHopIHtcbiAgaWYgKGogPD0gMTUpXG4gICAgcmV0dXJuIHggXiB5IF4gejtcbiAgZWxzZSBpZiAoaiA8PSAzMSlcbiAgICByZXR1cm4gKHggJiB5KSB8ICgofngpICYgeik7XG4gIGVsc2UgaWYgKGogPD0gNDcpXG4gICAgcmV0dXJuICh4IHwgKH55KSkgXiB6O1xuICBlbHNlIGlmIChqIDw9IDYzKVxuICAgIHJldHVybiAoeCAmIHopIHwgKHkgJiAofnopKTtcbiAgZWxzZVxuICAgIHJldHVybiB4IF4gKHkgfCAofnopKTtcbn1cblxuZnVuY3Rpb24gSyhqKSB7XG4gIGlmIChqIDw9IDE1KVxuICAgIHJldHVybiAweDAwMDAwMDAwO1xuICBlbHNlIGlmIChqIDw9IDMxKVxuICAgIHJldHVybiAweDVhODI3OTk5O1xuICBlbHNlIGlmIChqIDw9IDQ3KVxuICAgIHJldHVybiAweDZlZDllYmExO1xuICBlbHNlIGlmIChqIDw9IDYzKVxuICAgIHJldHVybiAweDhmMWJiY2RjO1xuICBlbHNlXG4gICAgcmV0dXJuIDB4YTk1M2ZkNGU7XG59XG5cbmZ1bmN0aW9uIEtoKGopIHtcbiAgaWYgKGogPD0gMTUpXG4gICAgcmV0dXJuIDB4NTBhMjhiZTY7XG4gIGVsc2UgaWYgKGogPD0gMzEpXG4gICAgcmV0dXJuIDB4NWM0ZGQxMjQ7XG4gIGVsc2UgaWYgKGogPD0gNDcpXG4gICAgcmV0dXJuIDB4NmQ3MDNlZjM7XG4gIGVsc2UgaWYgKGogPD0gNjMpXG4gICAgcmV0dXJuIDB4N2E2ZDc2ZTk7XG4gIGVsc2VcbiAgICByZXR1cm4gMHgwMDAwMDAwMDtcbn1cblxudmFyIHIgPSBbXG4gIDAsIDEsIDIsIDMsIDQsIDUsIDYsIDcsIDgsIDksIDEwLCAxMSwgMTIsIDEzLCAxNCwgMTUsXG4gIDcsIDQsIDEzLCAxLCAxMCwgNiwgMTUsIDMsIDEyLCAwLCA5LCA1LCAyLCAxNCwgMTEsIDgsXG4gIDMsIDEwLCAxNCwgNCwgOSwgMTUsIDgsIDEsIDIsIDcsIDAsIDYsIDEzLCAxMSwgNSwgMTIsXG4gIDEsIDksIDExLCAxMCwgMCwgOCwgMTIsIDQsIDEzLCAzLCA3LCAxNSwgMTQsIDUsIDYsIDIsXG4gIDQsIDAsIDUsIDksIDcsIDEyLCAyLCAxMCwgMTQsIDEsIDMsIDgsIDExLCA2LCAxNSwgMTNcbl07XG5cbnZhciByaCA9IFtcbiAgNSwgMTQsIDcsIDAsIDksIDIsIDExLCA0LCAxMywgNiwgMTUsIDgsIDEsIDEwLCAzLCAxMixcbiAgNiwgMTEsIDMsIDcsIDAsIDEzLCA1LCAxMCwgMTQsIDE1LCA4LCAxMiwgNCwgOSwgMSwgMixcbiAgMTUsIDUsIDEsIDMsIDcsIDE0LCA2LCA5LCAxMSwgOCwgMTIsIDIsIDEwLCAwLCA0LCAxMyxcbiAgOCwgNiwgNCwgMSwgMywgMTEsIDE1LCAwLCA1LCAxMiwgMiwgMTMsIDksIDcsIDEwLCAxNCxcbiAgMTIsIDE1LCAxMCwgNCwgMSwgNSwgOCwgNywgNiwgMiwgMTMsIDE0LCAwLCAzLCA5LCAxMVxuXTtcblxudmFyIHMgPSBbXG4gIDExLCAxNCwgMTUsIDEyLCA1LCA4LCA3LCA5LCAxMSwgMTMsIDE0LCAxNSwgNiwgNywgOSwgOCxcbiAgNywgNiwgOCwgMTMsIDExLCA5LCA3LCAxNSwgNywgMTIsIDE1LCA5LCAxMSwgNywgMTMsIDEyLFxuICAxMSwgMTMsIDYsIDcsIDE0LCA5LCAxMywgMTUsIDE0LCA4LCAxMywgNiwgNSwgMTIsIDcsIDUsXG4gIDExLCAxMiwgMTQsIDE1LCAxNCwgMTUsIDksIDgsIDksIDE0LCA1LCA2LCA4LCA2LCA1LCAxMixcbiAgOSwgMTUsIDUsIDExLCA2LCA4LCAxMywgMTIsIDUsIDEyLCAxMywgMTQsIDExLCA4LCA1LCA2XG5dO1xuXG52YXIgc2ggPSBbXG4gIDgsIDksIDksIDExLCAxMywgMTUsIDE1LCA1LCA3LCA3LCA4LCAxMSwgMTQsIDE0LCAxMiwgNixcbiAgOSwgMTMsIDE1LCA3LCAxMiwgOCwgOSwgMTEsIDcsIDcsIDEyLCA3LCA2LCAxNSwgMTMsIDExLFxuICA5LCA3LCAxNSwgMTEsIDgsIDYsIDYsIDE0LCAxMiwgMTMsIDUsIDE0LCAxMywgMTMsIDcsIDUsXG4gIDE1LCA1LCA4LCAxMSwgMTQsIDE0LCA2LCAxNCwgNiwgOSwgMTIsIDksIDEyLCA1LCAxNSwgOCxcbiAgOCwgNSwgMTIsIDksIDEyLCA1LCAxNCwgNiwgOCwgMTMsIDYsIDUsIDE1LCAxMywgMTEsIDExXG5dO1xuIiwidmFyIGhhc2ggPSByZXF1aXJlKCcuLi9oYXNoJyk7XG52YXIgdXRpbHMgPSBoYXNoLnV0aWxzO1xudmFyIGFzc2VydCA9IHV0aWxzLmFzc2VydDtcblxudmFyIHJvdHIzMiA9IHV0aWxzLnJvdHIzMjtcbnZhciByb3RsMzIgPSB1dGlscy5yb3RsMzI7XG52YXIgc3VtMzIgPSB1dGlscy5zdW0zMjtcbnZhciBzdW0zMl80ID0gdXRpbHMuc3VtMzJfNDtcbnZhciBzdW0zMl81ID0gdXRpbHMuc3VtMzJfNTtcbnZhciByb3RyNjRfaGkgPSB1dGlscy5yb3RyNjRfaGk7XG52YXIgcm90cjY0X2xvID0gdXRpbHMucm90cjY0X2xvO1xudmFyIHNocjY0X2hpID0gdXRpbHMuc2hyNjRfaGk7XG52YXIgc2hyNjRfbG8gPSB1dGlscy5zaHI2NF9sbztcbnZhciBzdW02NCA9IHV0aWxzLnN1bTY0O1xudmFyIHN1bTY0X2hpID0gdXRpbHMuc3VtNjRfaGk7XG52YXIgc3VtNjRfbG8gPSB1dGlscy5zdW02NF9sbztcbnZhciBzdW02NF80X2hpID0gdXRpbHMuc3VtNjRfNF9oaTtcbnZhciBzdW02NF80X2xvID0gdXRpbHMuc3VtNjRfNF9sbztcbnZhciBzdW02NF81X2hpID0gdXRpbHMuc3VtNjRfNV9oaTtcbnZhciBzdW02NF81X2xvID0gdXRpbHMuc3VtNjRfNV9sbztcbnZhciBCbG9ja0hhc2ggPSBoYXNoLmNvbW1vbi5CbG9ja0hhc2g7XG5cbnZhciBzaGEyNTZfSyA9IFtcbiAgMHg0MjhhMmY5OCwgMHg3MTM3NDQ5MSwgMHhiNWMwZmJjZiwgMHhlOWI1ZGJhNSxcbiAgMHgzOTU2YzI1YiwgMHg1OWYxMTFmMSwgMHg5MjNmODJhNCwgMHhhYjFjNWVkNSxcbiAgMHhkODA3YWE5OCwgMHgxMjgzNWIwMSwgMHgyNDMxODViZSwgMHg1NTBjN2RjMyxcbiAgMHg3MmJlNWQ3NCwgMHg4MGRlYjFmZSwgMHg5YmRjMDZhNywgMHhjMTliZjE3NCxcbiAgMHhlNDliNjljMSwgMHhlZmJlNDc4NiwgMHgwZmMxOWRjNiwgMHgyNDBjYTFjYyxcbiAgMHgyZGU5MmM2ZiwgMHg0YTc0ODRhYSwgMHg1Y2IwYTlkYywgMHg3NmY5ODhkYSxcbiAgMHg5ODNlNTE1MiwgMHhhODMxYzY2ZCwgMHhiMDAzMjdjOCwgMHhiZjU5N2ZjNyxcbiAgMHhjNmUwMGJmMywgMHhkNWE3OTE0NywgMHgwNmNhNjM1MSwgMHgxNDI5Mjk2NyxcbiAgMHgyN2I3MGE4NSwgMHgyZTFiMjEzOCwgMHg0ZDJjNmRmYywgMHg1MzM4MGQxMyxcbiAgMHg2NTBhNzM1NCwgMHg3NjZhMGFiYiwgMHg4MWMyYzkyZSwgMHg5MjcyMmM4NSxcbiAgMHhhMmJmZThhMSwgMHhhODFhNjY0YiwgMHhjMjRiOGI3MCwgMHhjNzZjNTFhMyxcbiAgMHhkMTkyZTgxOSwgMHhkNjk5MDYyNCwgMHhmNDBlMzU4NSwgMHgxMDZhYTA3MCxcbiAgMHgxOWE0YzExNiwgMHgxZTM3NmMwOCwgMHgyNzQ4Nzc0YywgMHgzNGIwYmNiNSxcbiAgMHgzOTFjMGNiMywgMHg0ZWQ4YWE0YSwgMHg1YjljY2E0ZiwgMHg2ODJlNmZmMyxcbiAgMHg3NDhmODJlZSwgMHg3OGE1NjM2ZiwgMHg4NGM4NzgxNCwgMHg4Y2M3MDIwOCxcbiAgMHg5MGJlZmZmYSwgMHhhNDUwNmNlYiwgMHhiZWY5YTNmNywgMHhjNjcxNzhmMlxuXTtcblxudmFyIHNoYTUxMl9LID0gW1xuICAweDQyOGEyZjk4LCAweGQ3MjhhZTIyLCAweDcxMzc0NDkxLCAweDIzZWY2NWNkLFxuICAweGI1YzBmYmNmLCAweGVjNGQzYjJmLCAweGU5YjVkYmE1LCAweDgxODlkYmJjLFxuICAweDM5NTZjMjViLCAweGYzNDhiNTM4LCAweDU5ZjExMWYxLCAweGI2MDVkMDE5LFxuICAweDkyM2Y4MmE0LCAweGFmMTk0ZjliLCAweGFiMWM1ZWQ1LCAweGRhNmQ4MTE4LFxuICAweGQ4MDdhYTk4LCAweGEzMDMwMjQyLCAweDEyODM1YjAxLCAweDQ1NzA2ZmJlLFxuICAweDI0MzE4NWJlLCAweDRlZTRiMjhjLCAweDU1MGM3ZGMzLCAweGQ1ZmZiNGUyLFxuICAweDcyYmU1ZDc0LCAweGYyN2I4OTZmLCAweDgwZGViMWZlLCAweDNiMTY5NmIxLFxuICAweDliZGMwNmE3LCAweDI1YzcxMjM1LCAweGMxOWJmMTc0LCAweGNmNjkyNjk0LFxuICAweGU0OWI2OWMxLCAweDllZjE0YWQyLCAweGVmYmU0Nzg2LCAweDM4NGYyNWUzLFxuICAweDBmYzE5ZGM2LCAweDhiOGNkNWI1LCAweDI0MGNhMWNjLCAweDc3YWM5YzY1LFxuICAweDJkZTkyYzZmLCAweDU5MmIwMjc1LCAweDRhNzQ4NGFhLCAweDZlYTZlNDgzLFxuICAweDVjYjBhOWRjLCAweGJkNDFmYmQ0LCAweDc2Zjk4OGRhLCAweDgzMTE1M2I1LFxuICAweDk4M2U1MTUyLCAweGVlNjZkZmFiLCAweGE4MzFjNjZkLCAweDJkYjQzMjEwLFxuICAweGIwMDMyN2M4LCAweDk4ZmIyMTNmLCAweGJmNTk3ZmM3LCAweGJlZWYwZWU0LFxuICAweGM2ZTAwYmYzLCAweDNkYTg4ZmMyLCAweGQ1YTc5MTQ3LCAweDkzMGFhNzI1LFxuICAweDA2Y2E2MzUxLCAweGUwMDM4MjZmLCAweDE0MjkyOTY3LCAweDBhMGU2ZTcwLFxuICAweDI3YjcwYTg1LCAweDQ2ZDIyZmZjLCAweDJlMWIyMTM4LCAweDVjMjZjOTI2LFxuICAweDRkMmM2ZGZjLCAweDVhYzQyYWVkLCAweDUzMzgwZDEzLCAweDlkOTViM2RmLFxuICAweDY1MGE3MzU0LCAweDhiYWY2M2RlLCAweDc2NmEwYWJiLCAweDNjNzdiMmE4LFxuICAweDgxYzJjOTJlLCAweDQ3ZWRhZWU2LCAweDkyNzIyYzg1LCAweDE0ODIzNTNiLFxuICAweGEyYmZlOGExLCAweDRjZjEwMzY0LCAweGE4MWE2NjRiLCAweGJjNDIzMDAxLFxuICAweGMyNGI4YjcwLCAweGQwZjg5NzkxLCAweGM3NmM1MWEzLCAweDA2NTRiZTMwLFxuICAweGQxOTJlODE5LCAweGQ2ZWY1MjE4LCAweGQ2OTkwNjI0LCAweDU1NjVhOTEwLFxuICAweGY0MGUzNTg1LCAweDU3NzEyMDJhLCAweDEwNmFhMDcwLCAweDMyYmJkMWI4LFxuICAweDE5YTRjMTE2LCAweGI4ZDJkMGM4LCAweDFlMzc2YzA4LCAweDUxNDFhYjUzLFxuICAweDI3NDg3NzRjLCAweGRmOGVlYjk5LCAweDM0YjBiY2I1LCAweGUxOWI0OGE4LFxuICAweDM5MWMwY2IzLCAweGM1Yzk1YTYzLCAweDRlZDhhYTRhLCAweGUzNDE4YWNiLFxuICAweDViOWNjYTRmLCAweDc3NjNlMzczLCAweDY4MmU2ZmYzLCAweGQ2YjJiOGEzLFxuICAweDc0OGY4MmVlLCAweDVkZWZiMmZjLCAweDc4YTU2MzZmLCAweDQzMTcyZjYwLFxuICAweDg0Yzg3ODE0LCAweGExZjBhYjcyLCAweDhjYzcwMjA4LCAweDFhNjQzOWVjLFxuICAweDkwYmVmZmZhLCAweDIzNjMxZTI4LCAweGE0NTA2Y2ViLCAweGRlODJiZGU5LFxuICAweGJlZjlhM2Y3LCAweGIyYzY3OTE1LCAweGM2NzE3OGYyLCAweGUzNzI1MzJiLFxuICAweGNhMjczZWNlLCAweGVhMjY2MTljLCAweGQxODZiOGM3LCAweDIxYzBjMjA3LFxuICAweGVhZGE3ZGQ2LCAweGNkZTBlYjFlLCAweGY1N2Q0ZjdmLCAweGVlNmVkMTc4LFxuICAweDA2ZjA2N2FhLCAweDcyMTc2ZmJhLCAweDBhNjM3ZGM1LCAweGEyYzg5OGE2LFxuICAweDExM2Y5ODA0LCAweGJlZjkwZGFlLCAweDFiNzEwYjM1LCAweDEzMWM0NzFiLFxuICAweDI4ZGI3N2Y1LCAweDIzMDQ3ZDg0LCAweDMyY2FhYjdiLCAweDQwYzcyNDkzLFxuICAweDNjOWViZTBhLCAweDE1YzliZWJjLCAweDQzMWQ2N2M0LCAweDljMTAwZDRjLFxuICAweDRjYzVkNGJlLCAweGNiM2U0MmI2LCAweDU5N2YyOTljLCAweGZjNjU3ZTJhLFxuICAweDVmY2I2ZmFiLCAweDNhZDZmYWVjLCAweDZjNDQxOThjLCAweDRhNDc1ODE3XG5dO1xuXG52YXIgc2hhMV9LID0gW1xuICAweDVBODI3OTk5LCAweDZFRDlFQkExLFxuICAweDhGMUJCQ0RDLCAweENBNjJDMUQ2XG5dO1xuXG5mdW5jdGlvbiBTSEEyNTYoKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBTSEEyNTYpKVxuICAgIHJldHVybiBuZXcgU0hBMjU2KCk7XG5cbiAgQmxvY2tIYXNoLmNhbGwodGhpcyk7XG4gIHRoaXMuaCA9IFsgMHg2YTA5ZTY2NywgMHhiYjY3YWU4NSwgMHgzYzZlZjM3MiwgMHhhNTRmZjUzYSxcbiAgICAgICAgICAgICAweDUxMGU1MjdmLCAweDliMDU2ODhjLCAweDFmODNkOWFiLCAweDViZTBjZDE5IF07XG4gIHRoaXMuayA9IHNoYTI1Nl9LO1xuICB0aGlzLlcgPSBuZXcgQXJyYXkoNjQpO1xufVxudXRpbHMuaW5oZXJpdHMoU0hBMjU2LCBCbG9ja0hhc2gpO1xuZXhwb3J0cy5zaGEyNTYgPSBTSEEyNTY7XG5cblNIQTI1Ni5ibG9ja1NpemUgPSA1MTI7XG5TSEEyNTYub3V0U2l6ZSA9IDI1NjtcblNIQTI1Ni5obWFjU3RyZW5ndGggPSAxOTI7XG5TSEEyNTYucGFkTGVuZ3RoID0gNjQ7XG5cblNIQTI1Ni5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIF91cGRhdGUobXNnLCBzdGFydCkge1xuICB2YXIgVyA9IHRoaXMuVztcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IDE2OyBpKyspXG4gICAgV1tpXSA9IG1zZ1tzdGFydCArIGldO1xuICBmb3IgKDsgaSA8IFcubGVuZ3RoOyBpKyspXG4gICAgV1tpXSA9IHN1bTMyXzQoZzFfMjU2KFdbaSAtIDJdKSwgV1tpIC0gN10sIGcwXzI1NihXW2kgLSAxNV0pLCBXW2kgLSAxNl0pO1xuXG4gIHZhciBhID0gdGhpcy5oWzBdO1xuICB2YXIgYiA9IHRoaXMuaFsxXTtcbiAgdmFyIGMgPSB0aGlzLmhbMl07XG4gIHZhciBkID0gdGhpcy5oWzNdO1xuICB2YXIgZSA9IHRoaXMuaFs0XTtcbiAgdmFyIGYgPSB0aGlzLmhbNV07XG4gIHZhciBnID0gdGhpcy5oWzZdO1xuICB2YXIgaCA9IHRoaXMuaFs3XTtcblxuICBhc3NlcnQodGhpcy5rLmxlbmd0aCA9PT0gVy5sZW5ndGgpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IFcubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgVDEgPSBzdW0zMl81KGgsIHMxXzI1NihlKSwgY2gzMihlLCBmLCBnKSwgdGhpcy5rW2ldLCBXW2ldKTtcbiAgICB2YXIgVDIgPSBzdW0zMihzMF8yNTYoYSksIG1hajMyKGEsIGIsIGMpKTtcbiAgICBoID0gZztcbiAgICBnID0gZjtcbiAgICBmID0gZTtcbiAgICBlID0gc3VtMzIoZCwgVDEpO1xuICAgIGQgPSBjO1xuICAgIGMgPSBiO1xuICAgIGIgPSBhO1xuICAgIGEgPSBzdW0zMihUMSwgVDIpO1xuICB9XG5cbiAgdGhpcy5oWzBdID0gc3VtMzIodGhpcy5oWzBdLCBhKTtcbiAgdGhpcy5oWzFdID0gc3VtMzIodGhpcy5oWzFdLCBiKTtcbiAgdGhpcy5oWzJdID0gc3VtMzIodGhpcy5oWzJdLCBjKTtcbiAgdGhpcy5oWzNdID0gc3VtMzIodGhpcy5oWzNdLCBkKTtcbiAgdGhpcy5oWzRdID0gc3VtMzIodGhpcy5oWzRdLCBlKTtcbiAgdGhpcy5oWzVdID0gc3VtMzIodGhpcy5oWzVdLCBmKTtcbiAgdGhpcy5oWzZdID0gc3VtMzIodGhpcy5oWzZdLCBnKTtcbiAgdGhpcy5oWzddID0gc3VtMzIodGhpcy5oWzddLCBoKTtcbn07XG5cblNIQTI1Ni5wcm90b3R5cGUuX2RpZ2VzdCA9IGZ1bmN0aW9uIGRpZ2VzdChlbmMpIHtcbiAgaWYgKGVuYyA9PT0gJ2hleCcpXG4gICAgcmV0dXJuIHV0aWxzLnRvSGV4MzIodGhpcy5oLCAnYmlnJyk7XG4gIGVsc2VcbiAgICByZXR1cm4gdXRpbHMuc3BsaXQzMih0aGlzLmgsICdiaWcnKTtcbn07XG5cbmZ1bmN0aW9uIFNIQTIyNCgpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFNIQTIyNCkpXG4gICAgcmV0dXJuIG5ldyBTSEEyMjQoKTtcblxuICBTSEEyNTYuY2FsbCh0aGlzKTtcbiAgdGhpcy5oID0gWyAweGMxMDU5ZWQ4LCAweDM2N2NkNTA3LCAweDMwNzBkZDE3LCAweGY3MGU1OTM5LFxuICAgICAgICAgICAgIDB4ZmZjMDBiMzEsIDB4Njg1ODE1MTEsIDB4NjRmOThmYTcsIDB4YmVmYTRmYTQgXTtcbn1cbnV0aWxzLmluaGVyaXRzKFNIQTIyNCwgU0hBMjU2KTtcbmV4cG9ydHMuc2hhMjI0ID0gU0hBMjI0O1xuXG5TSEEyMjQuYmxvY2tTaXplID0gNTEyO1xuU0hBMjI0Lm91dFNpemUgPSAyMjQ7XG5TSEEyMjQuaG1hY1N0cmVuZ3RoID0gMTkyO1xuU0hBMjI0LnBhZExlbmd0aCA9IDY0O1xuXG5TSEEyMjQucHJvdG90eXBlLl9kaWdlc3QgPSBmdW5jdGlvbiBkaWdlc3QoZW5jKSB7XG4gIC8vIEp1c3QgdHJ1bmNhdGUgb3V0cHV0XG4gIGlmIChlbmMgPT09ICdoZXgnKVxuICAgIHJldHVybiB1dGlscy50b0hleDMyKHRoaXMuaC5zbGljZSgwLCA3KSwgJ2JpZycpO1xuICBlbHNlXG4gICAgcmV0dXJuIHV0aWxzLnNwbGl0MzIodGhpcy5oLnNsaWNlKDAsIDcpLCAnYmlnJyk7XG59O1xuXG5mdW5jdGlvbiBTSEE1MTIoKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBTSEE1MTIpKVxuICAgIHJldHVybiBuZXcgU0hBNTEyKCk7XG5cbiAgQmxvY2tIYXNoLmNhbGwodGhpcyk7XG4gIHRoaXMuaCA9IFsgMHg2YTA5ZTY2NywgMHhmM2JjYzkwOCxcbiAgICAgICAgICAgICAweGJiNjdhZTg1LCAweDg0Y2FhNzNiLFxuICAgICAgICAgICAgIDB4M2M2ZWYzNzIsIDB4ZmU5NGY4MmIsXG4gICAgICAgICAgICAgMHhhNTRmZjUzYSwgMHg1ZjFkMzZmMSxcbiAgICAgICAgICAgICAweDUxMGU1MjdmLCAweGFkZTY4MmQxLFxuICAgICAgICAgICAgIDB4OWIwNTY4OGMsIDB4MmIzZTZjMWYsXG4gICAgICAgICAgICAgMHgxZjgzZDlhYiwgMHhmYjQxYmQ2YixcbiAgICAgICAgICAgICAweDViZTBjZDE5LCAweDEzN2UyMTc5IF07XG4gIHRoaXMuayA9IHNoYTUxMl9LO1xuICB0aGlzLlcgPSBuZXcgQXJyYXkoMTYwKTtcbn1cbnV0aWxzLmluaGVyaXRzKFNIQTUxMiwgQmxvY2tIYXNoKTtcbmV4cG9ydHMuc2hhNTEyID0gU0hBNTEyO1xuXG5TSEE1MTIuYmxvY2tTaXplID0gMTAyNDtcblNIQTUxMi5vdXRTaXplID0gNTEyO1xuU0hBNTEyLmhtYWNTdHJlbmd0aCA9IDE5MjtcblNIQTUxMi5wYWRMZW5ndGggPSAxMjg7XG5cblNIQTUxMi5wcm90b3R5cGUuX3ByZXBhcmVCbG9jayA9IGZ1bmN0aW9uIF9wcmVwYXJlQmxvY2sobXNnLCBzdGFydCkge1xuICB2YXIgVyA9IHRoaXMuVztcblxuICAvLyAzMiB4IDMyYml0IHdvcmRzXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgMzI7IGkrKylcbiAgICBXW2ldID0gbXNnW3N0YXJ0ICsgaV07XG4gIGZvciAoOyBpIDwgVy5sZW5ndGg7IGkgKz0gMikge1xuICAgIHZhciBjMF9oaSA9IGcxXzUxMl9oaShXW2kgLSA0XSwgV1tpIC0gM10pOyAgLy8gaSAtIDJcbiAgICB2YXIgYzBfbG8gPSBnMV81MTJfbG8oV1tpIC0gNF0sIFdbaSAtIDNdKTtcbiAgICB2YXIgYzFfaGkgPSBXW2kgLSAxNF07ICAvLyBpIC0gN1xuICAgIHZhciBjMV9sbyA9IFdbaSAtIDEzXTtcbiAgICB2YXIgYzJfaGkgPSBnMF81MTJfaGkoV1tpIC0gMzBdLCBXW2kgLSAyOV0pOyAgLy8gaSAtIDE1XG4gICAgdmFyIGMyX2xvID0gZzBfNTEyX2xvKFdbaSAtIDMwXSwgV1tpIC0gMjldKTtcbiAgICB2YXIgYzNfaGkgPSBXW2kgLSAzMl07ICAvLyBpIC0gMTZcbiAgICB2YXIgYzNfbG8gPSBXW2kgLSAzMV07XG5cbiAgICBXW2ldID0gc3VtNjRfNF9oaShjMF9oaSwgYzBfbG8sXG4gICAgICAgICAgICAgICAgICAgICAgYzFfaGksIGMxX2xvLFxuICAgICAgICAgICAgICAgICAgICAgIGMyX2hpLCBjMl9sbyxcbiAgICAgICAgICAgICAgICAgICAgICBjM19oaSwgYzNfbG8pO1xuICAgIFdbaSArIDFdID0gc3VtNjRfNF9sbyhjMF9oaSwgYzBfbG8sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGMxX2hpLCBjMV9sbyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYzJfaGksIGMyX2xvLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBjM19oaSwgYzNfbG8pO1xuICB9XG59O1xuXG5TSEE1MTIucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiBfdXBkYXRlKG1zZywgc3RhcnQpIHtcbiAgdGhpcy5fcHJlcGFyZUJsb2NrKG1zZywgc3RhcnQpO1xuXG4gIHZhciBXID0gdGhpcy5XO1xuXG4gIHZhciBhaCA9IHRoaXMuaFswXTtcbiAgdmFyIGFsID0gdGhpcy5oWzFdO1xuICB2YXIgYmggPSB0aGlzLmhbMl07XG4gIHZhciBibCA9IHRoaXMuaFszXTtcbiAgdmFyIGNoID0gdGhpcy5oWzRdO1xuICB2YXIgY2wgPSB0aGlzLmhbNV07XG4gIHZhciBkaCA9IHRoaXMuaFs2XTtcbiAgdmFyIGRsID0gdGhpcy5oWzddO1xuICB2YXIgZWggPSB0aGlzLmhbOF07XG4gIHZhciBlbCA9IHRoaXMuaFs5XTtcbiAgdmFyIGZoID0gdGhpcy5oWzEwXTtcbiAgdmFyIGZsID0gdGhpcy5oWzExXTtcbiAgdmFyIGdoID0gdGhpcy5oWzEyXTtcbiAgdmFyIGdsID0gdGhpcy5oWzEzXTtcbiAgdmFyIGhoID0gdGhpcy5oWzE0XTtcbiAgdmFyIGhsID0gdGhpcy5oWzE1XTtcblxuICBhc3NlcnQodGhpcy5rLmxlbmd0aCA9PT0gVy5sZW5ndGgpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IFcubGVuZ3RoOyBpICs9IDIpIHtcbiAgICB2YXIgYzBfaGkgPSBoaDtcbiAgICB2YXIgYzBfbG8gPSBobDtcbiAgICB2YXIgYzFfaGkgPSBzMV81MTJfaGkoZWgsIGVsKTtcbiAgICB2YXIgYzFfbG8gPSBzMV81MTJfbG8oZWgsIGVsKTtcbiAgICB2YXIgYzJfaGkgPSBjaDY0X2hpKGVoLCBlbCwgZmgsIGZsLCBnaCwgZ2wpO1xuICAgIHZhciBjMl9sbyA9IGNoNjRfbG8oZWgsIGVsLCBmaCwgZmwsIGdoLCBnbCk7XG4gICAgdmFyIGMzX2hpID0gdGhpcy5rW2ldO1xuICAgIHZhciBjM19sbyA9IHRoaXMua1tpICsgMV07XG4gICAgdmFyIGM0X2hpID0gV1tpXTtcbiAgICB2YXIgYzRfbG8gPSBXW2kgKyAxXTtcblxuICAgIHZhciBUMV9oaSA9IHN1bTY0XzVfaGkoYzBfaGksIGMwX2xvLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgYzFfaGksIGMxX2xvLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgYzJfaGksIGMyX2xvLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgYzNfaGksIGMzX2xvLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgYzRfaGksIGM0X2xvKTtcbiAgICB2YXIgVDFfbG8gPSBzdW02NF81X2xvKGMwX2hpLCBjMF9sbyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIGMxX2hpLCBjMV9sbyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIGMyX2hpLCBjMl9sbyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIGMzX2hpLCBjM19sbyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIGM0X2hpLCBjNF9sbyk7XG5cbiAgICB2YXIgYzBfaGkgPSBzMF81MTJfaGkoYWgsIGFsKTtcbiAgICB2YXIgYzBfbG8gPSBzMF81MTJfbG8oYWgsIGFsKTtcbiAgICB2YXIgYzFfaGkgPSBtYWo2NF9oaShhaCwgYWwsIGJoLCBibCwgY2gsIGNsKTtcbiAgICB2YXIgYzFfbG8gPSBtYWo2NF9sbyhhaCwgYWwsIGJoLCBibCwgY2gsIGNsKTtcblxuICAgIHZhciBUMl9oaSA9IHN1bTY0X2hpKGMwX2hpLCBjMF9sbywgYzFfaGksIGMxX2xvKTtcbiAgICB2YXIgVDJfbG8gPSBzdW02NF9sbyhjMF9oaSwgYzBfbG8sIGMxX2hpLCBjMV9sbyk7XG5cbiAgICBoaCA9IGdoO1xuICAgIGhsID0gZ2w7XG5cbiAgICBnaCA9IGZoO1xuICAgIGdsID0gZmw7XG5cbiAgICBmaCA9IGVoO1xuICAgIGZsID0gZWw7XG5cbiAgICBlaCA9IHN1bTY0X2hpKGRoLCBkbCwgVDFfaGksIFQxX2xvKTtcbiAgICBlbCA9IHN1bTY0X2xvKGRsLCBkbCwgVDFfaGksIFQxX2xvKTtcblxuICAgIGRoID0gY2g7XG4gICAgZGwgPSBjbDtcblxuICAgIGNoID0gYmg7XG4gICAgY2wgPSBibDtcblxuICAgIGJoID0gYWg7XG4gICAgYmwgPSBhbDtcblxuICAgIGFoID0gc3VtNjRfaGkoVDFfaGksIFQxX2xvLCBUMl9oaSwgVDJfbG8pO1xuICAgIGFsID0gc3VtNjRfbG8oVDFfaGksIFQxX2xvLCBUMl9oaSwgVDJfbG8pO1xuICB9XG5cbiAgc3VtNjQodGhpcy5oLCAwLCBhaCwgYWwpO1xuICBzdW02NCh0aGlzLmgsIDIsIGJoLCBibCk7XG4gIHN1bTY0KHRoaXMuaCwgNCwgY2gsIGNsKTtcbiAgc3VtNjQodGhpcy5oLCA2LCBkaCwgZGwpO1xuICBzdW02NCh0aGlzLmgsIDgsIGVoLCBlbCk7XG4gIHN1bTY0KHRoaXMuaCwgMTAsIGZoLCBmbCk7XG4gIHN1bTY0KHRoaXMuaCwgMTIsIGdoLCBnbCk7XG4gIHN1bTY0KHRoaXMuaCwgMTQsIGhoLCBobCk7XG59O1xuXG5TSEE1MTIucHJvdG90eXBlLl9kaWdlc3QgPSBmdW5jdGlvbiBkaWdlc3QoZW5jKSB7XG4gIGlmIChlbmMgPT09ICdoZXgnKVxuICAgIHJldHVybiB1dGlscy50b0hleDMyKHRoaXMuaCwgJ2JpZycpO1xuICBlbHNlXG4gICAgcmV0dXJuIHV0aWxzLnNwbGl0MzIodGhpcy5oLCAnYmlnJyk7XG59O1xuXG5mdW5jdGlvbiBTSEEzODQoKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBTSEEzODQpKVxuICAgIHJldHVybiBuZXcgU0hBMzg0KCk7XG5cbiAgU0hBNTEyLmNhbGwodGhpcyk7XG4gIHRoaXMuaCA9IFsgMHhjYmJiOWQ1ZCwgMHhjMTA1OWVkOCxcbiAgICAgICAgICAgICAweDYyOWEyOTJhLCAweDM2N2NkNTA3LFxuICAgICAgICAgICAgIDB4OTE1OTAxNWEsIDB4MzA3MGRkMTcsXG4gICAgICAgICAgICAgMHgxNTJmZWNkOCwgMHhmNzBlNTkzOSxcbiAgICAgICAgICAgICAweDY3MzMyNjY3LCAweGZmYzAwYjMxLFxuICAgICAgICAgICAgIDB4OGViNDRhODcsIDB4Njg1ODE1MTEsXG4gICAgICAgICAgICAgMHhkYjBjMmUwZCwgMHg2NGY5OGZhNyxcbiAgICAgICAgICAgICAweDQ3YjU0ODFkLCAweGJlZmE0ZmE0IF07XG59XG51dGlscy5pbmhlcml0cyhTSEEzODQsIFNIQTUxMik7XG5leHBvcnRzLnNoYTM4NCA9IFNIQTM4NDtcblxuU0hBMzg0LmJsb2NrU2l6ZSA9IDEwMjQ7XG5TSEEzODQub3V0U2l6ZSA9IDM4NDtcblNIQTM4NC5obWFjU3RyZW5ndGggPSAxOTI7XG5TSEEzODQucGFkTGVuZ3RoID0gMTI4O1xuXG5TSEEzODQucHJvdG90eXBlLl9kaWdlc3QgPSBmdW5jdGlvbiBkaWdlc3QoZW5jKSB7XG4gIGlmIChlbmMgPT09ICdoZXgnKVxuICAgIHJldHVybiB1dGlscy50b0hleDMyKHRoaXMuaC5zbGljZSgwLCAxMiksICdiaWcnKTtcbiAgZWxzZVxuICAgIHJldHVybiB1dGlscy5zcGxpdDMyKHRoaXMuaC5zbGljZSgwLCAxMiksICdiaWcnKTtcbn07XG5cbmZ1bmN0aW9uIFNIQTEoKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBTSEExKSlcbiAgICByZXR1cm4gbmV3IFNIQTEoKTtcblxuICBCbG9ja0hhc2guY2FsbCh0aGlzKTtcbiAgdGhpcy5oID0gWyAweDY3NDUyMzAxLCAweGVmY2RhYjg5LCAweDk4YmFkY2ZlLFxuICAgICAgICAgICAgIDB4MTAzMjU0NzYsIDB4YzNkMmUxZjAgXTtcbiAgdGhpcy5XID0gbmV3IEFycmF5KDgwKTtcbn1cblxudXRpbHMuaW5oZXJpdHMoU0hBMSwgQmxvY2tIYXNoKTtcbmV4cG9ydHMuc2hhMSA9IFNIQTE7XG5cblNIQTEuYmxvY2tTaXplID0gNTEyO1xuU0hBMS5vdXRTaXplID0gMTYwO1xuU0hBMS5obWFjU3RyZW5ndGggPSA4MDtcblNIQTEucGFkTGVuZ3RoID0gNjQ7XG5cblNIQTEucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiBfdXBkYXRlKG1zZywgc3RhcnQpIHtcbiAgdmFyIFcgPSB0aGlzLlc7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCAxNjsgaSsrKVxuICAgIFdbaV0gPSBtc2dbc3RhcnQgKyBpXTtcblxuICBmb3IoOyBpIDwgVy5sZW5ndGg7IGkrKylcbiAgICBXW2ldID0gcm90bDMyKFdbaSAtIDNdIF4gV1tpIC0gOF0gXiBXW2kgLSAxNF0gXiBXW2kgLSAxNl0sIDEpO1xuXG4gIHZhciBhID0gdGhpcy5oWzBdO1xuICB2YXIgYiA9IHRoaXMuaFsxXTtcbiAgdmFyIGMgPSB0aGlzLmhbMl07XG4gIHZhciBkID0gdGhpcy5oWzNdO1xuICB2YXIgZSA9IHRoaXMuaFs0XTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IFcubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgcyA9IH5+KGkgLyAyMCk7XG4gICAgdmFyIHQgPSBzdW0zMl81KHJvdGwzMihhLCA1KSwgZnRfMShzLCBiLCBjLCBkKSwgZSwgV1tpXSwgc2hhMV9LW3NdKTtcbiAgICBlID0gZDtcbiAgICBkID0gYztcbiAgICBjID0gcm90bDMyKGIsIDMwKTtcbiAgICBiID0gYTtcbiAgICBhID0gdDtcbiAgfVxuXG4gIHRoaXMuaFswXSA9IHN1bTMyKHRoaXMuaFswXSwgYSk7XG4gIHRoaXMuaFsxXSA9IHN1bTMyKHRoaXMuaFsxXSwgYik7XG4gIHRoaXMuaFsyXSA9IHN1bTMyKHRoaXMuaFsyXSwgYyk7XG4gIHRoaXMuaFszXSA9IHN1bTMyKHRoaXMuaFszXSwgZCk7XG4gIHRoaXMuaFs0XSA9IHN1bTMyKHRoaXMuaFs0XSwgZSk7XG59O1xuXG5TSEExLnByb3RvdHlwZS5fZGlnZXN0ID0gZnVuY3Rpb24gZGlnZXN0KGVuYykge1xuICBpZiAoZW5jID09PSAnaGV4JylcbiAgICByZXR1cm4gdXRpbHMudG9IZXgzMih0aGlzLmgsICdiaWcnKTtcbiAgZWxzZVxuICAgIHJldHVybiB1dGlscy5zcGxpdDMyKHRoaXMuaCwgJ2JpZycpO1xufTtcblxuZnVuY3Rpb24gY2gzMih4LCB5LCB6KSB7XG4gIHJldHVybiAoeCAmIHkpIF4gKCh+eCkgJiB6KTtcbn1cblxuZnVuY3Rpb24gbWFqMzIoeCwgeSwgeikge1xuICByZXR1cm4gKHggJiB5KSBeICh4ICYgeikgXiAoeSAmIHopO1xufVxuXG5mdW5jdGlvbiBwMzIoeCwgeSwgeikge1xuICByZXR1cm4geCBeIHkgXiB6O1xufVxuXG5mdW5jdGlvbiBzMF8yNTYoeCkge1xuICByZXR1cm4gcm90cjMyKHgsIDIpIF4gcm90cjMyKHgsIDEzKSBeIHJvdHIzMih4LCAyMik7XG59XG5cbmZ1bmN0aW9uIHMxXzI1Nih4KSB7XG4gIHJldHVybiByb3RyMzIoeCwgNikgXiByb3RyMzIoeCwgMTEpIF4gcm90cjMyKHgsIDI1KTtcbn1cblxuZnVuY3Rpb24gZzBfMjU2KHgpIHtcbiAgcmV0dXJuIHJvdHIzMih4LCA3KSBeIHJvdHIzMih4LCAxOCkgXiAoeCA+Pj4gMyk7XG59XG5cbmZ1bmN0aW9uIGcxXzI1Nih4KSB7XG4gIHJldHVybiByb3RyMzIoeCwgMTcpIF4gcm90cjMyKHgsIDE5KSBeICh4ID4+PiAxMCk7XG59XG5cbmZ1bmN0aW9uIGZ0XzEocywgeCwgeSwgeikge1xuICBpZiAocyA9PT0gMClcbiAgICByZXR1cm4gY2gzMih4LCB5LCB6KTtcbiAgaWYgKHMgPT09IDEgfHwgcyA9PT0gMylcbiAgICByZXR1cm4gcDMyKHgsIHksIHopO1xuICBpZiAocyA9PT0gMilcbiAgICByZXR1cm4gbWFqMzIoeCwgeSwgeik7XG59XG5cbmZ1bmN0aW9uIGNoNjRfaGkoeGgsIHhsLCB5aCwgeWwsIHpoLCB6bCkge1xuICB2YXIgciA9ICh4aCAmIHloKSBeICgofnhoKSAmIHpoKTtcbiAgaWYgKHIgPCAwKVxuICAgIHIgKz0gMHgxMDAwMDAwMDA7XG4gIHJldHVybiByO1xufVxuXG5mdW5jdGlvbiBjaDY0X2xvKHhoLCB4bCwgeWgsIHlsLCB6aCwgemwpIHtcbiAgdmFyIHIgPSAoeGwgJiB5bCkgXiAoKH54bCkgJiB6bCk7XG4gIGlmIChyIDwgMClcbiAgICByICs9IDB4MTAwMDAwMDAwO1xuICByZXR1cm4gcjtcbn1cblxuZnVuY3Rpb24gbWFqNjRfaGkoeGgsIHhsLCB5aCwgeWwsIHpoLCB6bCkge1xuICB2YXIgciA9ICh4aCAmIHloKSBeICh4aCAmIHpoKSBeICh5aCAmIHpoKTtcbiAgaWYgKHIgPCAwKVxuICAgIHIgKz0gMHgxMDAwMDAwMDA7XG4gIHJldHVybiByO1xufVxuXG5mdW5jdGlvbiBtYWo2NF9sbyh4aCwgeGwsIHloLCB5bCwgemgsIHpsKSB7XG4gIHZhciByID0gKHhsICYgeWwpIF4gKHhsICYgemwpIF4gKHlsICYgemwpO1xuICBpZiAociA8IDApXG4gICAgciArPSAweDEwMDAwMDAwMDtcbiAgcmV0dXJuIHI7XG59XG5cbmZ1bmN0aW9uIHMwXzUxMl9oaSh4aCwgeGwpIHtcbiAgdmFyIGMwX2hpID0gcm90cjY0X2hpKHhoLCB4bCwgMjgpO1xuICB2YXIgYzFfaGkgPSByb3RyNjRfaGkoeGwsIHhoLCAyKTsgIC8vIDM0XG4gIHZhciBjMl9oaSA9IHJvdHI2NF9oaSh4bCwgeGgsIDcpOyAgLy8gMzlcblxuICB2YXIgciA9IGMwX2hpIF4gYzFfaGkgXiBjMl9oaTtcbiAgaWYgKHIgPCAwKVxuICAgIHIgKz0gMHgxMDAwMDAwMDA7XG4gIHJldHVybiByO1xufVxuXG5mdW5jdGlvbiBzMF81MTJfbG8oeGgsIHhsKSB7XG4gIHZhciBjMF9sbyA9IHJvdHI2NF9sbyh4aCwgeGwsIDI4KTtcbiAgdmFyIGMxX2xvID0gcm90cjY0X2xvKHhsLCB4aCwgMik7ICAvLyAzNFxuICB2YXIgYzJfbG8gPSByb3RyNjRfbG8oeGwsIHhoLCA3KTsgIC8vIDM5XG5cbiAgdmFyIHIgPSBjMF9sbyBeIGMxX2xvIF4gYzJfbG87XG4gIGlmIChyIDwgMClcbiAgICByICs9IDB4MTAwMDAwMDAwO1xuICByZXR1cm4gcjtcbn1cblxuZnVuY3Rpb24gczFfNTEyX2hpKHhoLCB4bCkge1xuICB2YXIgYzBfaGkgPSByb3RyNjRfaGkoeGgsIHhsLCAxNCk7XG4gIHZhciBjMV9oaSA9IHJvdHI2NF9oaSh4aCwgeGwsIDE4KTtcbiAgdmFyIGMyX2hpID0gcm90cjY0X2hpKHhsLCB4aCwgOSk7ICAvLyA0MVxuXG4gIHZhciByID0gYzBfaGkgXiBjMV9oaSBeIGMyX2hpO1xuICBpZiAociA8IDApXG4gICAgciArPSAweDEwMDAwMDAwMDtcbiAgcmV0dXJuIHI7XG59XG5cbmZ1bmN0aW9uIHMxXzUxMl9sbyh4aCwgeGwpIHtcbiAgdmFyIGMwX2xvID0gcm90cjY0X2xvKHhoLCB4bCwgMTQpO1xuICB2YXIgYzFfbG8gPSByb3RyNjRfbG8oeGgsIHhsLCAxOCk7XG4gIHZhciBjMl9sbyA9IHJvdHI2NF9sbyh4bCwgeGgsIDkpOyAgLy8gNDFcblxuICB2YXIgciA9IGMwX2xvIF4gYzFfbG8gXiBjMl9sbztcbiAgaWYgKHIgPCAwKVxuICAgIHIgKz0gMHgxMDAwMDAwMDA7XG4gIHJldHVybiByO1xufVxuXG5mdW5jdGlvbiBnMF81MTJfaGkoeGgsIHhsKSB7XG4gIHZhciBjMF9oaSA9IHJvdHI2NF9oaSh4aCwgeGwsIDEpO1xuICB2YXIgYzFfaGkgPSByb3RyNjRfaGkoeGgsIHhsLCA4KTtcbiAgdmFyIGMyX2hpID0gc2hyNjRfaGkoeGgsIHhsLCA3KTtcblxuICB2YXIgciA9IGMwX2hpIF4gYzFfaGkgXiBjMl9oaTtcbiAgaWYgKHIgPCAwKVxuICAgIHIgKz0gMHgxMDAwMDAwMDA7XG4gIHJldHVybiByO1xufVxuXG5mdW5jdGlvbiBnMF81MTJfbG8oeGgsIHhsKSB7XG4gIHZhciBjMF9sbyA9IHJvdHI2NF9sbyh4aCwgeGwsIDEpO1xuICB2YXIgYzFfbG8gPSByb3RyNjRfbG8oeGgsIHhsLCA4KTtcbiAgdmFyIGMyX2xvID0gc2hyNjRfbG8oeGgsIHhsLCA3KTtcblxuICB2YXIgciA9IGMwX2xvIF4gYzFfbG8gXiBjMl9sbztcbiAgaWYgKHIgPCAwKVxuICAgIHIgKz0gMHgxMDAwMDAwMDA7XG4gIHJldHVybiByO1xufVxuXG5mdW5jdGlvbiBnMV81MTJfaGkoeGgsIHhsKSB7XG4gIHZhciBjMF9oaSA9IHJvdHI2NF9oaSh4aCwgeGwsIDE5KTtcbiAgdmFyIGMxX2hpID0gcm90cjY0X2hpKHhsLCB4aCwgMjkpOyAgLy8gNjFcbiAgdmFyIGMyX2hpID0gc2hyNjRfaGkoeGgsIHhsLCA2KTtcblxuICB2YXIgciA9IGMwX2hpIF4gYzFfaGkgXiBjMl9oaTtcbiAgaWYgKHIgPCAwKVxuICAgIHIgKz0gMHgxMDAwMDAwMDA7XG4gIHJldHVybiByO1xufVxuXG5mdW5jdGlvbiBnMV81MTJfbG8oeGgsIHhsKSB7XG4gIHZhciBjMF9sbyA9IHJvdHI2NF9sbyh4aCwgeGwsIDE5KTtcbiAgdmFyIGMxX2xvID0gcm90cjY0X2xvKHhsLCB4aCwgMjkpOyAgLy8gNjFcbiAgdmFyIGMyX2xvID0gc2hyNjRfbG8oeGgsIHhsLCA2KTtcblxuICB2YXIgciA9IGMwX2xvIF4gYzFfbG8gXiBjMl9sbztcbiAgaWYgKHIgPCAwKVxuICAgIHIgKz0gMHgxMDAwMDAwMDA7XG4gIHJldHVybiByO1xufVxuIiwidmFyIHV0aWxzID0gZXhwb3J0cztcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG5cbmZ1bmN0aW9uIHRvQXJyYXkobXNnLCBlbmMpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkobXNnKSlcbiAgICByZXR1cm4gbXNnLnNsaWNlKCk7XG4gIGlmICghbXNnKVxuICAgIHJldHVybiBbXTtcbiAgdmFyIHJlcyA9IFtdO1xuICBpZiAodHlwZW9mIG1zZyA9PT0gJ3N0cmluZycpIHtcbiAgICBpZiAoIWVuYykge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtc2cubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGMgPSBtc2cuY2hhckNvZGVBdChpKTtcbiAgICAgICAgdmFyIGhpID0gYyA+PiA4O1xuICAgICAgICB2YXIgbG8gPSBjICYgMHhmZjtcbiAgICAgICAgaWYgKGhpKVxuICAgICAgICAgIHJlcy5wdXNoKGhpLCBsbyk7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICByZXMucHVzaChsbyk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChlbmMgPT09ICdoZXgnKSB7XG4gICAgICBtc2cgPSBtc2cucmVwbGFjZSgvW15hLXowLTldKy9pZywgJycpO1xuICAgICAgaWYgKG1zZy5sZW5ndGggJSAyICE9PSAwKVxuICAgICAgICBtc2cgPSAnMCcgKyBtc2c7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1zZy5sZW5ndGg7IGkgKz0gMilcbiAgICAgICAgcmVzLnB1c2gocGFyc2VJbnQobXNnW2ldICsgbXNnW2kgKyAxXSwgMTYpKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtc2cubGVuZ3RoOyBpKyspXG4gICAgICByZXNbaV0gPSBtc2dbaV0gfCAwO1xuICB9XG4gIHJldHVybiByZXM7XG59XG51dGlscy50b0FycmF5ID0gdG9BcnJheTtcblxuZnVuY3Rpb24gdG9IZXgobXNnKSB7XG4gIHZhciByZXMgPSAnJztcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBtc2cubGVuZ3RoOyBpKyspXG4gICAgcmVzICs9IHplcm8yKG1zZ1tpXS50b1N0cmluZygxNikpO1xuICByZXR1cm4gcmVzO1xufVxudXRpbHMudG9IZXggPSB0b0hleDtcblxuZnVuY3Rpb24gaHRvbmwodykge1xuICB2YXIgcmVzID0gKHcgPj4+IDI0KSB8XG4gICAgICAgICAgICAoKHcgPj4+IDgpICYgMHhmZjAwKSB8XG4gICAgICAgICAgICAoKHcgPDwgOCkgJiAweGZmMDAwMCkgfFxuICAgICAgICAgICAgKCh3ICYgMHhmZikgPDwgMjQpO1xuICByZXR1cm4gcmVzID4+PiAwO1xufVxudXRpbHMuaHRvbmwgPSBodG9ubDtcblxuZnVuY3Rpb24gdG9IZXgzMihtc2csIGVuZGlhbikge1xuICB2YXIgcmVzID0gJyc7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbXNnLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHcgPSBtc2dbaV07XG4gICAgaWYgKGVuZGlhbiA9PT0gJ2xpdHRsZScpXG4gICAgICB3ID0gaHRvbmwodyk7XG4gICAgcmVzICs9IHplcm84KHcudG9TdHJpbmcoMTYpKTtcbiAgfVxuICByZXR1cm4gcmVzO1xufVxudXRpbHMudG9IZXgzMiA9IHRvSGV4MzI7XG5cbmZ1bmN0aW9uIHplcm8yKHdvcmQpIHtcbiAgaWYgKHdvcmQubGVuZ3RoID09PSAxKVxuICAgIHJldHVybiAnMCcgKyB3b3JkO1xuICBlbHNlXG4gICAgcmV0dXJuIHdvcmQ7XG59XG51dGlscy56ZXJvMiA9IHplcm8yO1xuXG5mdW5jdGlvbiB6ZXJvOCh3b3JkKSB7XG4gIGlmICh3b3JkLmxlbmd0aCA9PT0gNylcbiAgICByZXR1cm4gJzAnICsgd29yZDtcbiAgZWxzZSBpZiAod29yZC5sZW5ndGggPT09IDYpXG4gICAgcmV0dXJuICcwMCcgKyB3b3JkO1xuICBlbHNlIGlmICh3b3JkLmxlbmd0aCA9PT0gNSlcbiAgICByZXR1cm4gJzAwMCcgKyB3b3JkO1xuICBlbHNlIGlmICh3b3JkLmxlbmd0aCA9PT0gNClcbiAgICByZXR1cm4gJzAwMDAnICsgd29yZDtcbiAgZWxzZSBpZiAod29yZC5sZW5ndGggPT09IDMpXG4gICAgcmV0dXJuICcwMDAwMCcgKyB3b3JkO1xuICBlbHNlIGlmICh3b3JkLmxlbmd0aCA9PT0gMilcbiAgICByZXR1cm4gJzAwMDAwMCcgKyB3b3JkO1xuICBlbHNlIGlmICh3b3JkLmxlbmd0aCA9PT0gMSlcbiAgICByZXR1cm4gJzAwMDAwMDAnICsgd29yZDtcbiAgZWxzZVxuICAgIHJldHVybiB3b3JkO1xufVxudXRpbHMuemVybzggPSB6ZXJvODtcblxuZnVuY3Rpb24gam9pbjMyKG1zZywgc3RhcnQsIGVuZCwgZW5kaWFuKSB7XG4gIHZhciBsZW4gPSBlbmQgLSBzdGFydDtcbiAgYXNzZXJ0KGxlbiAlIDQgPT09IDApO1xuICB2YXIgcmVzID0gbmV3IEFycmF5KGxlbiAvIDQpO1xuICBmb3IgKHZhciBpID0gMCwgayA9IHN0YXJ0OyBpIDwgcmVzLmxlbmd0aDsgaSsrLCBrICs9IDQpIHtcbiAgICB2YXIgdztcbiAgICBpZiAoZW5kaWFuID09PSAnYmlnJylcbiAgICAgIHcgPSAobXNnW2tdIDw8IDI0KSB8IChtc2dbayArIDFdIDw8IDE2KSB8IChtc2dbayArIDJdIDw8IDgpIHwgbXNnW2sgKyAzXTtcbiAgICBlbHNlXG4gICAgICB3ID0gKG1zZ1trICsgM10gPDwgMjQpIHwgKG1zZ1trICsgMl0gPDwgMTYpIHwgKG1zZ1trICsgMV0gPDwgOCkgfCBtc2dba107XG4gICAgcmVzW2ldID0gdyA+Pj4gMDtcbiAgfVxuICByZXR1cm4gcmVzO1xufVxudXRpbHMuam9pbjMyID0gam9pbjMyO1xuXG5mdW5jdGlvbiBzcGxpdDMyKG1zZywgZW5kaWFuKSB7XG4gIHZhciByZXMgPSBuZXcgQXJyYXkobXNnLmxlbmd0aCAqIDQpO1xuICBmb3IgKHZhciBpID0gMCwgayA9IDA7IGkgPCBtc2cubGVuZ3RoOyBpKyssIGsgKz0gNCkge1xuICAgIHZhciBtID0gbXNnW2ldO1xuICAgIGlmIChlbmRpYW4gPT09ICdiaWcnKSB7XG4gICAgICByZXNba10gPSBtID4+PiAyNDtcbiAgICAgIHJlc1trICsgMV0gPSAobSA+Pj4gMTYpICYgMHhmZjtcbiAgICAgIHJlc1trICsgMl0gPSAobSA+Pj4gOCkgJiAweGZmO1xuICAgICAgcmVzW2sgKyAzXSA9IG0gJiAweGZmO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXNbayArIDNdID0gbSA+Pj4gMjQ7XG4gICAgICByZXNbayArIDJdID0gKG0gPj4+IDE2KSAmIDB4ZmY7XG4gICAgICByZXNbayArIDFdID0gKG0gPj4+IDgpICYgMHhmZjtcbiAgICAgIHJlc1trXSA9IG0gJiAweGZmO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzO1xufVxudXRpbHMuc3BsaXQzMiA9IHNwbGl0MzI7XG5cbmZ1bmN0aW9uIHJvdHIzMih3LCBiKSB7XG4gIHJldHVybiAodyA+Pj4gYikgfCAodyA8PCAoMzIgLSBiKSk7XG59XG51dGlscy5yb3RyMzIgPSByb3RyMzI7XG5cbmZ1bmN0aW9uIHJvdGwzMih3LCBiKSB7XG4gIHJldHVybiAodyA8PCBiKSB8ICh3ID4+PiAoMzIgLSBiKSk7XG59XG51dGlscy5yb3RsMzIgPSByb3RsMzI7XG5cbmZ1bmN0aW9uIHN1bTMyKGEsIGIpIHtcbiAgcmV0dXJuIChhICsgYikgPj4+IDA7XG59XG51dGlscy5zdW0zMiA9IHN1bTMyO1xuXG5mdW5jdGlvbiBzdW0zMl8zKGEsIGIsIGMpIHtcbiAgcmV0dXJuIChhICsgYiArIGMpID4+PiAwO1xufVxudXRpbHMuc3VtMzJfMyA9IHN1bTMyXzM7XG5cbmZ1bmN0aW9uIHN1bTMyXzQoYSwgYiwgYywgZCkge1xuICByZXR1cm4gKGEgKyBiICsgYyArIGQpID4+PiAwO1xufVxudXRpbHMuc3VtMzJfNCA9IHN1bTMyXzQ7XG5cbmZ1bmN0aW9uIHN1bTMyXzUoYSwgYiwgYywgZCwgZSkge1xuICByZXR1cm4gKGEgKyBiICsgYyArIGQgKyBlKSA+Pj4gMDtcbn1cbnV0aWxzLnN1bTMyXzUgPSBzdW0zMl81O1xuXG5mdW5jdGlvbiBhc3NlcnQoY29uZCwgbXNnKSB7XG4gIGlmICghY29uZClcbiAgICB0aHJvdyBuZXcgRXJyb3IobXNnIHx8ICdBc3NlcnRpb24gZmFpbGVkJyk7XG59XG51dGlscy5hc3NlcnQgPSBhc3NlcnQ7XG5cbnV0aWxzLmluaGVyaXRzID0gaW5oZXJpdHM7XG5cbmZ1bmN0aW9uIHN1bTY0KGJ1ZiwgcG9zLCBhaCwgYWwpIHtcbiAgdmFyIGJoID0gYnVmW3Bvc107XG4gIHZhciBibCA9IGJ1Zltwb3MgKyAxXTtcblxuICB2YXIgbG8gPSAoYWwgKyBibCkgPj4+IDA7XG4gIHZhciBoaSA9IChsbyA8IGFsID8gMSA6IDApICsgYWggKyBiaDtcbiAgYnVmW3Bvc10gPSBoaSA+Pj4gMDtcbiAgYnVmW3BvcyArIDFdID0gbG87XG59XG5leHBvcnRzLnN1bTY0ID0gc3VtNjQ7XG5cbmZ1bmN0aW9uIHN1bTY0X2hpKGFoLCBhbCwgYmgsIGJsKSB7XG4gIHZhciBsbyA9IChhbCArIGJsKSA+Pj4gMDtcbiAgdmFyIGhpID0gKGxvIDwgYWwgPyAxIDogMCkgKyBhaCArIGJoO1xuICByZXR1cm4gaGkgPj4+IDA7XG59O1xuZXhwb3J0cy5zdW02NF9oaSA9IHN1bTY0X2hpO1xuXG5mdW5jdGlvbiBzdW02NF9sbyhhaCwgYWwsIGJoLCBibCkge1xuICB2YXIgbG8gPSBhbCArIGJsO1xuICByZXR1cm4gbG8gPj4+IDA7XG59O1xuZXhwb3J0cy5zdW02NF9sbyA9IHN1bTY0X2xvO1xuXG5mdW5jdGlvbiBzdW02NF80X2hpKGFoLCBhbCwgYmgsIGJsLCBjaCwgY2wsIGRoLCBkbCkge1xuICB2YXIgY2FycnkgPSAwO1xuICB2YXIgbG8gPSBhbDtcbiAgbG8gPSAobG8gKyBibCkgPj4+IDA7XG4gIGNhcnJ5ICs9IGxvIDwgYWwgPyAxIDogMDtcbiAgbG8gPSAobG8gKyBjbCkgPj4+IDA7XG4gIGNhcnJ5ICs9IGxvIDwgY2wgPyAxIDogMDtcbiAgbG8gPSAobG8gKyBkbCkgPj4+IDA7XG4gIGNhcnJ5ICs9IGxvIDwgZGwgPyAxIDogMDtcblxuICB2YXIgaGkgPSBhaCArIGJoICsgY2ggKyBkaCArIGNhcnJ5O1xuICByZXR1cm4gaGkgPj4+IDA7XG59O1xuZXhwb3J0cy5zdW02NF80X2hpID0gc3VtNjRfNF9oaTtcblxuZnVuY3Rpb24gc3VtNjRfNF9sbyhhaCwgYWwsIGJoLCBibCwgY2gsIGNsLCBkaCwgZGwpIHtcbiAgdmFyIGxvID0gYWwgKyBibCArIGNsICsgZGw7XG4gIHJldHVybiBsbyA+Pj4gMDtcbn07XG5leHBvcnRzLnN1bTY0XzRfbG8gPSBzdW02NF80X2xvO1xuXG5mdW5jdGlvbiBzdW02NF81X2hpKGFoLCBhbCwgYmgsIGJsLCBjaCwgY2wsIGRoLCBkbCwgZWgsIGVsKSB7XG4gIHZhciBjYXJyeSA9IDA7XG4gIHZhciBsbyA9IGFsO1xuICBsbyA9IChsbyArIGJsKSA+Pj4gMDtcbiAgY2FycnkgKz0gbG8gPCBhbCA/IDEgOiAwO1xuICBsbyA9IChsbyArIGNsKSA+Pj4gMDtcbiAgY2FycnkgKz0gbG8gPCBjbCA/IDEgOiAwO1xuICBsbyA9IChsbyArIGRsKSA+Pj4gMDtcbiAgY2FycnkgKz0gbG8gPCBkbCA/IDEgOiAwO1xuICBsbyA9IChsbyArIGVsKSA+Pj4gMDtcbiAgY2FycnkgKz0gbG8gPCBlbCA/IDEgOiAwO1xuXG4gIHZhciBoaSA9IGFoICsgYmggKyBjaCArIGRoICsgZWggKyBjYXJyeTtcbiAgcmV0dXJuIGhpID4+PiAwO1xufTtcbmV4cG9ydHMuc3VtNjRfNV9oaSA9IHN1bTY0XzVfaGk7XG5cbmZ1bmN0aW9uIHN1bTY0XzVfbG8oYWgsIGFsLCBiaCwgYmwsIGNoLCBjbCwgZGgsIGRsLCBlaCwgZWwpIHtcbiAgdmFyIGxvID0gYWwgKyBibCArIGNsICsgZGwgKyBlbDtcblxuICByZXR1cm4gbG8gPj4+IDA7XG59O1xuZXhwb3J0cy5zdW02NF81X2xvID0gc3VtNjRfNV9sbztcblxuZnVuY3Rpb24gcm90cjY0X2hpKGFoLCBhbCwgbnVtKSB7XG4gIHZhciByID0gKGFsIDw8ICgzMiAtIG51bSkpIHwgKGFoID4+PiBudW0pO1xuICByZXR1cm4gciA+Pj4gMDtcbn07XG5leHBvcnRzLnJvdHI2NF9oaSA9IHJvdHI2NF9oaTtcblxuZnVuY3Rpb24gcm90cjY0X2xvKGFoLCBhbCwgbnVtKSB7XG4gIHZhciByID0gKGFoIDw8ICgzMiAtIG51bSkpIHwgKGFsID4+PiBudW0pO1xuICByZXR1cm4gciA+Pj4gMDtcbn07XG5leHBvcnRzLnJvdHI2NF9sbyA9IHJvdHI2NF9sbztcblxuZnVuY3Rpb24gc2hyNjRfaGkoYWgsIGFsLCBudW0pIHtcbiAgcmV0dXJuIGFoID4+PiBudW07XG59O1xuZXhwb3J0cy5zaHI2NF9oaSA9IHNocjY0X2hpO1xuXG5mdW5jdGlvbiBzaHI2NF9sbyhhaCwgYWwsIG51bSkge1xuICB2YXIgciA9IChhaCA8PCAoMzIgLSBudW0pKSB8IChhbCA+Pj4gbnVtKTtcbiAgcmV0dXJuIHIgPj4+IDA7XG59O1xuZXhwb3J0cy5zaHI2NF9sbyA9IHNocjY0X2xvO1xuIiwiaWYgKHR5cGVvZiBPYmplY3QuY3JlYXRlID09PSAnZnVuY3Rpb24nKSB7XG4gIC8vIGltcGxlbWVudGF0aW9uIGZyb20gc3RhbmRhcmQgbm9kZS5qcyAndXRpbCcgbW9kdWxlXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaW5oZXJpdHMoY3Rvciwgc3VwZXJDdG9yKSB7XG4gICAgY3Rvci5zdXBlcl8gPSBzdXBlckN0b3JcbiAgICBjdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDdG9yLnByb3RvdHlwZSwge1xuICAgICAgY29uc3RydWN0b3I6IHtcbiAgICAgICAgdmFsdWU6IGN0b3IsXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICB9XG4gICAgfSk7XG4gIH07XG59IGVsc2Uge1xuICAvLyBvbGQgc2Nob29sIHNoaW0gZm9yIG9sZCBicm93c2Vyc1xuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGluaGVyaXRzKGN0b3IsIHN1cGVyQ3Rvcikge1xuICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yXG4gICAgdmFyIFRlbXBDdG9yID0gZnVuY3Rpb24gKCkge31cbiAgICBUZW1wQ3Rvci5wcm90b3R5cGUgPSBzdXBlckN0b3IucHJvdG90eXBlXG4gICAgY3Rvci5wcm90b3R5cGUgPSBuZXcgVGVtcEN0b3IoKVxuICAgIGN0b3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY3RvclxuICB9XG59XG4iLCIvKipcbiAqIEluamVjdGVyXG4gKiA9PT09PT09PVxuICpcbiAqIFRoaXMgaXMgYSBkZXBlbmRlbmN5IGluamVjdG9yIHNwZWNpZmljYWxseSBkZXNpZ25lZCBmb3IgdXNlIHdpdGggWW91cnNcbiAqIEJpdGNvaW4uIEluIG9yZGVyIHRvIGFsbG93IGluamVjdGluZyBkZXBlbmRlbmNpZXMsIFlvdXJzIEJpdGNvaW4gY2xhc3Nlc1xuICogcHJvdmlkZSBhbiBcImluamVjdFwiIG1ldGhvZCB0aGF0IG1ha2VzIGEgbmV3IGNsYXNzIHdpdGggaW5qZWN0ZWRcbiAqIGRlcGVuZGVuY2llcy4gSG93ZXZlciwgdGhhdCBtZXRob2QgYnkgaXRzZWxmIHByZXNlbnRzIGEgcHJvYmxlbSwgYmVjYXVzZSBpdFxuICogY3JlYXRlcyBhIG5ldyBjbGFzcyBldmVyeSB0aW1lIGl0IGlzIHVzZWQsIGxlYXZpbmcgdGhlIGJ1cmRlbiBvZiBjYWNoaW5nIHRoZVxuICogY2xhc3NlcyB0byB0aGUgdXNlci4gVGh1cyB0aGUgaW5qZWN0b3IgYWxsb3dzIHVzIHRvIGVhc2lseSB3cmFwIGFuIGluamVjdFxuICogbWV0aG9kIHRoYXQga2VlcHMgYSBjYWNoZSBvZiB0aGUgY3JlYXRlZCBjbGFzc2VzLCBsb3dpbmcgbWVtb3J5IGJ1cmRlbiwgYW5kXG4gKiBhbGxvd2luZyB0aGUgaW5zdGFuY2VvZiBvcGVyYXRvciB0byB3b3JrIGNvcnJlY3RseS5cbiAqL1xuJ3VzZSBzdHJpY3QnXG5sZXQgY2xhc3NtYXBzID0gbmV3IE1hcCgpXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaW5qZWN0b3IgKGluamVjdCwgZGVwZW5kZW5jaWVzKSB7XG4gIGlmIChjbGFzc21hcHMuZ2V0KGluamVjdCkgPT09IHVuZGVmaW5lZCkge1xuICAgIGNsYXNzbWFwcy5zZXQoaW5qZWN0LCBuZXcgTWFwKCkpXG4gIH1cblxuICBsZXQgY2xhc3NtYXAgPSBjbGFzc21hcHMuZ2V0KGluamVjdClcbiAgbGV0IG1lbWluamVjdCA9IGZ1bmN0aW9uIChkZXBzKSB7XG4gICAgbGV0IENsYXNzID0gY2xhc3NtYXAuZ2V0KGRlcHMpXG4gICAgaWYgKENsYXNzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBDbGFzc1xuICAgIH1cblxuICAgIENsYXNzID0gaW5qZWN0KE9iamVjdC5hc3NpZ24oe30sIGRlcGVuZGVuY2llcywgZGVwcykpXG4gICAgY2xhc3NtYXAuc2V0KGRlcHMsIENsYXNzKVxuXG4gICAgLy8gVGhlIFwiaW5qZWN0XCIgYW5kIFwiaW5qZWN0ZWRcIiBwcm9wZXJ0aWVzIGFyZSBub24tZW51bWVyYWJsZSBzbyB0aGV5IGRvbid0XG4gICAgLy8gcnVpbiBhbnkgY29kZSB0aGF0IG1heSBlbnVtZXJhdGUgcHJvcGVydGllcyBvZiB5b3VyIGNsYXNzZXMuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KENsYXNzLCAnaW5qZWN0Jywge1xuICAgICAgdmFsdWU6IG1lbWluamVjdCxcbiAgICAgIGVudW1lcmFibGU6IGZhbHNlXG4gICAgfSlcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ2xhc3MsICdpbmplY3RlZCcsIHtcbiAgICAgIHZhbHVlOiBkZXBzLFxuICAgICAgZW51bWVyYWJsZTogZmFsc2VcbiAgICB9KVxuICAgIHJldHVybiBDbGFzc1xuICB9XG5cbiAgcmV0dXJuIG1lbWluamVjdFxufVxuIiwiJ3VzZSBzdHJpY3QnXG5cbmZ1bmN0aW9uIG9sZEJyb3dzZXIgKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ3NlY3VyZSByYW5kb20gbnVtYmVyIGdlbmVyYXRpb24gbm90IHN1cHBvcnRlZCBieSB0aGlzIGJyb3dzZXJcXG51c2UgY2hyb21lLCBGaXJlRm94IG9yIEludGVybmV0IEV4cGxvcmVyIDExJylcbn1cblxudmFyIGNyeXB0byA9IGdsb2JhbC5jcnlwdG8gfHwgZ2xvYmFsLm1zQ3J5cHRvXG5cbmlmIChjcnlwdG8gJiYgY3J5cHRvLmdldFJhbmRvbVZhbHVlcykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJhbmRvbUJ5dGVzXG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IG9sZEJyb3dzZXJcbn1cblxuZnVuY3Rpb24gcmFuZG9tQnl0ZXMgKHNpemUsIGNiKSB7XG4gIC8vIHBoYW50b21qcyBuZWVkcyB0byB0aHJvd1xuICBpZiAoc2l6ZSA+IDY1NTM2KSB0aHJvdyBuZXcgRXJyb3IoJ3JlcXVlc3RlZCB0b28gbWFueSByYW5kb20gYnl0ZXMnKVxuICAvLyBpbiBjYXNlIGJyb3dzZXJpZnkgIGlzbid0IHVzaW5nIHRoZSBVaW50OEFycmF5IHZlcnNpb25cbiAgdmFyIHJhd0J5dGVzID0gbmV3IGdsb2JhbC5VaW50OEFycmF5KHNpemUpXG5cbiAgLy8gVGhpcyB3aWxsIG5vdCB3b3JrIGluIG9sZGVyIGJyb3dzZXJzLlxuICAvLyBTZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL3dpbmRvdy5jcnlwdG8uZ2V0UmFuZG9tVmFsdWVzXG4gIGlmIChzaXplID4gMCkgeyAgLy8gZ2V0UmFuZG9tVmFsdWVzIGZhaWxzIG9uIElFIGlmIHNpemUgPT0gMFxuICAgIGNyeXB0by5nZXRSYW5kb21WYWx1ZXMocmF3Qnl0ZXMpXG4gIH1cbiAgLy8gcGhhbnRvbWpzIGRvZXNuJ3QgbGlrZSBhIGJ1ZmZlciBiZWluZyBwYXNzZWQgaGVyZVxuICB2YXIgYnl0ZXMgPSBuZXcgQnVmZmVyKHJhd0J5dGVzLmJ1ZmZlcilcblxuICBpZiAodHlwZW9mIGNiID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgICAgY2IobnVsbCwgYnl0ZXMpXG4gICAgfSlcbiAgfVxuXG4gIHJldHVybiBieXRlc1xufVxuIl19
